This is Info file gcl.info, produced by Makeinfo-1.55 from the input file
gcl.texi.

This is a Texinfo GNU Common Lisp Manual based on the draft ANSI standard
for Common Lisp.

Copyright 1994 William F. Schelter


File: gcl.info,  Node: Symbols in the COMMON-LISP Package,  Prev: Deprecated Language Features,  Up: Introduction (Introduction)

Symbols in the COMMON-LISP Package
==================================

The figures on the next twelve pages contain a complete enumeration of the
978 external symbols in the COMMON-LISP package.

  &allow-other-keys            *print-miser-width*          
  &aux                         *print-pprint-dispatch*      
  &body                        *print-pretty*               
  &environment                 *print-radix*                
  &key                         *print-readably*             
  &optional                    *print-right-margin*         
  &rest                        *query-io*                   
  &whole                       *random-state*               
  *                            *read-base*                  
  **                           *read-default-float-format*  
  ***                          *read-eval*                  
  *break-on-signals*           *read-suppress*              
  *compile-file-pathname*      *readtable*                  
  *compile-file-truename*      *standard-input*             
  *compile-print*              *standard-output*            
  *compile-verbose*            *terminal-io*                
  *debug-io*                   *trace-output*               
  *debugger-hook*              +                            
  *default-pathname-defaults*  ++                           
  *error-output*               +++                          
  *features*                   -                            
  *gensym-counter*             /                            
  *load-pathname*              //                           
  *load-print*                 ///                          
  *load-truename*              /=                           
  *load-verbose*               1+                           
  *macroexpand-hook*           1-                           
  *modules*                    <                            
  *package*                    <=                           
  *print-array*                =                            
  *print-base*                 >                            
  *print-case*                 >=                           
  *print-circle*               abort                        
  *print-escape*               abs                          
  *print-gensym*               acons                        
  *print-length*               acos                         
  *print-level*                acosh                        
  *print-lines*                add-method                   

  Figure 1-4: Symbols in the COMMON-LISP package (part one of twelve).


  adjoin                      atom          boundp                    
  adjust-array                base-char     break                     
  adjustable-array-p          base-string   broadcast-stream          
  allocate-instance           bignum        broadcast-stream-streams  
  alpha-char-p                bit           built-in-class            
  alphanumericp               bit-and       butlast                   
  and                         bit-andc1     byte                      
  append                      bit-andc2     byte-position             
  apply                       bit-eqv       byte-size                 
  apropos                     bit-ior       caaaar                    
  apropos-list                bit-nand      caaadr                    
  aref                        bit-nor       caaar                     
  arithmetic-error            bit-not       caadar                    
  arithmetic-error-operands   bit-orc1      caaddr                    
  arithmetic-error-operation  bit-orc2      caadr                     
  array                       bit-vector    caar                      
  array-dimension             bit-vector-p  cadaar                    
  array-dimension-limit       bit-xor       cadadr                    
  array-dimensions            block         cadar                     
  array-displacement          boole         caddar                    
  array-element-type          boole-1       cadddr                    
  array-has-fill-pointer-p    boole-2       caddr                     
  array-in-bounds-p           boole-and     cadr                      
  array-rank                  boole-andc1   call-arguments-limit      
  array-rank-limit            boole-andc2   call-method               
  array-row-major-index       boole-c1      call-next-method          
  array-total-size            boole-c2      car                       
  array-total-size-limit      boole-clr     case                      
  arrayp                      boole-eqv     catch                     
  ash                         boole-ior     ccase                     
  asin                        boole-nand    cdaaar                    
  asinh                       boole-nor     cdaadr                    
  assert                      boole-orc1    cdaar                     
  assoc                       boole-orc2    cdadar                    
  assoc-if                    boole-set     cdaddr                    
  assoc-if-not                boole-xor     cdadr                     
  atan                        boolean       cdar                      
  atanh                       both-case-p   cddaar                    

  Figure 1-5: Symbols in the COMMON-LISP package (part two of twelve).


  cddadr             clear-input                  copy-tree                  
  cddar              clear-output                 cos                        
  cdddar             close                        cosh                       
  cddddr             clrhash                      count                      
  cdddr              code-char                    count-if                   
  cddr               coerce                       count-if-not               
  cdr                compilation-speed            ctypecase                  
  ceiling            compile                      debug                      
  cell-error         compile-file                 decf                       
  cell-error-name    compile-file-pathname        declaim                    
  cerror             compiled-function            declaration                
  change-class       compiled-function-p          declare                    
  char               compiler-macro               decode-float               
  char-code          compiler-macro-function      decode-universal-time      
  char-code-limit    complement                   defclass                   
  char-downcase      complex                      defconstant                
  char-equal         complexp                     defgeneric                 
  char-greaterp      compute-applicable-methods   define-compiler-macro      
  char-int           compute-restarts             define-condition           
  char-lessp         concatenate                  define-method-combination  
  char-name          concatenated-stream          define-modify-macro        
  char-not-equal     concatenated-stream-streams  define-setf-expander       
  char-not-greaterp  cond                         define-symbol-macro        
  char-not-lessp     condition                    defmacro                   
  char-upcase        conjugate                    defmethod                  
  char/=             cons                         defpackage                 
  char<              consp                        defparameter               
  char<=             constantly                   defsetf                    
  char=              constantp                    defstruct                  
  char>              continue                     deftype                    
  char>=             control-error                defun                      
  character          copy-alist                   defvar                     
  characterp         copy-list                    delete                     
  check-type         copy-pprint-dispatch         delete-duplicates          
  cis                copy-readtable               delete-file                
  class              copy-seq                     delete-if                  
  class-name         copy-structure               delete-if-not              
  class-of           copy-symbol                  delete-package             

    Figure 1-6: Symbols in the COMMON-LISP package (part three of twelve).  


  denominator                    eq                   
  deposit-field                  eql                  
  describe                       equal                
  describe-object                equalp               
  destructuring-bind             error                
  digit-char                     etypecase            
  digit-char-p                   eval                 
  directory                      eval-when            
  directory-namestring           evenp                
  disassemble                    every                
  division-by-zero               exp                  
  do                             export               
  do*                            expt                 
  do-all-symbols                 extended-char        
  do-external-symbols            fboundp              
  do-symbols                     fceiling             
  documentation                  fdefinition          
  dolist                         ffloor               
  dotimes                        fifth                
  double-float                   file-author          
  double-float-epsilon           file-error           
  double-float-negative-epsilon  file-error-pathname  
  dpb                            file-length          
  dribble                        file-namestring      
  dynamic-extent                 file-position        
  ecase                          file-stream          
  echo-stream                    file-string-length   
  echo-stream-input-stream       file-write-date      
  echo-stream-output-stream      fill                 
  ed                             fill-pointer         
  eighth                         find                 
  elt                            find-all-symbols     
  encode-universal-time          find-class           
  end-of-file                    find-if              
  endp                           find-if-not          
  enough-namestring              find-method          
  ensure-directories-exist       find-package         
  ensure-generic-function        find-restart         

  Figure 1-7: Symbols in the COMMON-LISP package (part four of twelve).


  find-symbol                       get-internal-run-time        
  finish-output                     get-macro-character          
  first                             get-output-stream-string     
  fixnum                            get-properties               
  flet                              get-setf-expansion           
  float                             get-universal-time           
  float-digits                      getf                         
  float-precision                   gethash                      
  float-radix                       go                           
  float-sign                        graphic-char-p               
  floating-point-inexact            handler-bind                 
  floating-point-invalid-operation  handler-case                 
  floating-point-overflow           hash-table                   
  floating-point-underflow          hash-table-count             
  floatp                            hash-table-p                 
  floor                             hash-table-rehash-size       
  fmakunbound                       hash-table-rehash-threshold  
  force-output                      hash-table-size              
  format                            hash-table-test              
  formatter                         host-namestring              
  fourth                            identity                     
  fresh-line                        if                           
  fround                            ignorable                    
  ftruncate                         ignore                       
  ftype                             ignore-errors                
  funcall                           imagpart                     
  function                          import                       
  function-keywords                 in-package                   
  function-lambda-expression        incf                         
  functionp                         initialize-instance          
  gcd                               inline                       
  generic-function                  input-stream-p               
  gensym                            inspect                      
  gentemp                           integer                      
  get                               integer-decode-float         
  get-decoded-time                  integer-length               
  get-dispatch-macro-character      integerp                     
  get-internal-real-time            interactive-stream-p         

  Figure 1-8: Symbols in the COMMON-LISP package (part five of twelve).


  intern                                  lisp-implementation-type            
  internal-time-units-per-second          lisp-implementation-version         
  intersection                            list                                
  invalid-method-error                    list*                               
  invoke-debugger                         list-all-packages                   
  invoke-restart                          list-length                         
  invoke-restart-interactively            listen                              
  isqrt                                   listp                               
  keyword                                 load                                
  keywordp                                load-logical-pathname-translations  
  labels                                  load-time-value                     
  lambda                                  locally                             
  lambda-list-keywords                    log                                 
  lambda-parameters-limit                 logand                              
  last                                    logandc1                            
  lcm                                     logandc2                            
  ldb                                     logbitp                             
  ldb-test                                logcount                            
  ldiff                                   logeqv                              
  least-negative-double-float             logical-pathname                    
  least-negative-long-float               logical-pathname-translations       
  least-negative-normalized-double-float  logior                              
  least-negative-normalized-long-float    lognand                             
  least-negative-normalized-short-float   lognor                              
  least-negative-normalized-single-float  lognot                              
  least-negative-short-float              logorc1                             
  least-negative-single-float             logorc2                             
  least-positive-double-float             logtest                             
  least-positive-long-float               logxor                              
  least-positive-normalized-double-float  long-float                          
  least-positive-normalized-long-float    long-float-epsilon                  
  least-positive-normalized-short-float   long-float-negative-epsilon         
  least-positive-normalized-single-float  long-site-name                      
  least-positive-short-float              loop                                
  least-positive-single-float             loop-finish                         
  length                                  lower-case-p                        
  let                                     machine-instance                    
  let*                                    machine-type                        

     Figure 1-9: Symbols in the COMMON-LISP package (part six of twelve).    


  machine-version                mask-field                  
  macro-function                 max                         
  macroexpand                    member                      
  macroexpand-1                  member-if                   
  macrolet                       member-if-not               
  make-array                     merge                       
  make-broadcast-stream          merge-pathnames             
  make-concatenated-stream       method                      
  make-condition                 method-combination          
  make-dispatch-macro-character  method-combination-error    
  make-echo-stream               method-qualifiers           
  make-hash-table                min                         
  make-instance                  minusp                      
  make-instances-obsolete        mismatch                    
  make-list                      mod                         
  make-load-form                 most-negative-double-float  
  make-load-form-saving-slots    most-negative-fixnum        
  make-method                    most-negative-long-float    
  make-package                   most-negative-short-float   
  make-pathname                  most-negative-single-float  
  make-random-state              most-positive-double-float  
  make-sequence                  most-positive-fixnum        
  make-string                    most-positive-long-float    
  make-string-input-stream       most-positive-short-float   
  make-string-output-stream      most-positive-single-float  
  make-symbol                    muffle-warning              
  make-synonym-stream            multiple-value-bind         
  make-two-way-stream            multiple-value-call         
  makunbound                     multiple-value-list         
  map                            multiple-value-prog1        
  map-into                       multiple-value-setq         
  mapc                           multiple-values-limit       
  mapcan                         name-char                   
  mapcar                         namestring                  
  mapcon                         nbutlast                    
  maphash                        nconc                       
  mapl                           next-method-p               
  maplist                        nil                         

  Figure 1-10: Symbols in the COMMON-LISP package (part seven of twelve).


  nintersection         package-error                  
  ninth                 package-error-package          
  no-applicable-method  package-name                   
  no-next-method        package-nicknames              
  not                   package-shadowing-symbols      
  notany                package-use-list               
  notevery              package-used-by-list           
  notinline             packagep                       
  nreconc               pairlis                        
  nreverse              parse-error                    
  nset-difference       parse-integer                  
  nset-exclusive-or     parse-namestring               
  nstring-capitalize    pathname                       
  nstring-downcase      pathname-device                
  nstring-upcase        pathname-directory             
  nsublis               pathname-host                  
  nsubst                pathname-match-p               
  nsubst-if             pathname-name                  
  nsubst-if-not         pathname-type                  
  nsubstitute           pathname-version               
  nsubstitute-if        pathnamep                      
  nsubstitute-if-not    peek-char                      
  nth                   phase                          
  nth-value             pi                             
  nthcdr                plusp                          
  null                  pop                            
  number                position                       
  numberp               position-if                    
  numerator             position-if-not                
  nunion                pprint                         
  oddp                  pprint-dispatch                
  open                  pprint-exit-if-list-exhausted  
  open-stream-p         pprint-fill                    
  optimize              pprint-indent                  
  or                    pprint-linear                  
  otherwise             pprint-logical-block           
  output-stream-p       pprint-newline                 
  package               pprint-pop                     

  Figure 1-11: Symbols in the COMMON-LISP package (part eight of twelve).


  pprint-tab                 read-char                   
  pprint-tabular             read-char-no-hang           
  prin1                      read-delimited-list         
  prin1-to-string            read-from-string            
  princ                      read-line                   
  princ-to-string            read-preserving-whitespace  
  print                      read-sequence               
  print-not-readable         reader-error                
  print-not-readable-object  readtable                   
  print-object               readtable-case              
  print-unreadable-object    readtablep                  
  probe-file                 real                        
  proclaim                   realp                       
  prog                       realpart                    
  prog*                      reduce                      
  prog1                      reinitialize-instance       
  prog2                      rem                         
  progn                      remf                        
  program-error              remhash                     
  progv                      remove                      
  provide                    remove-duplicates           
  psetf                      remove-if                   
  psetq                      remove-if-not               
  push                       remove-method               
  pushnew                    remprop                     
  quote                      rename-file                 
  random                     rename-package              
  random-state               replace                     
  random-state-p             require                     
  rassoc                     rest                        
  rassoc-if                  restart                     
  rassoc-if-not              restart-bind                
  ratio                      restart-case                
  rational                   restart-name                
  rationalize                return                      
  rationalp                  return-from                 
  read                       revappend                   
  read-byte                  reverse                     

  Figure 1-12: Symbols in the COMMON-LISP package (part nine of twelve).


  room                          simple-bit-vector                  
  rotatef                       simple-bit-vector-p                
  round                         simple-condition                   
  row-major-aref                simple-condition-format-arguments  
  rplaca                        simple-condition-format-control    
  rplacd                        simple-error                       
  safety                        simple-string                      
  satisfies                     simple-string-p                    
  sbit                          simple-type-error                  
  scale-float                   simple-vector                      
  schar                         simple-vector-p                    
  search                        simple-warning                     
  second                        sin                                
  sequence                      single-float                       
  serious-condition             single-float-epsilon               
  set                           single-float-negative-epsilon      
  set-difference                sinh                               
  set-dispatch-macro-character  sixth                              
  set-exclusive-or              sleep                              
  set-macro-character           slot-boundp                        
  set-pprint-dispatch           slot-exists-p                      
  set-syntax-from-char          slot-makunbound                    
  setf                          slot-missing                       
  setq                          slot-unbound                       
  seventh                       slot-value                         
  shadow                        software-type                      
  shadowing-import              software-version                   
  shared-initialize             some                               
  shiftf                        sort                               
  short-float                   space                              
  short-float-epsilon           special                            
  short-float-negative-epsilon  special-operator-p                 
  short-site-name               speed                              
  signal                        sqrt                               
  signed-byte                   stable-sort                        
  signum                        standard                           
  simple-array                  standard-char                      
  simple-base-string            standard-char-p                    

  Figure 1-13: Symbols in the COMMON-LISP package (part ten of twelve).


  standard-class             sublis                      
  standard-generic-function  subseq                      
  standard-method            subsetp                     
  standard-object            subst                       
  step                       subst-if                    
  storage-condition          subst-if-not                
  store-value                substitute                  
  stream                     substitute-if               
  stream-element-type        substitute-if-not           
  stream-error               subtypep                    
  stream-error-stream        svref                       
  stream-external-format     sxhash                      
  streamp                    symbol                      
  string                     symbol-function             
  string-capitalize          symbol-macrolet             
  string-downcase            symbol-name                 
  string-equal               symbol-package              
  string-greaterp            symbol-plist                
  string-left-trim           symbol-value                
  string-lessp               symbolp                     
  string-not-equal           synonym-stream              
  string-not-greaterp        synonym-stream-symbol       
  string-not-lessp           t                           
  string-right-trim          tagbody                     
  string-stream              tailp                       
  string-trim                tan                         
  string-upcase              tanh                        
  string/=                   tenth                       
  string<                    terpri                      
  string<=                   the                         
  string=                    third                       
  string>                    throw                       
  string>=                   time                        
  stringp                    trace                       
  structure                  translate-logical-pathname  
  structure-class            translate-pathname          
  structure-object           tree-equal                  
  style-warning              truename                    

  Figure 1-14: Symbols in the COMMON-LISP package (part eleven of twelve).


  truncate                             values-list               
  two-way-stream                       variable                  
  two-way-stream-input-stream          vector                    
  two-way-stream-output-stream         vector-pop                
  type                                 vector-push               
  type-error                           vector-push-extend        
  type-error-datum                     vectorp                   
  type-error-expected-type             warn                      
  type-of                              warning                   
  typecase                             when                      
  typep                                wild-pathname-p           
  unbound-slot                         with-accessors            
  unbound-slot-instance                with-compilation-unit     
  unbound-variable                     with-condition-restarts   
  undefined-function                   with-hash-table-iterator  
  unexport                             with-input-from-string    
  unintern                             with-open-file            
  union                                with-open-stream          
  unless                               with-output-to-string     
  unread-char                          with-package-iterator     
  unsigned-byte                        with-simple-restart       
  untrace                              with-slots                
  unuse-package                        with-standard-io-syntax   
  unwind-protect                       write                     
  update-instance-for-different-class  write-byte                
  update-instance-for-redefined-class  write-char                
  upgraded-array-element-type          write-line                
  upgraded-complex-part-type           write-sequence            
  upper-case-p                         write-string              
  use-package                          write-to-string           
  use-value                            y-or-n-p                  
  user-homedir-pathname                yes-or-no-p               
  values                               zerop                     

  Figure 1-15: Symbols in the COMMON-LISP package (part twelve of twelve).



File: gcl.info,  Node: Syntax,  Next: Evaluation and Compilation,  Prev: Introduction (Introduction),  Up: Top

Syntax
******

* Menu:

* Character Syntax::
* Reader Algorithm::
* Interpretation of Tokens::
* Standard Macro Characters::


File: gcl.info,  Node: Character Syntax,  Next: Reader Algorithm,  Prev: Syntax,  Up: Syntax

Character Syntax
================

The Lisp reader takes characters from a stream, interprets them as a
printed representation of an object, constructs that object, and returns
it.

The syntax described by this chapter is called the standard syntax .
Operations are provided by Common Lisp so that various aspects of the
syntax information represented by a readtable can be modified under
program control; see *Note Reader::.  Except as explicitly stated
otherwise, the syntax used throughout this document is standard syntax.

* Menu:

* Readtables::
* Variables that affect the Lisp Reader::
* Standard Characters::
* Character Syntax Types::


File: gcl.info,  Node: Readtables,  Next: Variables that affect the Lisp Reader,  Prev: Character Syntax,  Up: Character Syntax

Readtables
----------

Syntax information for use by the Lisp reader is embodied in an object
called a readtable .  Among other things, the readtable contains the
association between characters and syntax types.

Figure 2-1 lists some defined names that are applicable to readtables.

  *readtable*                    readtable-case                
  copy-readtable                 readtablep                    
  get-dispatch-macro-character   set-dispatch-macro-character  
  get-macro-character            set-macro-character           
  make-dispatch-macro-character  set-syntax-from-char          

              Figure 2-1: Readtable defined names             


* Menu:

* The Current Readtable::
* The Standard Readtable::
* The Initial Readtable::


File: gcl.info,  Node: The Current Readtable,  Next: The Standard Readtable,  Prev: Readtables,  Up: Readtables

The Current Readtable
.....................

Several readtables describing different syntaxes can exist, but at any
given time only one, called the current readtable , affects the way in
which expressions_2 are parsed into objects by the Lisp reader.  The
current readtable in a given dynamic environment is the value of
*readtable* in that environment.  To make a different readtable become the
current readtable, *readtable* can be assigned or bound.


File: gcl.info,  Node: The Standard Readtable,  Next: The Initial Readtable,  Prev: The Current Readtable,  Up: Readtables

The Standard Readtable
......................

The standard readtable conforms to standard syntax.  The consequences are
undefined if an attempt is made to modify the standard readtable.  To
achieve the effect of altering or extending standard syntax, a copy of the
standard readtable can be created; see the function copy-readtable.

The readtable case of the standard readtable is :upcase.


File: gcl.info,  Node: The Initial Readtable,  Prev: The Standard Readtable,  Up: Readtables

The Initial Readtable
.....................

The initial readtable is the readtable that is the current readtable at
the time when the Lisp image starts.  At that time, it conforms to
standard syntax.  The initial readtable is distinct from the standard
readtable.  It is permissible for a conforming program to modify the
initial readtable.


File: gcl.info,  Node: Variables that affect the Lisp Reader,  Next: Standard Characters,  Prev: Readtables,  Up: Character Syntax

Variables that affect the Lisp Reader
-------------------------------------

The Lisp reader is influenced not only by the current readtable, but also
by various dynamic variables.  Figure 2-2 lists the variables that
influence the behavior of the Lisp reader.

  *package*    *read-default-float-format*  *readtable*  
  *read-base*  *read-suppress*                           

  Figure 2-2: Variables that influence the Lisp reader. 



File: gcl.info,  Node: Standard Characters,  Next: Character Syntax Types,  Prev: Variables that affect the Lisp Reader,  Up: Character Syntax

Standard Characters
-------------------

All implementations must support a character repertoire called
standard-char; characters that are members of that repertoire are called
standard characters .

The standard-char repertoire consists of the non-graphic character newline,
the graphic character space, and the following additional ninety-four
graphic characters or their equivalents:

  Graphic ID  Glyph  Description  Graphic ID  Glyph  Description  
  LA01        a      small a      LN01        n      small n      
  LA02        A      capital A    LN02        N      capital N    
  LB01        b      small b      LO01        o      small o      
  LB02        B      capital B    LO02        O      capital O    
  LC01        c      small c      LP01        p      small p      
  LC02        C      capital C    LP02        P      capital P    
  LD01        d      small d      LQ01        q      small q      
  LD02        D      capital D    LQ02        Q      capital Q    
  LE01        e      small e      LR01        r      small r      
  LE02        E      capital E    LR02        R      capital R    
  LF01        f      small f      LS01        s      small s      
  LF02        F      capital F    LS02        S      capital S    
  LG01        g      small g      LT01        t      small t      
  LG02        G      capital G    LT02        T      capital T    
  LH01        h      small h      LU01        u      small u      
  LH02        H      capital H    LU02        U      capital U    
  LI01        i      small i      LV01        v      small v      
  LI02        I      capital I    LV02        V      capital V    
  LJ01        j      small j      LW01        w      small w      
  LJ02        J      capital J    LW02        W      capital W    
  LK01        k      small k      LX01        x      small x      
  LK02        K      capital K    LX02        X      capital X    
  LL01        l      small l      LY01        y      small y      
  LL02        L      capital L    LY02        Y      capital Y    
  LM01        m      small m      LZ01        z      small z      
  LM02        M      capital M    LZ02        Z      capital Z    

  Figure 2-3: Standard Character Subrepertoire (Part 1 of 3: Latin Characters)


  Graphic ID  Glyph  Description  Graphic ID  Glyph  Description  
  ND01        1      digit 1      ND06        6      digit 6      
  ND02        2      digit 2      ND07        7      digit 7      
  ND03        3      digit 3      ND08        8      digit 8      
  ND04        4      digit 4      ND09        9      digit 9      
  ND05        5      digit 5      ND10        0      digit 0      

  Figure 2-4: Standard Character Subrepertoire (Part 2 of 3: Numeric Characters)


  Graphic ID  Glyph  Description                              
  SP02        !      exclamation mark                         
  SC03        $     dollar sign                              
  SP04        "      quotation mark, or double quote          
  SP05        '      apostrophe, or [single] quote            
  SP06        (      left parenthesis, or open parenthesis    
  SP07        )      right parenthesis, or close parenthesis  
  SP08        ,      comma                                    
  SP09        _      low line, or underscore                  
  SP10        -      hyphen, or minus [sign]                  
  SP11        .      full stop, period, or dot                
  SP12        /      solidus, or slash                        
  SP13        :      colon                                    
  SP14        ;      semicolon                                
  SP15        ?      question mark                            
  SA01        +      plus [sign]                              
  SA03        <      less-than [sign]                         
  SA04        =      equals [sign]                            
  SA05        >      greater-than [sign]                      
  SM01        #      number sign, or sharp[sign]              
  SM02        %      percent [sign]                           
  SM03        &      ampersand                                
  SM04        *      asterisk, or star                        
  SM05        @      commercial at, or at-sign                
  SM06        [      left [square] bracket                    
  SM07        \      reverse solidus, or backslash            
  SM08        ]      right [square] bracket                   
  SM11        {      left curly bracket, or left brace        
  SM13        |      vertical bar                             
  SM14        }      right curly bracket, or right brace      
  SD13        `      grave accent, or backquote               
  SD15        ^      circumflex accent                        
  SD19        ~      tilde                                    

  Figure 2-5: Standard Character Subrepertoire (Part 3 of 3: Special Characters)


The graphic IDs are not used within Common Lisp, but are provided for
cross reference purposes with ISO 6937/2.  Note that the first letter of
the graphic ID categorizes the character as follows: L--Latin, N--Numeric,
S--Special.


File: gcl.info,  Node: Character Syntax Types,  Prev: Standard Characters,  Up: Character Syntax

Character Syntax Types
----------------------

The Lisp reader constructs an object from the input text by interpreting
each character according to its syntax type.  The Lisp reader cannot
accept as input everything that the Lisp printer produces, and the Lisp
reader has features that are not used by the Lisp printer.  The Lisp
reader can be used as a lexical analyzer for a more general user-written
parser.

When the Lisp reader is invoked, it reads a single character from the
input stream and dispatches according to the syntax type of that character.
Every character that can appear in the input stream is of one of the
syntax types shown in Figure~2-6.

  constituent  macro character  single escape  
  invalid      multiple escape  whitespace_2   

  Figure 2-6: Possible Character Syntax Types 


The syntax type of a character in a readtable determines how that
character is interpreted by the Lisp reader while that readtable is the
current readtable.  At any given time, every character has exactly one
syntax type.

Figure~2-7 lists the syntax type of each character in standard syntax.

  character  syntax type                 character  syntax type             
  Backspace  constituent                 0-9       constituent             
  Tab        whitespace_2                :          constituent             
  Newline    whitespace_2                ;          terminating macro char  
  Linefeed   whitespace_2                <          constituent             
  Page       whitespace_2                =          constituent             
  Return     whitespace_2                >          constituent             
  Space      whitespace_2                ?          constituent*            
  !          constituent*                @          constituent             
  "          terminating macro char      A-Z       constituent             
  #          non-terminating macro char  [          constituent*            
  $         constituent                 \          single escape           
  %          constituent                 ]          constituent*            
  &          constituent                 ^          constituent             
  '          terminating macro char      _          constituent             
  (          terminating macro char      `          terminating macro char  
  )          terminating macro char      a-z       constituent             
  *          constituent                 {          constituent*            
  +          constituent                 |          multiple escape         
  ,          terminating macro char      }          constituent*            
  -          constituent                 ~          constituent             
  .          constituent                 Rubout     constituent             
  /          constituent                 

            Figure 2-7: Character Syntax Types in Standard Syntax          


The characters marked with an asterisk (*) are initially constituents, but
they are not used in any standard Common Lisp notations.  These characters
are explicitly reserved to the programmer.  ~ is not used in Common Lisp,
and reserved to implementors.  $ and % are alphabetic_2 characters, but
are not used in the names of any standard Common Lisp defined names.

Whitespace_2 characters serve as separators but are otherwise ignored.
Constituent and escape characters are accumulated to make a token, which
is then interpreted as a number or symbol.  Macro characters trigger the
invocation of functions (possibly user-supplied) that can perform
arbitrary parsing actions.  Macro characters are divided into two kinds,
terminating and non-terminating, depending on whether or not they
terminate a token.  The following are descriptions of each kind of syntax
type.

* Menu:

* Constituent Characters::
* Constituent Traits::
* Invalid Characters::
* Macro Characters::
* Multiple Escape Characters::
* Examples of Multiple Escape Characters::
* Single Escape Character::
* Examples of Single Escape Characters::
* Whitespace Characters::
* Examples of Whitespace Characters::


File: gcl.info,  Node: Constituent Characters,  Next: Constituent Traits,  Prev: Character Syntax Types,  Up: Character Syntax Types

Constituent Characters
......................

Constituent characters are used in tokens.  A token is a representation of
a number or a symbol.  Examples of constituent characters are letters and
digits.

Letters in symbol names are sometimes converted to letters in the opposite
case when the name is read; see *Note Effect of Readtable Case on the Lisp
Reader::.  Case conversion can be suppressed by the use of single escape
or multiple escape characters.


File: gcl.info,  Node: Constituent Traits,  Next: Invalid Characters,  Prev: Constituent Characters,  Up: Character Syntax Types

Constituent Traits
..................

Every character has one or more constituent traits that define how the
character is to be interpreted by the Lisp reader when the character is a
constituent character.  These constituent traits are alphabetic_2, digit,
package marker, plus sign, minus sign, dot, decimal point, ratio marker,
exponent marker, and invalid.  Figure~2-8 shows the constituent traits of
the standard characters and of certain semi-standard characters; no
mechanism is provided for changing the constituent trait of a character.
Any character with the alphadigit constituent trait in that figure is a
digit if the current input base is greater than that character's digit
value, otherwise the character is alphabetic_2.  Any character quoted by a
single escape is treated as an alphabetic_2 constituent, regardless of its
normal syntax.

 constituent traits         constituent traits                                   
 character                  character   
 ________________________________________________________________________________
 Backspace   invalid        {           alphabetic_2                             
 Tab         invalid*       }           alphabetic_2                             
 Newline     invalid*       +           alphabetic_2, plus sign                  
 Linefeed    invalid*       -           alphabetic_2, minus sign                 
 Page        invalid*       .           alphabetic_2, dot, decimal point         
 Return      invalid*       /           alphabetic_2, ratio marker               
 Space       invalid*       A, a        alphadigit                               
 !           alphabetic_2   B, b        alphadigit                               
 "           alphabetic_2*  C, c        alphadigit                               
 #           alphabetic_2*  D, d        alphadigit, double-float exponent marker 
 $          alphabetic_2   E, e        alphadigit, float exponent marker        
 %           alphabetic_2   F, f        alphadigit, single-float exponent marker 
 &           alphabetic_2   G, g        alphadigit                               
 '           alphabetic_2*  H, h        alphadigit                               
 (           alphabetic_2*  I, i        alphadigit                               
 )           alphabetic_2*  J, j        alphadigit                               
 *           alphabetic_2   K, k        alphadigit                               
 ,           alphabetic_2*  L, l        alphadigit, long-float exponent marker   
 0-9         alphadigit     M, m        alphadigit                               
 :           package marker N, n        alphadigit                               
 ;           alphabetic_2*  O, o        alphadigit                               
 <           alphabetic_2   P, p        alphadigit                               
 =           alphabetic_2   Q, q        alphadigit                               
 >           alphabetic_2   R, r        alphadigit                               
 ?           alphabetic_2   S, s        alphadigit, short-float exponent marker  
 @           alphabetic_2   T, t        alphadigit                               
 [           alphabetic_2   U, u        alphadigit                               
 \           alphabetic_2*  V, v        alphadigit                               
 ]           alphabetic_2   W, w        alphadigit                               
 ^           alphabetic_2   X, x        alphadigit                               
 _           alphabetic_2   Y, y        alphadigit                               
 `           alphabetic_2*  Z, z        alphadigit                               
 |           alphabetic_2*  Rubout      invalid                                  
 ~           alphabetic_2   

  Figure 2-8: Constituent Traits of Standard Characters and Semi-Standard Characters

The interpretations in this table apply only to characters whose syntax
type is constituent.  Entries marked with an asterisk (*) are normally
shadowed_2 because the indicated characters are of syntax type
whitespace_2, macro character, single escape, or multiple escape; these
constituent traits apply to them only if their syntax types are changed to
constituent.


File: gcl.info,  Node: Invalid Characters,  Next: Macro Characters,  Prev: Constituent Traits,  Up: Character Syntax Types

Invalid Characters
..................

Characters with the constituent trait invalid cannot ever appear in a token
except under the control of a single escape character.  If an invalid
character is encountered while an object is being read, an error of type
reader-error is signaled.  If an invalid character is preceded by a single
escape character, it is treated as an alphabetic_2 constituent instead.

