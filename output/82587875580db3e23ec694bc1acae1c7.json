{
    "name": "make-random-state",
    "prev": "random-state",
    "next": "random",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "make-random-state"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-random-state",
                    "text": " &optional state =>  new-state\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "state",
                    "desc": "a random state, or nil, or t.  The default is nil."
                },
                {
                    "name": "new-state",
                    "desc": "a random state object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a fresh object of type random-state suitable for use as the value\nof *random-state*.\nIf state is a random state object, the new-state is a copy_5 of that\nobject.  If state is nil, the new-state is a copy_5 of the current random\nstate.  If state is t, the new-state is a fresh random state object that\nhas been randomly initialized by some means.\n"
        },
        {
            "type": "Examples",
            "text": "      (let* ((rs1 (make-random-state nil))\n             (rs2 (make-random-state t))\n             (rs3 (make-random-state rs2))\n             (rs4 nil))\n        (list (loop for i from 1 to 10\n                    collect (random 100)\n                    when (= i 5)\n                     do (setq rs4 (make-random-state)))\n              (loop for i from 1 to 10 collect (random 100 rs1))\n              (loop for i from 1 to 10 collect (random 100 rs2))\n              (loop for i from 1 to 10 collect (random 100 rs3))\n              (loop for i from 1 to 10 collect (random 100 rs4))))\n     =>  ((29 25 72 57 55 68 24 35 54 65)\n         (29 25 72 57 55 68 24 35 54 65)\n         (93 85 53 99 58 62 2 23 23 59)\n         (93 85 53 99 58 62 2 23 23 59)\n         (68 24 35 54 65 54 55 50 59 49))\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if state is not a random state,\nor nil, or t.\n"
        },
        {
            "type": "See Also",
            "text": "*Note random:: , *Note random-state::\n"
        },
        {
            "type": "Notes",
            "text": "One important use of make-random-state is to allow the same series of\npseudo-random numbers to be generated many times within a single program.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-random-state,  Next: random,  Prev: random-state,  Up: Numbers Dictionary\n\nmake-random-state                                                [Function]\n---------------------------------------------------------------------------\n\n`make-random-state'  &optional state =>  new-state\n\nArguments and Values::\n......................\n\nstate--a random state, or nil, or t.  The default is nil.\n\nnew-state--a random state object.\n\nDescription::\n.............\n\nCreates a fresh object of type random-state suitable for use as the value\nof *random-state*.\n\nIf state is a random state object, the new-state is a copy_5 of that\nobject.  If state is nil, the new-state is a copy_5 of the current random\nstate.  If state is t, the new-state is a fresh random state object that\nhas been randomly initialized by some means.\n\nExamples::\n..........\n\n      (let* ((rs1 (make-random-state nil))\n             (rs2 (make-random-state t))\n             (rs3 (make-random-state rs2))\n             (rs4 nil))\n        (list (loop for i from 1 to 10\n                    collect (random 100)\n                    when (= i 5)\n                     do (setq rs4 (make-random-state)))\n              (loop for i from 1 to 10 collect (random 100 rs1))\n              (loop for i from 1 to 10 collect (random 100 rs2))\n              (loop for i from 1 to 10 collect (random 100 rs3))\n              (loop for i from 1 to 10 collect (random 100 rs4))))\n     =>  ((29 25 72 57 55 68 24 35 54 65)\n         (29 25 72 57 55 68 24 35 54 65)\n         (93 85 53 99 58 62 2 23 23 59)\n         (93 85 53 99 58 62 2 23 23 59)\n         (68 24 35 54 65 54 55 50 59 49))\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if state is not a random state,\nor nil, or t.\n\nSee Also::\n..........\n\n*Note random:: , *Note random-state::\n\nNotes::\n.......\n\nOne important use of make-random-state is to allow the same series of\npseudo-random numbers to be generated many times within a single program.\n\n"
}