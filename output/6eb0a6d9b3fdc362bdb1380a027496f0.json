{
    "name": "array-element-type",
    "prev": "array-dimensions",
    "next": "array-has-fill-pointer-p",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "array-element-type"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "array-element-type",
                    "text": " array =>  typespec\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "array",
                    "desc": "an array."
                },
                {
                    "name": "typespec",
                    "desc": "a type specifier."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a type specifier which represents the actual array element type of\nthe array, which is the set of objects that such an array can hold.\n(Because of array upgrading, this type specifier can in some cases denote\na supertype of the expressed array element type of the array.)\n"
        },
        {
            "type": "Examples",
            "text": "      (array-element-type (make-array 4)) =>  T\n      (array-element-type (make-array 12 :element-type '(unsigned-byte 8)))\n     =>  implementation-dependent\n      (array-element-type (make-array 12 :element-type '(unsigned-byte 5)))\n     =>  implementation-dependent\n      (array-element-type (make-array 5 :element-type '(mod 5)))\ncould be (mod 5), (mod 8), fixnum, t, or any other type of which (mod 5)\nis a subtype.\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if its argument is not an array.\n"
        },
        {
            "type": "See Also",
            "text": "array, *Note make-array:: , *Note subtypep:: , *Note\nupgraded-array-element-type::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: array-element-type,  Next: array-has-fill-pointer-p,  Prev: array-dimensions,  Up: Arrays Dictionary\n\narray-element-type                                               [Function]\n---------------------------------------------------------------------------\n\n`array-element-type'  array =>  typespec\n\nArguments and Values::\n......................\n\narray--an array.\n\ntypespec--a type specifier.\n\nDescription::\n.............\n\nReturns a type specifier which represents the actual array element type of\nthe array, which is the set of objects that such an array can hold.\n(Because of array upgrading, this type specifier can in some cases denote\na supertype of the expressed array element type of the array.)\n\nExamples::\n..........\n\n      (array-element-type (make-array 4)) =>  T\n      (array-element-type (make-array 12 :element-type '(unsigned-byte 8)))\n     =>  implementation-dependent\n      (array-element-type (make-array 12 :element-type '(unsigned-byte 5)))\n     =>  implementation-dependent\n\n      (array-element-type (make-array 5 :element-type '(mod 5)))\n\ncould be (mod 5), (mod 8), fixnum, t, or any other type of which (mod 5)\nis a subtype.\n\nAffected By::\n.............\n\nThe implementation.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if its argument is not an array.\n\nSee Also::\n..........\n\narray, *Note make-array:: , *Note subtypep:: , *Note\nupgraded-array-element-type::\n\n"
}