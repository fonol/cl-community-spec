{
    "name": "array-displacement",
    "prev": "array-has-fill-pointer-p",
    "next": "array-in-bounds-p",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "array-displacement"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "array-displacement",
                    "text": " array =>  displaced-to, displaced-index-offset\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "array",
                    "desc": "an array."
                },
                {
                    "name": "displaced-to",
                    "desc": "an array or nil."
                },
                {
                    "name": "displaced-index-offset",
                    "desc": "a non-negative fixnum."
                }
            ]
        },
        {
            "type": "Description",
            "text": "If the array is a displaced array, returns the values of the :displaced-to\nand :displaced-index-offset options for the array (see the functions\nmake-array and adjust-array).  If the array is not a displaced array, nil\nand 0 are returned.\nIf array-displacement is called on an array for which a non-nil object was\nprovided as the :displaced-to argument to make-array or adjust-array, it\nmust return that object as its first value. It is implementation-dependent\nwhether array-displacement returns a non-nil primary value for any other\narray.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq a1 (make-array 5)) =>  #<ARRAY 5 simple 46115576>\n      (setq a2 (make-array 4 :displaced-to a1\n                             :displaced-index-offset 1))\n     =>  #<ARRAY 4 indirect 46117134>\n      (array-displacement a2)\n     =>  #<ARRAY 5 simple 46115576>, 1\n      (setq a3 (make-array 2 :displaced-to a2\n                             :displaced-index-offset 2))\n     =>  #<ARRAY 2 indirect 46122527>\n      (array-displacement a3)\n     =>  #<ARRAY 4 indirect 46117134>, 2\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if array is not an array.\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-array::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: array-displacement,  Next: array-in-bounds-p,  Prev: array-has-fill-pointer-p,  Up: Arrays Dictionary\n\narray-displacement                                               [Function]\n---------------------------------------------------------------------------\n\n`array-displacement'  array =>  displaced-to, displaced-index-offset\n\nArguments and Values::\n......................\n\narray--an array.\n\ndisplaced-to--an array or nil.\n\ndisplaced-index-offset--a non-negative fixnum.\n\nDescription::\n.............\n\nIf the array is a displaced array, returns the values of the :displaced-to\nand :displaced-index-offset options for the array (see the functions\nmake-array and adjust-array).  If the array is not a displaced array, nil\nand 0 are returned.\n\nIf array-displacement is called on an array for which a non-nil object was\nprovided as the :displaced-to argument to make-array or adjust-array, it\nmust return that object as its first value. It is implementation-dependent\nwhether array-displacement returns a non-nil primary value for any other\narray.\n\nExamples::\n..........\n\n      (setq a1 (make-array 5)) =>  #<ARRAY 5 simple 46115576>\n      (setq a2 (make-array 4 :displaced-to a1\n                             :displaced-index-offset 1))\n     =>  #<ARRAY 4 indirect 46117134>\n      (array-displacement a2)\n     =>  #<ARRAY 5 simple 46115576>, 1\n      (setq a3 (make-array 2 :displaced-to a2\n                             :displaced-index-offset 2))\n     =>  #<ARRAY 2 indirect 46122527>\n      (array-displacement a3)\n     =>  #<ARRAY 4 indirect 46117134>, 2\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if array is not an array.\n\nSee Also::\n..........\n\n*Note make-array::\n\n"
}