{
    "name": "Redefining Classes",
    "prev": "Determining the Class Precedence List",
    "next": "Integrating Types and Classes",
    "up": "Classes",
    "header": {
        "type": null,
        "text": "Redefining Classes"
    },
    "sections": [
        {
            "type": "",
            "text": "A class that is a direct instance of standard-class can be redefined if\nthe new class is also a direct instance of standard-class.  Redefining a\nclass modifies the existing class object to reflect the new class\ndefinition; it does not create a new class object for the class.  Any\nmethod object created by a :reader, :writer, or :accessor option specified\nby the old defclass form is removed from the corresponding generic\nfunction.  Methods specified by the new defclass form are added.\nWhen the class C is redefined, changes are propagated to its instances and\nto instances of any of its subclasses.  Updating such an instance occurs\nat an implementation-dependent time, but no later than the next time a slot\nof that instance is read or written.  Updating an instance does not change\nits identity as defined by the function eq.  The updating process may\nchange the slots of that particular instance, but it does not create a new\ninstance.  Whether updating an instance consumes storage is\nimplementation-dependent.\nNote that redefining a class may cause slots to be added or deleted.  If a\nclass is redefined in a way that changes the set of local slots accessible\nin instances, the instances are updated.  It is implementation-dependent\nwhether instances are updated if a class is redefined in a way that does\nnot change the set of local slots accessible in instances.\nThe value of a slot that is specified as shared both in the old class and\nin the new class is retained.  If such a shared slot was unbound in the\nold class, it is unbound in the new class.  Slots that were local in the\nold class and that are shared in the new class are initialized.  Newly\nadded shared slots are initialized.\nEach newly added shared slot is set to the result of evaluating the\ncaptured initialization form for the slot that was specified in the\ndefclass form for the new class.  If there was no initialization form, the\nslot is unbound.\nIf a class is redefined in such a way that the set of local slots\naccessible in an instance of the class is changed, a two-step process of\nupdating the instances of the class takes place.  The process may be\nexplicitly started by invoking the generic function\nmake-instances-obsolete.  This two-step process can happen in other\ncircumstances in some implementations.  For example, in some\nimplementations this two-step process is triggered if the order of slots\nin storage is changed.\nThe first step modifies the structure of the instance by adding new local\nslots and discarding local slots that are not defined in the new version\nof the class.  The second step initializes the newly-added local slots and\nperforms any other user-defined actions. These two steps are further\nspecified in the next two sections.\n* Menu:\n* Modifying the Structure of Instances::\n* Initializing Newly Added Local Slots (Redefining Classes)::\n* Customizing Class Redefinition::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Redefining Classes,  Next: Integrating Types and Classes,  Prev: Determining the Class Precedence List,  Up: Classes\n\nRedefining Classes\n------------------\n\nA class that is a direct instance of standard-class can be redefined if\nthe new class is also a direct instance of standard-class.  Redefining a\nclass modifies the existing class object to reflect the new class\ndefinition; it does not create a new class object for the class.  Any\nmethod object created by a :reader, :writer, or :accessor option specified\nby the old defclass form is removed from the corresponding generic\nfunction.  Methods specified by the new defclass form are added.\n\nWhen the class C is redefined, changes are propagated to its instances and\nto instances of any of its subclasses.  Updating such an instance occurs\nat an implementation-dependent time, but no later than the next time a slot\nof that instance is read or written.  Updating an instance does not change\nits identity as defined by the function eq.  The updating process may\nchange the slots of that particular instance, but it does not create a new\ninstance.  Whether updating an instance consumes storage is\nimplementation-dependent.\n\nNote that redefining a class may cause slots to be added or deleted.  If a\nclass is redefined in a way that changes the set of local slots accessible\nin instances, the instances are updated.  It is implementation-dependent\nwhether instances are updated if a class is redefined in a way that does\nnot change the set of local slots accessible in instances.\n\nThe value of a slot that is specified as shared both in the old class and\nin the new class is retained.  If such a shared slot was unbound in the\nold class, it is unbound in the new class.  Slots that were local in the\nold class and that are shared in the new class are initialized.  Newly\nadded shared slots are initialized.\n\nEach newly added shared slot is set to the result of evaluating the\ncaptured initialization form for the slot that was specified in the\ndefclass form for the new class.  If there was no initialization form, the\nslot is unbound.\n\nIf a class is redefined in such a way that the set of local slots\naccessible in an instance of the class is changed, a two-step process of\nupdating the instances of the class takes place.  The process may be\nexplicitly started by invoking the generic function\nmake-instances-obsolete.  This two-step process can happen in other\ncircumstances in some implementations.  For example, in some\nimplementations this two-step process is triggered if the order of slots\nin storage is changed.\n\nThe first step modifies the structure of the instance by adding new local\nslots and discarding local slots that are not defined in the new version\nof the class.  The second step initializes the newly-added local slots and\nperforms any other user-defined actions. These two steps are further\nspecified in the next two sections.\n\n* Menu:\n\n* Modifying the Structure of Instances::\n* Initializing Newly Added Local Slots (Redefining Classes)::\n* Customizing Class Redefinition::\n\n"
}