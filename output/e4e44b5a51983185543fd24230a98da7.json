{
    "name": "copy-list",
    "prev": "tree-equal",
    "next": "list",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "copy-list"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "copy-list",
                    "text": " list =>  copy\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a proper list or a dotted list."
                },
                {
                    "name": "copy",
                    "desc": "a list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a copy of list.  If list is a dotted list, the resulting list will\nalso be a dotted list.\nOnly the list structure of list is copied; the elements of the resulting\nlist are the same as the corresponding elements of the given list.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq lst (list 1 (list 2 3))) =>  (1 (2 3))\n      (setq slst lst) =>  (1 (2 3))\n      (setq clst (copy-list lst)) =>  (1 (2 3))\n      (eq slst lst) =>  true\n      (eq clst lst) =>  false\n      (equal clst lst) =>  true\n      (rplaca lst \"one\") =>  (\"one\" (2 3))\n      slst =>  (\"one\" (2 3))\n      clst =>  (1 (2 3))\n      (setf (caadr lst) \"two\") =>  \"two\"\n      lst =>  (\"one\" (\"two\" 3))\n      slst =>  (\"one\" (\"two\" 3))\n      clst =>  (1 (\"two\" 3))\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if list is a circular list.\n"
        },
        {
            "type": "See Also",
            "text": "*Note copy-alist:: , *Note copy-seq:: , *Note copy-tree::\n"
        },
        {
            "type": "Notes",
            "text": "The copy created is equal to list, but not eq.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: copy-list,  Next: list,  Prev: tree-equal,  Up: Conses Dictionary\n\ncopy-list                                                        [Function]\n---------------------------------------------------------------------------\n\n`copy-list'  list =>  copy\n\nArguments and Values::\n......................\n\nlist--a proper list or a dotted list.\n\ncopy--a list.\n\nDescription::\n.............\n\nReturns a copy of list.  If list is a dotted list, the resulting list will\nalso be a dotted list.\n\nOnly the list structure of list is copied; the elements of the resulting\nlist are the same as the corresponding elements of the given list.\n\nExamples::\n..........\n\n      (setq lst (list 1 (list 2 3))) =>  (1 (2 3))\n      (setq slst lst) =>  (1 (2 3))\n      (setq clst (copy-list lst)) =>  (1 (2 3))\n      (eq slst lst) =>  true\n      (eq clst lst) =>  false\n      (equal clst lst) =>  true\n      (rplaca lst \"one\") =>  (\"one\" (2 3))\n      slst =>  (\"one\" (2 3))\n      clst =>  (1 (2 3))\n      (setf (caadr lst) \"two\") =>  \"two\"\n      lst =>  (\"one\" (\"two\" 3))\n      slst =>  (\"one\" (\"two\" 3))\n      clst =>  (1 (\"two\" 3))\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if list is a circular list.\n\nSee Also::\n..........\n\n*Note copy-alist:: , *Note copy-seq:: , *Note copy-tree::\n\nNotes::\n.......\n\nThe copy created is equal to list, but not eq.\n\n"
}