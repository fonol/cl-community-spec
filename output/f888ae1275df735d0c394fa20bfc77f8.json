{
    "name": "name-char",
    "prev": "char-name",
    "next": null,
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "name-char"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "name-char",
                    "text": " name =>  char-p\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "name",
                    "desc": "a string designator."
                },
                {
                    "name": "char-p",
                    "desc": "a character or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the character object whose name is name (as determined by\nstring-equal--i.e., lookup is not case sensitive).  If such a character\ndoes not exist, nil is returned.\n"
        },
        {
            "type": "Examples",
            "text": "     (name-char 'space) =>  #\\Space\n     (name-char \"space\") =>  #\\Space\n     (name-char \"Space\") =>  #\\Space\n     (let ((x (char-name #\\a)))\n       (or (not x) (eql (name-char x) #\\a))) =>  true\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if name is not a string\ndesignator.\n"
        },
        {
            "type": "See Also",
            "text": "*Note char-name::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: name-char,  Prev: char-name,  Up: Characters Dictionary\n\nname-char                                                        [Function]\n---------------------------------------------------------------------------\n\n`name-char'  name =>  char-p\n\nArguments and Values::\n......................\n\nname--a string designator.\n\nchar-p--a character or nil.\n\nDescription::\n.............\n\nReturns the character object whose name is name (as determined by\nstring-equal--i.e., lookup is not case sensitive).  If such a character\ndoes not exist, nil is returned.\n\nExamples::\n..........\n\n     (name-char 'space) =>  #\\Space\n     (name-char \"space\") =>  #\\Space\n     (name-char \"Space\") =>  #\\Space\n     (let ((x (char-name #\\a)))\n       (or (not x) (eql (name-char x) #\\a))) =>  true\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if name is not a string\ndesignator.\n\nSee Also::\n..........\n\n*Note char-name::\n\n"
}