{
    "name": "*terminal-io*",
    "prev": "*debug-io*",
    "next": "stream-error",
    "up": "Streams Dictionary",
    "header": {
        "type": "Variable",
        "text": "*terminal-io*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a bidirectional stream.\n"
        },
        {
            "type": "Initial Value",
            "text": "implementation-dependent, but it must be an open stream that is not a\ngeneralized synonym stream to an I/O customization variables but that\nmight be a generalized synonym stream to the value of some I/O\ncustomization variable.\n"
        },
        {
            "type": "Description",
            "text": "The value of *terminal-io*, called  terminal I/O, is ordinarily a\nbidirectional stream that connects to the user's console.  Typically,\nwriting to this stream would cause the output to appear on a display\nscreen, for example, and reading from the stream would accept input from a\nkeyboard.  It is intended that standard input functions such as read and\nread-char, when used with this stream, cause echoing of the input into the\noutput side of the stream. The means by which this is accomplished are\nimplementation-dependent.\nThe effect of changing the value of *terminal-io*, either by binding or\nassignment, is implementation-defined.\n"
        },
        {
            "type": "Examples",
            "text": "      (progn (prin1 'foo) (prin1 'bar *terminal-io*))\n      |>  FOOBAR\n     =>  BAR\n      (with-output-to-string (*standard-output*)\n        (prin1 'foo)\n        (prin1 'bar *terminal-io*))\n      |>  BAR\n     =>  \"FOO\"\n"
        },
        {
            "type": "See Also",
            "text": "*debug-io*, *error-output*, *query-io*, *standard-input*,\n*standard-output*, *trace-output*\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *terminal-io*,  Next: stream-error,  Prev: *debug-io*,  Up: Streams Dictionary\n\n*terminal-io*                                                    [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na bidirectional stream.\n\nInitial Value::\n...............\n\nimplementation-dependent, but it must be an open stream that is not a\ngeneralized synonym stream to an I/O customization variables but that\nmight be a generalized synonym stream to the value of some I/O\ncustomization variable.\n\nDescription::\n.............\n\nThe value of *terminal-io*, called  terminal I/O, is ordinarily a\nbidirectional stream that connects to the user's console.  Typically,\nwriting to this stream would cause the output to appear on a display\nscreen, for example, and reading from the stream would accept input from a\nkeyboard.  It is intended that standard input functions such as read and\nread-char, when used with this stream, cause echoing of the input into the\noutput side of the stream. The means by which this is accomplished are\nimplementation-dependent.\n\nThe effect of changing the value of *terminal-io*, either by binding or\nassignment, is implementation-defined.\n\nExamples::\n..........\n\n      (progn (prin1 'foo) (prin1 'bar *terminal-io*))\n      |>  FOOBAR\n     =>  BAR\n      (with-output-to-string (*standard-output*)\n        (prin1 'foo)\n        (prin1 'bar *terminal-io*))\n      |>  BAR\n     =>  \"FOO\"\n\nSee Also::\n..........\n\n*debug-io*, *error-output*, *query-io*, *standard-input*,\n*standard-output*, *trace-output*\n\n"
}