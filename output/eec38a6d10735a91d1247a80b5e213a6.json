{
    "name": "cons",
    "prev": "atom (Type)",
    "next": "consp",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "cons"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "cons",
                    "text": " object-1 object-2 =>  cons\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object-1",
                    "desc": "an object."
                },
                {
                    "name": "object-2",
                    "desc": "an object."
                },
                {
                    "name": "cons",
                    "desc": "a cons."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a fresh cons, the car of which is object-1 and the cdr of which is\nobject-2.\n"
        },
        {
            "type": "Examples",
            "text": "      (cons 1 2) =>  (1 . 2)\n      (cons 1 nil) =>  (1)\n      (cons nil 2) =>  (NIL . 2)\n      (cons nil nil) =>  (NIL)\n      (cons 1 (cons 2 (cons 3 (cons 4 nil)))) =>  (1 2 3 4)\n      (cons 'a 'b) =>  (A . B)\n      (cons 'a (cons 'b (cons 'c '()))) =>  (A B C)\n      (cons 'a '(b c d)) =>  (A B C D)\n"
        },
        {
            "type": "See Also",
            "text": "*Note list::\n"
        },
        {
            "type": "Notes",
            "text": "If object-2 is a list, cons can be thought of as producing a new list\nwhich is like it but has object-1 prepended.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: cons,  Next: consp,  Prev: atom (Type),  Up: Conses Dictionary\n\ncons                                                             [Function]\n---------------------------------------------------------------------------\n\n`cons'  object-1 object-2 =>  cons\n\nArguments and Values::\n......................\n\nobject-1--an object.\n\nobject-2--an object.\n\ncons--a cons.\n\nDescription::\n.............\n\nCreates a fresh cons, the car of which is object-1 and the cdr of which is\nobject-2.\n\nExamples::\n..........\n\n      (cons 1 2) =>  (1 . 2)\n      (cons 1 nil) =>  (1)\n      (cons nil 2) =>  (NIL . 2)\n      (cons nil nil) =>  (NIL)\n      (cons 1 (cons 2 (cons 3 (cons 4 nil)))) =>  (1 2 3 4)\n      (cons 'a 'b) =>  (A . B)\n      (cons 'a (cons 'b (cons 'c '()))) =>  (A B C)\n      (cons 'a '(b c d)) =>  (A B C D)\n\nSee Also::\n..........\n\n*Note list::\n\nNotes::\n.......\n\nIf object-2 is a list, cons can be thought of as producing a new list\nwhich is like it but has object-1 prepended.\n\n"
}