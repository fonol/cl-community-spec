{
    "name": "arrayp",
    "prev": "array-total-size",
    "next": "fill-pointer",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "arrayp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "arrayp",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type array; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (arrayp (make-array '(2 3 4) :adjustable t)) =>  true\n      (arrayp (make-array 6)) =>  true\n      (arrayp #*1011) =>  true\n      (arrayp \"hi\") =>  true\n      (arrayp 'hi) =>  false\n      (arrayp 12) =>  false\n"
        },
        {
            "type": "See Also",
            "text": "*Note typep::\n"
        },
        {
            "type": "Notes",
            "text": "      (arrayp object) == (typep object 'array)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: arrayp,  Next: fill-pointer,  Prev: array-total-size,  Up: Arrays Dictionary\n\narrayp                                                           [Function]\n---------------------------------------------------------------------------\n\n`arrayp'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type array; otherwise, returns false.\n\nExamples::\n..........\n\n      (arrayp (make-array '(2 3 4) :adjustable t)) =>  true\n      (arrayp (make-array 6)) =>  true\n      (arrayp #*1011) =>  true\n      (arrayp \"hi\") =>  true\n      (arrayp 'hi) =>  false\n      (arrayp 12) =>  false\n\nSee Also::\n..........\n\n*Note typep::\n\nNotes::\n.......\n\n      (arrayp object) == (typep object 'array)\n\n"
}