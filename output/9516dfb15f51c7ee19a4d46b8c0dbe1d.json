{
    "name": "append",
    "prev": "nconc",
    "next": "revappend",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "append"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "append",
                    "text": " &rest lists =>  result\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "each must be a proper list except the last, which may be any object."
                },
                {
                    "name": "result",
                    "desc": "an object.  This will be a list unless the last list was not a list"
                }
            ]
        },
        {
            "type": "Description",
            "text": "append returns a new list that is the concatenation of the copies.  lists\nare left unchanged; the list structure of each of lists except the last is\ncopied.  The last argument is not copied; it becomes the cdr of the final\ndotted pair of the concatenation of the preceding lists, or is returned\ndirectly if there are no preceding non-empty lists.\n"
        },
        {
            "type": "Examples",
            "text": "      (append '(a b c) '(d e f) '() '(g)) =>  (A B C D E F G)\n      (append '(a b c) 'd) =>  (A B C . D)\n      (setq lst '(a b c)) =>  (A B C)\n      (append lst '(d)) =>  (A B C D)\n      lst =>  (A B C)\n      (append) =>  NIL\n      (append 'a) =>  A\n"
        },
        {
            "type": "See Also",
            "text": "*Note nconc:: , *Note concatenate::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: append,  Next: revappend,  Prev: nconc,  Up: Conses Dictionary\n\nappend                                                           [Function]\n---------------------------------------------------------------------------\n\n`append'  &rest lists =>  result\n\nArguments and Values::\n......................\n\nlist--each must be a proper list except the last, which may be any object.\n\nresult--an object.  This will be a list unless the last list was not a list\nand all preceding lists were null.\n\nDescription::\n.............\n\nappend returns a new list that is the concatenation of the copies.  lists\nare left unchanged; the list structure of each of lists except the last is\ncopied.  The last argument is not copied; it becomes the cdr of the final\ndotted pair of the concatenation of the preceding lists, or is returned\ndirectly if there are no preceding non-empty lists.\n\nExamples::\n..........\n\n      (append '(a b c) '(d e f) '() '(g)) =>  (A B C D E F G)\n      (append '(a b c) 'd) =>  (A B C . D)\n      (setq lst '(a b c)) =>  (A B C)\n      (append lst '(d)) =>  (A B C D)\n      lst =>  (A B C)\n      (append) =>  NIL\n      (append 'a) =>  A\n\nSee Also::\n..........\n\n*Note nconc:: , *Note concatenate::\n\n"
}