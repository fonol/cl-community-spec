{
    "name": "The for-as-across subclause",
    "prev": "Examples of for-as-equals-then subclause",
    "next": "Examples of for-as-across subclause",
    "up": "Variable Initialization and Stepping Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The for-as-across subclause",
            "text": "In the for-as-across subclause the for or as construct binds the variable\nvar to the value of each element in the array vector.  The loop keyword\nacross marks the array vector; across is used as a preposition in this\nsyntax.  Iteration stops when there are no more elements in the supplied\narray that can be referenced.  Some implementations might recognize a the\nspecial form in the vector form to produce more efficient code.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The for-as-across subclause,  Next: Examples of for-as-across subclause,  Prev: Examples of for-as-equals-then subclause,  Up: Variable Initialization and Stepping Clauses\n\nThe for-as-across subclause\n...........................\n\nIn the for-as-across subclause the for or as construct binds the variable\nvar to the value of each element in the array vector.  The loop keyword\nacross marks the array vector; across is used as a preposition in this\nsyntax.  Iteration stops when there are no more elements in the supplied\narray that can be referenced.  Some implementations might recognize a the\nspecial form in the vector form to produce more efficient code.\n\n"
}