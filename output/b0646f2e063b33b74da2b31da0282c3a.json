{
    "name": "stream-element-type",
    "prev": "open-stream-p",
    "next": "streamp",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "stream-element-type"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "stream-element-type",
                    "text": " stream =>  typespec\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "stream",
                    "desc": "a stream."
                },
                {
                    "name": "typespec",
                    "desc": "a type specifier."
                }
            ]
        },
        {
            "type": "Description",
            "text": "stream-element-type returns a type specifier that indicates the types of\nobjects that may be read from or written to stream.\nStreams created by open have an element type restricted to integer or a\nsubtype of type character.\n"
        },
        {
            "type": "Examples",
            "text": "     ;; Note that the stream must accomodate at least the specified type,\n     ;; but might accomodate other types.  Further note that even if it does\n     ;; accomodate exactly the specified type, the type might be specified in\n     ;; any of several ways.\n      (with-open-file (s \"test\" :element-type '(integer 0 1)\n                                :if-exists :error\n                                :direction :output)\n        (stream-element-type s))\n     =>  INTEGER\n     OR=> (UNSIGNED-BYTE 16)\n     OR=> (UNSIGNED-BYTE 8)\n     OR=> BIT\n     OR=> (UNSIGNED-BYTE 1)\n     OR=> (INTEGER 0 1)\n     OR=> (INTEGER 0 (2))\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if stream is not a stream.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: stream-element-type,  Next: streamp,  Prev: open-stream-p,  Up: Streams Dictionary\n\nstream-element-type                                              [Function]\n---------------------------------------------------------------------------\n\n`stream-element-type'  stream =>  typespec\n\nArguments and Values::\n......................\n\nstream--a stream.\n\ntypespec--a type specifier.\n\nDescription::\n.............\n\nstream-element-type returns a type specifier that indicates the types of\nobjects that may be read from or written to stream.\n\nStreams created by open have an element type restricted to integer or a\nsubtype of type character.\n\nExamples::\n..........\n\n     ;; Note that the stream must accomodate at least the specified type,\n     ;; but might accomodate other types.  Further note that even if it does\n     ;; accomodate exactly the specified type, the type might be specified in\n     ;; any of several ways.\n      (with-open-file (s \"test\" :element-type '(integer 0 1)\n                                :if-exists :error\n                                :direction :output)\n        (stream-element-type s))\n     =>  INTEGER\n     OR=> (UNSIGNED-BYTE 16)\n     OR=> (UNSIGNED-BYTE 8)\n     OR=> BIT\n     OR=> (UNSIGNED-BYTE 1)\n     OR=> (INTEGER 0 1)\n     OR=> (INTEGER 0 (2))\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if stream is not a stream.\n\n"
}