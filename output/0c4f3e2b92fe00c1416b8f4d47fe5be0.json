{
    "name": "Restrictions on Examining a Pathname Directory Component",
    "prev": "Restrictions on Examining a Pathname Device Component",
    "next": "Directory Components in Non-Hierarchical File Systems",
    "up": "Interpreting Pathname Component Values",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Restrictions on Examining a Pathname Directory Component",
            "text": "The directory might be a string, :wild, :unspecific, or nil.\nThe directory can be a list of strings and symbols.\nThe car of the list is one of the symbols :absolute or :relative , meaning:\n:absolute\n     A list whose car is the symbol :absolute represents a directory path\n     starting from the root directory.  The list (:absolute) represents\n     the root directory.  The list (:absolute \"foo\" \"bar\" \"baz\")\n     represents the directory called \"/foo/bar/baz\" in Unix (except\n     possibly for case).\n:relative\n     A list whose car is the symbol :relative represents a directory path\n     starting from a default directory.  The list (:relative) has the same\n     meaning as nil and hence is not used.  The list (:relative \"foo\"\n     \"bar\") represents the directory named \"bar\" in the directory named\n     \"foo\" in the default directory.\nEach remaining element of the list is a string or a symbol.\nEach string names a single level of directory structure.  The strings\nshould contain only the directory names themselves--no punctuation\ncharacters.\nIn place of a string, at any point in the list, symbols can occur to\nindicate special file notations.  Figure 19-3 lists the symbols that have\nstandard meanings.  Implementations are permitted to add additional objects\nof any type that is disjoint from string if necessary to represent\nfeatures of their file systems that cannot be represented with the\nstandard strings and symbols.\nSupplying any non-string, including any of the symbols listed below, to a\nfile system for which it does not make sense signals an error of type\nfile-error.  For example, Unix does not support :wild-inferiors in most\nimplementations.\n  Symbol           Meaning                                             \n  :wild            Wildcard match of one level of directory structure  \n  :wild-inferiors  Wildcard match of any number of directory levels    \n  :up              Go upward in directory structure (semantic)         \n  :back            Go upward in directory structure (syntactic)        \n          Figure 19-3: Special Markers In Directory Component         \nThe following notes apply to the previous figure:\nInvalid Combinations\n     Using :absolute or :wild-inferiors immediately followed by :up or\n     :back signals an error of type file-error.\nSyntactic vs Semantic\n     \"Syntactic\" means that the action of :back depends only on the\n     pathname and not on the contents of the file system.\n     \"Semantic\" means that the action of :up depends on the contents of\n     the file system; to resolve a pathname containing :up to a pathname\n     whose directory component contains only :absolute and strings\n     requires probing the file system.\n     :up differs from :back only in file systems that support multiple\n     names for directories, perhaps via symbolic links.  For example,\n     suppose that there is a directory (:absolute \"X\" \"Y\" \"Z\") linked to\n     (:absolute \"A\" \"B\" \"C\") and there also exist directories (:absolute\n     \"A\" \"B\" \"Q\") and (:absolute \"X\" \"Y\" \"Q\").  Then (:absolute \"X\" \"Y\"\n     \"Z\" :up \"Q\") designates (:absolute \"A\" \"B\" \"Q\") while (:absolute \"X\"\n     \"Y\" \"Z\" :back \"Q\") designates (:absolute \"X\" \"Y\" \"Q\")\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Restrictions on Examining a Pathname Directory Component,  Next: Directory Components in Non-Hierarchical File Systems,  Prev: Restrictions on Examining a Pathname Device Component,  Up: Interpreting Pathname Component Values\n\nRestrictions on Examining a Pathname Directory Component\n........................................................\n\nThe directory might be a string, :wild, :unspecific, or nil.\n\nThe directory can be a list of strings and symbols.\n\nThe car of the list is one of the symbols :absolute or :relative , meaning:\n\n:absolute\n     A list whose car is the symbol :absolute represents a directory path\n     starting from the root directory.  The list (:absolute) represents\n     the root directory.  The list (:absolute \"foo\" \"bar\" \"baz\")\n     represents the directory called \"/foo/bar/baz\" in Unix (except\n     possibly for case).\n\n:relative\n     A list whose car is the symbol :relative represents a directory path\n     starting from a default directory.  The list (:relative) has the same\n     meaning as nil and hence is not used.  The list (:relative \"foo\"\n     \"bar\") represents the directory named \"bar\" in the directory named\n     \"foo\" in the default directory.\n\nEach remaining element of the list is a string or a symbol.\n\nEach string names a single level of directory structure.  The strings\nshould contain only the directory names themselves--no punctuation\ncharacters.\n\nIn place of a string, at any point in the list, symbols can occur to\nindicate special file notations.  Figure 19-3 lists the symbols that have\nstandard meanings.  Implementations are permitted to add additional objects\nof any type that is disjoint from string if necessary to represent\nfeatures of their file systems that cannot be represented with the\nstandard strings and symbols.\n\nSupplying any non-string, including any of the symbols listed below, to a\nfile system for which it does not make sense signals an error of type\nfile-error.  For example, Unix does not support :wild-inferiors in most\nimplementations.\n\n  Symbol           Meaning                                             \n  :wild            Wildcard match of one level of directory structure  \n  :wild-inferiors  Wildcard match of any number of directory levels    \n  :up              Go upward in directory structure (semantic)         \n  :back            Go upward in directory structure (syntactic)        \n\n          Figure 19-3: Special Markers In Directory Component         \n\n\nThe following notes apply to the previous figure:\n\nInvalid Combinations\n     Using :absolute or :wild-inferiors immediately followed by :up or\n     :back signals an error of type file-error.\n\nSyntactic vs Semantic\n     \"Syntactic\" means that the action of :back depends only on the\n     pathname and not on the contents of the file system.\n\n     \"Semantic\" means that the action of :up depends on the contents of\n     the file system; to resolve a pathname containing :up to a pathname\n     whose directory component contains only :absolute and strings\n     requires probing the file system.\n\n     :up differs from :back only in file systems that support multiple\n     names for directories, perhaps via symbolic links.  For example,\n     suppose that there is a directory (:absolute \"X\" \"Y\" \"Z\") linked to\n     (:absolute \"A\" \"B\" \"C\") and there also exist directories (:absolute\n     \"A\" \"B\" \"Q\") and (:absolute \"X\" \"Y\" \"Q\").  Then (:absolute \"X\" \"Y\"\n     \"Z\" :up \"Q\") designates (:absolute \"A\" \"B\" \"Q\") while (:absolute \"X\"\n     \"Y\" \"Z\" :back \"Q\") designates (:absolute \"X\" \"Y\" \"Q\")\n\n"
}