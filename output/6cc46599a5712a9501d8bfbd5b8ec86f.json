{
    "name": "Hash-Table Operations",
    "prev": "Hash Table Concepts",
    "next": "Modifying Hash Table Keys",
    "up": "Hash Table Concepts",
    "header": {
        "type": null,
        "text": "Hash-Table Operations"
    },
    "sections": [
        {
            "type": "",
            "text": "Figure 18-1 lists some defined names that are applicable to hash tables.\nThe following rules apply to hash tables.\n-\n     A hash table can only associate one value with a given key. If an\n     attempt is made to add a second value for a given key, the second\n     value will replace the first.  Thus, adding a value to a hash table\n     is a destructive operation; the hash table is modified.\n-\n     There are four kinds of hash tables: those whose keys are compared\n     with eq, those whose keys are compared with eql, those whose keys are\n     compared with equal, and\n     those whose keys are compared with equalp.\n-\n     Hash tables are created by make-hash-table.  gethash is used to look\n     up a key and find the associated value.  New entries are added to\n     hash tables using setf with gethash.  remhash is used to remove an\n     entry.  For example:\n           (setq a (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32536573>\n           (setf (gethash 'color a) 'brown) =>  BROWN\n           (setf (gethash 'name a) 'fred) =>  FRED\n           (gethash 'color a) =>  BROWN, true\n           (gethash 'name a) =>  FRED, true\n           (gethash 'pointy a) =>  NIL, false\n     In this example, the symbols color and name are being used as keys,\n     and the symbols brown and fred are being used as the associated\n     values.  The hash table has two items in it, one of which associates\n     from color to brown, and the other of which associates from name to\n     fred.\n-\n     A key or a value may be any object.\n-\n     The existence of an entry in the hash table can be determined from\n     the secondary value returned by gethash.\n  clrhash           hash-table-p     remhash  \n  gethash           make-hash-table  sxhash   \n  hash-table-count  maphash                   \n     Figure 18-1: Hash-table defined names   \n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Hash-Table Operations,  Next: Modifying Hash Table Keys,  Prev: Hash Table Concepts,  Up: Hash Table Concepts\n\nHash-Table Operations\n---------------------\n\nFigure 18-1 lists some defined names that are applicable to hash tables.\nThe following rules apply to hash tables.\n\n-\n     A hash table can only associate one value with a given key. If an\n     attempt is made to add a second value for a given key, the second\n     value will replace the first.  Thus, adding a value to a hash table\n     is a destructive operation; the hash table is modified.\n\n-\n     There are four kinds of hash tables: those whose keys are compared\n     with eq, those whose keys are compared with eql, those whose keys are\n     compared with equal, and\n\n     those whose keys are compared with equalp.\n\n-\n     Hash tables are created by make-hash-table.  gethash is used to look\n     up a key and find the associated value.  New entries are added to\n     hash tables using setf with gethash.  remhash is used to remove an\n     entry.  For example:\n\n           (setq a (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32536573>\n           (setf (gethash 'color a) 'brown) =>  BROWN\n           (setf (gethash 'name a) 'fred) =>  FRED\n           (gethash 'color a) =>  BROWN, true\n           (gethash 'name a) =>  FRED, true\n           (gethash 'pointy a) =>  NIL, false\n\n     In this example, the symbols color and name are being used as keys,\n     and the symbols brown and fred are being used as the associated\n     values.  The hash table has two items in it, one of which associates\n     from color to brown, and the other of which associates from name to\n     fred.\n\n-\n     A key or a value may be any object.\n\n-\n     The existence of an entry in the hash table can be determined from\n     the secondary value returned by gethash.\n\n  clrhash           hash-table-p     remhash  \n  gethash           make-hash-table  sxhash   \n  hash-table-count  maphash                   \n\n     Figure 18-1: Hash-table defined names   \n\n\n"
}