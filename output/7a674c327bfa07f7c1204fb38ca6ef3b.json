{
    "name": "quote",
    "prev": "load-time-value",
    "next": "compiler-macro-function",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Special Operator",
        "text": "quote"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "quote",
                    "text": " object =>  object\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object; not evaluated."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The quote special operator just returns object.\nThe consequences are undefined if literal objects (including quoted\nobjects) are destructively modified.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq a 1) =>  1\n      (quote (setq a 3)) =>  (SETQ A 3)\n      a =>  1\n      'a =>  A\n      ''a =>  (QUOTE A)\n      '''a =>  (QUOTE (QUOTE A))\n      (setq a 43) =>  43\n      (list a (cons a 3)) =>  (43 (43 . 3))\n      (list (quote a) (quote (cons a 3))) =>  (A (CONS A 3))\n      1 =>  1\n      '1 =>  1\n      \"foo\" =>  \"foo\"\n      '\"foo\" =>  \"foo\"\n      (car '(a b)) =>  A\n      '(car '(a b)) =>  (CAR (QUOTE (A B)))\n      #(car '(a b)) =>  #(CAR (QUOTE (A B)))\n      '#(car '(a b)) =>  #(CAR (QUOTE (A B)))\n"
        },
        {
            "type": "See Also",
            "text": "*Note Evaluation::, *Note Single-Quote::,\n*Note Compiler Terminology::\n"
        },
        {
            "type": "Notes",
            "text": "The textual notation 'object is equivalent to (quote object); see *Note\nCompiler Terminology::.\nSome objects, called self-evaluating objects, do not require quotation by\nquote.  However, symbols and lists are used to represent parts of programs,\nand so would not be useable as constant data in a program without quote.\nSince quote suppresses the evaluation of these objects, they become data\nrather than program.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: quote,  Next: compiler-macro-function,  Prev: load-time-value,  Up: Evaluation and Compilation Dictionary\n\nquote                                                    [Special Operator]\n---------------------------------------------------------------------------\n\n`quote'  object =>  object\n\nArguments and Values::\n......................\n\nobject--an object; not evaluated.\n\nDescription::\n.............\n\nThe quote special operator just returns object.\n\nThe consequences are undefined if literal objects (including quoted\nobjects) are destructively modified.\n\nExamples::\n..........\n\n      (setq a 1) =>  1\n      (quote (setq a 3)) =>  (SETQ A 3)\n      a =>  1\n      'a =>  A\n      ''a =>  (QUOTE A)\n      '''a =>  (QUOTE (QUOTE A))\n      (setq a 43) =>  43\n      (list a (cons a 3)) =>  (43 (43 . 3))\n      (list (quote a) (quote (cons a 3))) =>  (A (CONS A 3))\n      1 =>  1\n      '1 =>  1\n      \"foo\" =>  \"foo\"\n      '\"foo\" =>  \"foo\"\n      (car '(a b)) =>  A\n      '(car '(a b)) =>  (CAR (QUOTE (A B)))\n      #(car '(a b)) =>  #(CAR (QUOTE (A B)))\n      '#(car '(a b)) =>  #(CAR (QUOTE (A B)))\n\nSee Also::\n..........\n\n*Note Evaluation::, *Note Single-Quote::,\n\n*Note Compiler Terminology::\n\nNotes::\n.......\n\nThe textual notation 'object is equivalent to (quote object); see *Note\nCompiler Terminology::.\n\nSome objects, called self-evaluating objects, do not require quotation by\nquote.  However, symbols and lists are used to represent parts of programs,\nand so would not be useable as constant data in a program without quote.\nSince quote suppresses the evaluation of these objects, they become data\nrather than program.\n\n"
}