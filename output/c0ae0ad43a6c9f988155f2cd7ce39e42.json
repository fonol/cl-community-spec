{
    "name": "shared-initialize",
    "prev": "reinitialize-instance",
    "next": "update-instance-for-different-class",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "shared-initialize"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "shared-initialize",
                    "text": " instance slot-names &rest initargs &key&allow-other-keys =>  instance\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "shared-initialize",
                    "text": " (instance standard-object) slot-names &rest initargs\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "instance",
                    "desc": "an object."
                },
                {
                    "name": "slot-names",
                    "desc": "a list or t."
                },
                {
                    "name": "initargs",
                    "desc": "a list of keyword/value pairs (of initialization argument names"
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function shared-initialize is used to fill the slots of an\ninstance using initargs and :initform forms.  It is called when an\ninstance is created, when an instance is re-initialized, when an instance\nis updated to conform to a redefined class, and when an instance is\nupdated to conform to a different class. The generic function\nshared-initialize is called by the system-supplied primary method for\ninitialize-instance, reinitialize-instance,\nupdate-instance-for-redefined-class, and\nupdate-instance-for-different-class.\nThe generic function shared-initialize takes the following arguments: the\ninstance to be initialized, a specification of a set of slot-names\naccessible in that instance, and any number of initargs.  The arguments\nafter the first two must form an initialization argument list.  The\nsystem-supplied primary method on shared-initialize initializes the slots\nwith values according to the initargs and supplied :initform forms.\nSlot-names indicates which slots should be initialized according to their\n:initform forms if no initargs are provided for those slots.\nThe system-supplied primary method behaves as follows, regardless of\nwhether the slots are local or shared:\n*\n     If an initarg in the initialization argument list specifies a value\n     for that slot, that value is stored into the slot, even if a value has\n     already been stored in the slot before the method is run.\n*\n     Any slots indicated by slot-names that are still unbound at this\n     point are initialized according to their :initform forms.  For any\n     such slot that has an :initform form, that form is evaluated in the\n     lexical environment of its defining defclass form and the result is\n     stored into the slot.  For example, if a before method stores a value\n     in the slot, the :initform form will not be used to supply a value\n     for the slot.\n*\n     The rules mentioned in *Note Rules for Initialization Arguments:: are\n     obeyed.\nThe slots-names argument specifies the slots that are to be initialized\naccording to their :initform forms if no initialization arguments apply.\nIt can be a list of slot names, which specifies the set of those slot\nnames; or it can be the symbol t, which specifies the set of all of the\nslots.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Initialize-Instance:: , *Note reinitialize-instance:: , *Note\nupdate-instance-for-redefined-class:: , *Note\nupdate-instance-for-different-class:: , *Note slot-boundp:: , *Note\nslot-makunbound:: , *Note Object Creation and Initialization::, *Note\nRules for Initialization Arguments::, *Note Declaring the Validity of\nInitialization Arguments::\n"
        },
        {
            "type": "Notes",
            "text": "Initargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for shared-initialize.  The keyword name of each\nkeyword parameter specifier in the lambda list of any method defined on\nshared-initialize is declared as a valid initarg name for all classes for\nwhich that method is applicable.\nImplementations are permitted to optimize :initform forms that neither\nproduce nor depend on side effects, by evaluating these forms and storing\nthem into slots before running any initialize-instance methods, rather\nthan by handling them in the primary initialize-instance method.  (This\noptimization might be implemented by having the allocate-instance method\ncopy a prototype instance.)\nImplementations are permitted to optimize default initial value forms for\ninitargs associated with slots by not actually creating the complete\ninitialization argument list when the only method that would receive the\ncomplete list is the method on standard-object.  In this case default\ninitial value forms can be treated like :initform forms.  This\noptimization has no visible effects other than a performance improvement.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: shared-initialize,  Next: update-instance-for-different-class,  Prev: reinitialize-instance,  Up: Objects Dictionary\n\nshared-initialize                               [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`shared-initialize'  instance slot-names &rest initargs &key\n&allow-other-keys =>  instance\n\nMethod Signatures::\n...................\n\n`shared-initialize'  (instance standard-object) slot-names &rest initargs\n\nArguments and Values::\n......................\n\ninstance--an object.\n\nslot-names--a list or t.\n\ninitargs--a list of keyword/value pairs (of initialization argument names\nand values).\n\nDescription::\n.............\n\nThe generic function shared-initialize is used to fill the slots of an\ninstance using initargs and :initform forms.  It is called when an\ninstance is created, when an instance is re-initialized, when an instance\nis updated to conform to a redefined class, and when an instance is\nupdated to conform to a different class. The generic function\nshared-initialize is called by the system-supplied primary method for\ninitialize-instance, reinitialize-instance,\nupdate-instance-for-redefined-class, and\nupdate-instance-for-different-class.\n\nThe generic function shared-initialize takes the following arguments: the\ninstance to be initialized, a specification of a set of slot-names\naccessible in that instance, and any number of initargs.  The arguments\nafter the first two must form an initialization argument list.  The\nsystem-supplied primary method on shared-initialize initializes the slots\nwith values according to the initargs and supplied :initform forms.\nSlot-names indicates which slots should be initialized according to their\n:initform forms if no initargs are provided for those slots.\n\nThe system-supplied primary method behaves as follows, regardless of\nwhether the slots are local or shared:\n\n*\n     If an initarg in the initialization argument list specifies a value\n     for that slot, that value is stored into the slot, even if a value has\n     already been stored in the slot before the method is run.\n\n*\n     Any slots indicated by slot-names that are still unbound at this\n     point are initialized according to their :initform forms.  For any\n     such slot that has an :initform form, that form is evaluated in the\n     lexical environment of its defining defclass form and the result is\n     stored into the slot.  For example, if a before method stores a value\n     in the slot, the :initform form will not be used to supply a value\n     for the slot.\n\n*\n     The rules mentioned in *Note Rules for Initialization Arguments:: are\n     obeyed.\n\nThe slots-names argument specifies the slots that are to be initialized\naccording to their :initform forms if no initialization arguments apply.\nIt can be a list of slot names, which specifies the set of those slot\nnames; or it can be the symbol t, which specifies the set of all of the\nslots.\n\nSee Also::\n..........\n\n*Note Initialize-Instance:: , *Note reinitialize-instance:: , *Note\nupdate-instance-for-redefined-class:: , *Note\nupdate-instance-for-different-class:: , *Note slot-boundp:: , *Note\nslot-makunbound:: , *Note Object Creation and Initialization::, *Note\nRules for Initialization Arguments::, *Note Declaring the Validity of\nInitialization Arguments::\n\nNotes::\n.......\n\nInitargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for shared-initialize.  The keyword name of each\nkeyword parameter specifier in the lambda list of any method defined on\nshared-initialize is declared as a valid initarg name for all classes for\nwhich that method is applicable.\n\nImplementations are permitted to optimize :initform forms that neither\nproduce nor depend on side effects, by evaluating these forms and storing\nthem into slots before running any initialize-instance methods, rather\nthan by handling them in the primary initialize-instance method.  (This\noptimization might be implemented by having the allocate-instance method\ncopy a prototype instance.)\n\nImplementations are permitted to optimize default initial value forms for\ninitargs associated with slots by not actually creating the complete\ninitialization argument list when the only method that would receive the\ncomplete list is the method on standard-object.  In this case default\ninitial value forms can be treated like :initform forms.  This\noptimization has no visible effects other than a performance improvement.\n\n"
}