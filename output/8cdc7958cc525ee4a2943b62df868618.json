{
    "name": "streamp",
    "prev": "stream-element-type",
    "next": "read-byte",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "streamp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "streamp",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type stream; otherwise, returns false.\nstreamp is unaffected by whether object, if it is a stream, is open or\nclosed.\n"
        },
        {
            "type": "Examples",
            "text": "      (streamp *terminal-io*) =>  true\n      (streamp 1) =>  false\n"
        },
        {
            "type": "Notes",
            "text": "      (streamp object) == (typep object 'stream)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: streamp,  Next: read-byte,  Prev: stream-element-type,  Up: Streams Dictionary\n\nstreamp                                                          [Function]\n---------------------------------------------------------------------------\n\n`streamp'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type stream; otherwise, returns false.\n\nstreamp is unaffected by whether object, if it is a stream, is open or\nclosed.\n\nExamples::\n..........\n\n      (streamp *terminal-io*) =>  true\n      (streamp 1) =>  false\n\nNotes::\n.......\n\n      (streamp object) == (typep object 'stream)\n\n"
}