{
    "name": "boundp",
    "prev": "remprop",
    "next": "makunbound",
    "up": "Symbols Dictionary",
    "header": {
        "type": "Function",
        "text": "boundp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "boundp",
                    "text": " symbol =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbol",
                    "desc": "a symbol."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if symbol is bound; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq x 1) =>  1\n      (boundp 'x) =>  true\n      (makunbound 'x) =>  X\n      (boundp 'x) =>  false\n      (let ((x 2)) (boundp 'x)) =>  false\n      (let ((x 2)) (declare (special x)) (boundp 'x)) =>  true\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if symbol is not a symbol.\n"
        },
        {
            "type": "See Also",
            "text": "*Note set:: , *Note setq:: , *Note symbol-value:: , *Note makunbound::\n"
        },
        {
            "type": "Notes",
            "text": "The function bound determines only whether a symbol has a value in the\nglobal environment; any lexical bindings are ignored.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: boundp,  Next: makunbound,  Prev: remprop,  Up: Symbols Dictionary\n\nboundp                                                           [Function]\n---------------------------------------------------------------------------\n\n`boundp'  symbol =>  generalized-boolean\n\nArguments and Values::\n......................\n\nsymbol--a symbol.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if symbol is bound; otherwise, returns false.\n\nExamples::\n..........\n\n      (setq x 1) =>  1\n      (boundp 'x) =>  true\n      (makunbound 'x) =>  X\n      (boundp 'x) =>  false\n      (let ((x 2)) (boundp 'x)) =>  false\n      (let ((x 2)) (declare (special x)) (boundp 'x)) =>  true\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if symbol is not a symbol.\n\nSee Also::\n..........\n\n*Note set:: , *Note setq:: , *Note symbol-value:: , *Note makunbound::\n\nNotes::\n.......\n\nThe function bound determines only whether a symbol has a value in the\nglobal environment; any lexical bindings are ignored.\n\n"
}