{
    "name": "Syntax of a Float",
    "prev": "Syntax of a Ratio",
    "next": "Syntax of a Complex",
    "up": "Constructing Numbers from Tokens",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax of a Float",
            "text": "Floats can be written in either decimal fraction or computerized\nscientific notation: an optional sign, then a non-empty sequence of digits\nwith an embedded decimal point, then an optional decimal exponent\nspecification.  If there is no exponent specifier, then the decimal point\nis required, and there must be digits after it.  The exponent specifier\nconsists of an exponent marker, an optional sign, and a non-empty sequence\nof digits.  If no exponent specifier is present, or if the exponent marker\ne (or E) is used, then the format specified by *read-default-float-format*\nis used.  See Figure~2-9.\nAn implementation may provide one or more kinds of float that collectively\nmake up the type float.  The letters s, f, d, and l (or their respective\nuppercase equivalents) explicitly specify the use of the types\nshort-float, single-float, double-float, and long-float, respectively.\nThe internal format used for an external representation depends only on\nthe exponent marker, and not on the number of decimal digits in the\nexternal representation.\nFigure 2-14 contains examples of notations for floats:\n  0.0       ;Floating-point zero in default format                          \n  0E0       ;As input, this is also floating-point zero in default format.  \n            ;As output, this would appear as 0.0.                           \n  0e0       ;As input, this is also floating-point zero in default format.  \n            ;As output, this would appear as 0.0.                           \n  -.0       ;As input, this might be a zero or a minus zero,                \n            ; depending on whether the implementation supports              \n            ; a distinct minus zero.                                        \n            ;As output, 0.0 is zero and -0.0 is minus zero.                 \n  0.        ;On input, the integer zero--not a floating-point number!      \n            ;Whether this appears as 0 or 0. on output depends              \n            ;on the value of *print-radix*.                                 \n  0.0s0     ;A floating-point zero in short format                          \n  0s0       ;As input, this is a floating-point zero in short format.       \n            ;As output, such a zero would appear as 0.0s0                   \n            ; (or as 0.0 if short-float was the default format).            \n  6.02E+23  ;Avogadro's number, in default format                           \n  602E+21   ;Also Avogadro's number, in default format                      \n               Figure 2-14: Examples of Floating-point numbers             \nFor information on how floats are printed, see *Note Printing Floats::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Syntax of a Float,  Next: Syntax of a Complex,  Prev: Syntax of a Ratio,  Up: Constructing Numbers from Tokens\n\nSyntax of a Float\n.................\n\nFloats can be written in either decimal fraction or computerized\nscientific notation: an optional sign, then a non-empty sequence of digits\nwith an embedded decimal point, then an optional decimal exponent\nspecification.  If there is no exponent specifier, then the decimal point\nis required, and there must be digits after it.  The exponent specifier\nconsists of an exponent marker, an optional sign, and a non-empty sequence\nof digits.  If no exponent specifier is present, or if the exponent marker\ne (or E) is used, then the format specified by *read-default-float-format*\nis used.  See Figure~2-9.\n\nAn implementation may provide one or more kinds of float that collectively\nmake up the type float.  The letters s, f, d, and l (or their respective\nuppercase equivalents) explicitly specify the use of the types\nshort-float, single-float, double-float, and long-float, respectively.\n\nThe internal format used for an external representation depends only on\nthe exponent marker, and not on the number of decimal digits in the\nexternal representation.\n\nFigure 2-14 contains examples of notations for floats:\n\n  0.0       ;Floating-point zero in default format                          \n  0E0       ;As input, this is also floating-point zero in default format.  \n            ;As output, this would appear as 0.0.                           \n  0e0       ;As input, this is also floating-point zero in default format.  \n            ;As output, this would appear as 0.0.                           \n  -.0       ;As input, this might be a zero or a minus zero,                \n            ; depending on whether the implementation supports              \n            ; a distinct minus zero.                                        \n            ;As output, 0.0 is zero and -0.0 is minus zero.                 \n  0.        ;On input, the integer zero--not a floating-point number!      \n            ;Whether this appears as 0 or 0. on output depends              \n            ;on the value of *print-radix*.                                 \n  0.0s0     ;A floating-point zero in short format                          \n  0s0       ;As input, this is a floating-point zero in short format.       \n            ;As output, such a zero would appear as 0.0s0                   \n            ; (or as 0.0 if short-float was the default format).            \n  6.02E+23  ;Avogadro's number, in default format                           \n  602E+21   ;Also Avogadro's number, in default format                      \n\n               Figure 2-14: Examples of Floating-point numbers             \n\n\nFor information on how floats are printed, see *Note Printing Floats::.\n\n"
}