{
    "name": "pprint-pop",
    "prev": "pprint-newline",
    "next": "pprint-tab",
    "up": "Printer Dictionary",
    "header": {
        "type": "Local Macro",
        "text": "pprint-pop"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "pprint-pop",
                    "text": " <no arguments> =>  object\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an element of the list being printed in the lexically current"
                }
            ]
        },
        {
            "type": "Description",
            "text": "Pops one element from the list being printed in the lexically current\nlogical block, obeying *print-length* and *print-circle* as described\nbelow.\nEach time pprint-pop is called, it pops the next value off the list passed\nto the lexically current logical block and returns it.  However, before\ndoing this, it performs three tests:\n*\n     If the remaining `list' is not a list, ``. \" is printed followed by\n     the remaining `list.' (This makes it easier to write printing\n     functions that are robust in the face of malformed arguments.)\n*\n     If *print-length* is non-nil, and pprint-pop has already been called\n     *print-length* times within the immediately containing logical block,\n     ``...\" is printed.  (This makes it easy to write printing functions\n     that properly handle *print-length*.)\n*\n     If *print-circle* is non-nil, and the remaining list is a circular\n     (or shared) reference, then \". \" is printed followed by an appropriate\n     ``#n#\" marker.  (This catches instances of cdr circularity and\n     sharing in lists.)\nIf either of the three conditions above occurs, the indicated output is\nprinted on the pretty printing stream created by the immediately containing\npprint-logical-block and the execution of the immediately containing\npprint-logical-block is terminated except for the printing of the suffix.\nIf pprint-logical-block is given a `list' argument of nil--because it is\nnot processing a list--pprint-pop can still be used to obtain support for\n*print-length*.  In this situation, the first and third tests above are\ndisabled and pprint-pop always returns nil.  See *Note Examples of using\nthe Pretty Printer::--specifically, the pprint-vector example.\nWhether or not pprint-pop is fbound in the global environment is\nimplementation-dependent; however, the restrictions on redefinition and\nshadowing of pprint-pop are the same as for symbols in the COMMON-LISP\npackage which are fbound in the global environment.  The consequences of\nattempting to use pprint-pop outside of pprint-logical-block are undefined.\n"
        },
        {
            "type": "Side Effects",
            "text": "Might cause output to the pretty printing stream associated with the\nlexically current logical block.\n"
        },
        {
            "type": "Affected By",
            "text": "*print-length*, *print-circle*.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "An error is signaled (either at macro expansion time or at run time) if a\nusage of pprint-pop occurs where there is no lexically containing\npprint-logical-block form.\nThe consequences are undefined if pprint-pop is executed outside of the\ndynamic extent of this pprint-logical-block.\n"
        },
        {
            "type": "See Also",
            "text": "*Note pprint-exit-if-list-exhausted:: , *Note pprint-logical-block:: .\n"
        },
        {
            "type": "Notes",
            "text": "It is frequently a good idea to call pprint-exit-if-list-exhausted before\ncalling pprint-pop.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: pprint-pop,  Next: pprint-tab,  Prev: pprint-newline,  Up: Printer Dictionary\n\npprint-pop                                                    [Local Macro]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`pprint-pop'  <no arguments> =>  object\n\nArguments and Values::\n......................\n\nobject--an element of the list being printed in the lexically current\nlogical block, or nil.\n\nDescription::\n.............\n\nPops one element from the list being printed in the lexically current\nlogical block, obeying *print-length* and *print-circle* as described\nbelow.\n\nEach time pprint-pop is called, it pops the next value off the list passed\nto the lexically current logical block and returns it.  However, before\ndoing this, it performs three tests:\n\n*\n     If the remaining `list' is not a list, ``. \" is printed followed by\n     the remaining `list.' (This makes it easier to write printing\n     functions that are robust in the face of malformed arguments.)\n\n*\n     If *print-length* is non-nil, and pprint-pop has already been called\n     *print-length* times within the immediately containing logical block,\n     ``...\" is printed.  (This makes it easy to write printing functions\n     that properly handle *print-length*.)\n\n*\n     If *print-circle* is non-nil, and the remaining list is a circular\n     (or shared) reference, then \". \" is printed followed by an appropriate\n     ``#n#\" marker.  (This catches instances of cdr circularity and\n     sharing in lists.)\n\nIf either of the three conditions above occurs, the indicated output is\nprinted on the pretty printing stream created by the immediately containing\npprint-logical-block and the execution of the immediately containing\npprint-logical-block is terminated except for the printing of the suffix.\n\nIf pprint-logical-block is given a `list' argument of nil--because it is\nnot processing a list--pprint-pop can still be used to obtain support for\n*print-length*.  In this situation, the first and third tests above are\ndisabled and pprint-pop always returns nil.  See *Note Examples of using\nthe Pretty Printer::--specifically, the pprint-vector example.\n\nWhether or not pprint-pop is fbound in the global environment is\nimplementation-dependent; however, the restrictions on redefinition and\nshadowing of pprint-pop are the same as for symbols in the COMMON-LISP\npackage which are fbound in the global environment.  The consequences of\nattempting to use pprint-pop outside of pprint-logical-block are undefined.\n\nSide Effects::\n..............\n\nMight cause output to the pretty printing stream associated with the\nlexically current logical block.\n\nAffected By::\n.............\n\n*print-length*, *print-circle*.\n\nExceptional Situations::\n........................\n\nAn error is signaled (either at macro expansion time or at run time) if a\nusage of pprint-pop occurs where there is no lexically containing\npprint-logical-block form.\n\nThe consequences are undefined if pprint-pop is executed outside of the\ndynamic extent of this pprint-logical-block.\n\nSee Also::\n..........\n\n*Note pprint-exit-if-list-exhausted:: , *Note pprint-logical-block:: .\n\nNotes::\n.......\n\nIt is frequently a good idea to call pprint-exit-if-list-exhausted before\ncalling pprint-pop.\n\n"
}