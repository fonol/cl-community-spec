{
    "name": "Decoded Time",
    "prev": "Time",
    "next": "Universal Time",
    "up": "Time",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Decoded Time",
            "text": "A decoded time is an ordered series of nine values that, taken together,\nrepresent a point in calendar time (ignoring leap seconds):\nSecond\n     An integer between 0 and~59, inclusive.\nMinute\n     An integer between 0 and~59, inclusive.\nHour\n     An integer between 0 and~23, inclusive.\nDate\n     An integer between 1 and~31, inclusive (the upper limit actually\n     depends on the month and year, of course).\nMonth\n     An integer between 1 and 12, inclusive; 1~means January, 2~means\n     February, and so on; 12~means December.\nYear\n     An integer indicating the year A.D.  However, if this integer is\n     between 0 and 99, the \"obvious\" year is used; more precisely, that\n     year is assumed that is equal to the integer modulo 100 and within\n     fifty years of the current year (inclusive backwards and exclusive\n     forwards).  Thus, in the year 1978, year 28 is 1928 but year 27 is\n     2027.  (Functions that return time in this format always return a\n     full year number.)\nDay of week\n     An integer between~0 and~6, inclusive; 0~means Monday, 1~means\n     Tuesday, and so on; 6~means Sunday.\nDaylight saving time flag\n     A generalized boolean that, if true, indicates that daylight saving\n     time is in effect.\nTime zone\n     A time zone.\nFigure 25-5 shows defined names relating to decoded time.\n  decode-universal-time  get-decoded-time  \n  Figure 25-5: Defined names involving time in Decoded Time.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Decoded Time,  Next: Universal Time,  Prev: Time,  Up: Time\n\nDecoded Time\n............\n\nA decoded time is an ordered series of nine values that, taken together,\nrepresent a point in calendar time (ignoring leap seconds):\n\nSecond\n     An integer between 0 and~59, inclusive.\n\nMinute\n     An integer between 0 and~59, inclusive.\n\nHour\n     An integer between 0 and~23, inclusive.\n\nDate\n     An integer between 1 and~31, inclusive (the upper limit actually\n     depends on the month and year, of course).\n\nMonth\n     An integer between 1 and 12, inclusive; 1~means January, 2~means\n     February, and so on; 12~means December.\n\nYear\n     An integer indicating the year A.D.  However, if this integer is\n     between 0 and 99, the \"obvious\" year is used; more precisely, that\n     year is assumed that is equal to the integer modulo 100 and within\n     fifty years of the current year (inclusive backwards and exclusive\n     forwards).  Thus, in the year 1978, year 28 is 1928 but year 27 is\n     2027.  (Functions that return time in this format always return a\n     full year number.)\n\nDay of week\n     An integer between~0 and~6, inclusive; 0~means Monday, 1~means\n     Tuesday, and so on; 6~means Sunday.\n\nDaylight saving time flag\n     A generalized boolean that, if true, indicates that daylight saving\n     time is in effect.\n\nTime zone\n     A time zone.\n\nFigure 25-5 shows defined names relating to decoded time.\n\n  decode-universal-time  get-decoded-time  \n\n  Figure 25-5: Defined names involving time in Decoded Time.\n\n\n"
}