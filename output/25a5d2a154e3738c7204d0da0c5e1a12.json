{
    "name": "*print-escape*",
    "prev": "*print-circle*",
    "next": "*print-gensym*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Variable",
        "text": "*print-escape*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a generalized boolean.\n"
        },
        {
            "type": "Initial Value",
            "text": "true.\n"
        },
        {
            "type": "Description",
            "text": "If false, escape characters and package prefixes are not output when an\nexpression is printed.\nIf true, an attempt is made to print an expression in such a way that it\ncan be read again to produce an equal expression.  (This is only a\nguideline; not a requirement.  See *print-readably*.)\nFor more specific details of how the value of *print-escape* affects the\nprinting of certain types, see *Note Default Print-Object Methods::.\n"
        },
        {
            "type": "Examples",
            "text": "      (let ((*print-escape* t)) (write #\\a))\n      |>  #\\a\n     =>  #\\a\n      (let ((*print-escape* nil)) (write #\\a))\n      |>  a\n     =>  #\\a\n"
        },
        {
            "type": "Affected By",
            "text": "princ, prin1, format\n"
        },
        {
            "type": "See Also",
            "text": "*Note write; prin1; print; pprint; princ:: , *Note readtable-case::\n"
        },
        {
            "type": "Notes",
            "text": "princ effectively binds *print-escape* to false.  prin1 effectively binds\n*print-escape* to true.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *print-escape*,  Next: *print-gensym*,  Prev: *print-circle*,  Up: Printer Dictionary\n\n*print-escape*                                                   [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na generalized boolean.\n\nInitial Value::\n...............\n\ntrue.\n\nDescription::\n.............\n\nIf false, escape characters and package prefixes are not output when an\nexpression is printed.\n\nIf true, an attempt is made to print an expression in such a way that it\ncan be read again to produce an equal expression.  (This is only a\nguideline; not a requirement.  See *print-readably*.)\n\nFor more specific details of how the value of *print-escape* affects the\nprinting of certain types, see *Note Default Print-Object Methods::.\n\nExamples::\n..........\n\n      (let ((*print-escape* t)) (write #\\a))\n      |>  #\\a\n     =>  #\\a\n      (let ((*print-escape* nil)) (write #\\a))\n      |>  a\n     =>  #\\a\n\nAffected By::\n.............\n\nprinc, prin1, format\n\nSee Also::\n..........\n\n*Note write; prin1; print; pprint; princ:: , *Note readtable-case::\n\nNotes::\n.......\n\nprinc effectively binds *print-escape* to false.  prin1 effectively binds\n*print-escape* to true.\n\n"
}