{
    "name": "tree-equal",
    "prev": "subst",
    "next": "copy-list",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "tree-equal"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "tree-equal",
                    "text": " tree-1 tree-2 &key test test-not =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "tree-1",
                    "desc": "a tree."
                },
                {
                    "name": "tree-2",
                    "desc": "a tree."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "tree-equal tests whether two trees are of the same shape and have the same\nleaves.  tree-equal returns true if tree-1 and tree-2  are both atoms and\nsatisfy the test, or if they are both conses and the car of tree-1 is\ntree-equal to the car of tree-2 and the cdr of tree-1 is tree-equal to the\ncdr of tree-2.  Otherwise, tree-equal returns false.\ntree-equal recursively compares conses but not any other objects that have\ncomponents.\nThe first argument to the :test or :test-not function is tree-1 or a car\nor cdr of tree-1; the second argument is tree-2 or a car or cdr of tree-2.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq tree1 '(1 (1 2))\n            tree2 '(1 (1 2))) =>  (1 (1 2))\n      (tree-equal tree1 tree2) =>  true\n      (eql tree1 tree2) =>  false\n      (setq tree1 '('a ('b 'c))\n            tree2 '('a ('b 'c))) =>  ('a ('b 'c))\n     =>  ((QUOTE A) ((QUOTE B) (QUOTE C)))\n      (tree-equal tree1 tree2 :test 'eq) =>  true\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if both tree-1 and tree-2 are circular.\n"
        },
        {
            "type": "See Also",
            "text": "*Note equal:: ,\n*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not parameter is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: tree-equal,  Next: copy-list,  Prev: subst,  Up: Conses Dictionary\n\ntree-equal                                                       [Function]\n---------------------------------------------------------------------------\n\n`tree-equal'  tree-1 tree-2 &key test test-not =>  generalized-boolean\n\nArguments and Values::\n......................\n\ntree-1--a tree.\n\ntree-2--a tree.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\ntree-equal tests whether two trees are of the same shape and have the same\nleaves.  tree-equal returns true if tree-1 and tree-2  are both atoms and\nsatisfy the test, or if they are both conses and the car of tree-1 is\ntree-equal to the car of tree-2 and the cdr of tree-1 is tree-equal to the\ncdr of tree-2.  Otherwise, tree-equal returns false.\n\ntree-equal recursively compares conses but not any other objects that have\ncomponents.\n\nThe first argument to the :test or :test-not function is tree-1 or a car\nor cdr of tree-1; the second argument is tree-2 or a car or cdr of tree-2.\n\nExamples::\n..........\n\n      (setq tree1 '(1 (1 2))\n            tree2 '(1 (1 2))) =>  (1 (1 2))\n      (tree-equal tree1 tree2) =>  true\n      (eql tree1 tree2) =>  false\n      (setq tree1 '('a ('b 'c))\n            tree2 '('a ('b 'c))) =>  ('a ('b 'c))\n     =>  ((QUOTE A) ((QUOTE B) (QUOTE C)))\n      (tree-equal tree1 tree2 :test 'eq) =>  true\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if both tree-1 and tree-2 are circular.\n\nSee Also::\n..........\n\n*Note equal:: ,\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not parameter is deprecated.\n\n"
}