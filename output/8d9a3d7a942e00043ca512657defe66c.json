{
    "name": "Initialization Arguments",
    "prev": "Object Creation and Initialization",
    "next": "Declaring the Validity of Initialization Arguments",
    "up": "Object Creation and Initialization",
    "header": {
        "type": null,
        "text": "Initialization Arguments"
    },
    "sections": [
        {
            "type": "",
            "text": "An initialization argument controls object creation and initialization.\nIt is often convenient to use keyword symbols to name initialization\narguments, but the name of an initialization argument can be any symbol,\nincluding nil.  An initialization argument can be used in two ways: to\nfill a slot with a value or to provide an argument for an initialization\nmethod.  A single initialization argument can be used for both purposes.\nAn initialization argument list is a property list of initialization\nargument names and values.  Its structure is identical to a property list\nand also to the portion of an argument list processed for &key parameters.\nAs in those lists, if an initialization argument name appears more than\nonce in an initialization argument list, the leftmost occurrence supplies\nthe value and the remaining occurrences are ignored.  The arguments to\nmake-instance (after the first argument) form an initialization argument\nlist.\nAn initialization argument can be associated with a slot.  If the\ninitialization argument has a value in the initialization argument list,\nthe value is stored into the slot of the newly created object, overriding\nany :initform form associated with the slot.  A single initialization\nargument can initialize more than one slot.  An initialization argument\nthat initializes a shared slot stores its value into the shared slot,\nreplacing any previous value.\nAn initialization argument can be associated with a method.  When an\nobject is created and a particular initialization argument is supplied,\nthe generic functions initialize-instance, shared-initialize, and\nallocate-instance are called with that initialization argument's name and\nvalue as a keyword argument pair.  If a value for the initialization\nargument is not supplied in the initialization argument list, the method's\nlambda list supplies a default value.\nInitialization arguments are used in four situations: when making an\ninstance, when re-initializing an instance, when updating an instance to\nconform to a redefined class, and when updating an instance to conform to\nthe definition of a different class.\nBecause initialization arguments are used to control the creation and\ninitialization of an instance of some particular class, we say that an\ninitialization argument is \"an initialization argument for\" that class.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Initialization Arguments,  Next: Declaring the Validity of Initialization Arguments,  Prev: Object Creation and Initialization,  Up: Object Creation and Initialization\n\nInitialization Arguments\n------------------------\n\nAn initialization argument controls object creation and initialization.\nIt is often convenient to use keyword symbols to name initialization\narguments, but the name of an initialization argument can be any symbol,\nincluding nil.  An initialization argument can be used in two ways: to\nfill a slot with a value or to provide an argument for an initialization\nmethod.  A single initialization argument can be used for both purposes.\n\nAn initialization argument list is a property list of initialization\nargument names and values.  Its structure is identical to a property list\nand also to the portion of an argument list processed for &key parameters.\nAs in those lists, if an initialization argument name appears more than\nonce in an initialization argument list, the leftmost occurrence supplies\nthe value and the remaining occurrences are ignored.  The arguments to\nmake-instance (after the first argument) form an initialization argument\nlist.\n\nAn initialization argument can be associated with a slot.  If the\ninitialization argument has a value in the initialization argument list,\nthe value is stored into the slot of the newly created object, overriding\nany :initform form associated with the slot.  A single initialization\nargument can initialize more than one slot.  An initialization argument\nthat initializes a shared slot stores its value into the shared slot,\nreplacing any previous value.\n\nAn initialization argument can be associated with a method.  When an\nobject is created and a particular initialization argument is supplied,\nthe generic functions initialize-instance, shared-initialize, and\nallocate-instance are called with that initialization argument's name and\nvalue as a keyword argument pair.  If a value for the initialization\nargument is not supplied in the initialization argument list, the method's\nlambda list supplies a default value.\n\nInitialization arguments are used in four situations: when making an\ninstance, when re-initializing an instance, when updating an instance to\nconform to a redefined class, and when updating an instance to conform to\nthe definition of a different class.\n\nBecause initialization arguments are used to control the creation and\ninitialization of an instance of some particular class, we say that an\ninitialization argument is \"an initialization argument for\" that class.\n\n"
}