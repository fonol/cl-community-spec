{
    "name": "digit-char-p",
    "prev": "digit-char",
    "next": "graphic-char-p",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "digit-char-p"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "digit-char-p",
                    "text": " char &optional radix =>  weight\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "char",
                    "desc": "a character."
                },
                {
                    "name": "radix",
                    "desc": "a radix.  The default is 10."
                },
                {
                    "name": "weight",
                    "desc": "either a non-negative integer less than radix, or false."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Tests whether char is a digit in the specified radix (i.e., with a weight\nless than radix).  If it is a digit in that radix, its weight is returned\nas an integer; otherwise nil is returned.\n"
        },
        {
            "type": "Examples",
            "text": "      (digit-char-p #\\5)    =>  5\n      (digit-char-p #\\5 2)  =>  false\n      (digit-char-p #\\A)    =>  false\n      (digit-char-p #\\a)    =>  false\n      (digit-char-p #\\A 11) =>  10\n      (digit-char-p #\\a 11) =>  10\n      (mapcar #'(lambda (radix)\n                  (map 'list #'(lambda (x) (digit-char-p x radix))\n                       \"059AaFGZ\"))\n              '(2 8 10 16 36))\n      =>  ((0 NIL NIL NIL NIL NIL NIL NIL)\n          (0 5 NIL NIL NIL NIL NIL NIL)\n          (0 5 9 NIL NIL NIL NIL NIL)\n          (0 5 9 10 10 15 NIL NIL)\n          (0 5 9 10 10 15 16 35))\n"
        },
        {
            "type": "Affected By",
            "text": "None.  (In particular, the results of this predicate are independent of\nany special syntax which might have been enabled in the current readtable.)\n"
        },
        {
            "type": "See Also",
            "text": "*Note alphanumericp::\n"
        },
        {
            "type": "Notes",
            "text": "Digits are graphic characters.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: digit-char-p,  Next: graphic-char-p,  Prev: digit-char,  Up: Characters Dictionary\n\ndigit-char-p                                                     [Function]\n---------------------------------------------------------------------------\n\n`digit-char-p'  char &optional radix =>  weight\n\nArguments and Values::\n......................\n\nchar--a character.\n\nradix--a radix.  The default is 10.\n\nweight--either a non-negative integer less than radix, or false.\n\nDescription::\n.............\n\nTests whether char is a digit in the specified radix (i.e., with a weight\nless than radix).  If it is a digit in that radix, its weight is returned\nas an integer; otherwise nil is returned.\n\nExamples::\n..........\n\n      (digit-char-p #\\5)    =>  5\n      (digit-char-p #\\5 2)  =>  false\n      (digit-char-p #\\A)    =>  false\n      (digit-char-p #\\a)    =>  false\n      (digit-char-p #\\A 11) =>  10\n      (digit-char-p #\\a 11) =>  10\n      (mapcar #'(lambda (radix)\n                  (map 'list #'(lambda (x) (digit-char-p x radix))\n                       \"059AaFGZ\"))\n              '(2 8 10 16 36))\n      =>  ((0 NIL NIL NIL NIL NIL NIL NIL)\n          (0 5 NIL NIL NIL NIL NIL NIL)\n          (0 5 9 NIL NIL NIL NIL NIL)\n          (0 5 9 10 10 15 NIL NIL)\n          (0 5 9 10 10 15 16 35))\n\nAffected By::\n.............\n\nNone.  (In particular, the results of this predicate are independent of\nany special syntax which might have been enabled in the current readtable.)\n\nSee Also::\n..........\n\n*Note alphanumericp::\n\nNotes::\n.......\n\nDigits are graphic characters.\n\n"
}