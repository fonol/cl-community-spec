{
    "name": "Congruent Lambda-lists for all Methods of a Generic Function",
    "prev": "Agreement on Parameter Specializers and Qualifiers",
    "next": "Keyword Arguments in Generic Functions and Methods",
    "up": "Generic Functions and Methods",
    "header": {
        "type": null,
        "text": "Congruent Lambda-lists for all Methods of a Generic Function"
    },
    "sections": [
        {
            "type": "",
            "text": "These rules define the congruence of a set of lambda lists, including the\nlambda list of each method for a given generic function and the lambda\nlist specified for the generic function itself, if given.\n1.\n     Each lambda list must have the same number of required parameters.\n2.\n     Each lambda list must have the same number of optional parameters.\n     Each method can supply its own default for an optional parameter.\n3.\n     If any lambda list mentions &rest or &key, each lambda list must\n     mention one or both of them.\n4.\n     If the generic function lambda list mentions &key, each method must\n     accept all of the keyword names mentioned after &key, either by\n     accepting them explicitly, by specifying &allow-other-keys, or by\n     specifying &rest but not &key.  Each method can accept additional\n     keyword arguments of its own.  The checking of the validity of\n     keyword names is done in the generic function, not in each method.  A\n     method is invoked as if the keyword argument pair whose name is\n     :allow-other-keys and whose value is true were supplied, though no\n     such argument pair will be passed.\n5.\n     The use of &allow-other-keys need not be consistent across lambda\n     lists.  If &allow-other-keys is mentioned in the lambda list of any\n     applicable method or of the generic function, any keyword arguments\n     may be mentioned in the call to the generic function.\n6.\n     The use of &aux need not be consistent across methods.\n     If a method-defining operator that cannot specify generic function\n     options creates a generic function, and if the lambda list for the\n     method mentions keyword arguments, the lambda list of the generic\n     function will mention &key (but no keyword arguments).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Congruent Lambda-lists for all Methods of a Generic Function,  Next: Keyword Arguments in Generic Functions and Methods,  Prev: Agreement on Parameter Specializers and Qualifiers,  Up: Generic Functions and Methods\n\nCongruent Lambda-lists for all Methods of a Generic Function\n------------------------------------------------------------\n\nThese rules define the congruence of a set of lambda lists, including the\nlambda list of each method for a given generic function and the lambda\nlist specified for the generic function itself, if given.\n\n1.\n     Each lambda list must have the same number of required parameters.\n\n2.\n     Each lambda list must have the same number of optional parameters.\n     Each method can supply its own default for an optional parameter.\n\n3.\n     If any lambda list mentions &rest or &key, each lambda list must\n     mention one or both of them.\n\n4.\n     If the generic function lambda list mentions &key, each method must\n     accept all of the keyword names mentioned after &key, either by\n     accepting them explicitly, by specifying &allow-other-keys, or by\n     specifying &rest but not &key.  Each method can accept additional\n     keyword arguments of its own.  The checking of the validity of\n     keyword names is done in the generic function, not in each method.  A\n     method is invoked as if the keyword argument pair whose name is\n     :allow-other-keys and whose value is true were supplied, though no\n     such argument pair will be passed.\n\n5.\n     The use of &allow-other-keys need not be consistent across lambda\n     lists.  If &allow-other-keys is mentioned in the lambda list of any\n     applicable method or of the generic function, any keyword arguments\n     may be mentioned in the call to the generic function.\n\n6.\n     The use of &aux need not be consistent across methods.\n\n     If a method-defining operator that cannot specify generic function\n     options creates a generic function, and if the lambda list for the\n     method mentions keyword arguments, the lambda list of the generic\n     function will mention &key (but no keyword arguments).\n\n"
}