{
    "name": "*random-state*",
    "prev": "random-state-p",
    "next": "numberp",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Variable",
        "text": "*random-state*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a random state.\n"
        },
        {
            "type": "Initial Value",
            "text": "implementation-dependent.\n"
        },
        {
            "type": "Description",
            "text": "The current random state, which is used, for example, by the function\nrandom when a random state is not explicitly supplied.\n"
        },
        {
            "type": "Examples",
            "text": "      (random-state-p *random-state*) =>  true\n      (setq snap-shot (make-random-state))\n      ;; The series from any given point is random,\n      ;; but if you backtrack to that point, you get the same series.\n      (list (loop for i from 1 to 10 collect (random))\n            (let ((*random-state* snap-shot))\n              (loop for i from 1 to 10 collect (random)))\n            (loop for i from 1 to 10 collect (random))\n            (let ((*random-state* snap-shot))\n              (loop for i from 1 to 10 collect (random))))\n     =>  ((19 16 44 19 96 15 76 96 13 61)\n         (19 16 44 19 96 15 76 96 13 61)\n         (16 67 0 43 70 79 58 5 63 50)\n         (16 67 0 43 70 79 58 5 63 50))\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation.\nrandom.\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-random-state:: , *Note random:: , random-state\n"
        },
        {
            "type": "Notes",
            "text": "Binding *random-state* to a different random state object correctly saves\nand restores the old random state object.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *random-state*,  Next: numberp,  Prev: random-state-p,  Up: Numbers Dictionary\n\n*random-state*                                                   [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na random state.\n\nInitial Value::\n...............\n\nimplementation-dependent.\n\nDescription::\n.............\n\nThe current random state, which is used, for example, by the function\nrandom when a random state is not explicitly supplied.\n\nExamples::\n..........\n\n      (random-state-p *random-state*) =>  true\n      (setq snap-shot (make-random-state))\n      ;; The series from any given point is random,\n      ;; but if you backtrack to that point, you get the same series.\n      (list (loop for i from 1 to 10 collect (random))\n            (let ((*random-state* snap-shot))\n              (loop for i from 1 to 10 collect (random)))\n            (loop for i from 1 to 10 collect (random))\n            (let ((*random-state* snap-shot))\n              (loop for i from 1 to 10 collect (random))))\n     =>  ((19 16 44 19 96 15 76 96 13 61)\n         (19 16 44 19 96 15 76 96 13 61)\n         (16 67 0 43 70 79 58 5 63 50)\n         (16 67 0 43 70 79 58 5 63 50))\n\nAffected By::\n.............\n\nThe implementation.\n\nrandom.\n\nSee Also::\n..........\n\n*Note make-random-state:: , *Note random:: , random-state\n\nNotes::\n.......\n\nBinding *random-state* to a different random state object correctly saves\nand restores the old random state object.\n\n"
}