{
    "name": "string",
    "prev": "char",
    "next": "string-upcase",
    "up": "Strings Dictionary",
    "header": {
        "type": "Function",
        "text": "string"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "string",
                    "text": " x =>  string\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "x",
                    "desc": "a string, a symbol, or a character."
                },
                {
                    "name": "string",
                    "desc": "a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a string described by x; specifically:\n*\n     If x is a string, it is returned.\n*\n     If x is a symbol, its name is returned.\n*\n     If x is a character,\n     then a string containing that one character is returned.\n*\n     string might perform additional, implementation-defined conversions.\n"
        },
        {
            "type": "Examples",
            "text": "      (string \"already a string\") =>  \"already a string\"\n      (string 'elm) =>  \"ELM\"\n      (string #\\c) =>  \"c\"\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "In the case where a conversion is defined neither by this specification nor\nby the implementation, an error of type type-error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note coerce:: , string (type).\n"
        },
        {
            "type": "Notes",
            "text": "coerce can be used to convert a sequence of characters to a string.\nprin1-to-string, princ-to-string, write-to-string, or format (with a first\nargument of nil) can be used to get a string representation of a number or\nany other object.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: string,  Next: string-upcase,  Prev: char,  Up: Strings Dictionary\n\nstring                                                           [Function]\n---------------------------------------------------------------------------\n\n`string'  x =>  string\n\nArguments and Values::\n......................\n\nx--a string, a symbol, or a character.\n\nstring--a string.\n\nDescription::\n.............\n\nReturns a string described by x; specifically:\n\n*\n     If x is a string, it is returned.\n\n*\n     If x is a symbol, its name is returned.\n\n*\n     If x is a character,\n\n     then a string containing that one character is returned.\n\n*\n     string might perform additional, implementation-defined conversions.\n\nExamples::\n..........\n\n      (string \"already a string\") =>  \"already a string\"\n      (string 'elm) =>  \"ELM\"\n      (string #\\c) =>  \"c\"\n\nExceptional Situations::\n........................\n\nIn the case where a conversion is defined neither by this specification nor\nby the implementation, an error of type type-error is signaled.\n\nSee Also::\n..........\n\n*Note coerce:: , string (type).\n\nNotes::\n.......\n\ncoerce can be used to convert a sequence of characters to a string.\n\nprin1-to-string, princ-to-string, write-to-string, or format (with a first\nargument of nil) can be used to get a string representation of a number or\nany other object.\n\n"
}