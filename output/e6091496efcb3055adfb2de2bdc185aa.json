{
    "name": "Special Forms",
    "prev": "Conses as Forms",
    "next": "Macro Forms",
    "up": "The Evaluation Model",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Special Forms",
            "text": "A special form is a form with special syntax, special evaluation rules, or\nboth, possibly manipulating the evaluation environment, control flow, or\nboth.  A special operator has access to the current lexical environment\nand the current dynamic environment.  Each special operator defines the\nmanner in which its subexpressions are treated--which are forms, which are\nspecial syntax, etc.\nSome special operators create new lexical or dynamic environments for use\nduring the evaluation of subforms of the special form.  For example, block\ncreates a new lexical environment that is the same as the one in force at\nthe point of evaluation of the block form with the addition of a binding\nof the block name to an exit point from the block.\nThe set of special operator names is fixed in Common Lisp; no way is\nprovided for the user to define a special operator.  Figure 3-2 lists all\nof the Common Lisp symbols that have definitions as special operators.\n  block      let*                  return-from      \n  catch      load-time-value       setq             \n  eval-when  locally               symbol-macrolet  \n  flet       macrolet              tagbody          \n  function   multiple-value-call   the              \n  go         multiple-value-prog1  throw            \n  if         progn                 unwind-protect   \n  labels     progv                                  \n  let        quote                                  \n      Figure 3-2: Common Lisp Special Operators    \n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Special Forms,  Next: Macro Forms,  Prev: Conses as Forms,  Up: The Evaluation Model\n\nSpecial Forms\n.............\n\nA special form is a form with special syntax, special evaluation rules, or\nboth, possibly manipulating the evaluation environment, control flow, or\nboth.  A special operator has access to the current lexical environment\nand the current dynamic environment.  Each special operator defines the\nmanner in which its subexpressions are treated--which are forms, which are\nspecial syntax, etc.\n\nSome special operators create new lexical or dynamic environments for use\nduring the evaluation of subforms of the special form.  For example, block\ncreates a new lexical environment that is the same as the one in force at\nthe point of evaluation of the block form with the addition of a binding\nof the block name to an exit point from the block.\n\nThe set of special operator names is fixed in Common Lisp; no way is\nprovided for the user to define a special operator.  Figure 3-2 lists all\nof the Common Lisp symbols that have definitions as special operators.\n\n  block      let*                  return-from      \n  catch      load-time-value       setq             \n  eval-when  locally               symbol-macrolet  \n  flet       macrolet              tagbody          \n  function   multiple-value-call   the              \n  go         multiple-value-prog1  throw            \n  if         progn                 unwind-protect   \n  labels     progv                                  \n  let        quote                                  \n\n      Figure 3-2: Common Lisp Special Operators    \n\n\n"
}