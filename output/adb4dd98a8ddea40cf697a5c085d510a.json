{
    "name": "load-logical-pathname-translations",
    "prev": "pathname-host",
    "next": "logical-pathname-translations",
    "up": "Filenames Dictionary",
    "header": {
        "type": "Function",
        "text": "load-logical-pathname-translations"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "load-logical-pathname-translations",
                    "text": " host =>  just-loaded\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "host",
                    "desc": "a string."
                },
                {
                    "name": "just-loaded",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Searches for and loads the definition of a logical host named host, if it\nis not already defined.  The specific nature of the search is\nimplementation-defined.\nIf the host is already defined, no attempt to find or load a definition is\nattempted, and false is returned.  If the host is not already defined, but\na definition is successfully found and loaded, true is returned.\nOtherwise, an error is signaled.\n"
        },
        {
            "type": "Examples",
            "text": "      (translate-logical-pathname \"hacks:weather;barometer.lisp.newest\")\n      |>  Error: The logical host HACKS is not defined.\n      (load-logical-pathname-translations \"HACKS\")\n      |>  ;; Loading SYS:SITE;HACKS.TRANSLATIONS\n      |>  ;; Loading done.\n     =>  true\n      (translate-logical-pathname \"hacks:weather;barometer.lisp.newest\")\n     =>  #P\"HELIUM:[SHARED.HACKS.WEATHER]BAROMETER.LSP;0\"\n      (load-logical-pathname-translations \"HACKS\")\n     =>  false\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If no definition is found, an error of type error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "logical-pathname\n"
        },
        {
            "type": "Notes",
            "text": "Logical pathname definitions will be created not just by implementors but\nalso by programmers.  As such, it is important that the search strategy be\ndocumented.  For example, an implementation might define that the\ndefinition of a host is to be found in a file called \"host.translations\"\nin some specifically named directory.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: load-logical-pathname-translations,  Next: logical-pathname-translations,  Prev: pathname-host,  Up: Filenames Dictionary\n\nload-logical-pathname-translations                               [Function]\n---------------------------------------------------------------------------\n\n`load-logical-pathname-translations'  host =>  just-loaded\n\nArguments and Values::\n......................\n\nhost--a string.\n\njust-loaded--a generalized boolean.\n\nDescription::\n.............\n\nSearches for and loads the definition of a logical host named host, if it\nis not already defined.  The specific nature of the search is\nimplementation-defined.\n\nIf the host is already defined, no attempt to find or load a definition is\nattempted, and false is returned.  If the host is not already defined, but\na definition is successfully found and loaded, true is returned.\nOtherwise, an error is signaled.\n\nExamples::\n..........\n\n      (translate-logical-pathname \"hacks:weather;barometer.lisp.newest\")\n      |>  Error: The logical host HACKS is not defined.\n      (load-logical-pathname-translations \"HACKS\")\n      |>  ;; Loading SYS:SITE;HACKS.TRANSLATIONS\n      |>  ;; Loading done.\n     =>  true\n      (translate-logical-pathname \"hacks:weather;barometer.lisp.newest\")\n     =>  #P\"HELIUM:[SHARED.HACKS.WEATHER]BAROMETER.LSP;0\"\n      (load-logical-pathname-translations \"HACKS\")\n     =>  false\n\nExceptional Situations::\n........................\n\nIf no definition is found, an error of type error is signaled.\n\nSee Also::\n..........\n\nlogical-pathname\n\nNotes::\n.......\n\nLogical pathname definitions will be created not just by implementors but\nalso by programmers.  As such, it is important that the search strategy be\ndocumented.  For example, an implementation might define that the\ndefinition of a host is to be found in a file called \"host.translations\"\nin some specifically named directory.\n\n"
}