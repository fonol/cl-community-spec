{
    "name": "Order of Execution",
    "prev": "Summary of Miscellaneous Clauses",
    "next": "Destructuring",
    "up": "Overview of the Loop Facility",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Order of Execution",
            "text": "With the exceptions listed below, clauses are executed in the loop body in\nthe order in which they appear in the source.  Execution is repeated until\na clause terminates the loop or until a return, go, or throw form is\nencountered which transfers control to a point outside of the loop.  The\nfollowing actions are exceptions to the linear order of execution:\n*\n     All variables are initialized first, regardless of where the\n     establishing clauses appear in the source.  The order of\n     initialization follows the order of these clauses.\n*\n     The code for any initially clauses is collected into one progn in the\n     order in which the clauses appear in the source.  The collected code\n     is executed once in the loop prologue after any implicit variable\n     initializations.\n*\n     The code for any finally clauses is collected into one progn in the\n     order in which the clauses appear in the source.  The collected code\n     is executed once in the loop epilogue before any implicit values from\n     the accumulation clauses are returned.  Explicit returns anywhere in\n     the source, however, will exit the loop without executing the\n     epilogue code.\n*\n     A with clause introduces a variable binding and an optional initial\n     value.  The initial values are calculated in the order in which the\n     with clauses occur.\n*\n     Iteration control clauses implicitly perform the following actions:\n    -\n          initialize variables;\n    -\n          step variables, generally between each execution of the loop\n          body;\n    -\n          perform termination tests, generally just before the execution\n          of the loop body.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Order of Execution,  Next: Destructuring,  Prev: Summary of Miscellaneous Clauses,  Up: Overview of the Loop Facility\n\nOrder of Execution\n..................\n\nWith the exceptions listed below, clauses are executed in the loop body in\nthe order in which they appear in the source.  Execution is repeated until\na clause terminates the loop or until a return, go, or throw form is\nencountered which transfers control to a point outside of the loop.  The\nfollowing actions are exceptions to the linear order of execution:\n\n*\n     All variables are initialized first, regardless of where the\n     establishing clauses appear in the source.  The order of\n     initialization follows the order of these clauses.\n\n*\n     The code for any initially clauses is collected into one progn in the\n     order in which the clauses appear in the source.  The collected code\n     is executed once in the loop prologue after any implicit variable\n     initializations.\n\n*\n     The code for any finally clauses is collected into one progn in the\n     order in which the clauses appear in the source.  The collected code\n     is executed once in the loop epilogue before any implicit values from\n     the accumulation clauses are returned.  Explicit returns anywhere in\n     the source, however, will exit the loop without executing the\n     epilogue code.\n\n*\n     A with clause introduces a variable binding and an optional initial\n     value.  The initial values are calculated in the order in which the\n     with clauses occur.\n\n*\n     Iteration control clauses implicitly perform the following actions:\n\n    -\n          initialize variables;\n\n    -\n          step variables, generally between each execution of the loop\n          body;\n\n    -\n          perform termination tests, generally just before the execution\n          of the loop body.\n\n"
}