{
    "name": "pop",
    "prev": "push",
    "next": "first",
    "up": "Conses Dictionary",
    "header": {
        "type": "Macro",
        "text": "pop"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "pop",
                    "text": " place =>  element\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "place",
                    "desc": "a place, the value of which is a list (possibly, but necessarily, a"
                },
                {
                    "name": "place",
                    "desc": "a place, the value of which is a list (possibly, but necessarily, adotted list or circular list).\n"
                },
                {
                    "name": "element",
                    "desc": "an object (the car of the contents of place)."
                }
            ]
        },
        {
            "type": "Description",
            "text": "pop reads the value of place, remembers the car of the list which was\nretrieved, writes the cdr of the list back into the place, and finally\nyields the car of the originally retrieved list.\nFor information about the evaluation of subforms of place, see *Note\nEvaluation of Subforms to Places::.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq stack '(a b c)) =>  (A B C)\n      (pop stack) =>  A\n      stack =>  (B C)\n      (setq llst '((1 2 3 4))) =>  ((1 2 3 4))\n      (pop (car llst)) =>  1\n      llst =>  ((2 3 4))\n"
        },
        {
            "type": "Side Effects",
            "text": "The contents of place are modified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note push:: , *Note pushnew:: , *Note Generalized Reference::\n"
        },
        {
            "type": "Notes",
            "text": "The effect of (pop place) is roughly equivalent to\n      (prog1 (car place) (setf place (cdr place)))\nexcept that the latter would evaluate any subforms of place three times,\nwhile pop evaluates them only once.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: pop,  Next: first,  Prev: push,  Up: Conses Dictionary\n\npop                                                                 [Macro]\n---------------------------------------------------------------------------\n\n`pop'  place =>  element\n\nArguments and Values::\n......................\n\nplace--a place, the value of which is a list (possibly, but necessarily, a\ndotted list or circular list).\n\nelement--an object (the car of the contents of place).\n\nDescription::\n.............\n\npop reads the value of place, remembers the car of the list which was\nretrieved, writes the cdr of the list back into the place, and finally\nyields the car of the originally retrieved list.\n\nFor information about the evaluation of subforms of place, see *Note\nEvaluation of Subforms to Places::.\n\nExamples::\n..........\n\n      (setq stack '(a b c)) =>  (A B C)\n      (pop stack) =>  A\n      stack =>  (B C)\n      (setq llst '((1 2 3 4))) =>  ((1 2 3 4))\n      (pop (car llst)) =>  1\n      llst =>  ((2 3 4))\n\nSide Effects::\n..............\n\nThe contents of place are modified.\n\nSee Also::\n..........\n\n*Note push:: , *Note pushnew:: , *Note Generalized Reference::\n\nNotes::\n.......\n\nThe effect of (pop place) is roughly equivalent to\n\n      (prog1 (car place) (setf place (cdr place)))\n\nexcept that the latter would evaluate any subforms of place three times,\nwhile pop evaluates them only once.\n\n"
}