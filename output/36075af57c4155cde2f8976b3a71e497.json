{
    "name": "Examples of clause grouping",
    "prev": "Examples of Miscellaneous Loop Features",
    "next": null,
    "up": "Examples of Miscellaneous Loop Features",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of clause grouping",
            "text": "     ;; Group conditional clauses.\n      (loop for i in '(1 324 2345 323 2 4 235 252)\n            when (oddp i)\n              do (print i)\n              and collect i into odd-numbers\n              and do (terpri)\n            else                              ; I is even.\n              collect i into even-numbers\n            finally\n              (return (values odd-numbers even-numbers)))\n      |>  1\n      |> \n      |>  2345\n      |> \n      |>  323\n      |> \n      |>  235\n     =>  (1 2345 323 235), (324 2 4 252)\n     ;; Collect numbers larger than 3.\n      (loop for i in '(1 2 3 4 5 6)\n            when (and (> i 3) i)\n            collect it)                      ; IT refers to (and (> i 3) i).\n     =>  (4 5 6)\n     ;; Find a number in a list.\n      (loop for i in '(1 2 3 4 5 6)\n            when (and (> i 3) i)\n            return it)\n     =>  4\n     ;; The above example is similar to the following one.\n      (loop for i in '(1 2 3 4 5 6)\n            thereis (and (> i 3) i))\n     =>  4\n     ;; Nest conditional clauses.\n      (let ((list '(0 3.0 apple 4 5 9.8 orange banana)))\n        (loop for i in list\n              when (numberp i)\n                when (floatp i)\n                  collect i into float-numbers\n                else                                  ; Not (floatp i)\n                  collect i into other-numbers\n              else                                    ; Not (numberp i)\n                when (symbolp i)\n                  collect i into symbol-list\n                else                                  ; Not (symbolp i)\n                  do (error \"found a funny value in list ~S, value ~S~\n              finally (return (values float-numbers other-numbers symbol-list))))\n     =>  (3.0 9.8), (0 4 5), (APPLE ORANGE BANANA)\n     ;; Without the END preposition, the last AND would apply to the\n     ;; inner IF rather than the outer one.\n      (loop for x from 0 to 3\n            do (print x)\n            if (zerop (mod x 2))\n              do (princ \" a\")\n               and if (zerop (floor x 2))\n                     do (princ \" b\")\n                     end\n               and do (princ \" c\"))\n      |>  0  a b c\n      |>  1\n      |>  2  a c\n      |>  3\n     =>  NIL\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of clause grouping,  Prev: Examples of Miscellaneous Loop Features,  Up: Examples of Miscellaneous Loop Features\n\nExamples of clause grouping\n...........................\n\n     ;; Group conditional clauses.\n      (loop for i in '(1 324 2345 323 2 4 235 252)\n            when (oddp i)\n              do (print i)\n              and collect i into odd-numbers\n              and do (terpri)\n            else                              ; I is even.\n              collect i into even-numbers\n            finally\n              (return (values odd-numbers even-numbers)))\n      |>  1\n      |> \n      |>  2345\n      |> \n      |>  323\n      |> \n      |>  235\n     =>  (1 2345 323 235), (324 2 4 252)\n     \n     ;; Collect numbers larger than 3.\n      (loop for i in '(1 2 3 4 5 6)\n            when (and (> i 3) i)\n            collect it)                      ; IT refers to (and (> i 3) i).\n     =>  (4 5 6)\n     \n     ;; Find a number in a list.\n      (loop for i in '(1 2 3 4 5 6)\n            when (and (> i 3) i)\n            return it)\n     =>  4\n     \n     ;; The above example is similar to the following one.\n      (loop for i in '(1 2 3 4 5 6)\n            thereis (and (> i 3) i))\n     =>  4\n     \n     ;; Nest conditional clauses.\n      (let ((list '(0 3.0 apple 4 5 9.8 orange banana)))\n        (loop for i in list\n              when (numberp i)\n                when (floatp i)\n                  collect i into float-numbers\n                else                                  ; Not (floatp i)\n                  collect i into other-numbers\n              else                                    ; Not (numberp i)\n                when (symbolp i)\n                  collect i into symbol-list\n                else                                  ; Not (symbolp i)\n                  do (error \"found a funny value in list ~S, value ~S~\n              finally (return (values float-numbers other-numbers symbol-list))))\n     =>  (3.0 9.8), (0 4 5), (APPLE ORANGE BANANA)\n     \n     ;; Without the END preposition, the last AND would apply to the\n     ;; inner IF rather than the outer one.\n      (loop for x from 0 to 3\n            do (print x)\n            if (zerop (mod x 2))\n              do (princ \" a\")\n               and if (zerop (floor x 2))\n                     do (princ \" b\")\n                     end\n               and do (princ \" c\"))\n      |>  0  a b c\n      |>  1\n      |>  2  a c\n      |>  3\n     =>  NIL\n\n"
}