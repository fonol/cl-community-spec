{
    "name": "fmakunbound",
    "prev": "fboundp",
    "next": "flet",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "fmakunbound"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "fmakunbound",
                    "text": " name =>  name\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Pronunciation",
            "text": "pronounced ,ef 'mak e n,baund or pronounced ,ef 'm\\=a k e n,baund\n"
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "name",
                    "desc": "a function name."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Removes the function or macro definition, if any, of name in the global\nenvironment.\n"
        },
        {
            "type": "Examples",
            "text": "     (defun add-some (x) (+ x 19)) =>  ADD-SOME\n      (fboundp 'add-some) =>  true\n      (flet ((add-some (x) (+ x 37)))\n         (fmakunbound 'add-some)\n         (add-some 1)) =>  38\n      (fboundp 'add-some) =>  false\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if name is not a function name.\nThe consequences are undefined if name is a special operator.\n"
        },
        {
            "type": "See Also",
            "text": "*Note fboundp:: , *Note makunbound::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: fmakunbound,  Next: flet,  Prev: fboundp,  Up: Data and Control Flow Dictionary\n\nfmakunbound                                                      [Function]\n---------------------------------------------------------------------------\n\n`fmakunbound'  name =>  name\n\nPronunciation::\n...............\n\npronounced ,ef 'mak e n,baund or pronounced ,ef 'm\\=a k e n,baund\n\nArguments and Values::\n......................\n\nname--a function name.\n\nDescription::\n.............\n\nRemoves the function or macro definition, if any, of name in the global\nenvironment.\n\nExamples::\n..........\n\n     (defun add-some (x) (+ x 19)) =>  ADD-SOME\n      (fboundp 'add-some) =>  true\n      (flet ((add-some (x) (+ x 37)))\n         (fmakunbound 'add-some)\n         (add-some 1)) =>  38\n      (fboundp 'add-some) =>  false\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if name is not a function name.\n\nThe consequences are undefined if name is a special operator.\n\nSee Also::\n..........\n\n*Note fboundp:: , *Note makunbound::\n\n"
}