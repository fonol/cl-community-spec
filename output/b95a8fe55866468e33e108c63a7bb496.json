{
    "name": "make-string-output-stream",
    "prev": "make-string-input-stream",
    "next": "with-input-from-string",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "make-string-output-stream"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-string-output-stream",
                    "text": " &key element-type =>  string-stream\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "element-type",
                    "desc": "a type specifier.  The default is character."
                },
                {
                    "name": "string-stream",
                    "desc": "an output string stream."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns\nan output string stream that accepts characters and makes available (via\nget-output-stream-string) a string that contains the characters that were\nactually output.\nThe element-type names the type of the elements of the string; a string is\nconstructed of the most specialized type that can accommodate elements of\nthat element-type.\n"
        },
        {
            "type": "Examples",
            "text": "      (let ((s (make-string-output-stream)))\n        (write-string \"testing... \" s)\n        (prin1 1234 s)\n        (get-output-stream-string s))\n     =>  \"testing... 1234\"\nNone..\n"
        },
        {
            "type": "See Also",
            "text": "*Note get-output-stream-string:: , *Note with-output-to-string::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-string-output-stream,  Next: with-input-from-string,  Prev: make-string-input-stream,  Up: Streams Dictionary\n\nmake-string-output-stream                                        [Function]\n---------------------------------------------------------------------------\n\n`make-string-output-stream'  &key element-type =>  string-stream\n\nArguments and Values::\n......................\n\nelement-type--a type specifier.  The default is character.\n\nstring-stream--an output string stream.\n\nDescription::\n.............\n\nReturns\n\nan output string stream that accepts characters and makes available (via\nget-output-stream-string) a string that contains the characters that were\nactually output.\n\nThe element-type names the type of the elements of the string; a string is\nconstructed of the most specialized type that can accommodate elements of\nthat element-type.\n\nExamples::\n..........\n\n      (let ((s (make-string-output-stream)))\n        (write-string \"testing... \" s)\n        (prin1 1234 s)\n        (get-output-stream-string s))\n     =>  \"testing... 1234\"\n\nNone..\n\nSee Also::\n..........\n\n*Note get-output-stream-string:: , *Note with-output-to-string::\n\n"
}