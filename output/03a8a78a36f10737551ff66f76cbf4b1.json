{
    "name": "set-difference",
    "prev": "pushnew",
    "next": "set-exclusive-or",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "set-difference, nset-difference"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "set-difference",
                    "text": " list-1 list-2 &key key test test-not =>  result-list\n"
                },
                {
                    "name": "nset-difference",
                    "text": " list-1 list-2 &key key test test-not =>  result-list\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list-1",
                    "desc": "a proper list."
                },
                {
                    "name": "list-2",
                    "desc": "a proper list."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "key",
                    "desc": "a designator for a function of one argument, or nil."
                },
                {
                    "name": "result-list",
                    "desc": "a list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "set-difference returns a list of elements of list-1 that do not appear in\nlist-2.\nnset-difference is the destructive version of set-difference.  It may\ndestroy list-1.\nFor all possible ordered pairs consisting of one element from list-1 and\none element from list-2, the :test or :test-not function is used to\ndetermine whether they satisfy the test.  The first argument to the :test\nor :test-not function is the part of an element of list-1 that is returned\nby the :key function (if supplied); the second argument is the part of an\nelement of list-2 that is returned by the :key function (if supplied).\nIf :key is supplied, its argument is a list-1 or list-2 element. The :key\nfunction typically returns part of the supplied element.  If :key is not\nsupplied, the list-1 or list-2 element is used.\nAn element of list-1 appears in the result if and only if it does not\nmatch any element of list-2.\nThere is no guarantee that the order of elements in the result will\nreflect the ordering of the arguments in any particular way.  The result\nlist may share cells with, or be eq to, either of list-1 or list-2, if\nappropriate.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq lst1 (list \"A\" \"b\" \"C\" \"d\")\n            lst2 (list \"a\" \"B\" \"C\" \"d\")) =>  (\"a\" \"B\" \"C\" \"d\")\n      (set-difference lst1 lst2) =>  (\"d\" \"C\" \"b\" \"A\")\n      (set-difference lst1 lst2 :test 'equal) =>  (\"b\" \"A\")\n      (set-difference lst1 lst2 :test #'equalp) =>  NIL\n      (nset-difference lst1 lst2 :test #'string=) =>  (\"A\" \"b\")\n      (setq lst1 '((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\")))\n     =>  ((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\"))\n      (setq lst2 '((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\")))\n     =>  ((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\"))\n      (nset-difference lst1 lst2 :test #'string= :key #'cdr)\n     =>  ((\"c\" . \"d\") (\"e\" . \"f\"))\n      lst1 =>  ((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\"))\n      lst2 =>  ((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\"))\n     ;; Remove all flavor names that contain \"c\" or \"w\".\n      (set-difference '(\"strawberry\" \"chocolate\" \"banana\"\n                       \"lemon\" \"pistachio\" \"rhubarb\")\n               '(#\\c #\\w)\n               :test #'(lambda (s c) (find c s)))\n     =>  (\"banana\" \"rhubarb\" \"lemon\")    ;One possible ordering.\n"
        },
        {
            "type": "Side Effects",
            "text": "nset-difference may destroy list-1.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if list-1 and\nlist-2 are not proper lists.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Compiler Terminology::,\n*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not parameter is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: set-difference,  Next: set-exclusive-or,  Prev: pushnew,  Up: Conses Dictionary\n\nset-difference, nset-difference                                  [Function]\n---------------------------------------------------------------------------\n\n`set-difference'  list-1 list-2 &key key test test-not =>  result-list\n\n`nset-difference'  list-1 list-2 &key key test test-not =>  result-list\n\nArguments and Values::\n......................\n\nlist-1--a proper list.\n\nlist-2--a proper list.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\nkey--a designator for a function of one argument, or nil.\n\nresult-list--a list.\n\nDescription::\n.............\n\nset-difference returns a list of elements of list-1 that do not appear in\nlist-2.\n\nnset-difference is the destructive version of set-difference.  It may\ndestroy list-1.\n\nFor all possible ordered pairs consisting of one element from list-1 and\none element from list-2, the :test or :test-not function is used to\ndetermine whether they satisfy the test.  The first argument to the :test\nor :test-not function is the part of an element of list-1 that is returned\nby the :key function (if supplied); the second argument is the part of an\nelement of list-2 that is returned by the :key function (if supplied).\n\nIf :key is supplied, its argument is a list-1 or list-2 element. The :key\nfunction typically returns part of the supplied element.  If :key is not\nsupplied, the list-1 or list-2 element is used.\n\nAn element of list-1 appears in the result if and only if it does not\nmatch any element of list-2.\n\nThere is no guarantee that the order of elements in the result will\nreflect the ordering of the arguments in any particular way.  The result\nlist may share cells with, or be eq to, either of list-1 or list-2, if\nappropriate.\n\nExamples::\n..........\n\n      (setq lst1 (list \"A\" \"b\" \"C\" \"d\")\n            lst2 (list \"a\" \"B\" \"C\" \"d\")) =>  (\"a\" \"B\" \"C\" \"d\")\n      (set-difference lst1 lst2) =>  (\"d\" \"C\" \"b\" \"A\")\n      (set-difference lst1 lst2 :test 'equal) =>  (\"b\" \"A\")\n      (set-difference lst1 lst2 :test #'equalp) =>  NIL\n      (nset-difference lst1 lst2 :test #'string=) =>  (\"A\" \"b\")\n      (setq lst1 '((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\")))\n     =>  ((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\"))\n      (setq lst2 '((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\")))\n     =>  ((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\"))\n      (nset-difference lst1 lst2 :test #'string= :key #'cdr)\n     =>  ((\"c\" . \"d\") (\"e\" . \"f\"))\n      lst1 =>  ((\"a\" . \"b\") (\"c\" . \"d\") (\"e\" . \"f\"))\n      lst2 =>  ((\"c\" . \"a\") (\"e\" . \"b\") (\"d\" . \"a\"))\n\n     ;; Remove all flavor names that contain \"c\" or \"w\".\n      (set-difference '(\"strawberry\" \"chocolate\" \"banana\"\n                       \"lemon\" \"pistachio\" \"rhubarb\")\n               '(#\\c #\\w)\n               :test #'(lambda (s c) (find c s)))\n     =>  (\"banana\" \"rhubarb\" \"lemon\")    ;One possible ordering.\n\nSide Effects::\n..............\n\nnset-difference may destroy list-1.\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if list-1 and\nlist-2 are not proper lists.\n\nSee Also::\n..........\n\n*Note Compiler Terminology::,\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not parameter is deprecated.\n\n"
}