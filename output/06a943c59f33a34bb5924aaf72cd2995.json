{
    "name": "search",
    "prev": "position",
    "next": "mismatch",
    "up": "Sequences Dictionary",
    "header": {
        "type": "Function",
        "text": "search"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "search",
                    "text": " sequence-1 sequence-2 &key from-end test test-not key start1start2 end1 end2\n=>  position\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "Sequence-1",
                    "desc": "a sequence."
                },
                {
                    "name": "Sequence-2",
                    "desc": "a sequence."
                },
                {
                    "name": "from-end",
                    "desc": "a generalized boolean.  The default is false."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "key",
                    "desc": "a designator for a function of one argument, or nil."
                },
                {
                    "name": "start1, end1",
                    "desc": "bounding index designators of sequence-1.  The defaults for"
                },
                {
                    "name": "start1, end1",
                    "desc": "bounding index designators of sequence-1.  The defaults forstart1 and end1 are 0 and nil, respectively.\n"
                },
                {
                    "name": "start2, end2",
                    "desc": "bounding index designators of sequence-2.  The defaults for"
                },
                {
                    "name": "start2, end2",
                    "desc": "bounding index designators of sequence-2.  The defaults forstart2 and end2 are 0 and nil, respectively.\n"
                },
                {
                    "name": "position",
                    "desc": "a bounding index of sequence-2, or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Searches sequence-2 for a subsequence that matches sequence-1.\nThe implementation may choose to search sequence-2 in any order; there is\nno guarantee on the number of times the test is made.  For example, when\nstart-end is true, the sequence might actually be searched from left to\nright instead of from right to left (but in either case would return the\nrightmost matching subsequence).  If the search succeeds, search returns\nthe offset into sequence-2 of the first element of the leftmost or\nrightmost matching subsequence, depending on from-end; otherwise search\nreturns nil.\nIf from-end is true, the index of the leftmost element of the rightmost\nmatching subsequence is returned.\n"
        },
        {
            "type": "Examples",
            "text": "      (search \"dog\" \"it's a dog's life\") =>  7\n      (search '(0 1) '(2 4 6 1 3 5) :key #'oddp) =>  2\n"
        },
        {
            "type": "See Also",
            "text": "*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not argument is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: search,  Next: mismatch,  Prev: position,  Up: Sequences Dictionary\n\nsearch                                                           [Function]\n---------------------------------------------------------------------------\n\n`search'  sequence-1 sequence-2 &key from-end test test-not key start1\nstart2 end1 end2\n=>  position\n\nArguments and Values::\n......................\n\nSequence-1--a sequence.\n\nSequence-2--a sequence.\n\nfrom-end--a generalized boolean.  The default is false.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\nkey--a designator for a function of one argument, or nil.\n\nstart1, end1--bounding index designators of sequence-1.  The defaults for\nstart1 and end1 are 0 and nil, respectively.\n\nstart2, end2--bounding index designators of sequence-2.  The defaults for\nstart2 and end2 are 0 and nil, respectively.\n\nposition--a bounding index of sequence-2, or nil.\n\nDescription::\n.............\n\nSearches sequence-2 for a subsequence that matches sequence-1.\n\nThe implementation may choose to search sequence-2 in any order; there is\nno guarantee on the number of times the test is made.  For example, when\nstart-end is true, the sequence might actually be searched from left to\nright instead of from right to left (but in either case would return the\nrightmost matching subsequence).  If the search succeeds, search returns\nthe offset into sequence-2 of the first element of the leftmost or\nrightmost matching subsequence, depending on from-end; otherwise search\nreturns nil.\n\nIf from-end is true, the index of the leftmost element of the rightmost\nmatching subsequence is returned.\n\nExamples::\n..........\n\n      (search \"dog\" \"it's a dog's life\") =>  7\n      (search '(0 1) '(2 4 6 1 3 5) :key #'oddp) =>  2\n\nSee Also::\n..........\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not argument is deprecated.\n\n"
}