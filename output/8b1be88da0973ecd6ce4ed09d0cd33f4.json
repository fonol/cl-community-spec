{
    "name": "endp",
    "prev": "nth",
    "next": "null",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "endp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "endp",
                    "text": " list =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list,which might be a dotted list or a circular list.\n"
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true  if list is the empty list.  Returns false if list is a cons.\n"
        },
        {
            "type": "Examples",
            "text": "      (endp nil) =>  true\n      (endp '(1 2)) =>  false\n      (endp (cddr '(1 2))) =>  true\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if list is not a list.\n"
        },
        {
            "type": "Notes",
            "text": "The purpose of endp is to test for the end of proper list.  Since endp\ndoes not descend into a cons, it is well-defined to pass it a dotted list.\nHowever, if shorter \"lists\" are iteratively produced by calling cdr on\nsuch a dotted list and those \"lists\" are tested with endp, a situation\nthat has undefined consequences will eventually result when the non-nil\natom (which is not in fact a list) finally becomes the argument to endp.\nSince this is the usual way in which endp is used, it is conservative\nprogramming style and consistent with the intent of endp to treat endp as\nsimply a function on proper lists which happens not to enforce an argument\ntype of proper list except when the argument is atomic.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: endp,  Next: null,  Prev: nth,  Up: Conses Dictionary\n\nendp                                                             [Function]\n---------------------------------------------------------------------------\n\n`endp'  list =>  generalized-boolean\n\nArguments and Values::\n......................\n\nlist--a list,\n\nwhich might be a dotted list or a circular list.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true  if list is the empty list.  Returns false if list is a cons.\n\nExamples::\n..........\n\n      (endp nil) =>  true\n      (endp '(1 2)) =>  false\n      (endp (cddr '(1 2))) =>  true\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if list is not a list.\n\nNotes::\n.......\n\nThe purpose of endp is to test for the end of proper list.  Since endp\ndoes not descend into a cons, it is well-defined to pass it a dotted list.\nHowever, if shorter \"lists\" are iteratively produced by calling cdr on\nsuch a dotted list and those \"lists\" are tested with endp, a situation\nthat has undefined consequences will eventually result when the non-nil\natom (which is not in fact a list) finally becomes the argument to endp.\nSince this is the usual way in which endp is used, it is conservative\nprogramming style and consistent with the intent of endp to treat endp as\nsimply a function on proper lists which happens not to enforce an argument\ntype of proper list except when the argument is atomic.\n\n"
}