{
    "name": "abs",
    "prev": "1+",
    "next": "evenp",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "abs"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "abs",
                    "text": " number =>  absolute-value\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "number",
                    "desc": "a number."
                },
                {
                    "name": "absolute-value",
                    "desc": "a non-negative real."
                }
            ]
        },
        {
            "type": "Description",
            "text": "abs returns the absolute value of number.\nIf number is\na real,\nthe result is  of the same type as number.\nIf number is a complex, the result is a positive\nreal\nwith the same magnitude as number.  The result can be a float\n[Reviewer Note by Barmar: Single-float.] even if number's components are\nrationals and an exact rational result would have been possible.  Thus the\nresult of (abs #c(3 4)) can be either 5 or 5.0, depending on the\nimplementation.\n"
        },
        {
            "type": "Examples",
            "text": "      (abs 0) =>  0\n      (abs 12/13) =>  12/13\n      (abs -1.09) =>  1.09\n      (abs #c(5.0 -5.0)) =>  7.071068\n      (abs #c(5 5)) =>  7.071068\n      (abs #c(3/5 4/5)) =>  1 or approximately 1.0\n      (eql (abs -0.0) -0.0) =>  true\n"
        },
        {
            "type": "See Also",
            "text": "*Note Rule of Float Substitutability::\n"
        },
        {
            "type": "Notes",
            "text": "If number is a complex, the result is equivalent to the following:\n(sqrt (+ (expt (realpart number) 2)  (expt (imagpart number) 2)))\nAn implementation should not use this formula directly for all complexes\nbut should handle very large or very small components specially to avoid\nintermediate overflow or underflow.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: abs,  Next: evenp,  Prev: 1+,  Up: Numbers Dictionary\n\nabs                                                              [Function]\n---------------------------------------------------------------------------\n\n`abs'  number =>  absolute-value\n\nArguments and Values::\n......................\n\nnumber--a number.\n\nabsolute-value--a non-negative real.\n\nDescription::\n.............\n\nabs returns the absolute value of number.\n\nIf number is\n\na real,\n\nthe result is  of the same type as number.\n\nIf number is a complex, the result is a positive\n\nreal\n\nwith the same magnitude as number.  The result can be a float\n\n[Reviewer Note by Barmar: Single-float.] even if number's components are\nrationals and an exact rational result would have been possible.  Thus the\nresult of (abs #c(3 4)) can be either 5 or 5.0, depending on the\nimplementation.\n\nExamples::\n..........\n\n      (abs 0) =>  0\n      (abs 12/13) =>  12/13\n      (abs -1.09) =>  1.09\n      (abs #c(5.0 -5.0)) =>  7.071068\n      (abs #c(5 5)) =>  7.071068\n      (abs #c(3/5 4/5)) =>  1 or approximately 1.0\n      (eql (abs -0.0) -0.0) =>  true\n\nSee Also::\n..........\n\n*Note Rule of Float Substitutability::\n\nNotes::\n.......\n\nIf number is a complex, the result is equivalent to the following:\n\n(sqrt (+ (expt (realpart number) 2)  (expt (imagpart number) 2)))\n\nAn implementation should not use this formula directly for all complexes\nbut should handle very large or very small components specially to avoid\nintermediate overflow or underflow.\n\n"
}