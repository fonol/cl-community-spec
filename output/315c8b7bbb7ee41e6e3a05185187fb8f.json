{
    "name": "compile-file-pathname",
    "prev": "compile-file",
    "next": "load",
    "up": "System Construction Dictionary",
    "header": {
        "type": "Function",
        "text": "compile-file-pathname"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "compile-file-pathname",
                    "text": " input-file &key output-file &allow-other-keys =>pathname\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "input-file",
                    "desc": "a pathname designator.  (Default fillers for unspecified"
                },
                {
                    "name": "input-file",
                    "desc": "a pathname designator.  (Default fillers for unspecifiedcomponents are taken from *default-pathname-defaults*.)\n"
                },
                {
                    "name": "output-file",
                    "desc": "a pathname designator.  The default is implementation-defined."
                },
                {
                    "name": "pathname",
                    "desc": "a pathname."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the pathname that compile-file would write into, if given the same\narguments.\nThe defaults for the output-file are taken from the pathname that results\nfrom merging the input-file with the value of *default-pathname-defaults*,\nexcept that the type component should default to the appropriate\nimplementation-defined default type for compiled files.\nIf input-file is a logical pathname and output-file is unsupplied, the\nresult is a logical pathname.\nIf input-file is a logical pathname, it is translated into a physical\npathname as if by calling translate-logical-pathname.\nIf input-file is a stream, the stream can be either open or closed.\ncompile-file-pathname returns the same pathname after a file is closed as\nit did when the file was open.\nIt is an error if input-file is a stream that is created with\nmake-two-way-stream, make-echo-stream, make-broadcast-stream,\nmake-concatenated-stream, make-string-input-stream,\nmake-string-output-stream.\nIf an implementation supports additional keyword arguments to compile-file,\ncompile-file-pathname must accept the same arguments.\n"
        },
        {
            "type": "Examples",
            "text": "See logical-pathname-translations.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "An error of type file-error might be signaled if either input-file or\noutput-file is wild.\n"
        },
        {
            "type": "See Also",
            "text": "*Note compile-file:: , pathname, logical-pathname, *Note File System\nConcepts::,\n*Note Pathnames as Filenames::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: compile-file-pathname,  Next: load,  Prev: compile-file,  Up: System Construction Dictionary\n\ncompile-file-pathname                                            [Function]\n---------------------------------------------------------------------------\n\n`compile-file-pathname'  input-file &key output-file &allow-other-keys =>\npathname\n\nArguments and Values::\n......................\n\ninput-file--a pathname designator.  (Default fillers for unspecified\ncomponents are taken from *default-pathname-defaults*.)\n\noutput-file--a pathname designator.  The default is implementation-defined.\n\npathname--a pathname.\n\nDescription::\n.............\n\nReturns the pathname that compile-file would write into, if given the same\narguments.\n\nThe defaults for the output-file are taken from the pathname that results\nfrom merging the input-file with the value of *default-pathname-defaults*,\nexcept that the type component should default to the appropriate\nimplementation-defined default type for compiled files.\n\nIf input-file is a logical pathname and output-file is unsupplied, the\nresult is a logical pathname.\n\nIf input-file is a logical pathname, it is translated into a physical\npathname as if by calling translate-logical-pathname.\n\nIf input-file is a stream, the stream can be either open or closed.\ncompile-file-pathname returns the same pathname after a file is closed as\nit did when the file was open.\n\nIt is an error if input-file is a stream that is created with\nmake-two-way-stream, make-echo-stream, make-broadcast-stream,\nmake-concatenated-stream, make-string-input-stream,\nmake-string-output-stream.\n\nIf an implementation supports additional keyword arguments to compile-file,\ncompile-file-pathname must accept the same arguments.\n\nExamples::\n..........\n\nSee logical-pathname-translations.\n\nExceptional Situations::\n........................\n\nAn error of type file-error might be signaled if either input-file or\noutput-file is wild.\n\nSee Also::\n..........\n\n*Note compile-file:: , pathname, logical-pathname, *Note File System\nConcepts::,\n\n*Note Pathnames as Filenames::\n\n"
}