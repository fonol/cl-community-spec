{
    "name": "The for-as-hash subclause",
    "prev": "Examples of for-as-across subclause",
    "next": "The for-as-package subclause",
    "up": "Variable Initialization and Stepping Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The for-as-hash subclause",
            "text": "In the for-as-hash subclause the for or as construct iterates over the\nelements, keys, and values of a hash-table.  In this syntax, a compound\npreposition is used to designate access to a hash table.  The variable var\ntakes on the value of each hash key or hash value in the supplied\nhash-table.  The following loop keywords serve as valid prepositions\nwithin this syntax:\nbeing\n     The keyword being introduces either the Loop schema hash-key or\n     hash-value.\neach, the\n     The loop keyword each follows the loop keyword being when hash-key or\n     hash-value is used.  The loop keyword the is used with hash-keys and\n     hash-values only for ease of reading.  This agreement isn't required.\nhash-key, hash-keys\n     These loop keywords access each key entry of the hash table.  If the\n     name hash-value is supplied in a using construct with one of these\n     Loop schemas, the iteration can optionally access the keyed value.\n     The order in which the keys are accessed is undefined; empty slots in\n     the hash table are ignored.\nhash-value, hash-values\n     These loop keywords access each value entry of a hash table.  If the\n     name hash-key is supplied in a using construct with one of these Loop\n     schemas, the iteration can optionally access the key that corresponds\n     to the value.  The order in which the keys are accessed is undefined;\n     empty slots in the hash table are ignored.\nusing\n     The loop keyword using introduces the optional key or the keyed value\n     to be accessed.  It allows access to the hash key if iteration is over\n     the hash values, and the hash value if iteration is over the hash\n     keys.\nin, of\n     These loop prepositions introduce hash-table.\nIn effect\nbeing {each | the} {hash-value  | hash-values | hash-key    | hash-keys}\n{in | of}\nis a compound preposition.\nIteration stops when there are no more hash keys or hash values to be\nreferenced in the supplied hash-table.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The for-as-hash subclause,  Next: The for-as-package subclause,  Prev: Examples of for-as-across subclause,  Up: Variable Initialization and Stepping Clauses\n\nThe for-as-hash subclause\n.........................\n\nIn the for-as-hash subclause the for or as construct iterates over the\nelements, keys, and values of a hash-table.  In this syntax, a compound\npreposition is used to designate access to a hash table.  The variable var\ntakes on the value of each hash key or hash value in the supplied\nhash-table.  The following loop keywords serve as valid prepositions\nwithin this syntax:\n\nbeing\n     The keyword being introduces either the Loop schema hash-key or\n     hash-value.\n\neach, the\n     The loop keyword each follows the loop keyword being when hash-key or\n     hash-value is used.  The loop keyword the is used with hash-keys and\n     hash-values only for ease of reading.  This agreement isn't required.\n\nhash-key, hash-keys\n     These loop keywords access each key entry of the hash table.  If the\n     name hash-value is supplied in a using construct with one of these\n     Loop schemas, the iteration can optionally access the keyed value.\n     The order in which the keys are accessed is undefined; empty slots in\n     the hash table are ignored.\n\nhash-value, hash-values\n     These loop keywords access each value entry of a hash table.  If the\n     name hash-key is supplied in a using construct with one of these Loop\n     schemas, the iteration can optionally access the key that corresponds\n     to the value.  The order in which the keys are accessed is undefined;\n     empty slots in the hash table are ignored.\n\nusing\n     The loop keyword using introduces the optional key or the keyed value\n     to be accessed.  It allows access to the hash key if iteration is over\n     the hash values, and the hash value if iteration is over the hash\n     keys.\n\nin, of\n     These loop prepositions introduce hash-table.\n\nIn effect\n\nbeing {each | the} {hash-value  | hash-values | hash-key    | hash-keys}\n{in | of}\n\nis a compound preposition.\n\nIteration stops when there are no more hash keys or hash values to be\nreferenced in the supplied hash-table.\n\n"
}