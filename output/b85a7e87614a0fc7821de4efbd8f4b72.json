{
    "name": "Examples of Effect of Readtable Case on the Lisp Reader",
    "prev": "Effect of Readtable Case on the Lisp Reader",
    "next": null,
    "up": "Effect of Readtable Case on the Lisp Reader",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Effect of Readtable Case on the Lisp Reader",
            "text": "      (defun test-readtable-case-reading ()\n        (let ((*readtable* (copy-readtable nil)))\n          (format t \"READTABLE-CASE  Input   Symbol-name~\n                   ~\n                   ~\n          (dolist (readtable-case '(:upcase :downcase :preserve :invert))\n            (setf (readtable-case *readtable*) readtable-case)\n            (dolist (input '(\"ZEBRA\" \"Zebra\" \"zebra\"))\n              (format t \"~&:~A~16T~A~24T~A\"\n                      (string-upcase readtable-case)\n                      input\n                      (symbol-name (read-from-string input)))))))\nThe output from (test-readtable-case-reading) should be as follows:\n      READTABLE-CASE     Input Symbol-name\n      -------------------------------------\n         :UPCASE         ZEBRA   ZEBRA\n         :UPCASE         Zebra   ZEBRA\n         :UPCASE         zebra   ZEBRA\n         :DOWNCASE       ZEBRA   zebra\n         :DOWNCASE       Zebra   zebra\n         :DOWNCASE       zebra   zebra\n         :PRESERVE       ZEBRA   ZEBRA\n         :PRESERVE       Zebra   Zebra\n         :PRESERVE       zebra   zebra\n         :INVERT         ZEBRA   zebra\n         :INVERT         Zebra   Zebra\n         :INVERT         zebra   ZEBRA\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Effect of Readtable Case on the Lisp Reader,  Prev: Effect of Readtable Case on the Lisp Reader,  Up: Effect of Readtable Case on the Lisp Reader\n\nExamples of Effect of Readtable Case on the Lisp Reader\n.......................................................\n\n      (defun test-readtable-case-reading ()\n        (let ((*readtable* (copy-readtable nil)))\n          (format t \"READTABLE-CASE  Input   Symbol-name~\n                   ~\n                   ~\n          (dolist (readtable-case '(:upcase :downcase :preserve :invert))\n            (setf (readtable-case *readtable*) readtable-case)\n            (dolist (input '(\"ZEBRA\" \"Zebra\" \"zebra\"))\n              (format t \"~&:~A~16T~A~24T~A\"\n                      (string-upcase readtable-case)\n                      input\n                      (symbol-name (read-from-string input)))))))\n\nThe output from (test-readtable-case-reading) should be as follows:\n\n      READTABLE-CASE     Input Symbol-name\n      -------------------------------------\n         :UPCASE         ZEBRA   ZEBRA\n         :UPCASE         Zebra   ZEBRA\n         :UPCASE         zebra   ZEBRA\n         :DOWNCASE       ZEBRA   zebra\n         :DOWNCASE       Zebra   zebra\n         :DOWNCASE       zebra   zebra\n         :PRESERVE       ZEBRA   ZEBRA\n         :PRESERVE       Zebra   Zebra\n         :PRESERVE       zebra   zebra\n         :INVERT         ZEBRA   zebra\n         :INVERT         Zebra   Zebra\n         :INVERT         zebra   ZEBRA\n\n"
}