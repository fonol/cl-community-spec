{
    "name": "Conditional Execution Clauses",
    "prev": "Unconditional Execution Clauses",
    "next": "Miscellaneous Clauses",
    "up": "The LOOP Facility",
    "header": {
        "type": null,
        "text": "Conditional Execution Clauses"
    },
    "sections": [
        {
            "type": "",
            "text": "The if, when, and unless constructs establish conditional control in a\nloop. If the test passes, the succeeding loop clause is executed. If the\ntest does not pass, the succeeding clause is skipped, and program control\nmoves to the clause that follows the loop keyword else. If the test does\nnot pass and no else clause is supplied, control is transferred to the\nclause or construct following the entire conditional clause.\nIf conditional clauses are nested, each else is paired with the closest\npreceding conditional clause that has no associated else or end.\nIn the if and when clauses, which are synonymous, the test passes if the\nvalue of form is true.\nIn the unless clause, the test passes if the value of form is false.\nClauses that follow the test expression can be grouped by using the loop\nkeyword and to produce a conditional block consisting of a compound clause.\nThe loop keyword it can be used to refer to the result of the test\nexpression in a clause.  Use the loop keyword it in place of the form in a\nreturn clause or an accumulation clause that is inside a conditional\nexecution clause.  If multiple clauses are connected with and, the it\nconstruct must be in the first clause in the block.\nThe optional loop keyword end marks the end of the clause.  If this\nkeyword is not supplied, the next loop keyword marks the end.  The\nconstruct end can be used to distinguish the scoping of compound clauses.\n* Menu:\n* Examples of WHEN clause::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Conditional Execution Clauses,  Next: Miscellaneous Clauses,  Prev: Unconditional Execution Clauses,  Up: The LOOP Facility\n\nConditional Execution Clauses\n-----------------------------\n\nThe if, when, and unless constructs establish conditional control in a\nloop. If the test passes, the succeeding loop clause is executed. If the\ntest does not pass, the succeeding clause is skipped, and program control\nmoves to the clause that follows the loop keyword else. If the test does\nnot pass and no else clause is supplied, control is transferred to the\nclause or construct following the entire conditional clause.\n\nIf conditional clauses are nested, each else is paired with the closest\npreceding conditional clause that has no associated else or end.\n\nIn the if and when clauses, which are synonymous, the test passes if the\nvalue of form is true.\n\nIn the unless clause, the test passes if the value of form is false.\n\nClauses that follow the test expression can be grouped by using the loop\nkeyword and to produce a conditional block consisting of a compound clause.\n\nThe loop keyword it can be used to refer to the result of the test\nexpression in a clause.  Use the loop keyword it in place of the form in a\nreturn clause or an accumulation clause that is inside a conditional\nexecution clause.  If multiple clauses are connected with and, the it\nconstruct must be in the first clause in the block.\n\nThe optional loop keyword end marks the end of the clause.  If this\nkeyword is not supplied, the next loop keyword marks the end.  The\nconstruct end can be used to distinguish the scoping of compound clauses.\n\n* Menu:\n\n* Examples of WHEN clause::\n\n"
}