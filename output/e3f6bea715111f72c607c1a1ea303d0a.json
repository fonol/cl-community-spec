{
    "name": "translate-pathname",
    "prev": "translate-logical-pathname",
    "next": "merge-pathnames",
    "up": "Filenames Dictionary",
    "header": {
        "type": "Function",
        "text": "translate-pathname"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "translate-pathname",
                    "text": " source from-wildcard to-wildcard &key=>  translated-pathname\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "source",
                    "desc": "a pathname designator."
                },
                {
                    "name": "from-wildcard",
                    "desc": "a pathname designator."
                },
                {
                    "name": "to-wildcard",
                    "desc": "a pathname designator."
                },
                {
                    "name": "translated-pathname",
                    "desc": "a pathname."
                }
            ]
        },
        {
            "type": "Description",
            "text": "translate-pathname translates source (that matches from-wildcard) into a\ncorresponding pathname that matches to-wildcard, and returns the\ncorresponding pathname.\nThe resulting pathname is to-wildcard with each wildcard or missing field\nreplaced by a portion of source.  A \"wildcard field\" is a pathname\ncomponent with a value of :wild, a :wild element of a list-valued\ndirectory component, or an implementation-defined portion of a component,\nsuch as the \"*\" in the complex wildcard string \"foo*bar\" that some\nimplementations support.  An implementation that adds other wildcard\nfeatures, such as regular expressions, must define how translate-pathname\nextends to those features.  A \"missing field\" is a pathname component with\na value of nil.\nThe portion of source that is copied into the resulting pathname is\nimplementation-defined.  Typically it is determined by the user interface\nconventions of the file systems involved.  Usually it is the portion of\nsource that matches a wildcard field of from-wildcard that is in the same\nposition as the wildcard or missing field of to-wildcard.  If there is no\nwildcard field in from-wildcard at that position, then usually it is the\nentire corresponding pathname component of source, or in the case of a\nlist-valued directory component, the entire corresponding list element.\nDuring the copying of a portion of source into the resulting pathname,\nadditional implementation-defined translations of case or file naming\nconventions might occur, especially when from-wildcard and to-wildcard are\nfor different hosts.\nIt is valid for source to be a wild pathname; in general this will produce\na wild result.  It is valid for from-wildcard and/or to-wildcard to be\nnon-wild pathnames.\nThere are no specified keyword arguments for translate-pathname, but\nimplementations are permitted to extend it by adding keyword arguments.\ntranslate-pathname maps customary case in source into customary case in\nthe output pathname.\n"
        },
        {
            "type": "Examples",
            "text": "      ;; The results of the following five forms are all implementation-dependent.\n      ;; The second item in particular is shown with multiple results just to\n      ;; emphasize one of many particular variations which commonly occurs.\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"*baz\")) =>  \"barbaz\"\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"*\"))\n     =>  \"foobar\"\n     OR=> \"bar\"\n      (pathname-name (translate-pathname \"foobar\" \"*\"    \"foo*\")) =>  \"foofoobar\"\n      (pathname-name (translate-pathname \"bar\"    \"*\"    \"foo*\")) =>  \"foobar\"\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"baz*\")) =>  \"bazbar\"\n      (defun translate-logical-pathname-1 (pathname rules)\n        (let ((rule (assoc pathname rules :test #'pathname-match-p)))\n          (unless rule (error \"No translation rule for ~A\" pathname))\n          (translate-pathname pathname (first rule) (second rule))))\n      (translate-logical-pathname-1 \"FOO:CODE;BASIC.LISP\"\n                            '((\"FOO:DOCUMENTATION;\" \"MY-UNIX:/doc/foo/\")\n                              (\"FOO:CODE;\"          \"MY-UNIX:/lib/foo/\")\n                              (\"FOO:PATCHES;*;\"     \"MY-UNIX:/lib/foo/patch/*/\")))\n     =>  #P\"MY-UNIX:/lib/foo/basic.l\"\n     ;;;This example assumes one particular set of wildcard conventions\n     ;;;Not all file systems will run this example exactly as written\n      (defun rename-files (from to)\n        (dolist (file (directory from))\n          (rename-file file (translate-pathname file from to))))\n      (rename-files \"/usr/me/*.lisp\" \"/dev/her/*.l\")\n        ;Renames /usr/me/init.lisp to /dev/her/init.l\n      (rename-files \"/usr/me/pcl*/*\" \"/sys/pcl/*/\")\n        ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp\n        ;In some file systems the result might be /sys/pcl/5-may/low.lisp\n      (rename-files \"/usr/me/pcl*/*\" \"/sys/library/*/\")\n        ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp\n        ;In some file systems the result might be /sys/library/5-may/low.lisp\n      (rename-files \"/usr/me/foo.bar\" \"/usr/me2/\")\n        ;Renames /usr/me/foo.bar to /usr/me2/foo.bar\n      (rename-files \"/usr/joe/*-recipes.text\" \"/usr/jim/cookbook/joe's-*-rec.text\")\n        ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text\n        ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text\n        ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If any of source, from-wildcard, or to-wildcard is not a pathname, a\nstring, or a stream associated with a file an error of type type-error is\nsignaled.\n(pathname-match-p source from-wildcard) must be true or an error of type\nerror is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note namestring; file-namestring; directory-namestring; host-namestring;\nenough-namestring:: , *Note pathname-host; pathname-device;\npathname-directory; pathname-name; pathname-type; pathname-version:: ,\npathname, logical-pathname, *Note File System Concepts::,\n*Note Pathnames as Filenames::\n"
        },
        {
            "type": "Notes",
            "text": "The exact behavior of translate-pathname cannot be dictated by the Common\nLisp language and must be allowed to vary, depending on the user interface\nconventions of the file systems involved.\nThe following is an implementation guideline.  One file system performs\nthis operation by examining each piece of the three pathnames in turn,\nwhere a piece is a pathname component or a list element of a structured\ncomponent such as a hierarchical directory.  Hierarchical directory\nelements in from-wildcard and to-wildcard are matched by whether they are\nwildcards, not by depth in the directory hierarchy.  If the piece in\nto-wildcard is present and not wild, it is copied into the result.  If the\npiece in to-wildcard is :wild or nil, the piece in source is copied into\nthe result.  Otherwise, the piece in to-wildcard might be a complex\nwildcard such as \"foo*bar\" and the piece in from-wildcard should be wild;\nthe portion of the piece in source that matches the wildcard portion of\nthe piece in from-wildcard replaces the wildcard portion of the piece in\nto-wildcard and the value produced is used in the result.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: translate-pathname,  Next: merge-pathnames,  Prev: translate-logical-pathname,  Up: Filenames Dictionary\n\ntranslate-pathname                                               [Function]\n---------------------------------------------------------------------------\n\n`translate-pathname'  source from-wildcard to-wildcard &key\n=>  translated-pathname\n\nArguments and Values::\n......................\n\nsource--a pathname designator.\n\nfrom-wildcard--a pathname designator.\n\nto-wildcard--a pathname designator.\n\ntranslated-pathname--a pathname.\n\nDescription::\n.............\n\ntranslate-pathname translates source (that matches from-wildcard) into a\ncorresponding pathname that matches to-wildcard, and returns the\ncorresponding pathname.\n\nThe resulting pathname is to-wildcard with each wildcard or missing field\nreplaced by a portion of source.  A \"wildcard field\" is a pathname\ncomponent with a value of :wild, a :wild element of a list-valued\ndirectory component, or an implementation-defined portion of a component,\nsuch as the \"*\" in the complex wildcard string \"foo*bar\" that some\nimplementations support.  An implementation that adds other wildcard\nfeatures, such as regular expressions, must define how translate-pathname\nextends to those features.  A \"missing field\" is a pathname component with\na value of nil.\n\nThe portion of source that is copied into the resulting pathname is\nimplementation-defined.  Typically it is determined by the user interface\nconventions of the file systems involved.  Usually it is the portion of\nsource that matches a wildcard field of from-wildcard that is in the same\nposition as the wildcard or missing field of to-wildcard.  If there is no\nwildcard field in from-wildcard at that position, then usually it is the\nentire corresponding pathname component of source, or in the case of a\nlist-valued directory component, the entire corresponding list element.\n\nDuring the copying of a portion of source into the resulting pathname,\nadditional implementation-defined translations of case or file naming\nconventions might occur, especially when from-wildcard and to-wildcard are\nfor different hosts.\n\nIt is valid for source to be a wild pathname; in general this will produce\na wild result.  It is valid for from-wildcard and/or to-wildcard to be\nnon-wild pathnames.\n\nThere are no specified keyword arguments for translate-pathname, but\nimplementations are permitted to extend it by adding keyword arguments.\n\ntranslate-pathname maps customary case in source into customary case in\nthe output pathname.\n\nExamples::\n..........\n\n      ;; The results of the following five forms are all implementation-dependent.\n      ;; The second item in particular is shown with multiple results just to\n      ;; emphasize one of many particular variations which commonly occurs.\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"*baz\")) =>  \"barbaz\"\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"*\"))\n     =>  \"foobar\"\n     OR=> \"bar\"\n      (pathname-name (translate-pathname \"foobar\" \"*\"    \"foo*\")) =>  \"foofoobar\"\n      (pathname-name (translate-pathname \"bar\"    \"*\"    \"foo*\")) =>  \"foobar\"\n      (pathname-name (translate-pathname \"foobar\" \"foo*\" \"baz*\")) =>  \"bazbar\"\n     \n      (defun translate-logical-pathname-1 (pathname rules)\n        (let ((rule (assoc pathname rules :test #'pathname-match-p)))\n          (unless rule (error \"No translation rule for ~A\" pathname))\n          (translate-pathname pathname (first rule) (second rule))))\n      (translate-logical-pathname-1 \"FOO:CODE;BASIC.LISP\"\n                            '((\"FOO:DOCUMENTATION;\" \"MY-UNIX:/doc/foo/\")\n                              (\"FOO:CODE;\"          \"MY-UNIX:/lib/foo/\")\n                              (\"FOO:PATCHES;*;\"     \"MY-UNIX:/lib/foo/patch/*/\")))\n     =>  #P\"MY-UNIX:/lib/foo/basic.l\"\n     \n     ;;;This example assumes one particular set of wildcard conventions\n     ;;;Not all file systems will run this example exactly as written\n      (defun rename-files (from to)\n        (dolist (file (directory from))\n          (rename-file file (translate-pathname file from to))))\n      (rename-files \"/usr/me/*.lisp\" \"/dev/her/*.l\")\n        ;Renames /usr/me/init.lisp to /dev/her/init.l\n      (rename-files \"/usr/me/pcl*/*\" \"/sys/pcl/*/\")\n        ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp\n        ;In some file systems the result might be /sys/pcl/5-may/low.lisp\n      (rename-files \"/usr/me/pcl*/*\" \"/sys/library/*/\")\n        ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp\n        ;In some file systems the result might be /sys/library/5-may/low.lisp\n      (rename-files \"/usr/me/foo.bar\" \"/usr/me2/\")\n        ;Renames /usr/me/foo.bar to /usr/me2/foo.bar\n      (rename-files \"/usr/joe/*-recipes.text\" \"/usr/jim/cookbook/joe's-*-rec.text\")\n        ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text\n        ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text\n        ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text\n\nExceptional Situations::\n........................\n\nIf any of source, from-wildcard, or to-wildcard is not a pathname, a\nstring, or a stream associated with a file an error of type type-error is\nsignaled.\n\n(pathname-match-p source from-wildcard) must be true or an error of type\nerror is signaled.\n\nSee Also::\n..........\n\n*Note namestring; file-namestring; directory-namestring; host-namestring;\nenough-namestring:: , *Note pathname-host; pathname-device;\npathname-directory; pathname-name; pathname-type; pathname-version:: ,\n\npathname, logical-pathname, *Note File System Concepts::,\n\n*Note Pathnames as Filenames::\n\nNotes::\n.......\n\nThe exact behavior of translate-pathname cannot be dictated by the Common\nLisp language and must be allowed to vary, depending on the user interface\nconventions of the file systems involved.\n\nThe following is an implementation guideline.  One file system performs\nthis operation by examining each piece of the three pathnames in turn,\nwhere a piece is a pathname component or a list element of a structured\ncomponent such as a hierarchical directory.  Hierarchical directory\nelements in from-wildcard and to-wildcard are matched by whether they are\nwildcards, not by depth in the directory hierarchy.  If the piece in\nto-wildcard is present and not wild, it is copied into the result.  If the\npiece in to-wildcard is :wild or nil, the piece in source is copied into\nthe result.  Otherwise, the piece in to-wildcard might be a complex\nwildcard such as \"foo*bar\" and the piece in from-wildcard should be wild;\nthe portion of the piece in source that matches the wildcard portion of\nthe piece in from-wildcard replaces the wildcard portion of the piece in\nto-wildcard and the value produced is used in the result.\n\n"
}