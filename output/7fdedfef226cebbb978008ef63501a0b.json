{
    "name": "Array Upgrading",
    "prev": "Specialized Arrays",
    "next": "Required Kinds of Specialized Arrays",
    "up": "Specialized Arrays",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Array Upgrading",
            "text": "The upgraded array element type of a type T_1 is a type T_2 that is a\nsupertype of T_1 and that is used instead of T_1 whenever T_1 is used as\nan array element type for object creation or type discrimination.\nDuring creation of an array, the element type that was requested is called\nthe expressed array element type .  The upgraded array element type of the\nexpressed array element type becomes the actual array element type of the\narray that is created.\nType upgrading implies a movement upwards in the type hierarchy lattice.\nA type is always a subtype of its upgraded array element type.  Also, if a\ntype T_x is a subtype of another type T_y, then the upgraded array element\ntype of T_x must be a subtype of the upgraded array element type of T_y.\nTwo disjoint types can be upgraded to the same type.\nThe upgraded array element type T_2 of a type T_1 is a function only of\nT_1 itself; that is, it is independent of any other property of the array\nfor which T_2 will be used, such as rank, adjustability, fill pointers, or\ndisplacement.  The function upgraded-array-element-type can be used by\nconforming programs to predict how the implementation will upgrade a given\ntype.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Array Upgrading,  Next: Required Kinds of Specialized Arrays,  Prev: Specialized Arrays,  Up: Specialized Arrays\n\nArray Upgrading\n...............\n\nThe upgraded array element type of a type T_1 is a type T_2 that is a\nsupertype of T_1 and that is used instead of T_1 whenever T_1 is used as\nan array element type for object creation or type discrimination.\n\nDuring creation of an array, the element type that was requested is called\nthe expressed array element type .  The upgraded array element type of the\nexpressed array element type becomes the actual array element type of the\narray that is created.\n\nType upgrading implies a movement upwards in the type hierarchy lattice.\nA type is always a subtype of its upgraded array element type.  Also, if a\ntype T_x is a subtype of another type T_y, then the upgraded array element\ntype of T_x must be a subtype of the upgraded array element type of T_y.\nTwo disjoint types can be upgraded to the same type.\n\nThe upgraded array element type T_2 of a type T_1 is a function only of\nT_1 itself; that is, it is independent of any other property of the array\nfor which T_2 will be used, such as rank, adjustability, fill pointers, or\ndisplacement.  The function upgraded-array-element-type can be used by\nconforming programs to predict how the implementation will upgrade a given\ntype.\n\n"
}