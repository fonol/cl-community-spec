{
    "name": "float (System Class)",
    "prev": "real",
    "next": "short-float",
    "up": "Numbers Dictionary",
    "header": {
        "type": "System Class",
        "text": "float"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "number",
                    "link": "b1bc248a7ff2b2e95569f56de68615df"
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "A float is a mathematical rational (but not a Common Lisp rational) of the\nform s\\cdot f\\cdot b^e-p, where s is +1 or -1, the sign; b is an integer\ngreater than~1, the base or radix of the representation; p is a positive\ninteger, the precision (in base-b digits) of the float; f is a positive\ninteger between b^p-1 and b^p-1 (inclusive), the significand; and e is an\ninteger, the exponent.  The value of p and the range of~e depends on the\nimplementation and on the type of float within that implementation. In\naddition, there is a floating-point zero; depending on the implementation,\nthere can also be a \"minus zero\". If there is no minus zero, then 0.0\nand~-0.0 are both interpreted as simply a floating-point zero.  (= 0.0\n-0.0) is always true.  If there is a minus zero, (eql -0.0 0.0) is false,\notherwise it is true.\n[Reviewer Note by Barmar: What about IEEE NaNs and infinities?]\n[Reviewer Note by RWK: In the following, what is the \"ordering\"?\nprecision? range?  Can there be additional subtypes of float or does\n\"others\" in the list of four?]\nThe types short-float, single-float, double-float, and long-float are\nsubtypes of type float.  Any two of them must be either disjoint types or\nthe same type; if the same type, then any other types between them in the\nabove ordering must also be the same type.  For example, if the type\nsingle-float and the type long-float are the same type, then the type\ndouble-float must be the same type also.\n"
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Abbreviating.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`float'{[lower-limit [upper-limit]]})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "lower-limit, upper-limit--interval designators for type float.  The\ndefaults for each of lower-limit and upper-limit is the symbol *.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the floats on the interval described by lower-limit and\nupper-limit.\n"
        },
        {
            "type": "See Also",
            "text": "Figure~2-9, *Note Constructing Numbers from Tokens::, *Note Printing\nFloats::\n"
        },
        {
            "type": "Notes",
            "text": "Note that all mathematical integers are representable not only as Common\nLisp reals, but also as complex floats.  For example, possible\nrepresentations of the mathematical number 1 include the integer 1, the\nfloat 1.0, or the complex #C(1.0 0.0).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: float (System Class),  Next: short-float,  Prev: real,  Up: Numbers Dictionary\n\nfloat                                                        [System Class]\n---------------------------------------------------------------------------\n\nClass Precedence List::\n.......................\n\nfloat,\n\nreal,\n\nnumber, t\n\nDescription::\n.............\n\nA float is a mathematical rational (but not a Common Lisp rational) of the\nform s\\cdot f\\cdot b^e-p, where s is +1 or -1, the sign; b is an integer\ngreater than~1, the base or radix of the representation; p is a positive\ninteger, the precision (in base-b digits) of the float; f is a positive\ninteger between b^p-1 and b^p-1 (inclusive), the significand; and e is an\ninteger, the exponent.  The value of p and the range of~e depends on the\nimplementation and on the type of float within that implementation. In\naddition, there is a floating-point zero; depending on the implementation,\nthere can also be a \"minus zero\". If there is no minus zero, then 0.0\nand~-0.0 are both interpreted as simply a floating-point zero.  (= 0.0\n-0.0) is always true.  If there is a minus zero, (eql -0.0 0.0) is false,\notherwise it is true.\n\n[Reviewer Note by Barmar: What about IEEE NaNs and infinities?]\n\n[Reviewer Note by RWK: In the following, what is the \"ordering\"?\nprecision? range?  Can there be additional subtypes of float or does\n\"others\" in the list of four?]\n\nThe types short-float, single-float, double-float, and long-float are\nsubtypes of type float.  Any two of them must be either disjoint types or\nthe same type; if the same type, then any other types between them in the\nabove ordering must also be the same type.  For example, if the type\nsingle-float and the type long-float are the same type, then the type\ndouble-float must be the same type also.\n\nCompound Type Specifier Kind::\n..............................\n\nAbbreviating.\n\nCompound Type Specifier Syntax::\n................................\n\n(`float'{[lower-limit [upper-limit]]})\n\nCompound Type Specifier Arguments::\n...................................\n\nlower-limit, upper-limit--interval designators for type float.  The\ndefaults for each of lower-limit and upper-limit is the symbol *.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the floats on the interval described by lower-limit and\nupper-limit.\n\nSee Also::\n..........\n\nFigure~2-9, *Note Constructing Numbers from Tokens::, *Note Printing\nFloats::\n\nNotes::\n.......\n\nNote that all mathematical integers are representable not only as Common\nLisp reals, but also as complex floats.  For example, possible\nrepresentations of the mathematical number 1 include the integer 1, the\nfloat 1.0, or the complex #C(1.0 0.0).\n\n"
}