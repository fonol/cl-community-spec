{
    "name": "The for-as-equals-then subclause",
    "prev": "Examples of for-as-on-list subclause",
    "next": "Examples of for-as-equals-then subclause",
    "up": "Variable Initialization and Stepping Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The for-as-equals-then subclause",
            "text": "In the for-as-equals-then subclause the for or as construct initializes\nthe variable var by setting it to the result of evaluating form1 on the\nfirst iteration, then setting it to the result of evaluating form2 on the\nsecond and subsequent iterations.  If form2 is omitted, the construct uses\nform1 on the second and subsequent iterations.  The loop keywords = and\nthen serve as valid prepositions in this syntax.  This construct does not\nprovide any termination tests.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The for-as-equals-then subclause,  Next: Examples of for-as-equals-then subclause,  Prev: Examples of for-as-on-list subclause,  Up: Variable Initialization and Stepping Clauses\n\nThe for-as-equals-then subclause\n................................\n\nIn the for-as-equals-then subclause the for or as construct initializes\nthe variable var by setting it to the result of evaluating form1 on the\nfirst iteration, then setting it to the result of evaluating form2 on the\nsecond and subsequent iterations.  If form2 is omitted, the construct uses\nform1 on the second and subsequent iterations.  The loop keywords = and\nthen serve as valid prepositions in this syntax.  This construct does not\nprovide any termination tests.\n\n"
}