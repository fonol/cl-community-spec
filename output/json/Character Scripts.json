{
    "name": "Character Scripts",
    "prev": "Introduction to Scripts and Repertoires",
    "next": "Character Repertoires",
    "up": "Introduction to Scripts and Repertoires",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Character Scripts",
            "text": "A script is one of possibly several sets that form an exhaustive partition\nof the type character.\nThe number of such sets and boundaries between them is\nimplementation-defined.  Common Lisp does not require these sets to be\ntypes, but an implementation is permitted to define such types as an\nextension.  Since no character from one script can ever be a member of\nanother script, it is generally more useful to speak about character\nrepertoires.\nAlthough the term \"script\" is chosen for definitional compatibility with\nISO terminology, no conforming implementation is required to use any\nparticular scripts standardized by ISO or by any other standards\norganization.\nWhether and how the script or scripts used by any given implementation are\nnamed is implementation-dependent.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Character Scripts,  Next: Character Repertoires,  Prev: Introduction to Scripts and Repertoires,  Up: Introduction to Scripts and Repertoires\n\nCharacter Scripts\n.................\n\nA script is one of possibly several sets that form an exhaustive partition\nof the type character.\n\nThe number of such sets and boundaries between them is\nimplementation-defined.  Common Lisp does not require these sets to be\ntypes, but an implementation is permitted to define such types as an\nextension.  Since no character from one script can ever be a member of\nanother script, it is generally more useful to speak about character\nrepertoires.\n\nAlthough the term \"script\" is chosen for definitional compatibility with\nISO terminology, no conforming implementation is required to use any\nparticular scripts standardized by ISO or by any other standards\norganization.\n\nWhether and how the script or scripts used by any given implementation are\nnamed is implementation-dependent.\n\n"
}