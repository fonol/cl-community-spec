{
    "name": "complex (System Class)",
    "prev": "number",
    "next": "real",
    "up": "Numbers Dictionary",
    "header": {
        "type": "System Class",
        "text": "complex"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "complex",
                    "link": "complex"
                },
                {
                    "name": " number",
                    "link": null
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "The type complex includes all mathematical complex numbers other than\nthose included in the type rational.  Complexes are expressed in Cartesian\nform with a real part and an imaginary part, each of which is a real.  The\nreal part and imaginary part are either both rational or both of the same\nfloat type.  The imaginary part can be a float zero, but can never be a\nrational zero, for such a number is always represented by Common Lisp as a\nrational rather than a complex.\n"
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Specializing.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`complex'{[typespec | *]})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "typespec--a type specifier that denotes a subtype of type real.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "[Editorial Note by KMP: If you ask me, this definition is a complete mess.\nLooking at issue ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING does\nnot help me figure it out, either.  Anyone got any suggestions?]\nEvery element of this type is a complex whose real part and imaginary part\nare each of type\n(upgraded-complex-part-type typespec).\nThis type encompasses those complexes that can result by giving numbers of\ntype typespec to complex.\n(complex type-specifier) refers to all complexes that can result from\ngiving numbers of type type-specifier to the function complex, plus all\nother complexes of the same specialized representation.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Rule of Canonical Representation for Complex Rationals::, *Note\nConstructing Numbers from Tokens::, *Note Printing Complexes::\n"
        },
        {
            "type": "Notes",
            "text": "The input syntax for a complex with real part r and imaginary part i is\n#C(r i).  For further details, see *Note Standard Macro Characters::.\nFor every float, n, there is a complex which represents the same\nmathematical number and which can be obtained by (COERCE n 'COMPLEX).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: complex (System Class),  Next: real,  Prev: number,  Up: Numbers Dictionary\n\ncomplex                                                      [System Class]\n---------------------------------------------------------------------------\n\nClass Precedence List::\n.......................\n\ncomplex, number, t\n\nDescription::\n.............\n\nThe type complex includes all mathematical complex numbers other than\nthose included in the type rational.  Complexes are expressed in Cartesian\nform with a real part and an imaginary part, each of which is a real.  The\nreal part and imaginary part are either both rational or both of the same\nfloat type.  The imaginary part can be a float zero, but can never be a\nrational zero, for such a number is always represented by Common Lisp as a\nrational rather than a complex.\n\nCompound Type Specifier Kind::\n..............................\n\nSpecializing.\n\nCompound Type Specifier Syntax::\n................................\n\n(`complex'{[typespec | *]})\n\nCompound Type Specifier Arguments::\n...................................\n\ntypespec--a type specifier that denotes a subtype of type real.\n\nCompound Type Specifier Description::\n.....................................\n\n[Editorial Note by KMP: If you ask me, this definition is a complete mess.\nLooking at issue ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING does\nnot help me figure it out, either.  Anyone got any suggestions?]\n\nEvery element of this type is a complex whose real part and imaginary part\nare each of type\n\n(upgraded-complex-part-type typespec).\n\nThis type encompasses those complexes that can result by giving numbers of\ntype typespec to complex.\n\n(complex type-specifier) refers to all complexes that can result from\ngiving numbers of type type-specifier to the function complex, plus all\nother complexes of the same specialized representation.\n\nSee Also::\n..........\n\n*Note Rule of Canonical Representation for Complex Rationals::, *Note\nConstructing Numbers from Tokens::, *Note Printing Complexes::\n\nNotes::\n.......\n\nThe input syntax for a complex with real part r and imaginary part i is\n#C(r i).  For further details, see *Note Standard Macro Characters::.\n\nFor every float, n, there is a complex which represents the same\nmathematical number and which can be obtained by (COERCE n 'COMPLEX).\n\n"
}