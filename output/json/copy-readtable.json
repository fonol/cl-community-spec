{
    "name": "copy-readtable",
    "prev": "readtable",
    "next": "make-dispatch-macro-character",
    "up": "Reader Dictionary",
    "header": {
        "type": "Function",
        "text": "copy-readtable"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "copy-readtable",
                    "text": " &optional from-readtable to-readtable =>  readtable\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "from-readtable",
                    "desc": "a readtable designator.  The default is the current"
                },
                {
                    "name": "from-readtable",
                    "desc": "a readtable designator.  The default is the currentreadtable.\n"
                },
                {
                    "name": "to-readtable",
                    "desc": "a readtable or nil.  The default is nil."
                },
                {
                    "name": "readtable",
                    "desc": "the to-readtable if it is non-nil, or else a fresh readtable."
                }
            ]
        },
        {
            "type": "Description",
            "text": "copy-readtable copies from-readtable.\nIf to-readtable is nil, a new readtable is created and returned.\nOtherwise the readtable specified by to-readtable is modified and returned.\ncopy-readtable copies the setting of readtable-case.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq zvar 123) =>  123\n      (set-syntax-from-char #\\z #\\' (setq table2 (copy-readtable))) =>  T\n      zvar =>  123\n      (copy-readtable table2 *readtable*) =>  #<READTABLE 614000277>\n      zvar =>  VAR\n      (setq *readtable* (copy-readtable)) =>  #<READTABLE 46210223>\n      zvar =>  VAR\n      (setq *readtable* (copy-readtable nil)) =>  #<READTABLE 46302670>\n      zvar =>  123\n"
        },
        {
            "type": "See Also",
            "text": "readtable, *Note readtable::\n"
        },
        {
            "type": "Notes",
            "text": "     (setq *readtable* (copy-readtable nil))\nrestores the input syntax to standard Common Lisp syntax, even if the\ninitial readtable has been clobbered (assuming it is not so badly\nclobbered that you cannot type in the above expression).\nOn the other hand,\n     (setq *readtable* (copy-readtable))\nreplaces the current readtable with a copy of itself.  This is useful if\nyou want to save a copy of a readtable for later use, protected from\nalteration in the meantime.  It is also useful if you want to locally bind\nthe readtable to a copy of itself, as in:\n     (let ((*readtable* (copy-readtable))) ...)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: copy-readtable,  Next: make-dispatch-macro-character,  Prev: readtable,  Up: Reader Dictionary\n\ncopy-readtable                                                   [Function]\n---------------------------------------------------------------------------\n\n`copy-readtable'  &optional from-readtable to-readtable =>  readtable\n\nArguments and Values::\n......................\n\nfrom-readtable--a readtable designator.  The default is the current\nreadtable.\n\nto-readtable--a readtable or nil.  The default is nil.\n\nreadtable--the to-readtable if it is non-nil, or else a fresh readtable.\n\nDescription::\n.............\n\ncopy-readtable copies from-readtable.\n\nIf to-readtable is nil, a new readtable is created and returned.\nOtherwise the readtable specified by to-readtable is modified and returned.\n\ncopy-readtable copies the setting of readtable-case.\n\nExamples::\n..........\n\n      (setq zvar 123) =>  123\n      (set-syntax-from-char #\\z #\\' (setq table2 (copy-readtable))) =>  T\n      zvar =>  123\n      (copy-readtable table2 *readtable*) =>  #<READTABLE 614000277>\n      zvar =>  VAR\n      (setq *readtable* (copy-readtable)) =>  #<READTABLE 46210223>\n      zvar =>  VAR\n      (setq *readtable* (copy-readtable nil)) =>  #<READTABLE 46302670>\n      zvar =>  123\n\nSee Also::\n..........\n\nreadtable, *Note readtable::\n\nNotes::\n.......\n\n     (setq *readtable* (copy-readtable nil))\n\nrestores the input syntax to standard Common Lisp syntax, even if the\ninitial readtable has been clobbered (assuming it is not so badly\nclobbered that you cannot type in the above expression).\n\nOn the other hand,\n\n     (setq *readtable* (copy-readtable))\n\nreplaces the current readtable with a copy of itself.  This is useful if\nyou want to save a copy of a readtable for later use, protected from\nalteration in the meantime.  It is also useful if you want to locally bind\nthe readtable to a copy of itself, as in:\n\n     (let ((*readtable* (copy-readtable))) ...)\n\n"
}