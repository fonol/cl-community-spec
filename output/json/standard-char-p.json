{
    "name": "standard-char-p",
    "prev": "graphic-char-p",
    "next": "char-upcase",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "standard-char-p"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "standard-char-p",
                    "text": " character =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character",
                    "desc": "a character."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if character is of type standard-char; otherwise, returns\nfalse.\n"
        },
        {
            "type": "Examples",
            "text": "      (standard-char-p #\\Space) =>  true\n      (standard-char-p #\\~) =>  true\n      ;; This next example presupposes an implementation\n      ;; in which #\\Bell is a defined character.\n      (standard-char-p #\\Bell) =>  false\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if character is not a character.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: standard-char-p,  Next: char-upcase,  Prev: graphic-char-p,  Up: Characters Dictionary\n\nstandard-char-p                                                  [Function]\n---------------------------------------------------------------------------\n\n`standard-char-p'  character =>  generalized-boolean\n\nArguments and Values::\n......................\n\ncharacter--a character.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if character is of type standard-char; otherwise, returns\nfalse.\n\nExamples::\n..........\n\n      (standard-char-p #\\Space) =>  true\n      (standard-char-p #\\~) =>  true\n      ;; This next example presupposes an implementation\n      ;; in which #\\Bell is a defined character.\n      (standard-char-p #\\Bell) =>  false\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if character is not a character.\n\n"
}