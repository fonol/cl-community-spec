{
    "name": "Potential Numbers as Tokens",
    "prev": "Numbers as Tokens",
    "next": "Escape Characters and Potential Numbers",
    "up": "Numbers as Tokens",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Potential Numbers as Tokens",
            "text": "To allow implementors and future Common Lisp standards to extend the\nsyntax of numbers, a syntax for potential numbers is defined that is more\ngeneral than the syntax for numbers.  A token is a potential number if it\nsatisfies all of the following requirements:\n1.\n     The token consists entirely of digits, signs, ratio markers, decimal\n     points (.), extension characters (^ or _), and number markers.  A\n     number marker is a letter.  Whether a letter may be treated as a\n     number marker depends on context, but no letter that is adjacent to\n     another letter may ever be treated as a number marker.  Exponent\n     markers are number markers.\n2.\n     The token contains at least one digit.  Letters may be considered to\n     be digits, depending on the current input base, but only in tokens\n     containing no decimal points.\n3.\n     The token begins with a digit, sign, decimal point, or extension\n     character,\n     [Reviewer Note by Barmar: This section is unnecessary because the\n     first bullet already omits discussion of a colon (package marker).]\n     but not a package marker.  The syntax involving a leading package\n     marker followed by a potential number is not well-defined. The\n     consequences of the use of notation such as :1, :1/2, and :2^3 in a\n     position where an expression appropriate for read is expected are\n     unspecified.\n4.\n     The token does not end with a sign.\nIf a potential number has number syntax, a number of the appropriate type\nis constructed and returned, if the number is representable in an\nimplementation.  A number will not be representable in an implementation\nif it is outside the boundaries set by the implementation-dependent\nconstants for numbers.  For example, specifying too large or too small an\nexponent for a float may make the number impossible to represent in the\nimplementation.  A ratio with denominator zero (such as -35/000) is not\nrepresented in any implementation.  When a token with the syntax of a\nnumber cannot be converted to an internal number, an error of type\nreader-error is signaled.  An error must not be signaled for specifying\ntoo many significant digits for a float; a truncated or rounded value\nshould be produced.\nIf there is an ambiguity as to whether a letter should be treated as a\ndigit or as a number marker, the letter is treated as a digit.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Potential Numbers as Tokens,  Next: Escape Characters and Potential Numbers,  Prev: Numbers as Tokens,  Up: Numbers as Tokens\n\nPotential Numbers as Tokens\n...........................\n\nTo allow implementors and future Common Lisp standards to extend the\nsyntax of numbers, a syntax for potential numbers is defined that is more\ngeneral than the syntax for numbers.  A token is a potential number if it\nsatisfies all of the following requirements:\n\n1.\n     The token consists entirely of digits, signs, ratio markers, decimal\n     points (.), extension characters (^ or _), and number markers.  A\n     number marker is a letter.  Whether a letter may be treated as a\n     number marker depends on context, but no letter that is adjacent to\n     another letter may ever be treated as a number marker.  Exponent\n     markers are number markers.\n\n2.\n     The token contains at least one digit.  Letters may be considered to\n     be digits, depending on the current input base, but only in tokens\n     containing no decimal points.\n\n3.\n     The token begins with a digit, sign, decimal point, or extension\n     character,\n\n     [Reviewer Note by Barmar: This section is unnecessary because the\n     first bullet already omits discussion of a colon (package marker).]\n     but not a package marker.  The syntax involving a leading package\n     marker followed by a potential number is not well-defined. The\n     consequences of the use of notation such as :1, :1/2, and :2^3 in a\n     position where an expression appropriate for read is expected are\n     unspecified.\n\n4.\n     The token does not end with a sign.\n\nIf a potential number has number syntax, a number of the appropriate type\nis constructed and returned, if the number is representable in an\nimplementation.  A number will not be representable in an implementation\nif it is outside the boundaries set by the implementation-dependent\nconstants for numbers.  For example, specifying too large or too small an\nexponent for a float may make the number impossible to represent in the\nimplementation.  A ratio with denominator zero (such as -35/000) is not\nrepresented in any implementation.  When a token with the syntax of a\nnumber cannot be converted to an internal number, an error of type\nreader-error is signaled.  An error must not be signaled for specifying\ntoo many significant digits for a float; a truncated or rounded value\nshould be produced.\n\nIf there is an ambiguity as to whether a letter should be treated as a\ndigit or as a number marker, the letter is treated as a digit.\n\n"
}