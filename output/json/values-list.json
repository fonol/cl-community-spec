{
    "name": "values-list",
    "prev": "values",
    "next": "multiple-values-limit",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "values-list"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "values-list",
                    "text": " list =>  {element}*\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list."
                },
                {
                    "name": "elements",
                    "desc": "the elements of the list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the elements of the list as multiple values_2.\n"
        },
        {
            "type": "Examples",
            "text": "      (values-list nil) =>  <no values>\n      (values-list '(1)) =>  1\n      (values-list '(1 2)) =>  1, 2\n      (values-list '(1 2 3)) =>  1, 2, 3\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal type-error if its argument is not a proper list.\n"
        },
        {
            "type": "See Also",
            "text": "*Note multiple-value-bind:: , *Note multiple-value-list:: , *Note\nmultiple-values-limit:: , *Note values::\n"
        },
        {
            "type": "Notes",
            "text": "      (values-list list) == (apply #'values list)\n(equal x (multiple-value-list (values-list x))) returns true for all lists\nx.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: values-list,  Next: multiple-values-limit,  Prev: values,  Up: Data and Control Flow Dictionary\n\nvalues-list                                                      [Function]\n---------------------------------------------------------------------------\n\n`values-list'  list =>  {element}*\n\nArguments and Values::\n......................\n\nlist--a list.\n\nelements--the elements of the list.\n\nDescription::\n.............\n\nReturns the elements of the list as multiple values_2.\n\nExamples::\n..........\n\n      (values-list nil) =>  <no values>\n      (values-list '(1)) =>  1\n      (values-list '(1 2)) =>  1, 2\n      (values-list '(1 2 3)) =>  1, 2, 3\n\nExceptional Situations::\n........................\n\nShould signal type-error if its argument is not a proper list.\n\nSee Also::\n..........\n\n*Note multiple-value-bind:: , *Note multiple-value-list:: , *Note\nmultiple-values-limit:: , *Note values::\n\nNotes::\n.......\n\n      (values-list list) == (apply #'values list)\n\n(equal x (multiple-value-list (values-list x))) returns true for all lists\nx.\n\n"
}