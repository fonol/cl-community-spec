{
    "name": "pairlis",
    "prev": "copy-alist",
    "next": "rassoc",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "pairlis"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "pairlis",
                    "text": " keys data &optional alist =>  new-alist\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "keys",
                    "desc": "a proper list."
                },
                {
                    "name": "data",
                    "desc": "a proper list."
                },
                {
                    "name": "alist",
                    "desc": "an association list.  The default is the empty list."
                },
                {
                    "name": "new-alist",
                    "desc": "an association list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns an association list that associates elements of keys to\ncorresponding elements of data.  The consequences are undefined if keys\nand data are not of the same length.\nIf alist is supplied, pairlis returns a modified alist with the new pairs\nprepended to it.  The new pairs may appear in the resulting association\nlist in either forward or backward order.  The result of\n      (pairlis '(one two) '(1 2) '((three . 3) (four . 19)))\nmight be\n      ((one . 1) (two . 2) (three . 3) (four . 19))\nor\n      ((two . 2) (one . 1) (three . 3) (four . 19))\n"
        },
        {
            "type": "Examples",
            "text": "      (setq keys '(1 2 3)\n             data '(\"one\" \"two\" \"three\")\n             alist '((4 . \"four\"))) =>  ((4 . \"four\"))\n      (pairlis keys data) =>  ((3 . \"three\") (2 . \"two\") (1 . \"one\"))\n      (pairlis keys data alist)\n     =>  ((3 . \"three\") (2 . \"two\") (1 . \"one\") (4 . \"four\"))\n      alist =>  ((4 . \"four\"))\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if keys and data\nare not proper lists.\n"
        },
        {
            "type": "See Also",
            "text": "*Note acons::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: pairlis,  Next: rassoc,  Prev: copy-alist,  Up: Conses Dictionary\n\npairlis                                                          [Function]\n---------------------------------------------------------------------------\n\n`pairlis'  keys data &optional alist =>  new-alist\n\nArguments and Values::\n......................\n\nkeys--a proper list.\n\ndata--a proper list.\n\nalist--an association list.  The default is the empty list.\n\nnew-alist--an association list.\n\nDescription::\n.............\n\nReturns an association list that associates elements of keys to\ncorresponding elements of data.  The consequences are undefined if keys\nand data are not of the same length.\n\nIf alist is supplied, pairlis returns a modified alist with the new pairs\nprepended to it.  The new pairs may appear in the resulting association\nlist in either forward or backward order.  The result of\n\n      (pairlis '(one two) '(1 2) '((three . 3) (four . 19)))\n\nmight be\n\n      ((one . 1) (two . 2) (three . 3) (four . 19))\n\nor\n\n      ((two . 2) (one . 1) (three . 3) (four . 19))\n\nExamples::\n..........\n\n      (setq keys '(1 2 3)\n             data '(\"one\" \"two\" \"three\")\n             alist '((4 . \"four\"))) =>  ((4 . \"four\"))\n      (pairlis keys data) =>  ((3 . \"three\") (2 . \"two\") (1 . \"one\"))\n      (pairlis keys data alist)\n     =>  ((3 . \"three\") (2 . \"two\") (1 . \"one\") (4 . \"four\"))\n      alist =>  ((4 . \"four\"))\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if keys and data\nare not proper lists.\n\nSee Also::\n..........\n\n*Note acons::\n\n"
}