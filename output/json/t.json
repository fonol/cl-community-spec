{
    "name": "t",
    "prev": "not",
    "next": "eq",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Constant Variable",
        "text": "t"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Constant Value",
            "text": "t.\n"
        },
        {
            "type": "Description",
            "text": "The boolean representing true, and the canonical generalized boolean\nrepresenting true.  Although any object other than nil is considered true,\nt is generally used when there is no special reason to prefer one such\nobject over another.\nThe symbol t is also sometimes used for other purposes as well.  For\nexample, as the name of a class, as a designator (e.g., a stream\ndesignator) or as a special symbol for some syntactic reason (e.g., in\ncase and typecase to label the otherwise-clause).\n"
        },
        {
            "type": "Examples",
            "text": "      t =>  T\n      (eq t 't) =>  true\n      (find-class 't) =>  #<CLASS T 610703333>\n      (case 'a (a 1) (t 2)) =>  1\n      (case 'b (a 1) (t 2)) =>  2\n      (prin1 'hello t)\n      |>  HELLO\n     =>  HELLO\n"
        },
        {
            "type": "See Also",
            "text": "*Note NIL::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: t,  Next: eq,  Prev: not,  Up: Data and Control Flow Dictionary\n\nt                                                       [Constant Variable]\n---------------------------------------------------------------------------\n\nConstant Value::\n................\n\nt.\n\nDescription::\n.............\n\nThe boolean representing true, and the canonical generalized boolean\nrepresenting true.  Although any object other than nil is considered true,\nt is generally used when there is no special reason to prefer one such\nobject over another.\n\nThe symbol t is also sometimes used for other purposes as well.  For\nexample, as the name of a class, as a designator (e.g., a stream\ndesignator) or as a special symbol for some syntactic reason (e.g., in\ncase and typecase to label the otherwise-clause).\n\nExamples::\n..........\n\n      t =>  T\n      (eq t 't) =>  true\n      (find-class 't) =>  #<CLASS T 610703333>\n      (case 'a (a 1) (t 2)) =>  1\n      (case 'b (a 1) (t 2)) =>  2\n      (prin1 'hello t)\n      |>  HELLO\n     =>  HELLO\n\nSee Also::\n..........\n\n*Note NIL::\n\n"
}