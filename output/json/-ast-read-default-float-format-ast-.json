{
    "name": "*read-default-float-format*",
    "prev": "*read-base*",
    "next": "*read-eval*",
    "up": "Reader Dictionary",
    "header": {
        "type": "Variable",
        "text": "*read-default-float-format*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "one of the atomic type specifiers short-float, single-float, double-float,\nor long-float, or else some other type specifier defined by the\nimplementation to be acceptable.\n"
        },
        {
            "type": "Initial Value",
            "text": "The symbol single-float.\n"
        },
        {
            "type": "Description",
            "text": "Controls the floating-point format that is to be used when reading a\nfloating-point number that has no exponent marker or that has e or E for\nan exponent marker.  Other exponent markers explicitly prescribe the\nfloating-point format to be used.\nThe printer uses *read-default-float-format* to guide the choice of\nexponent markers when printing floating-point numbers.\n"
        },
        {
            "type": "Examples",
            "text": "      (let ((*read-default-float-format* 'double-float))\n        (read-from-string \"(1.0 1.0e0 1.0s0 1.0f0 1.0d0 1.0L0)\"))\n     =>  (1.0   1.0   1.0   1.0 1.0   1.0)   ;Implementation has float format F.\n     =>  (1.0   1.0   1.0s0 1.0 1.0   1.0)   ;Implementation has float formats S and F.\n     =>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0d0) ;Implementation has float formats F and D.\n     =>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0d0) ;Implementation has float formats S, F, D.\n     =>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0L0) ;Implementation has float formats F, D, L.\n     =>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0L0) ;Implementation has formats S, F, D, L.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *read-default-float-format*,  Next: *read-eval*,  Prev: *read-base*,  Up: Reader Dictionary\n\n*read-default-float-format*                                      [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\none of the atomic type specifiers short-float, single-float, double-float,\nor long-float, or else some other type specifier defined by the\nimplementation to be acceptable.\n\nInitial Value::\n...............\n\nThe symbol single-float.\n\nDescription::\n.............\n\nControls the floating-point format that is to be used when reading a\nfloating-point number that has no exponent marker or that has e or E for\nan exponent marker.  Other exponent markers explicitly prescribe the\nfloating-point format to be used.\n\nThe printer uses *read-default-float-format* to guide the choice of\nexponent markers when printing floating-point numbers.\n\nExamples::\n..........\n\n      (let ((*read-default-float-format* 'double-float))\n        (read-from-string \"(1.0 1.0e0 1.0s0 1.0f0 1.0d0 1.0L0)\"))\n     =>  (1.0   1.0   1.0   1.0 1.0   1.0)   ;Implementation has float format F.\n     =>  (1.0   1.0   1.0s0 1.0 1.0   1.0)   ;Implementation has float formats S and F.\n     =>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0d0) ;Implementation has float formats F and D.\n     =>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0d0) ;Implementation has float formats S, F, D.\n     =>  (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0L0) ;Implementation has float formats F, D, L.\n     =>  (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0L0) ;Implementation has formats S, F, D, L.\n\n"
}