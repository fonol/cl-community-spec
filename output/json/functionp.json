{
    "name": "functionp",
    "prev": "function-lambda-expression",
    "next": "compiled-function-p",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "functionp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "functionp",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type function; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (functionp 'append) =>  false\n      (functionp #'append) =>  true\n      (functionp (symbol-function 'append)) =>  true\n      (flet ((f () 1)) (functionp #'f)) =>  true\n      (functionp (compile nil '(lambda () 259))) =>  true\n      (functionp nil) =>  false\n      (functionp 12) =>  false\n      (functionp '(lambda (x) (* x x))) =>  false\n      (functionp #'(lambda (x) (* x x))) =>  true\n"
        },
        {
            "type": "Notes",
            "text": "      (functionp object) == (typep object 'function)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: functionp,  Next: compiled-function-p,  Prev: function-lambda-expression,  Up: Data and Control Flow Dictionary\n\nfunctionp                                                        [Function]\n---------------------------------------------------------------------------\n\n`functionp'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type function; otherwise, returns false.\n\nExamples::\n..........\n\n      (functionp 'append) =>  false\n      (functionp #'append) =>  true\n      (functionp (symbol-function 'append)) =>  true\n      (flet ((f () 1)) (functionp #'f)) =>  true\n      (functionp (compile nil '(lambda () 259))) =>  true\n      (functionp nil) =>  false\n      (functionp 12) =>  false\n      (functionp '(lambda (x) (* x x))) =>  false\n      (functionp #'(lambda (x) (* x x))) =>  true\n\nNotes::\n.......\n\n      (functionp object) == (typep object 'function)\n\n"
}