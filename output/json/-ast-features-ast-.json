{
    "name": "*features*",
    "prev": "with-compilation-unit",
    "next": "*compile-file-pathname*",
    "up": "System Construction Dictionary",
    "header": {
        "type": "Variable",
        "text": "*features*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a proper list.\n"
        },
        {
            "type": "Initial Value",
            "text": "implementation-dependent.\n"
        },
        {
            "type": "Description",
            "text": "The value of *features* is called the features list.  It is a list of\nsymbols, called features, that correspond to some aspect of the\nimplementation or environment.\nMost features have implementation-dependent meanings; The following\nmeanings have been assigned to feature names:\n:cltl1\n     If present, indicates that the LISP package purports to conform to\n     the 1984 specification Common Lisp: The Language.  It is possible,\n     but not required, for a conforming implementation to have this\n     feature because this specification specifies that its symbols are to\n     be in the COMMON-LISP package, not the LISP package.\n:cltl2\n     If present, indicates that the implementation purports to conform to\n     Common Lisp: The Language, Second Edition.  This feature must not be\n     present in any conforming implementation, since conformance to that\n     document is not compatible with conformance to this specification.\n     The name, however, is reserved by this specification in order to help\n     programs distinguish implementations which conform to that document\n     from implementations which conform to this specification.\n:ieee-floating-point\n     If present, indicates that the implementation purports to conform to\n     the requirements of IEEE Standard for Binary Floating-Point\n     Arithmetic.\n:x3j13\n     If present, indicates that the implementation conforms to some\n     particular working draft of this specification, or to some subset of\n     features that approximates a belief about what this specification\n     might turn out to contain.  A conforming implementation might or\n     might not contain such a feature.  (This feature is intended\n     primarily as a stopgap in order to provide implementors something to\n     use prior to the availability of a draft standard, in order to\n     discourage them from introducing the :draft-ansi-cl and :ansi-cl\n     features prematurely.)\n:draft-ansi-cl\n     If present, indicates that the implementation purports to conform to\n     the first full draft of this specification, which went to public\n     review in 1992.  A conforming implementation which has the\n     :draft-ansi-cl-2 or :ansi-cl feature is not permitted to retain the\n     :draft-ansi-cl feature since incompatible changes were made\n     subsequent to the first draft.\n:draft-ansi-cl-2\n     If present, indicates that a second full draft of this specification\n     has gone to public review, and that the implementation purports to\n     conform to that specification.  (If additional public review drafts\n     are produced, this keyword will continue to refer to the second\n     draft, and additional keywords will be added to identify conformance\n     with such later drafts.  As such, the meaning of this keyword can be\n     relied upon not to change over time.) A conforming implementation\n     which has the :ansi-cl feature is only permitted to retain the\n     :draft-ansi-cl feature if the finally approved standard is not\n     incompatible with the draft standard.\n:ansi-cl\n     If present, indicates that this specification has been adopted by ANSI\n     as an official standard, and that the implementation purports to\n     conform.\n:common-lisp\n     This feature must appear in *features* for any implementation that\n     has one or more of the features :x3j13, :draft-ansi-cl, or :ansi-cl.\n     It is intended that it should also appear in implementations which\n     have the features :cltl1 or :cltl2, but this specification cannot\n     force such behavior.  The intent is that this feature should identify\n     the language family named \"Common Lisp,\" rather than some specific\n     dialect within that family.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Use of Read-Time Conditionals::, *Note Standard Macro Characters::\n"
        },
        {
            "type": "Notes",
            "text": "The value of *features* is used by the #+ and #- reader syntax.\nSymbols in the features list may be in any package, but in practice they\nare generally in the KEYWORD package.  This is because KEYWORD is the\npackage used by default when reading_2 feature expressions in the #+ and\n#- reader macros.  Code that needs to name a feature_2 in a package P\n(other than KEYWORD) can do so by making explicit use of a package prefix\nfor P, but note that such code must also assure that the package P exists\nin order for the feature expression to be read_2--even in cases where the\nfeature expression is expected to fail.\nIt is generally considered wise for an implementation to include one or\nmore features identifying the specific implementation, so that conditional\nexpressions can be written which distinguish idiosyncrasies of one\nimplementation from those of another.  Since features are normally symbols\nin the KEYWORD package where name collisions might easily result, and\nsince no uniquely defined mechanism is designated for deciding who has the\nright to use which symbol for what reason, a conservative strategy is to\nprefer names derived from one's own company or product name, since those\nnames are often trademarked and are hence less likely to be used\nunwittingly by another implementation.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *features*,  Next: *compile-file-pathname*,  Prev: with-compilation-unit,  Up: System Construction Dictionary\n\n*features*                                                       [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na proper list.\n\nInitial Value::\n...............\n\nimplementation-dependent.\n\nDescription::\n.............\n\nThe value of *features* is called the features list.  It is a list of\nsymbols, called features, that correspond to some aspect of the\nimplementation or environment.\n\nMost features have implementation-dependent meanings; The following\nmeanings have been assigned to feature names:\n\n:cltl1\n     If present, indicates that the LISP package purports to conform to\n     the 1984 specification Common Lisp: The Language.  It is possible,\n     but not required, for a conforming implementation to have this\n     feature because this specification specifies that its symbols are to\n     be in the COMMON-LISP package, not the LISP package.\n\n:cltl2\n     If present, indicates that the implementation purports to conform to\n     Common Lisp: The Language, Second Edition.  This feature must not be\n     present in any conforming implementation, since conformance to that\n     document is not compatible with conformance to this specification.\n     The name, however, is reserved by this specification in order to help\n     programs distinguish implementations which conform to that document\n     from implementations which conform to this specification.\n\n:ieee-floating-point\n     If present, indicates that the implementation purports to conform to\n     the requirements of IEEE Standard for Binary Floating-Point\n     Arithmetic.\n\n:x3j13\n     If present, indicates that the implementation conforms to some\n     particular working draft of this specification, or to some subset of\n     features that approximates a belief about what this specification\n     might turn out to contain.  A conforming implementation might or\n     might not contain such a feature.  (This feature is intended\n     primarily as a stopgap in order to provide implementors something to\n     use prior to the availability of a draft standard, in order to\n     discourage them from introducing the :draft-ansi-cl and :ansi-cl\n     features prematurely.)\n\n:draft-ansi-cl\n     If present, indicates that the implementation purports to conform to\n     the first full draft of this specification, which went to public\n     review in 1992.  A conforming implementation which has the\n     :draft-ansi-cl-2 or :ansi-cl feature is not permitted to retain the\n     :draft-ansi-cl feature since incompatible changes were made\n     subsequent to the first draft.\n\n:draft-ansi-cl-2\n     If present, indicates that a second full draft of this specification\n     has gone to public review, and that the implementation purports to\n     conform to that specification.  (If additional public review drafts\n     are produced, this keyword will continue to refer to the second\n     draft, and additional keywords will be added to identify conformance\n     with such later drafts.  As such, the meaning of this keyword can be\n     relied upon not to change over time.) A conforming implementation\n     which has the :ansi-cl feature is only permitted to retain the\n     :draft-ansi-cl feature if the finally approved standard is not\n     incompatible with the draft standard.\n\n:ansi-cl\n     If present, indicates that this specification has been adopted by ANSI\n     as an official standard, and that the implementation purports to\n     conform.\n\n:common-lisp\n     This feature must appear in *features* for any implementation that\n     has one or more of the features :x3j13, :draft-ansi-cl, or :ansi-cl.\n     It is intended that it should also appear in implementations which\n     have the features :cltl1 or :cltl2, but this specification cannot\n     force such behavior.  The intent is that this feature should identify\n     the language family named \"Common Lisp,\" rather than some specific\n     dialect within that family.\n\nSee Also::\n..........\n\n*Note Use of Read-Time Conditionals::, *Note Standard Macro Characters::\n\nNotes::\n.......\n\nThe value of *features* is used by the #+ and #- reader syntax.\n\nSymbols in the features list may be in any package, but in practice they\nare generally in the KEYWORD package.  This is because KEYWORD is the\npackage used by default when reading_2 feature expressions in the #+ and\n#- reader macros.  Code that needs to name a feature_2 in a package P\n(other than KEYWORD) can do so by making explicit use of a package prefix\nfor P, but note that such code must also assure that the package P exists\nin order for the feature expression to be read_2--even in cases where the\nfeature expression is expected to fail.\n\nIt is generally considered wise for an implementation to include one or\nmore features identifying the specific implementation, so that conditional\nexpressions can be written which distinguish idiosyncrasies of one\nimplementation from those of another.  Since features are normally symbols\nin the KEYWORD package where name collisions might easily result, and\nsince no uniquely defined mechanism is designated for deciding who has the\nright to use which symbol for what reason, a conservative strategy is to\nprefer names derived from one's own company or product name, since those\nnames are often trademarked and are hence less likely to be used\nunwittingly by another implementation.\n\n"
}