{
    "name": "Interactive Streams",
    "prev": "Open and Closed Streams",
    "next": "Abstract Classifications of Streams",
    "up": "Introduction to Streams",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Interactive Streams",
            "text": "An interactive stream is one on which it makes sense to perform\ninteractive querying.\nThe precise meaning of an interactive stream is implementation-defined,\nand may depend on the underlying operating system.  Some examples of the\nthings that an implementation might choose to use as identifying\ncharacteristics of an interactive stream include:\n*\n     The stream is connected to a person (or equivalent) in such a way\n     that the program can prompt for information and expect to receive\n     different input depending on the prompt.\n*\n     The program is expected to prompt for input and support \"normal input\n     editing\".\n*\n     read-char might wait for the user to type something before returning\n     instead of immediately returning a character or end-of-file.\nThe general intent of having some streams be classified as interactive\nstreams is to allow them to be distinguished from streams containing batch\n(or background or command-file) input.  Output to batch streams is\ntypically discarded or saved for later viewing, so interactive queries to\nsuch streams might not have the expected effect.\nTerminal I/O might or might not be an interactive stream.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Interactive Streams,  Next: Abstract Classifications of Streams,  Prev: Open and Closed Streams,  Up: Introduction to Streams\n\nInteractive Streams\n...................\n\nAn interactive stream is one on which it makes sense to perform\ninteractive querying.\n\nThe precise meaning of an interactive stream is implementation-defined,\nand may depend on the underlying operating system.  Some examples of the\nthings that an implementation might choose to use as identifying\ncharacteristics of an interactive stream include:\n\n*\n     The stream is connected to a person (or equivalent) in such a way\n     that the program can prompt for information and expect to receive\n     different input depending on the prompt.\n\n*\n     The program is expected to prompt for input and support \"normal input\n     editing\".\n\n*\n     read-char might wait for the user to type something before returning\n     instead of immediately returning a character or end-of-file.\n\nThe general intent of having some streams be classified as interactive\nstreams is to allow them to be distinguished from streams containing batch\n(or background or command-file) input.  Output to batch streams is\ntypically discarded or saved for later viewing, so interactive queries to\nsuch streams might not have the expected effect.\n\nTerminal I/O might or might not be an interactive stream.\n\n"
}