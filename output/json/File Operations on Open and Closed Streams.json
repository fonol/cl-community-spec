{
    "name": "File Operations on Open and Closed Streams",
    "prev": "Coercion of Streams to Pathnames",
    "next": "Truenames",
    "up": "File System Concepts",
    "header": {
        "type": null,
        "text": "File Operations on Open and Closed Streams"
    },
    "sections": [
        {
            "type": "",
            "text": "Many functions that perform file operations accept either open or closed\nstreams as arguments; see *Note Stream Arguments to Standardized\nFunctions::.\nOf these, the functions in Figure 20-2 treat open and closed streams\ndifferently.\n  delete-file  file-author      probe-file  \n  directory    file-write-date  truename    \n  Figure 20-2: File Functions that Treat Open and Closed Streams Differently\nSince treatment of open streams by the file system may vary considerably\nbetween implementations, however, a closed stream might be the most\nreliable kind of argument for some of these functions--in particular,\nthose in Figure 20-3.  For example, in some file systems, open files are\nwritten under temporary names and not renamed until closed and/or are held\ninvisible until closed.  In general, any code that is intended to be\nportable should use such functions carefully.\n  directory  probe-file  truename  \n  Figure 20-3: File Functions where Closed Streams Might Work Best\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: File Operations on Open and Closed Streams,  Next: Truenames,  Prev: Coercion of Streams to Pathnames,  Up: File System Concepts\n\nFile Operations on Open and Closed Streams\n------------------------------------------\n\nMany functions that perform file operations accept either open or closed\nstreams as arguments; see *Note Stream Arguments to Standardized\nFunctions::.\n\nOf these, the functions in Figure 20-2 treat open and closed streams\ndifferently.\n\n  delete-file  file-author      probe-file  \n  directory    file-write-date  truename    \n\n  Figure 20-2: File Functions that Treat Open and Closed Streams Differently\n\n\nSince treatment of open streams by the file system may vary considerably\nbetween implementations, however, a closed stream might be the most\nreliable kind of argument for some of these functions--in particular,\nthose in Figure 20-3.  For example, in some file systems, open files are\nwritten under temporary names and not renamed until closed and/or are held\ninvisible until closed.  In general, any code that is intended to be\nportable should use such functions carefully.\n\n  directory  probe-file  truename  \n\n  Figure 20-3: File Functions where Closed Streams Might Work Best\n\n\n"
}