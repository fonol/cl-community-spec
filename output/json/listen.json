{
    "name": "listen",
    "prev": "with-open-stream",
    "next": "clear-input",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "listen"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "listen",
                    "text": " &optional input-stream =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "input-stream",
                    "desc": "an input stream designator.  The default is standard input."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if there is a character immediately available from\ninput-stream; otherwise, returns false.  On a non-interactive input-stream,\nlisten returns true except when at end of file_1.  If an end of file is\nencountered, listen returns false.  listen is intended to be used when\ninput-stream obtains characters from an interactive device such as a\nkeyboard.\n"
        },
        {
            "type": "Examples",
            "text": "      (progn (unread-char (read-char)) (list (listen) (read-char)))\n      |>  |>>1<<|\n     =>  (T #\\1)\n      (progn (clear-input) (listen))\n     =>  NIL ;Unless you're a very fast typist!\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-input*\n"
        },
        {
            "type": "See Also",
            "text": "*Note interactive-stream-p:: , *Note read-char-no-hang::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: listen,  Next: clear-input,  Prev: with-open-stream,  Up: Streams Dictionary\n\nlisten                                                           [Function]\n---------------------------------------------------------------------------\n\n`listen'  &optional input-stream =>  generalized-boolean\n\nArguments and Values::\n......................\n\ninput-stream--an input stream designator.  The default is standard input.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if there is a character immediately available from\ninput-stream; otherwise, returns false.  On a non-interactive input-stream,\nlisten returns true except when at end of file_1.  If an end of file is\nencountered, listen returns false.  listen is intended to be used when\ninput-stream obtains characters from an interactive device such as a\nkeyboard.\n\nExamples::\n..........\n\n      (progn (unread-char (read-char)) (list (listen) (read-char)))\n      |>  |>>1<<|\n     =>  (T #\\1)\n      (progn (clear-input) (listen))\n     =>  NIL ;Unless you're a very fast typist!\n\nAffected By::\n.............\n\n*standard-input*\n\nSee Also::\n..........\n\n*Note interactive-stream-p:: , *Note read-char-no-hang::\n\n"
}