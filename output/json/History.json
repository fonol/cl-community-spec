{
    "name": "History",
    "prev": "Scope and Purpose",
    "next": null,
    "up": "Scope",
    "header": {
        "type": null,
        "text": "History"
    },
    "sections": [
        {
            "type": "",
            "text": "Lisp is a family of languages with a long history.  Early key ideas in\nLisp were developed by John McCarthy during the 1956 Dartmouth Summer\nResearch Project on Artificial Intelligence.  McCarthy's motivation was to\ndevelop an algebraic list processing language for artificial intelligence\nwork.  Implementation efforts for early dialects of Lisp were undertaken on\nthe IBM~704, the IBM~7090, the Digital Equipment Corporation (DEC) PDP-1,\nthe DEC~PDP-6, and the PDP-10. The primary dialect of Lisp between 1960\nand 1965 was Lisp~1.5. By the early 1970's there were two predominant\ndialects of Lisp, both arising from these early efforts: MacLisp and\nInterlisp.  For further information about very early Lisp dialects, see\nThe Anatomy of Lisp or Lisp 1.5 Programmer's Manual.\nMacLisp improved on the Lisp~1.5 notion of special variables and error\nhandling. MacLisp also introduced the concept of functions that could take\na variable number of arguments, macros, arrays, non-local dynamic exits,\nfast arithmetic, the first good Lisp compiler, and an emphasis on\nexecution speed.  By the end of the 1970's, MacLisp was in use at over 50\nsites.  For further information about Maclisp, see Maclisp Reference\nManual, Revision~0 or The Revised Maclisp Manual.\nInterlisp introduced many ideas into Lisp programming environments and\nmethodology. One of the Interlisp ideas that influenced Common Lisp was an\niteration construct implemented by Warren Teitelman that inspired the loop\nmacro used both on the Lisp Machines and in MacLisp, and now in Common\nLisp.  For further information about Interlisp, see Interlisp Reference\nManual.\nAlthough the first implementations of Lisp were on the IBM~704 and the\nIBM~7090, later work focussed on the DEC PDP-6 and, later, PDP-10\ncomputers, the latter being the mainstay of Lisp and artificial\nintelligence work at such places as Massachusetts Institute of Technology\n(MIT), Stanford University, and Carnegie Mellon University (CMU) from the\nmid-1960's through much of the 1970's.  The PDP-10 computer and its\npredecessor the PDP-6 computer were, by design, especially well-suited to\nLisp because they had 36-bit words and 18-bit addresses. This architecture\nallowed a cons cell to be stored in one word; single instructions could\nextract the car and cdr parts.  The PDP-6 and PDP-10 had fast, powerful\nstack instructions that enabled fast function calling.  But the\nlimitations of the PDP-10 were evident by 1973: it supported a small\nnumber of researchers using Lisp, and the small, 18-bit address space\n(2^18 = 262,144 words) limited the size of a single program.  One response\nto the address space problem was the Lisp Machine, a special-purpose\ncomputer designed to run Lisp programs.  The other response was to use\ngeneral-purpose computers with address spaces larger than 18~bits, such as\nthe DEC VAX and the S-1~Mark~IIA.  For further information about S-1\nCommon Lisp, see \"S-1 Common Lisp Implementation.\"\nThe Lisp machine concept was developed in the late 1960's.  In the early\n1970's, Peter Deutsch, working with Daniel Bobrow, implemented a Lisp on\nthe Alto, a single-user minicomputer, using microcode to interpret a\nbyte-code implementation language. Shortly thereafter, Richard Greenblatt\nbegan work on a different hardware and instruction set design at MIT.\nAlthough the Alto was not a total success as a Lisp machine, a dialect of\nInterlisp known as Interlisp-D became available on the D-series machines\nmanufactured by Xerox--the Dorado, Dandelion, Dandetiger, and Dove (or\nDaybreak).  An upward-compatible extension of MacLisp called Lisp Machine\nLisp became available on the early MIT Lisp Machines.  Commercial Lisp\nmachines from Xerox, Lisp Machines (LMI), and Symbolics were on the market\nby 1981.  For further information about Lisp Machine Lisp, see Lisp\nMachine Manual.\nDuring the late 1970's, Lisp Machine Lisp began to expand towards a much\nfuller language.  Sophisticated lambda lists, setf, multiple values, and\nstructures like those in Common Lisp are the results of early\nexperimentation with programming styles by the Lisp Machine group.  Jonl\nWhite and others migrated these features to MacLisp.  Around 1980, Scott\nFahlman and others at CMU began work on a Lisp to run on the Scientific\nPersonal Integrated Computing Environment (SPICE) workstation.  One of the\ngoals of the project was to design a simpler dialect than Lisp Machine\nLisp.\nThe Macsyma group at MIT began a project during the late 1970's called the\nNew Implementation of Lisp (NIL) for the VAX, which was headed by White.\nOne of the stated goals of the NIL project was to fix many of the\nhistoric, but annoying, problems with Lisp while retaining significant\ncompatibility with MacLisp.  At about the same time, a research group at\nStanford University and Lawrence Livermore National Laboratory headed by\nRichard P. Gabriel began the design of a Lisp to run on the S-1~Mark~IIA\nsupercomputer.  S-1~Lisp, never completely functional, was the test bed\nfor adapting advanced compiler techniques to Lisp implementation.\nEventually the S-1 and NIL groups collaborated.  For further information\nabout the NIL project, see \"NIL--A Perspective.\"\nThe first effort towards Lisp standardization was made in 1969, when\nAnthony Hearn and Martin Griss at the University of Utah defined Standard\nLisp--a subset of Lisp~1.5 and other dialects--to transport REDUCE, a\nsymbolic algebra system.  During the 1970's, the Utah group implemented\nfirst a retargetable optimizing compiler for Standard Lisp, and then an\nextended implementation known as Portable Standard Lisp (PSL).  By the mid\n1980's, PSL ran on about a dozen kinds of computers.  For further\ninformation about Standard Lisp, see \"Standard LISP Report.\"\nPSL and Franz Lisp--a MacLisp-like dialect for Unix machines--were the\nfirst examples of widely available Lisp dialects on multiple hardware\nplatforms.\nOne of the most important developments in Lisp occurred during the second\nhalf of the 1970's: Scheme. Scheme, designed by Gerald J.  Sussman and Guy\nL. Steele Jr., is a simple dialect of Lisp whose design brought to Lisp\nsome of the ideas from programming language semantics developed in the\n1960's.  Sussman was one of the prime innovators behind many other\nadvances in Lisp technology from the late 1960's through the 1970's.  The\nmajor contributions of Scheme were lexical scoping, lexical closures,\nfirst-class continuations, and simplified syntax (no separation of value\ncells and function cells). Some of these contributions made a large impact\non the design of Common Lisp.  For further information about Scheme, see\nIEEE Standard for the Scheme Programming Language or \"Revised^3 Report on\nthe Algorithmic Language Scheme.\"\nIn the late 1970's object-oriented programming concepts started to make a\nstrong impact on Lisp.  At MIT, certain ideas from Smalltalk made their\nway into several widely used programming systems.  Flavors, an\nobject-oriented programming system with multiple inheritance, was\ndeveloped at MIT for the Lisp machine community by Howard Cannon and\nothers.  At Xerox, the experience with Smalltalk and Knowledge\nRepresentation Language (KRL) led to the development of Lisp Object\nOriented Programming System (LOOPS) and later Common LOOPS.  For further\ninformation on Smalltalk, see Smalltalk-80: The Language and its\nImplementation.  For further information on Flavors, see Flavors: A\nNon-Hierarchical Approach to Object-Oriented Programming.\nThese systems influenced the design of the Common Lisp Object System\n(CLOS).  CLOS was developed specifically for this standardization effort,\nand was separately written up in \"Common Lisp Object System\nSpecification.\"  However, minor details of its design have changed\nslightly since that publication, and that paper should not be taken as an\nauthoritative reference to the semantics of the object system as described\nin this document.\nIn 1980 Symbolics and LMI were developing Lisp Machine Lisp; stock-hardware\nimplementation groups were developing NIL, Franz Lisp, and PSL; Xerox was\ndeveloping Interlisp; and the SPICE project at CMU was developing a\nMacLisp-like dialect of Lisp called SpiceLisp.\nIn April 1981, after a DARPA-sponsored meeting concerning the splintered\nLisp community, Symbolics, the SPICE project, the NIL project, and the\nS-1~Lisp project joined together to define Common Lisp.  Initially\nspearheaded by White and Gabriel, the driving force behind this grassroots\neffort was provided by Fahlman, Daniel Weinreb, David Moon, Steele,  and\nGabriel.  Common Lisp was designed as a description of a family of\nlanguages.  The primary influences on Common Lisp were Lisp Machine Lisp,\nMacLisp, NIL, S-1~Lisp, Spice Lisp, and Scheme.  Common Lisp: The Language\nis a description of that design.  Its semantics were intentionally\nunderspecified in places where it was felt that a tight specification\nwould overly constrain Common Lisp research and use.\nIn 1986 X3J13 was formed as a technical working group to produce a draft\nfor an ANSI Common Lisp standard. Because of the acceptance of Common\nLisp, the goals of this group differed from those of the original\ndesigners. These new goals included stricter standardization for\nportability, an object-oriented programming system, a condition system,\niteration facilities, and a way to handle large character sets.  To\naccommodate those goals, a new language specification, this document, was\ndeveloped.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: History,  Prev: Scope and Purpose,  Up: Scope\n\nHistory\n-------\n\nLisp is a family of languages with a long history.  Early key ideas in\nLisp were developed by John McCarthy during the 1956 Dartmouth Summer\nResearch Project on Artificial Intelligence.  McCarthy's motivation was to\ndevelop an algebraic list processing language for artificial intelligence\nwork.  Implementation efforts for early dialects of Lisp were undertaken on\nthe IBM~704, the IBM~7090, the Digital Equipment Corporation (DEC) PDP-1,\nthe DEC~PDP-6, and the PDP-10. The primary dialect of Lisp between 1960\nand 1965 was Lisp~1.5. By the early 1970's there were two predominant\ndialects of Lisp, both arising from these early efforts: MacLisp and\nInterlisp.  For further information about very early Lisp dialects, see\nThe Anatomy of Lisp or Lisp 1.5 Programmer's Manual.\n\nMacLisp improved on the Lisp~1.5 notion of special variables and error\nhandling. MacLisp also introduced the concept of functions that could take\na variable number of arguments, macros, arrays, non-local dynamic exits,\nfast arithmetic, the first good Lisp compiler, and an emphasis on\nexecution speed.  By the end of the 1970's, MacLisp was in use at over 50\nsites.  For further information about Maclisp, see Maclisp Reference\nManual, Revision~0 or The Revised Maclisp Manual.\n\nInterlisp introduced many ideas into Lisp programming environments and\nmethodology. One of the Interlisp ideas that influenced Common Lisp was an\niteration construct implemented by Warren Teitelman that inspired the loop\nmacro used both on the Lisp Machines and in MacLisp, and now in Common\nLisp.  For further information about Interlisp, see Interlisp Reference\nManual.\n\nAlthough the first implementations of Lisp were on the IBM~704 and the\nIBM~7090, later work focussed on the DEC PDP-6 and, later, PDP-10\ncomputers, the latter being the mainstay of Lisp and artificial\nintelligence work at such places as Massachusetts Institute of Technology\n(MIT), Stanford University, and Carnegie Mellon University (CMU) from the\nmid-1960's through much of the 1970's.  The PDP-10 computer and its\npredecessor the PDP-6 computer were, by design, especially well-suited to\nLisp because they had 36-bit words and 18-bit addresses. This architecture\nallowed a cons cell to be stored in one word; single instructions could\nextract the car and cdr parts.  The PDP-6 and PDP-10 had fast, powerful\nstack instructions that enabled fast function calling.  But the\nlimitations of the PDP-10 were evident by 1973: it supported a small\nnumber of researchers using Lisp, and the small, 18-bit address space\n(2^18 = 262,144 words) limited the size of a single program.  One response\nto the address space problem was the Lisp Machine, a special-purpose\ncomputer designed to run Lisp programs.  The other response was to use\ngeneral-purpose computers with address spaces larger than 18~bits, such as\nthe DEC VAX and the S-1~Mark~IIA.  For further information about S-1\nCommon Lisp, see \"S-1 Common Lisp Implementation.\"\n\nThe Lisp machine concept was developed in the late 1960's.  In the early\n1970's, Peter Deutsch, working with Daniel Bobrow, implemented a Lisp on\nthe Alto, a single-user minicomputer, using microcode to interpret a\nbyte-code implementation language. Shortly thereafter, Richard Greenblatt\nbegan work on a different hardware and instruction set design at MIT.\nAlthough the Alto was not a total success as a Lisp machine, a dialect of\nInterlisp known as Interlisp-D became available on the D-series machines\nmanufactured by Xerox--the Dorado, Dandelion, Dandetiger, and Dove (or\nDaybreak).  An upward-compatible extension of MacLisp called Lisp Machine\nLisp became available on the early MIT Lisp Machines.  Commercial Lisp\nmachines from Xerox, Lisp Machines (LMI), and Symbolics were on the market\nby 1981.  For further information about Lisp Machine Lisp, see Lisp\nMachine Manual.\n\nDuring the late 1970's, Lisp Machine Lisp began to expand towards a much\nfuller language.  Sophisticated lambda lists, setf, multiple values, and\nstructures like those in Common Lisp are the results of early\nexperimentation with programming styles by the Lisp Machine group.  Jonl\nWhite and others migrated these features to MacLisp.  Around 1980, Scott\nFahlman and others at CMU began work on a Lisp to run on the Scientific\nPersonal Integrated Computing Environment (SPICE) workstation.  One of the\ngoals of the project was to design a simpler dialect than Lisp Machine\nLisp.\n\nThe Macsyma group at MIT began a project during the late 1970's called the\nNew Implementation of Lisp (NIL) for the VAX, which was headed by White.\nOne of the stated goals of the NIL project was to fix many of the\nhistoric, but annoying, problems with Lisp while retaining significant\ncompatibility with MacLisp.  At about the same time, a research group at\nStanford University and Lawrence Livermore National Laboratory headed by\nRichard P. Gabriel began the design of a Lisp to run on the S-1~Mark~IIA\nsupercomputer.  S-1~Lisp, never completely functional, was the test bed\nfor adapting advanced compiler techniques to Lisp implementation.\nEventually the S-1 and NIL groups collaborated.  For further information\nabout the NIL project, see \"NIL--A Perspective.\"\n\nThe first effort towards Lisp standardization was made in 1969, when\nAnthony Hearn and Martin Griss at the University of Utah defined Standard\nLisp--a subset of Lisp~1.5 and other dialects--to transport REDUCE, a\nsymbolic algebra system.  During the 1970's, the Utah group implemented\nfirst a retargetable optimizing compiler for Standard Lisp, and then an\nextended implementation known as Portable Standard Lisp (PSL).  By the mid\n1980's, PSL ran on about a dozen kinds of computers.  For further\ninformation about Standard Lisp, see \"Standard LISP Report.\"\n\nPSL and Franz Lisp--a MacLisp-like dialect for Unix machines--were the\nfirst examples of widely available Lisp dialects on multiple hardware\nplatforms.\n\nOne of the most important developments in Lisp occurred during the second\nhalf of the 1970's: Scheme. Scheme, designed by Gerald J.  Sussman and Guy\nL. Steele Jr., is a simple dialect of Lisp whose design brought to Lisp\nsome of the ideas from programming language semantics developed in the\n1960's.  Sussman was one of the prime innovators behind many other\nadvances in Lisp technology from the late 1960's through the 1970's.  The\nmajor contributions of Scheme were lexical scoping, lexical closures,\nfirst-class continuations, and simplified syntax (no separation of value\ncells and function cells). Some of these contributions made a large impact\non the design of Common Lisp.  For further information about Scheme, see\nIEEE Standard for the Scheme Programming Language or \"Revised^3 Report on\nthe Algorithmic Language Scheme.\"\n\nIn the late 1970's object-oriented programming concepts started to make a\nstrong impact on Lisp.  At MIT, certain ideas from Smalltalk made their\nway into several widely used programming systems.  Flavors, an\nobject-oriented programming system with multiple inheritance, was\ndeveloped at MIT for the Lisp machine community by Howard Cannon and\nothers.  At Xerox, the experience with Smalltalk and Knowledge\nRepresentation Language (KRL) led to the development of Lisp Object\nOriented Programming System (LOOPS) and later Common LOOPS.  For further\ninformation on Smalltalk, see Smalltalk-80: The Language and its\nImplementation.  For further information on Flavors, see Flavors: A\nNon-Hierarchical Approach to Object-Oriented Programming.\n\nThese systems influenced the design of the Common Lisp Object System\n(CLOS).  CLOS was developed specifically for this standardization effort,\nand was separately written up in \"Common Lisp Object System\nSpecification.\"  However, minor details of its design have changed\nslightly since that publication, and that paper should not be taken as an\nauthoritative reference to the semantics of the object system as described\nin this document.\n\nIn 1980 Symbolics and LMI were developing Lisp Machine Lisp; stock-hardware\nimplementation groups were developing NIL, Franz Lisp, and PSL; Xerox was\ndeveloping Interlisp; and the SPICE project at CMU was developing a\nMacLisp-like dialect of Lisp called SpiceLisp.\n\nIn April 1981, after a DARPA-sponsored meeting concerning the splintered\nLisp community, Symbolics, the SPICE project, the NIL project, and the\nS-1~Lisp project joined together to define Common Lisp.  Initially\nspearheaded by White and Gabriel, the driving force behind this grassroots\neffort was provided by Fahlman, Daniel Weinreb, David Moon, Steele,  and\nGabriel.  Common Lisp was designed as a description of a family of\nlanguages.  The primary influences on Common Lisp were Lisp Machine Lisp,\nMacLisp, NIL, S-1~Lisp, Spice Lisp, and Scheme.  Common Lisp: The Language\nis a description of that design.  Its semantics were intentionally\nunderspecified in places where it was felt that a tight specification\nwould overly constrain Common Lisp research and use.\n\nIn 1986 X3J13 was formed as a technical working group to produce a draft\nfor an ANSI Common Lisp standard. Because of the acceptance of Common\nLisp, the goals of this group differed from those of the original\ndesigners. These new goals included stricter standardization for\nportability, an object-oriented programming system, a condition system,\niteration facilities, and a way to handle large character sets.  To\naccommodate those goals, a new language specification, this document, was\ndeveloped.\n\n"
}