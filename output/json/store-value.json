{
    "name": "store-value",
    "prev": "muffle-warning",
    "next": "use-value",
    "up": "Conditions Dictionary",
    "header": {
        "type": "Restart",
        "text": "store-value"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Data Arguments Required",
            "text": "a value to use instead (on an ongoing basis).\n"
        },
        {
            "type": "Description",
            "text": "The store-value restart is generally used by handlers trying to recover\nfrom errors of types such as cell-error or type-error, which may wish to\nsupply a replacement datum to be stored permanently.\n"
        },
        {
            "type": "Examples",
            "text": "      (defun type-error-auto-coerce (c)\n        (when (typep c 'type-error)\n          (let ((r (find-restart 'store-value c)))\n            (handler-case (let ((v (coerce (type-error-datum c)\n                                           (type-error-expected-type c))))\n                            (invoke-restart r v))\n              (error ()))))) =>  TYPE-ERROR-AUTO-COERCE\n      (let ((x 3))\n        (handler-bind ((type-error #'type-error-auto-coerce))\n          (check-type x float)\n          x)) =>  3.0\n"
        },
        {
            "type": "See Also",
            "text": "*Note Restarts::, *Note Interfaces to Restarts::, *Note invoke-restart:: ,\n*Note store-value:: (function), ccase, *Note check-type:: , ctypecase,\n*Note use-value:: (function and restart)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: store-value,  Next: use-value,  Prev: muffle-warning,  Up: Conditions Dictionary\n\nstore-value                                                       [Restart]\n---------------------------------------------------------------------------\n\nData Arguments Required::\n.........................\n\na value to use instead (on an ongoing basis).\n\nDescription::\n.............\n\nThe store-value restart is generally used by handlers trying to recover\nfrom errors of types such as cell-error or type-error, which may wish to\nsupply a replacement datum to be stored permanently.\n\nExamples::\n..........\n\n      (defun type-error-auto-coerce (c)\n        (when (typep c 'type-error)\n          (let ((r (find-restart 'store-value c)))\n            (handler-case (let ((v (coerce (type-error-datum c)\n                                           (type-error-expected-type c))))\n                            (invoke-restart r v))\n              (error ()))))) =>  TYPE-ERROR-AUTO-COERCE\n      (let ((x 3))\n        (handler-bind ((type-error #'type-error-auto-coerce))\n          (check-type x float)\n          x)) =>  3.0\n\nSee Also::\n..........\n\n*Note Restarts::, *Note Interfaces to Restarts::, *Note invoke-restart:: ,\n*Note store-value:: (function), ccase, *Note check-type:: , ctypecase,\n*Note use-value:: (function and restart)\n\n"
}