{
    "name": "simple-condition-format-control",
    "prev": "simple-condition",
    "next": "warn",
    "up": "Conditions Dictionary",
    "header": {
        "type": null,
        "text": "simple-condition-format-control, simple-condition-format-arguments"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "simple-condition-format-control",
                    "text": " condition =>  format-control\n"
                },
                {
                    "name": "simple-condition-format-arguments",
                    "text": " condition =>  format-arguments\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "condition",
                    "desc": "a condition of type simple-condition."
                },
                {
                    "name": "format-control",
                    "desc": "a format control."
                },
                {
                    "name": "format-arguments",
                    "desc": "a list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "simple-condition-format-control returns the format control needed to\nprocess the condition's format arguments.\nsimple-condition-format-arguments returns a list of format arguments\nneeded to process the condition's format control.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq foo (make-condition 'simple-condition\n                               :format-control \"Hi ~S\"\n                               :format-arguments '(ho)))\n     =>  #<SIMPLE-CONDITION 26223553>\n      (apply #'format nil (simple-condition-format-control foo)\n                          (simple-condition-format-arguments foo))\n     =>  \"Hi HO\"\n"
        },
        {
            "type": "See Also",
            "text": "*Note simple-condition:: , *Note Condition System Concepts::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: simple-condition-format-control,  Next: warn,  Prev: simple-condition,  Up: Conditions Dictionary\n\nsimple-condition-format-control, simple-condition-format-arguments\n------------------------------------------------------------------\n\n                                                                [Function]\n\n`simple-condition-format-control'  condition =>  format-control\n\n`simple-condition-format-arguments'  condition =>  format-arguments\n\nArguments and Values::\n......................\n\ncondition--a condition of type simple-condition.\n\nformat-control--a format control.\n\nformat-arguments--a list.\n\nDescription::\n.............\n\nsimple-condition-format-control returns the format control needed to\nprocess the condition's format arguments.\n\nsimple-condition-format-arguments returns a list of format arguments\nneeded to process the condition's format control.\n\nExamples::\n..........\n\n      (setq foo (make-condition 'simple-condition\n                               :format-control \"Hi ~S\"\n                               :format-arguments '(ho)))\n     =>  #<SIMPLE-CONDITION 26223553>\n      (apply #'format nil (simple-condition-format-control foo)\n                          (simple-condition-format-arguments foo))\n     =>  \"Hi HO\"\n\nSee Also::\n..........\n\n*Note simple-condition:: , *Note Condition System Concepts::\n\n"
}