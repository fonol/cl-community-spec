{
    "name": "Object Creation and Initialization",
    "prev": "Objects",
    "next": "Changing the Class of an Instance",
    "up": "Objects",
    "header": {
        "type": null,
        "text": "Object Creation and Initialization"
    },
    "sections": [
        {
            "type": "",
            "text": "The generic function make-instance creates and returns a new instance of a\nclass.  The first argument is a class or the name of a class, and the\nremaining arguments form an initialization argument list .\nThe initialization of a new instance consists of several distinct steps,\nincluding the following: combining the explicitly supplied initialization\narguments with default values for the unsupplied initialization arguments,\nchecking the validity of the initialization arguments, allocating storage\nfor the instance, filling slots with values, and executing user-supplied\nmethods that perform additional initialization.  Each step of\nmake-instance is implemented by a generic function to provide a mechanism\nfor customizing that step.  In addition, make-instance is itself a generic\nfunction and thus also can be customized.\nThe object system specifies system-supplied primary methods for each step\nand thus specifies a well-defined standard behavior for the entire\ninitialization process.  The standard behavior provides four simple\nmechanisms for controlling initialization:\n*\n     Declaring a symbol to be an initialization argument for a slot.  An\n     initialization argument is declared by using the :initarg slot option\n     to defclass.  This provides a mechanism for supplying a value for a\n     slot in a call to make-instance.\n*\n     Supplying a default value form for an initialization argument.\n     Default value forms for initialization arguments are defined by using\n     the :default-initargs class option to defclass.  If an initialization\n     argument is not explicitly provided as an argument to make-instance,\n     the default value form is evaluated in the lexical environment of the\n     defclass form that defined it, and the resulting value is used as the\n     value of the initialization argument.\n*\n     Supplying a default initial value form for a slot.  A default initial\n     value form for a slot is defined by using the :initform slot option\n     to defclass.  If no initialization argument associated with that slot\n     is given as an argument to make-instance or is defaulted by\n     :default-initargs, this default initial value form is evaluated in\n     the lexical environment of the defclass form that defined it, and the\n     resulting value is stored in the slot.  The :initform form for a\n     local slot may be used when creating an instance, when updating an\n     instance to conform to a redefined class, or when updating an\n     instance to conform to the definition of a different class. The\n     :initform form for a shared slot may be used when defining or\n     re-defining the class.\n*\n     Defining methods for initialize-instance and shared-initialize.  The\n     slot-filling behavior described above is implemented by a\n     system-supplied primary method for initialize-instance which invokes\n     shared-initialize. The generic function shared-initialize implements\n     the parts of initialization shared by these four situations: when\n     making an instance, when re-initializing an instance, when updating\n     an instance to conform to a redefined class, and when updating an\n     instance to conform to the definition of a different class. The\n     system-supplied primary method for shared-initialize directly\n     implements the slot-filling behavior described above, and\n     initialize-instance simply invokes shared-initialize.\n* Menu:\n* Initialization Arguments::\n* Declaring the Validity of Initialization Arguments::\n* Defaulting of Initialization Arguments::\n* Rules for Initialization Arguments::\n* Shared-Initialize::\n* Initialize-Instance::\n* Definitions of Make-Instance and Initialize-Instance::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Object Creation and Initialization,  Next: Changing the Class of an Instance,  Prev: Objects,  Up: Objects\n\nObject Creation and Initialization\n==================================\n\nThe generic function make-instance creates and returns a new instance of a\nclass.  The first argument is a class or the name of a class, and the\nremaining arguments form an initialization argument list .\n\nThe initialization of a new instance consists of several distinct steps,\nincluding the following: combining the explicitly supplied initialization\narguments with default values for the unsupplied initialization arguments,\nchecking the validity of the initialization arguments, allocating storage\nfor the instance, filling slots with values, and executing user-supplied\nmethods that perform additional initialization.  Each step of\nmake-instance is implemented by a generic function to provide a mechanism\nfor customizing that step.  In addition, make-instance is itself a generic\nfunction and thus also can be customized.\n\nThe object system specifies system-supplied primary methods for each step\nand thus specifies a well-defined standard behavior for the entire\ninitialization process.  The standard behavior provides four simple\nmechanisms for controlling initialization:\n\n*\n     Declaring a symbol to be an initialization argument for a slot.  An\n     initialization argument is declared by using the :initarg slot option\n     to defclass.  This provides a mechanism for supplying a value for a\n     slot in a call to make-instance.\n\n*\n     Supplying a default value form for an initialization argument.\n     Default value forms for initialization arguments are defined by using\n     the :default-initargs class option to defclass.  If an initialization\n     argument is not explicitly provided as an argument to make-instance,\n     the default value form is evaluated in the lexical environment of the\n     defclass form that defined it, and the resulting value is used as the\n     value of the initialization argument.\n\n*\n     Supplying a default initial value form for a slot.  A default initial\n     value form for a slot is defined by using the :initform slot option\n     to defclass.  If no initialization argument associated with that slot\n     is given as an argument to make-instance or is defaulted by\n     :default-initargs, this default initial value form is evaluated in\n     the lexical environment of the defclass form that defined it, and the\n     resulting value is stored in the slot.  The :initform form for a\n     local slot may be used when creating an instance, when updating an\n     instance to conform to a redefined class, or when updating an\n     instance to conform to the definition of a different class. The\n     :initform form for a shared slot may be used when defining or\n     re-defining the class.\n\n*\n     Defining methods for initialize-instance and shared-initialize.  The\n     slot-filling behavior described above is implemented by a\n     system-supplied primary method for initialize-instance which invokes\n     shared-initialize. The generic function shared-initialize implements\n     the parts of initialization shared by these four situations: when\n     making an instance, when re-initializing an instance, when updating\n     an instance to conform to a redefined class, and when updating an\n     instance to conform to the definition of a different class. The\n     system-supplied primary method for shared-initialize directly\n     implements the slot-filling behavior described above, and\n     initialize-instance simply invokes shared-initialize.\n\n* Menu:\n\n* Initialization Arguments::\n* Declaring the Validity of Initialization Arguments::\n* Defaulting of Initialization Arguments::\n* Rules for Initialization Arguments::\n* Shared-Initialize::\n* Initialize-Instance::\n* Definitions of Make-Instance and Initialize-Instance::\n\n"
}