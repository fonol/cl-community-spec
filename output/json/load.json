{
    "name": "load",
    "prev": "compile-file-pathname",
    "next": "with-compilation-unit",
    "up": "System Construction Dictionary",
    "header": {
        "type": "Function",
        "text": "load"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "load",
                    "text": " filespec &key verbose print if-does-not-exist external-format=>  generalized-boolean\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "filespec",
                    "desc": "a stream, or a pathname designator.  The default is taken from"
                },
                {
                    "name": "filespec",
                    "desc": "a stream, or a pathname designator.  The default is taken from*default-pathname-defaults*.\n"
                },
                {
                    "name": "verbose",
                    "desc": "a generalized boolean.  The default is the value of"
                },
                {
                    "name": "verbose",
                    "desc": "a generalized boolean.  The default is the value of*load-verbose*.\n"
                },
                {
                    "name": "print",
                    "desc": "a generalized boolean.  The default is the value of *load-print*."
                },
                {
                    "name": "if-does-not-exist",
                    "desc": "a generalized boolean.  The default is true."
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is"
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is:default.\n"
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "load loads the file named by filespec into the Lisp environment.\nThe manner in which a source file is distinguished from a compiled file is\nimplementation-dependent.  If the file specification is not complete and\nboth a source file and a compiled file exist which might match, then which\nof those files load selects is implementation-dependent.\nIf filespec is a stream, load determines what kind of stream it is and\nloads directly from the stream.\nIf filespec is a logical pathname, it is translated into a physical\npathname as if by calling translate-logical-pathname.\nload sequentially executes each form it encounters in the file named by\nfilespec.  If the file is a source file and the implementation chooses to\nperform implicit compilation, load must recognize top level forms as\ndescribed in *Note Processing of Top Level Forms:: and arrange for each\ntop level form to be executed before beginning implicit compilation of the\nnext.  (Note, however, that processing of eval-when forms by load is\ncontrolled by the :execute situation.)\nIf verbose is true, load prints a message in the form of a comment (i.e.,\nwith a leading semicolon) to standard output indicating what file is being\nloaded and other useful information.\nIf verbose is false, load does not print this information.\nIf print is true, load incrementally prints information to standard output\nshowing the progress of the loading process.  For a source file, this\ninformation might mean printing the values yielded by each form in the file\nas soon as those values are returned.  For a compiled file, what is\nprinted might not reflect precisely the contents of the source file, but\nsome information is generally printed.  If print is false, load does not\nprint this information.\nIf the file named by filespec is successfully loaded, load returns true.\n[Reviewer Note by Loosemore: What happens if the file cannot be loaded for\nsome reason other than that it doesn't exist?] [Editorial Note by KMP:\ni.e., can it return NIL? must it?]\nIf the file does not exist, the specific action taken depends on\nif-does-not-exist: if it is nil, load returns nil; otherwise, load signals\nan error.\nThe external-format specifies the external file format to be used when\nopening the file (see the function open), except that when the file named\nby filespec is a compiled file, the external-format is ignored.\ncompile-file and load cooperate in an implementation-dependent way to\nassure the preservation of the similarity of characters referred to in the\nsource file at the time the source file was processed by the file compiler\nunder a given external file format, regardless of the value of\nexternal-format at the time the compiled file is loaded.\nload binds *readtable* and *package* to the values they held before\nloading the file.\n*load-truename* is bound by load to hold the truename of the pathname of\nthe file being loaded.\n*load-pathname* is bound by load to hold a pathname that represents\nfilespec merged against the defaults.  That is, (pathname (merge-pathnames\nfilespec)).\n"
        },
        {
            "type": "Examples",
            "text": "     ;Establish a data file...\n      (with-open-file (str \"data.in\" :direction :output :if-exists :error)\n        (print 1 str) (print '(setq a 888) str) t)\n     =>  T\n      (load \"data.in\") =>  true\n      a =>  888\n      (load (setq p (merge-pathnames \"data.in\")) :verbose t)\n     ; Loading contents of file /fred/data.in\n     ; Finished loading /fred/data.in\n     =>  true\n      (load p :print t)\n     ; Loading contents of file /fred/data.in\n     ;  1\n     ;  888\n     ; Finished loading /fred/data.in\n     =>  true\n      ;----[Begin file SETUP]----\n      (in-package \"MY-STUFF\")\n      (defmacro compile-truename () `',*compile-file-truename*)\n      (defvar *my-compile-truename* (compile-truename) \"Just for debugging.\")\n      (defvar *my-load-pathname* *load-pathname*)\n      (defun load-my-system ()\n        (dolist (module-name '(\"FOO\" \"BAR\" \"BAZ\"))\n          (load (merge-pathnames module-name *my-load-pathname*))))\n      ;----[End of file SETUP]----\n      (load \"SETUP\")\n      (load-my-system)\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation, and the host computer's file system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If :if-does-not-exist is supplied and is true, or is not supplied, load\nsignals an error of type file-error if the file named by filespec does not\nexist,\nor if the file system cannot perform the requested operation.\nAn error of type file-error might be signaled if (wild-pathname-p\nfilespec) returns true.\n"
        },
        {
            "type": "See Also",
            "text": "*Note error:: , *Note merge-pathnames:: , *load-verbose*,\n*default-pathname-defaults*, pathname, logical-pathname, *Note File System\nConcepts::,\n*Note Pathnames as Filenames::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: load,  Next: with-compilation-unit,  Prev: compile-file-pathname,  Up: System Construction Dictionary\n\nload                                                             [Function]\n---------------------------------------------------------------------------\n\n`load'  filespec &key verbose print if-does-not-exist external-format\n=>  generalized-boolean\n\nArguments and Values::\n......................\n\nfilespec--a stream, or a pathname designator.  The default is taken from\n*default-pathname-defaults*.\n\nverbose--a generalized boolean.  The default is the value of\n*load-verbose*.\n\nprint--a generalized boolean.  The default is the value of *load-print*.\n\nif-does-not-exist--a generalized boolean.  The default is true.\n\nexternal-format--an external file format designator.  The default is\n:default.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nload loads the file named by filespec into the Lisp environment.\n\nThe manner in which a source file is distinguished from a compiled file is\nimplementation-dependent.  If the file specification is not complete and\nboth a source file and a compiled file exist which might match, then which\nof those files load selects is implementation-dependent.\n\nIf filespec is a stream, load determines what kind of stream it is and\nloads directly from the stream.\n\nIf filespec is a logical pathname, it is translated into a physical\npathname as if by calling translate-logical-pathname.\n\nload sequentially executes each form it encounters in the file named by\nfilespec.  If the file is a source file and the implementation chooses to\nperform implicit compilation, load must recognize top level forms as\ndescribed in *Note Processing of Top Level Forms:: and arrange for each\ntop level form to be executed before beginning implicit compilation of the\nnext.  (Note, however, that processing of eval-when forms by load is\ncontrolled by the :execute situation.)\n\nIf verbose is true, load prints a message in the form of a comment (i.e.,\nwith a leading semicolon) to standard output indicating what file is being\nloaded and other useful information.\n\nIf verbose is false, load does not print this information.\n\nIf print is true, load incrementally prints information to standard output\nshowing the progress of the loading process.  For a source file, this\ninformation might mean printing the values yielded by each form in the file\nas soon as those values are returned.  For a compiled file, what is\nprinted might not reflect precisely the contents of the source file, but\nsome information is generally printed.  If print is false, load does not\nprint this information.\n\nIf the file named by filespec is successfully loaded, load returns true.\n\n[Reviewer Note by Loosemore: What happens if the file cannot be loaded for\nsome reason other than that it doesn't exist?] [Editorial Note by KMP:\ni.e., can it return NIL? must it?]\n\nIf the file does not exist, the specific action taken depends on\nif-does-not-exist: if it is nil, load returns nil; otherwise, load signals\nan error.\n\nThe external-format specifies the external file format to be used when\nopening the file (see the function open), except that when the file named\nby filespec is a compiled file, the external-format is ignored.\ncompile-file and load cooperate in an implementation-dependent way to\nassure the preservation of the similarity of characters referred to in the\nsource file at the time the source file was processed by the file compiler\nunder a given external file format, regardless of the value of\nexternal-format at the time the compiled file is loaded.\n\nload binds *readtable* and *package* to the values they held before\nloading the file.\n\n*load-truename* is bound by load to hold the truename of the pathname of\nthe file being loaded.\n\n*load-pathname* is bound by load to hold a pathname that represents\nfilespec merged against the defaults.  That is, (pathname (merge-pathnames\nfilespec)).\n\nExamples::\n..........\n\n     ;Establish a data file...\n      (with-open-file (str \"data.in\" :direction :output :if-exists :error)\n        (print 1 str) (print '(setq a 888) str) t)\n     =>  T\n      (load \"data.in\") =>  true\n      a =>  888\n      (load (setq p (merge-pathnames \"data.in\")) :verbose t)\n     ; Loading contents of file /fred/data.in\n     ; Finished loading /fred/data.in\n     =>  true\n      (load p :print t)\n     ; Loading contents of file /fred/data.in\n     ;  1\n     ;  888\n     ; Finished loading /fred/data.in\n     =>  true\n\n      ;----[Begin file SETUP]----\n      (in-package \"MY-STUFF\")\n      (defmacro compile-truename () `',*compile-file-truename*)\n      (defvar *my-compile-truename* (compile-truename) \"Just for debugging.\")\n      (defvar *my-load-pathname* *load-pathname*)\n      (defun load-my-system ()\n        (dolist (module-name '(\"FOO\" \"BAR\" \"BAZ\"))\n          (load (merge-pathnames module-name *my-load-pathname*))))\n      ;----[End of file SETUP]----\n     \n      (load \"SETUP\")\n      (load-my-system)\n\nAffected By::\n.............\n\nThe implementation, and the host computer's file system.\n\nExceptional Situations::\n........................\n\nIf :if-does-not-exist is supplied and is true, or is not supplied, load\nsignals an error of type file-error if the file named by filespec does not\nexist,\n\nor if the file system cannot perform the requested operation.\n\nAn error of type file-error might be signaled if (wild-pathname-p\nfilespec) returns true.\n\nSee Also::\n..........\n\n*Note error:: , *Note merge-pathnames:: , *load-verbose*,\n*default-pathname-defaults*, pathname, logical-pathname, *Note File System\nConcepts::,\n\n*Note Pathnames as Filenames::\n\n"
}