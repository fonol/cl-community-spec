{
    "name": "documentation",
    "prev": "disassemble",
    "next": "room",
    "up": "Environment Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "documentation, (setf documentation)"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "documentation",
                    "text": " x doc-type =>  documentation\n"
                },
                {
                    "name": "(setf documentation)",
                    "text": " new-value x doc-type =>  new-value\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Argument Precedence Order",
            "text": "doc-type, object\n"
        },
        {
            "type": "Method Signatures",
            "text": ""
        },
        {
            "type": "Functions, Macros, and Special Forms",
            "text": "documentation (x `function') (doc-type (eql 't))\n(setf documentation) new-value(x `function') (doc-type (eql 't))\ndocumentation (x `function') (doc-type (eql 'function))\n(setf documentation) new-value(x `function') (doc-type (eql 'function))\ndocumentation (x `list') (doc-type (eql 'function))\n(setf documentation) new-value(x `list') (doc-type (eql 'function))\ndocumentation (x `list') (doc-type (eql 'compiler-macro))\n(setf documentation) new-value(x `list') (doc-type (eql 'compiler-macro))\ndocumentation (x `symbol') (doc-type (eql 'function))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'function))\ndocumentation (x `symbol') (doc-type (eql 'compiler-macro))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'compiler-macro))\ndocumentation (x `symbol') (doc-type (eql 'setf))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'setf))\n"
        },
        {
            "type": "Method Combinations",
            "text": "documentation (x `method-combination') (doc-type (eql 't))\n(setf documentation) new-value(x `method-combination') (doc-type (eql 't))\ndocumentation (x `method-combination') (doc-type (eql 'method-combination))\n(setf documentation) new-value(x `method-combination') (doc-type (eql\n'method-combination))\ndocumentation (x `symbol') (doc-type (eql 'method-combination))\n(setf documentation) new-value(x `symbol') (doc-type (eql\n'method-combination))\n"
        },
        {
            "type": "Methods",
            "text": "documentation (x `standard-method') (doc-type (eql 't))\n(setf documentation) new-value(x `standard-method') (doc-type (eql 't))\n"
        },
        {
            "type": "Packages",
            "text": "documentation (x `package') (doc-type (eql 't))\n(setf documentation) new-value(x `package') (doc-type (eql 't))\n"
        },
        {
            "type": "Types, Classes, and Structure Names",
            "text": "documentation (x `standard-class') (doc-type (eql 't))\n(setf documentation) new-value(x `standard-class') (doc-type (eql 't))\ndocumentation (x `standard-class') (doc-type (eql 'type))\n(setf documentation) new-value(x `standard-class') (doc-type (eql 'type))\ndocumentation (x `structure-class') (doc-type (eql 't))\n(setf documentation) new-value(x `structure-class') (doc-type (eql 't))\ndocumentation (x `structure-class') (doc-type (eql 'type))\n(setf documentation) new-value(x `structure-class') (doc-type (eql 'type))\ndocumentation (x `symbol') (doc-type (eql 'type))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'type))\ndocumentation (x `symbol') (doc-type (eql 'structure))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'structure))\n"
        },
        {
            "type": "Variables",
            "text": "documentation (x `symbol') (doc-type (eql 'variable))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'variable))\n"
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "x",
                    "desc": "an object."
                },
                {
                    "name": "doc-type",
                    "desc": "a symbol."
                },
                {
                    "name": "documentation",
                    "desc": "a string, or nil."
                },
                {
                    "name": "new-value",
                    "desc": "a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function documentation returns the documentation string\nassociated with the given object if it is available; otherwise it returns\nnil.\nThe generic function (setf documentation) updates the documentation string\nassociated with x to new-value.  If x is a list, it must be of the form\n(setf symbol).\nDocumentation strings are made available for debugging purposes.\nConforming programs are permitted to use documentation strings when they\nare present, but should not depend for their correct behavior on the\npresence of those documentation strings.  An implementation is permitted\nto discard documentation strings at any time for implementation-defined\nreasons.\nThe nature of the documentation string returned depends on the doc-type,\nas follows:\ncompiler-macro\n     Returns the documentation string of the compiler macro whose name is\n     the function name x.\nfunction\n     If x is a function name, returns the documentation string of the\n     function, macro, or special operator whose name is x.\n     If x is a function, returns the documentation string associated with\n     x.\nmethod-combination\n     If x is a symbol, returns the documentation string of the method\n     combination whose name is x.\n     If x is a method combination, returns the documentation string\n     associated with x.\nsetf\n     Returns the documentation string of\n     the setf expander\n     whose name is the symbol x.\nstructure\n     Returns the documentation string associated with the structure name x.\nt\n     Returns a documentation string specialized on the class of the\n     argument x itself.  For example, if x is a function, the\n     documentation string associated with the function x is returned.\ntype\n     If x is a symbol, returns the documentation string of the class whose\n     name is the symbol x, if there is such a class.  Otherwise, it\n     returns the documentation string of the type which is the type\n     specifier symbol x.\n     If x is a structure class or standard class, returns the\n     documentation string associated with the class x.\nvariable\n     Returns the documentation string of the dynamic variable or constant\n     variable whose name is the symbol x.\nA conforming implementation or a conforming program may extend the set of\nsymbols that are acceptable as the doc-type.\n"
        },
        {
            "type": "Notes",
            "text": "This standard prescribes no means to retrieve the documentation strings\nfor individual slots specified in a defclass form, but implementations\nmight still provide debugging tools and/or programming language extensions\nwhich manipulate this information.  Implementors wishing to provide such\nsupport are encouraged to consult the Metaobject Protocol for suggestions\nabout how this might be done.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: documentation,  Next: room,  Prev: disassemble,  Up: Environment Dictionary\n\ndocumentation, (setf documentation)             [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`documentation'  x doc-type =>  documentation\n\n`(setf documentation)'  new-value x doc-type =>  new-value\n\nArgument Precedence Order::\n...........................\n\ndoc-type, object\n\nMethod Signatures::\n...................\n\nFunctions, Macros, and Special Forms\n....................................\n\ndocumentation (x `function') (doc-type (eql 't))\n(setf documentation) new-value(x `function') (doc-type (eql 't))\n\ndocumentation (x `function') (doc-type (eql 'function))\n(setf documentation) new-value(x `function') (doc-type (eql 'function))\n\ndocumentation (x `list') (doc-type (eql 'function))\n(setf documentation) new-value(x `list') (doc-type (eql 'function))\n\ndocumentation (x `list') (doc-type (eql 'compiler-macro))\n(setf documentation) new-value(x `list') (doc-type (eql 'compiler-macro))\n\ndocumentation (x `symbol') (doc-type (eql 'function))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'function))\n\ndocumentation (x `symbol') (doc-type (eql 'compiler-macro))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'compiler-macro))\n\ndocumentation (x `symbol') (doc-type (eql 'setf))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'setf))\n\nMethod Combinations\n...................\n\ndocumentation (x `method-combination') (doc-type (eql 't))\n(setf documentation) new-value(x `method-combination') (doc-type (eql 't))\n\ndocumentation (x `method-combination') (doc-type (eql 'method-combination))\n(setf documentation) new-value(x `method-combination') (doc-type (eql\n'method-combination))\n\ndocumentation (x `symbol') (doc-type (eql 'method-combination))\n(setf documentation) new-value(x `symbol') (doc-type (eql\n'method-combination))\n\nMethods\n.......\n\ndocumentation (x `standard-method') (doc-type (eql 't))\n(setf documentation) new-value(x `standard-method') (doc-type (eql 't))\n\nPackages\n........\n\ndocumentation (x `package') (doc-type (eql 't))\n(setf documentation) new-value(x `package') (doc-type (eql 't))\n\nTypes, Classes, and Structure Names\n...................................\n\ndocumentation (x `standard-class') (doc-type (eql 't))\n(setf documentation) new-value(x `standard-class') (doc-type (eql 't))\n\ndocumentation (x `standard-class') (doc-type (eql 'type))\n(setf documentation) new-value(x `standard-class') (doc-type (eql 'type))\n\ndocumentation (x `structure-class') (doc-type (eql 't))\n(setf documentation) new-value(x `structure-class') (doc-type (eql 't))\n\ndocumentation (x `structure-class') (doc-type (eql 'type))\n(setf documentation) new-value(x `structure-class') (doc-type (eql 'type))\n\ndocumentation (x `symbol') (doc-type (eql 'type))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'type))\n\ndocumentation (x `symbol') (doc-type (eql 'structure))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'structure))\n\nVariables\n.........\n\ndocumentation (x `symbol') (doc-type (eql 'variable))\n(setf documentation) new-value(x `symbol') (doc-type (eql 'variable))\n\nArguments and Values::\n......................\n\nx--an object.\n\ndoc-type--a symbol.\n\ndocumentation--a string, or nil.\n\nnew-value--a string.\n\nDescription::\n.............\n\nThe generic function documentation returns the documentation string\nassociated with the given object if it is available; otherwise it returns\nnil.\n\nThe generic function (setf documentation) updates the documentation string\nassociated with x to new-value.  If x is a list, it must be of the form\n(setf symbol).\n\nDocumentation strings are made available for debugging purposes.\nConforming programs are permitted to use documentation strings when they\nare present, but should not depend for their correct behavior on the\npresence of those documentation strings.  An implementation is permitted\nto discard documentation strings at any time for implementation-defined\nreasons.\n\nThe nature of the documentation string returned depends on the doc-type,\nas follows:\n\ncompiler-macro\n     Returns the documentation string of the compiler macro whose name is\n     the function name x.\n\nfunction\n     If x is a function name, returns the documentation string of the\n     function, macro, or special operator whose name is x.\n\n     If x is a function, returns the documentation string associated with\n     x.\n\nmethod-combination\n     If x is a symbol, returns the documentation string of the method\n     combination whose name is x.\n\n     If x is a method combination, returns the documentation string\n     associated with x.\n\nsetf\n     Returns the documentation string of\n\n     the setf expander\n\n     whose name is the symbol x.\n\nstructure\n     Returns the documentation string associated with the structure name x.\n\nt\n     Returns a documentation string specialized on the class of the\n     argument x itself.  For example, if x is a function, the\n     documentation string associated with the function x is returned.\n\ntype\n     If x is a symbol, returns the documentation string of the class whose\n     name is the symbol x, if there is such a class.  Otherwise, it\n     returns the documentation string of the type which is the type\n     specifier symbol x.\n\n     If x is a structure class or standard class, returns the\n     documentation string associated with the class x.\n\nvariable\n     Returns the documentation string of the dynamic variable or constant\n     variable whose name is the symbol x.\n\nA conforming implementation or a conforming program may extend the set of\nsymbols that are acceptable as the doc-type.\n\nNotes::\n.......\n\nThis standard prescribes no means to retrieve the documentation strings\nfor individual slots specified in a defclass form, but implementations\nmight still provide debugging tools and/or programming language extensions\nwhich manipulate this information.  Implementors wishing to provide such\nsupport are encouraged to consult the Metaobject Protocol for suggestions\nabout how this might be done.\n\n"
}