{
    "name": "Modification of Literal Objects",
    "prev": "Destructive Operations",
    "next": "Transfer of Control during a Destructive Operation",
    "up": "Destructive Operations",
    "header": {
        "type": null,
        "text": "Modification of Literal Objects"
    },
    "sections": [
        {
            "type": "",
            "text": "The consequences are undefined if literal objects are destructively\nmodified.  For this purpose, the following operations are considered\ndestructive:\nrandom-state\n     Using it as an argument to the function random.\ncons\n     Changing the car_1 or cdr_1 of the cons, or performing a destructive\n     operation on an object which is either the car_2 or the cdr_2 of the\n     cons.\narray\n     Storing a new value into some element of the array, or performing a\n     destructive operation on an object that is already such an element.\n     Changing the fill pointer, dimensions, or displacement of the array\n     (regardless of whether the array is actually adjustable).\n     Performing a destructive operation on another array that is displaced\n     to the array or that otherwise shares its contents with the array.\nhash-table\n     Performing a destructive operation on any key.\n     Storing a new value_4 for any key, or performing a destructive\n     operation on any object that is such a value.\n     Adding or removing entries from the hash table.\nstructure-object\n     Storing a new value into any slot, or performing a destructive\n     operation on an object that is the value of some slot.\nstandard-object\n     Storing a new value into any slot, or performing a destructive\n     operation on an object that is the value of some slot.\n     Changing the class of the object (e.g., using the function\n     change-class).\nreadtable\n     Altering the readtable case.\n     Altering the syntax type of any character in this readtable.\n     Altering the reader macro function associated with any character in\n     the readtable, or altering the reader macro functions associated with\n     characters defined as dispatching macro characters in the readtable.\nstream\n     Performing I/O operations on the stream, or closing the stream.\nAll other standardized types\n     [This category includes, for example, character, condition, function,\n     method-combination, method, number, package, pathname, restart, and\n     symbol.]\n     There are no standardized destructive operations defined on objects\n     of these types.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Modification of Literal Objects,  Next: Transfer of Control during a Destructive Operation,  Prev: Destructive Operations,  Up: Destructive Operations\n\nModification of Literal Objects\n-------------------------------\n\nThe consequences are undefined if literal objects are destructively\nmodified.  For this purpose, the following operations are considered\ndestructive:\n\nrandom-state\n     Using it as an argument to the function random.\n\ncons\n     Changing the car_1 or cdr_1 of the cons, or performing a destructive\n     operation on an object which is either the car_2 or the cdr_2 of the\n     cons.\n\narray\n     Storing a new value into some element of the array, or performing a\n     destructive operation on an object that is already such an element.\n\n     Changing the fill pointer, dimensions, or displacement of the array\n     (regardless of whether the array is actually adjustable).\n\n     Performing a destructive operation on another array that is displaced\n     to the array or that otherwise shares its contents with the array.\n\nhash-table\n     Performing a destructive operation on any key.\n\n     Storing a new value_4 for any key, or performing a destructive\n     operation on any object that is such a value.\n\n     Adding or removing entries from the hash table.\n\nstructure-object\n     Storing a new value into any slot, or performing a destructive\n     operation on an object that is the value of some slot.\n\nstandard-object\n     Storing a new value into any slot, or performing a destructive\n     operation on an object that is the value of some slot.\n\n     Changing the class of the object (e.g., using the function\n     change-class).\n\nreadtable\n     Altering the readtable case.\n\n     Altering the syntax type of any character in this readtable.\n\n     Altering the reader macro function associated with any character in\n     the readtable, or altering the reader macro functions associated with\n     characters defined as dispatching macro characters in the readtable.\n\nstream\n     Performing I/O operations on the stream, or closing the stream.\n\nAll other standardized types\n     [This category includes, for example, character, condition, function,\n     method-combination, method, number, package, pathname, restart, and\n     symbol.]\n\n     There are no standardized destructive operations defined on objects\n     of these types.\n\n"
}