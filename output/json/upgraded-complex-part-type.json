{
    "name": "upgraded-complex-part-type",
    "prev": "realpart",
    "next": "realp",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "upgraded-complex-part-type"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "upgraded-complex-part-type",
                    "text": " typespec &optional environment =>upgraded-typespec\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "typespec",
                    "desc": "a type specifier."
                },
                {
                    "name": "environment",
                    "desc": "an environment object.  The default is nil, denoting the null"
                },
                {
                    "name": "environment",
                    "desc": "an environment object.  The default is nil, denoting the nulllexical environment and the and current global environment.\n"
                },
                {
                    "name": "upgraded-typespec",
                    "desc": "a type specifier."
                }
            ]
        },
        {
            "type": "Description",
            "text": "upgraded-complex-part-type returns the part type of the most specialized\ncomplex number representation that can hold parts of type typespec.\nThe typespec is a subtype of (and possibly type equivalent to) the\nupgraded-typespec.\nThe purpose of upgraded-complex-part-type is to reveal how an\nimplementation does its upgrading.\n"
        },
        {
            "type": "See Also",
            "text": "*Note complex:: (function and type)\n"
        },
        {
            "type": "Notes",
            "text": ""
        }
    ],
    "_otext": "File: gcl.info,  Node: upgraded-complex-part-type,  Next: realp,  Prev: realpart,  Up: Numbers Dictionary\n\nupgraded-complex-part-type                                       [Function]\n---------------------------------------------------------------------------\n\n`upgraded-complex-part-type'  typespec &optional environment =>\nupgraded-typespec\n\nArguments and Values::\n......................\n\ntypespec--a type specifier.\n\nenvironment--an environment object.  The default is nil, denoting the null\nlexical environment and the and current global environment.\n\nupgraded-typespec--a type specifier.\n\nDescription::\n.............\n\nupgraded-complex-part-type returns the part type of the most specialized\ncomplex number representation that can hold parts of type typespec.\n\nThe typespec is a subtype of (and possibly type equivalent to) the\nupgraded-typespec.\n\nThe purpose of upgraded-complex-part-type is to reveal how an\nimplementation does its upgrading.\n\nSee Also::\n..........\n\n*Note complex:: (function and type)\n\nNotes::\n.......\n\n"
}