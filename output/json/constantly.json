{
    "name": "constantly",
    "prev": "complement",
    "next": "every",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "constantly"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "constantly",
                    "text": " value =>  function\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "value",
                    "desc": "an object."
                },
                {
                    "name": "function",
                    "desc": "a function."
                }
            ]
        },
        {
            "type": "Description",
            "text": "constantly returns a function that accepts any number of arguments, that\nhas no side-effects, and that always returns value.\n"
        },
        {
            "type": "Examples",
            "text": "      (mapcar (constantly 3) '(a b c d)) =>  (3 3 3 3)\n      (defmacro with-vars (vars &body forms)\n        `((lambda ,vars ,@forms) ,@(mapcar (constantly nil) vars)))\n     =>  WITH-VARS\n      (macroexpand '(with-vars (a b) (setq a 3 b (* a a)) (list a b)))\n     =>  ((LAMBDA (A B) (SETQ A 3 B (* A A)) (LIST A B)) NIL NIL), true\n"
        },
        {
            "type": "See Also",
            "text": "*Note not::\n"
        },
        {
            "type": "Notes",
            "text": "constantly could be defined by:\n      (defun constantly (object)\n        #'(lambda (&rest arguments) object))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: constantly,  Next: every,  Prev: complement,  Up: Data and Control Flow Dictionary\n\nconstantly                                                       [Function]\n---------------------------------------------------------------------------\n\n`constantly'  value =>  function\n\nArguments and Values::\n......................\n\nvalue--an object.\n\nfunction--a function.\n\nDescription::\n.............\n\nconstantly returns a function that accepts any number of arguments, that\nhas no side-effects, and that always returns value.\n\nExamples::\n..........\n\n      (mapcar (constantly 3) '(a b c d)) =>  (3 3 3 3)\n      (defmacro with-vars (vars &body forms)\n        `((lambda ,vars ,@forms) ,@(mapcar (constantly nil) vars)))\n     =>  WITH-VARS\n      (macroexpand '(with-vars (a b) (setq a 3 b (* a a)) (list a b)))\n     =>  ((LAMBDA (A B) (SETQ A 3 B (* A A)) (LIST A B)) NIL NIL), true\n\nSee Also::\n..........\n\n*Note not::\n\nNotes::\n.......\n\nconstantly could be defined by:\n\n      (defun constantly (object)\n        #'(lambda (&rest arguments) object))\n\n"
}