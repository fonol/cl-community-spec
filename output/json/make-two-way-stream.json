{
    "name": "make-two-way-stream",
    "prev": "make-broadcast-stream",
    "next": "two-way-stream-input-stream",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "make-two-way-stream"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-two-way-stream",
                    "text": " input-stream output-stream =>  two-way-stream\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "input-stream",
                    "desc": "a stream."
                },
                {
                    "name": "output-stream",
                    "desc": "a stream."
                },
                {
                    "name": "two-way-stream",
                    "desc": "a two-way stream."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a two-way stream that gets  its input  from input-stream and\nsends its output to   output-stream.\n"
        },
        {
            "type": "Examples",
            "text": "      (with-output-to-string (out)\n         (with-input-from-string (in \"input...\")\n           (let ((two (make-two-way-stream in out)))\n             (format two \"output...\")\n             (setq what-is-read (read two))))) =>  \"output...\"\n      what-is-read =>  INPUT...\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if input-stream is not an input\nstream.  Should signal an error of type type-error if output-stream is not\nan output stream.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-two-way-stream,  Next: two-way-stream-input-stream,  Prev: make-broadcast-stream,  Up: Streams Dictionary\n\nmake-two-way-stream                                              [Function]\n---------------------------------------------------------------------------\n\n`make-two-way-stream'  input-stream output-stream =>  two-way-stream\n\nArguments and Values::\n......................\n\ninput-stream--a stream.\n\noutput-stream--a stream.\n\ntwo-way-stream--a two-way stream.\n\nDescription::\n.............\n\nReturns a two-way stream that gets  its input  from input-stream and\nsends its output to   output-stream.\n\nExamples::\n..........\n\n      (with-output-to-string (out)\n         (with-input-from-string (in \"input...\")\n           (let ((two (make-two-way-stream in out)))\n             (format two \"output...\")\n             (setq what-is-read (read two))))) =>  \"output...\"\n      what-is-read =>  INPUT...\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if input-stream is not an input\nstream.  Should signal an error of type type-error if output-stream is not\nan output stream.\n\n"
}