{
    "name": "Tilde Question-Mark-> Recursive Processing",
    "prev": "Tilde Right-Brace-> End of Iteration",
    "next": null,
    "up": "FORMAT Control-Flow Operations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde Question-Mark: Recursive Processing",
            "text": "The next arg must be a format control, and the one after it a list; both\nare consumed by the ~? directive.  The two are processed as a\ncontrol-string, with the elements of the list as the arguments.  Once the\nrecursive processing has been finished, the processing of the control\nstring containing the ~? directive is resumed.  Example:\n      (format nil \"~? ~D\" \"<~A ~D>\" '(\"Foo\" 5) 7) =>  \"<Foo 5> 7\"\n      (format nil \"~? ~D\" \"<~A ~D>\" '(\"Foo\" 5 14) 7) =>  \"<Foo 5> 7\"\nNote that in the second example three arguments are supplied to the format\nstring \"<~A ~D>\", but only two are processed and the third is therefore\nignored.\nWith the @ modifier, only one arg is directly consumed.  The arg must be a\nstring; it is processed as part of the control string as if it had\nappeared in place of the ~@? construct, and any directives in the\nrecursively processed control string may consume arguments of the control\nstring containing the ~@?  directive.  Example:\n      (format nil \"~@? ~D\" \"<~A ~D>\" \"Foo\" 5 7) =>  \"<Foo 5> 7\"\n      (format nil \"~@? ~D\" \"<~A ~D>\" \"Foo\" 5 14 7) =>  \"<Foo 5> 14\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde Question-Mark-> Recursive Processing,  Prev: Tilde Right-Brace-> End of Iteration,  Up: FORMAT Control-Flow Operations\n\nTilde Question-Mark: Recursive Processing\n.........................................\n\nThe next arg must be a format control, and the one after it a list; both\nare consumed by the ~? directive.  The two are processed as a\ncontrol-string, with the elements of the list as the arguments.  Once the\nrecursive processing has been finished, the processing of the control\nstring containing the ~? directive is resumed.  Example:\n\n      (format nil \"~? ~D\" \"<~A ~D>\" '(\"Foo\" 5) 7) =>  \"<Foo 5> 7\"\n      (format nil \"~? ~D\" \"<~A ~D>\" '(\"Foo\" 5 14) 7) =>  \"<Foo 5> 7\"\n\nNote that in the second example three arguments are supplied to the format\nstring \"<~A ~D>\", but only two are processed and the third is therefore\nignored.\n\nWith the @ modifier, only one arg is directly consumed.  The arg must be a\nstring; it is processed as part of the control string as if it had\nappeared in place of the ~@? construct, and any directives in the\nrecursively processed control string may consume arguments of the control\nstring containing the ~@?  directive.  Example:\n\n      (format nil \"~@? ~D\" \"<~A ~D>\" \"Foo\" 5 7) =>  \"<Foo 5> 7\"\n      (format nil \"~@? ~D\" \"<~A ~D>\" \"Foo\" 5 14 7) =>  \"<Foo 5> 14\"\n\n"
}