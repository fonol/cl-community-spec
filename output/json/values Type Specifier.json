{
    "name": "values (Type Specifier)",
    "prev": "or (Type Specifier)",
    "next": "eql (Type Specifier)",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "Type Specifier",
        "text": "values"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Specializing.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`values'{!value-typespec})\n[Reviewer Note by Barmar: Missing &key]\nvalue-typespec ::={typespec}* [&optional {typespec}*] [&rest typespec] [&allow-other-keys]\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "typespec--a type specifier.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This type specifier can be used only as the value-type in a function type\nspecifier or a the special form.  It is used to specify individual types\nwhen multiple values are involved.  The &optional and &rest markers can\nappear in the value-type list; they indicate the parameter list of a\nfunction that, when given to multiple-value-call along with the values,\nwould correctly receive those values.\nThe symbol * may not be among the value-types.\nThe symbol values is not valid as a type specifier; and, specifically, it\nis not an abbreviation for (values).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: values (Type Specifier),  Next: eql (Type Specifier),  Prev: or (Type Specifier),  Up: Types and Classes Dictionary\n\nvalues                                                     [Type Specifier]\n---------------------------------------------------------------------------\n\nCompound Type Specifier Kind::\n..............................\n\nSpecializing.\n\nCompound Type Specifier Syntax::\n................................\n\n(`values'{!value-typespec})\n\n[Reviewer Note by Barmar: Missing &key]\n\nvalue-typespec ::={typespec}* [&optional {typespec}*] [&rest typespec] [&allow-other-keys]\n\nCompound Type Specifier Arguments::\n...................................\n\ntypespec--a type specifier.\n\nCompound Type Specifier Description::\n.....................................\n\nThis type specifier can be used only as the value-type in a function type\nspecifier or a the special form.  It is used to specify individual types\nwhen multiple values are involved.  The &optional and &rest markers can\nappear in the value-type list; they indicate the parameter list of a\nfunction that, when given to multiple-value-call along with the values,\nwould correctly receive those values.\n\nThe symbol * may not be among the value-types.\n\nThe symbol values is not valid as a type specifier; and, specifically, it\nis not an abbreviation for (values).\n\n"
}