{
    "name": "Processing of Top Level Forms",
    "prev": "File Compilation",
    "next": "Processing of Defining Macros",
    "up": "File Compilation",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Processing of Top Level Forms",
            "text": "Processing of top level forms in the file compiler is defined as follows:\n1.\n     If the form is a compiler macro form (not disabled by a notinline\n     declaration), the implementation might or might not choose to compute\n     the compiler macro expansion of the form and, having performed the\n     expansion, might or might not choose to process the result as a top\n     level form in the same processing mode (compile-time-too or\n     not-compile-time).  If it declines to obtain or use the expansion, it\n     must process the original form.\n2.\n     If the form is a macro form, its macro expansion is computed and\n     processed as a top level form in the same processing mode\n     (compile-time-too or not-compile-time).\n3.\n     If the form is a progn form, each of its body forms is sequentially\n     processed as a top level form in the same processing mode.\n4.\n     If the form is a locally, macrolet, or symbol-macrolet, compile-file\n     establishes the appropriate bindings and processes the body forms as\n     top level forms with those bindings in effect in the same processing\n     mode.  (Note that this implies that the lexical environment in which\n     top level forms are processed is not necessarily the null lexical\n     environment.)\n5.\n     If the form is an eval-when form, it is handled according to Figure\n     3-7.\n     plus .5 fil \\offinterlineskip\n       CT   LT   E    Mode  Action    New Mode          \n       _________________________________________________\n       Yes  Yes  --  --   Process   compile-time-too  \n       No   Yes  Yes   CTT  Process   compile-time-too  \n       No   Yes  Yes   NCT  Process   not-compile-time  \n       No   Yes  No   --   Process   not-compile-time  \n       Yes  No   --  --   Evaluate  --               \n       No   No   Yes   CTT  Evaluate  --               \n       No   No   Yes   NCT  Discard   --               \n       No   No   No   --   Discard   --               \n       Figure 3-7: EVAL-WHEN processing\n     Column CT   indicates whether :compile-toplevel is specified.  Column\n     LT   indicates whether :load-toplevel is specified.  Column E\n     indicates whether :execute is specified.  Column Mode indicates the\n     processing mode; a dash (--) indicates that the processing mode is\n     not relevant.\n     The Action column specifies one of three actions:\n          Process: process the body as top level forms in the specified\n          mode.\n          Evaluate: evaluate the body in the dynamic execution context of\n          the compiler, using the evaluation environment as the global\n          environment and the lexical environment in which the eval-when\n          appears.\n          Discard: ignore the form.\n     The New Mode column indicates the new processing mode.  A dash (--)\n     indicates the compiler remains in its current mode.\n6.\n     Otherwise, the form is a top level form that is not one of the\n     special cases.  In compile-time-too mode, the compiler first\n     evaluates the form in the evaluation environment and then minimally\n     compiles it.  In not-compile-time mode, the form is simply minimally\n     compiled.  All subforms are treated as non-top-level forms.\n     Note that top level forms are processed in the order in which they\n     textually appear in the file and that each top level form read by the\n     compiler is processed before the next is read.  However, the order of\n     processing (including macro expansion) of subforms that are not top\n     level forms and the order of further compilation is unspecified as\n     long as Common Lisp semantics are preserved.\neval-when forms cause compile-time evaluation only at top level.  Both\n:compile-toplevel and :load-toplevel situation specifications are ignored\nfor non-top-level forms. For non-top-level forms, an eval-when specifying\nthe :execute situation is treated as an implicit progn including the forms\nin the body of the eval-when form; otherwise, the forms in the body are\nignored.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Processing of Top Level Forms,  Next: Processing of Defining Macros,  Prev: File Compilation,  Up: File Compilation\n\nProcessing of Top Level Forms\n.............................\n\nProcessing of top level forms in the file compiler is defined as follows:\n\n1.\n     If the form is a compiler macro form (not disabled by a notinline\n     declaration), the implementation might or might not choose to compute\n     the compiler macro expansion of the form and, having performed the\n     expansion, might or might not choose to process the result as a top\n     level form in the same processing mode (compile-time-too or\n     not-compile-time).  If it declines to obtain or use the expansion, it\n     must process the original form.\n\n2.\n     If the form is a macro form, its macro expansion is computed and\n     processed as a top level form in the same processing mode\n     (compile-time-too or not-compile-time).\n\n3.\n     If the form is a progn form, each of its body forms is sequentially\n     processed as a top level form in the same processing mode.\n\n4.\n     If the form is a locally, macrolet, or symbol-macrolet, compile-file\n     establishes the appropriate bindings and processes the body forms as\n     top level forms with those bindings in effect in the same processing\n     mode.  (Note that this implies that the lexical environment in which\n     top level forms are processed is not necessarily the null lexical\n     environment.)\n\n5.\n     If the form is an eval-when form, it is handled according to Figure\n     3-7.\n\n     plus .5 fil \\offinterlineskip\n       CT   LT   E    Mode  Action    New Mode          \n       _________________________________________________\n       Yes  Yes  --  --   Process   compile-time-too  \n       No   Yes  Yes   CTT  Process   compile-time-too  \n       No   Yes  Yes   NCT  Process   not-compile-time  \n       No   Yes  No   --   Process   not-compile-time  \n       Yes  No   --  --   Evaluate  --               \n       No   No   Yes   CTT  Evaluate  --               \n       No   No   Yes   NCT  Discard   --               \n       No   No   No   --   Discard   --               \n\n       Figure 3-7: EVAL-WHEN processing\n\n     Column CT   indicates whether :compile-toplevel is specified.  Column\n     LT   indicates whether :load-toplevel is specified.  Column E\n     indicates whether :execute is specified.  Column Mode indicates the\n     processing mode; a dash (--) indicates that the processing mode is\n     not relevant.\n\n     The Action column specifies one of three actions:\n\n\n          Process: process the body as top level forms in the specified\n          mode.\n\n\n          Evaluate: evaluate the body in the dynamic execution context of\n          the compiler, using the evaluation environment as the global\n          environment and the lexical environment in which the eval-when\n          appears.\n\n\n          Discard: ignore the form.\n\n     The New Mode column indicates the new processing mode.  A dash (--)\n     indicates the compiler remains in its current mode.\n\n6.\n     Otherwise, the form is a top level form that is not one of the\n     special cases.  In compile-time-too mode, the compiler first\n     evaluates the form in the evaluation environment and then minimally\n     compiles it.  In not-compile-time mode, the form is simply minimally\n     compiled.  All subforms are treated as non-top-level forms.\n\n     Note that top level forms are processed in the order in which they\n     textually appear in the file and that each top level form read by the\n     compiler is processed before the next is read.  However, the order of\n     processing (including macro expansion) of subforms that are not top\n     level forms and the order of further compilation is unspecified as\n     long as Common Lisp semantics are preserved.\n\neval-when forms cause compile-time evaluation only at top level.  Both\n:compile-toplevel and :load-toplevel situation specifications are ignored\nfor non-top-level forms. For non-top-level forms, an eval-when specifying\nthe :execute situation is treated as an implicit progn including the forms\nin the body of the eval-when form; otherwise, the forms in the body are\nignored.\n\n"
}