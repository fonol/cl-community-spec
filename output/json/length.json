{
    "name": "length",
    "prev": "count",
    "next": "reverse",
    "up": "Sequences Dictionary",
    "header": {
        "type": "Function",
        "text": "length"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "length",
                    "text": " sequence =>  n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "sequence",
                    "desc": "a proper sequence."
                },
                {
                    "name": "n",
                    "desc": "a non-negative integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the number of elements in sequence.\nIf sequence is a vector with a fill pointer, the active length as\nspecified by the fill pointer is returned.\n"
        },
        {
            "type": "Examples",
            "text": "      (length \"abc\") =>  3\n      (setq str (make-array '(3) :element-type 'character\n                                 :initial-contents \"abc\"\n                                 :fill-pointer t)) =>  \"abc\"\n      (length str) =>  3\n      (setf (fill-pointer str) 2) =>  2\n      (length str) =>  2\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n"
        },
        {
            "type": "See Also",
            "text": "*Note list-length:: , sequence\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: length,  Next: reverse,  Prev: count,  Up: Sequences Dictionary\n\nlength                                                           [Function]\n---------------------------------------------------------------------------\n\n`length'  sequence =>  n\n\nArguments and Values::\n......................\n\nsequence--a proper sequence.\n\nn--a non-negative integer.\n\nDescription::\n.............\n\nReturns the number of elements in sequence.\n\nIf sequence is a vector with a fill pointer, the active length as\nspecified by the fill pointer is returned.\n\nExamples::\n..........\n\n      (length \"abc\") =>  3\n      (setq str (make-array '(3) :element-type 'character\n                                 :initial-contents \"abc\"\n                                 :fill-pointer t)) =>  \"abc\"\n      (length str) =>  3\n      (setf (fill-pointer str) 2) =>  2\n      (length str) =>  2\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n\nSee Also::\n..........\n\n*Note list-length:: , sequence\n\n"
}