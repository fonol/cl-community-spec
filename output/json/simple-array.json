{
    "name": "simple-array",
    "prev": "array",
    "next": "vector (System Class)",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Type",
        "text": "simple-array"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Supertypes",
            "text": "simple-array, array, t\n"
        },
        {
            "type": "Description",
            "text": "The type of an array that is not displaced to another array, has no fill\npointer, and is not expressly adjustable is a subtype of type simple-array.\nThe concept of a simple array exists to allow the implementation to use a\nspecialized representation and to allow the user to declare that certain\nvalues will always be simple arrays.\nThe types simple-vector, simple-string, and simple-bit-vector are disjoint\nsubtypes of type simple-array, for they respectively mean (simple-array t\n(*)), the union of all (simple-array c (*)) for any c being a subtype of\ntype character, and (simple-array bit (*)).\n"
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Specializing.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`simple-array'{[{element-type | *} [dimension-spec]]})\ndimension-spec ::=rank | * | ({dimension | *}*)\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "dimension--a valid array dimension.\nelement-type--a type specifier.\nrank--a non-negative fixnum.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This compound type specifier is treated exactly as the corresponding\ncompound type specifier for type array would be treated, except that the\nset is further constrained to include only simple arrays.\n"
        },
        {
            "type": "Notes",
            "text": "It is implementation-dependent whether displaced arrays, vectors with fill\npointers, or arrays that are actually adjustable are simple arrays.\n(simple-array *) refers to all simple arrays regardless of element type,\n(simple-array type-specifier) refers only to those simple arrays that can\nresult from giving type-specifier as the :element-type argument to\nmake-array.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: simple-array,  Next: vector (System Class),  Prev: array,  Up: Arrays Dictionary\n\nsimple-array                                                         [Type]\n---------------------------------------------------------------------------\n\nSupertypes::\n............\n\nsimple-array, array, t\n\nDescription::\n.............\n\nThe type of an array that is not displaced to another array, has no fill\npointer, and is not expressly adjustable is a subtype of type simple-array.\nThe concept of a simple array exists to allow the implementation to use a\nspecialized representation and to allow the user to declare that certain\nvalues will always be simple arrays.\n\nThe types simple-vector, simple-string, and simple-bit-vector are disjoint\nsubtypes of type simple-array, for they respectively mean (simple-array t\n(*)), the union of all (simple-array c (*)) for any c being a subtype of\ntype character, and (simple-array bit (*)).\n\nCompound Type Specifier Kind::\n..............................\n\nSpecializing.\n\nCompound Type Specifier Syntax::\n................................\n\n(`simple-array'{[{element-type | *} [dimension-spec]]})\n\ndimension-spec ::=rank | * | ({dimension | *}*)\n\nCompound Type Specifier Arguments::\n...................................\n\ndimension--a valid array dimension.\n\nelement-type--a type specifier.\n\nrank--a non-negative fixnum.\n\nCompound Type Specifier Description::\n.....................................\n\nThis compound type specifier is treated exactly as the corresponding\ncompound type specifier for type array would be treated, except that the\nset is further constrained to include only simple arrays.\n\nNotes::\n.......\n\nIt is implementation-dependent whether displaced arrays, vectors with fill\npointers, or arrays that are actually adjustable are simple arrays.\n\n(simple-array *) refers to all simple arrays regardless of element type,\n(simple-array type-specifier) refers only to those simple arrays that can\nresult from giving type-specifier as the :element-type argument to\nmake-array.\n\n"
}