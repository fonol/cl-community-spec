{
    "name": "Introduction to Generic Functions",
    "prev": "Generic Functions and Methods",
    "next": "Introduction to Methods",
    "up": "Generic Functions and Methods",
    "header": {
        "type": null,
        "text": "Introduction to Generic Functions"
    },
    "sections": [
        {
            "type": "",
            "text": "A generic function is a function whose behavior depends on the classes or\nidentities of the arguments supplied to it.  A generic function object is\nassociated with a set of methods, a lambda list, a method combination_2,\nand other information.\nLike an ordinary function, a generic function takes arguments, performs a\nseries of operations, and perhaps returns useful values.  An ordinary\nfunction has a single body of code that is always executed when the\nfunction is called.  A generic function has a set of bodies of code of\nwhich a subset is selected for execution. The selected bodies of code and\nthe manner of their combination are determined by the classes or\nidentities of one or more of the arguments to the generic function and by\nits method combination.\nOrdinary functions and generic functions are called with identical syntax.\nGeneric functions are true functions that can be passed as arguments and\nused as the first argument to funcall and apply.\nA binding of a function name to a generic function can be established in\none of several ways.  It can be established in the global environment by\nensure-generic-function, defmethod (implicitly, due to\nensure-generic-function) or defgeneric (also implicitly, due to\nensure-generic-function).\nNo standardized mechanism is provided for establishing a binding of a\nfunction name to a generic function in the lexical environment.\nWhen a defgeneric form is evaluated, one of three actions is taken (due to\nensure-generic-function):\n*\n     If a generic function of the given name already exists, the existing\n     generic function object is modified.  Methods specified by the\n     current defgeneric form are added, and any methods in the existing\n     generic function that were defined by a previous defgeneric form are\n     removed.  Methods added by the current defgeneric form might replace\n     methods defined by defmethod, defclass, define-condition, or\n     defstruct.  No other methods in the generic function are affected or\n     replaced.\n*\n     If the given name names an ordinary function, a  macro, or a special\n     operator, an error is signaled.\n*\n     Otherwise a generic function is created with the methods specified by\n     the method definitions in the defgeneric form.\nSome operators permit specification of the options of a generic function,\nsuch as the type of method combination it uses or its argument precedence\norder.  These operators will be referred to as \"operators that specify\ngeneric function options.\"\nThe only standardized operator in this category is defgeneric.\nSome operators define methods for a generic function.  These operators\nwill be referred to as method-defining operators ; their associated forms\nare called method-defining forms.  The standardized method-defining\noperators are listed in Figure 7-2.\n  defgeneric        defmethod  defclass  \n  define-condition  defstruct            \n  Figure 7-2: Standardized Method-Defining Operators\nNote that of the standardized method-defining operators only defgeneric\ncan specify generic function options.  defgeneric and any\nimplementation-defined operators that can specify generic function options\nare also referred to as \"operators that specify generic function options.\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Introduction to Generic Functions,  Next: Introduction to Methods,  Prev: Generic Functions and Methods,  Up: Generic Functions and Methods\n\nIntroduction to Generic Functions\n---------------------------------\n\nA generic function is a function whose behavior depends on the classes or\nidentities of the arguments supplied to it.  A generic function object is\nassociated with a set of methods, a lambda list, a method combination_2,\nand other information.\n\nLike an ordinary function, a generic function takes arguments, performs a\nseries of operations, and perhaps returns useful values.  An ordinary\nfunction has a single body of code that is always executed when the\nfunction is called.  A generic function has a set of bodies of code of\nwhich a subset is selected for execution. The selected bodies of code and\nthe manner of their combination are determined by the classes or\nidentities of one or more of the arguments to the generic function and by\nits method combination.\n\nOrdinary functions and generic functions are called with identical syntax.\n\nGeneric functions are true functions that can be passed as arguments and\nused as the first argument to funcall and apply.\n\nA binding of a function name to a generic function can be established in\none of several ways.  It can be established in the global environment by\nensure-generic-function, defmethod (implicitly, due to\nensure-generic-function) or defgeneric (also implicitly, due to\nensure-generic-function).\n\nNo standardized mechanism is provided for establishing a binding of a\nfunction name to a generic function in the lexical environment.\n\nWhen a defgeneric form is evaluated, one of three actions is taken (due to\nensure-generic-function):\n\n*\n     If a generic function of the given name already exists, the existing\n     generic function object is modified.  Methods specified by the\n     current defgeneric form are added, and any methods in the existing\n     generic function that were defined by a previous defgeneric form are\n     removed.  Methods added by the current defgeneric form might replace\n     methods defined by defmethod, defclass, define-condition, or\n     defstruct.  No other methods in the generic function are affected or\n     replaced.\n\n*\n     If the given name names an ordinary function, a  macro, or a special\n     operator, an error is signaled.\n\n*\n     Otherwise a generic function is created with the methods specified by\n     the method definitions in the defgeneric form.\n\nSome operators permit specification of the options of a generic function,\nsuch as the type of method combination it uses or its argument precedence\norder.  These operators will be referred to as \"operators that specify\ngeneric function options.\"\n\nThe only standardized operator in this category is defgeneric.\n\nSome operators define methods for a generic function.  These operators\nwill be referred to as method-defining operators ; their associated forms\nare called method-defining forms.  The standardized method-defining\noperators are listed in Figure 7-2.\n\n  defgeneric        defmethod  defclass  \n  define-condition  defstruct            \n\n  Figure 7-2: Standardized Method-Defining Operators\n\n\nNote that of the standardized method-defining operators only defgeneric\ncan specify generic function options.  defgeneric and any\nimplementation-defined operators that can specify generic function options\nare also referred to as \"operators that specify generic function options.\"\n\n"
}