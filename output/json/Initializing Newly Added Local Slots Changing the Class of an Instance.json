{
    "name": "Initializing Newly Added Local Slots (Changing the Class of an Instance)",
    "prev": "Modifying the Structure of the Instance",
    "next": "Customizing the Change of Class of an Instance",
    "up": "Changing the Class of an Instance",
    "header": {
        "type": null,
        "text": "Initializing Newly Added Local Slots"
    },
    "sections": [
        {
            "type": "",
            "text": "The second step of the update initializes the newly added slots and\nperforms any other user-defined actions.  This step is implemented by the\ngeneric function update-instance-for-different-class.  The generic\nfunction update-instance-for-different-class is invoked by change-class\nafter the first step of the update has been completed.\nThe generic function update-instance-for-different-class is invoked on\narguments computed by change-class.  The first argument passed is a copy\nof the instance being updated and is an instance of the class C_{from};\nthis copy has dynamic extent within the generic function change-class.\nThe second argument is the instance as updated so far by change-class and\nis an instance of the class C_{to}.  The remaining arguments are an\ninitialization argument list.\nThere is a system-supplied primary method for\nupdate-instance-for-different-class that has two parameter specializers,\neach of which is the class standard-object.  First this method checks the\nvalidity of initialization arguments and signals an error if an\ninitialization argument is supplied that is not declared as valid.  (For\nmore information, see *Note Declaring the Validity of Initialization\nArguments::.) Then it calls the generic function shared-initialize with\nthe following arguments: the new instance, a list of names of the newly\nadded slots, and the initialization arguments it received.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Initializing Newly Added Local Slots (Changing the Class of an Instance),  Next: Customizing the Change of Class of an Instance,  Prev: Modifying the Structure of the Instance,  Up: Changing the Class of an Instance\n\nInitializing Newly Added Local Slots\n------------------------------------\n\nThe second step of the update initializes the newly added slots and\nperforms any other user-defined actions.  This step is implemented by the\ngeneric function update-instance-for-different-class.  The generic\nfunction update-instance-for-different-class is invoked by change-class\nafter the first step of the update has been completed.\n\nThe generic function update-instance-for-different-class is invoked on\narguments computed by change-class.  The first argument passed is a copy\nof the instance being updated and is an instance of the class C_{from};\nthis copy has dynamic extent within the generic function change-class.\nThe second argument is the instance as updated so far by change-class and\nis an instance of the class C_{to}.  The remaining arguments are an\ninitialization argument list.\n\nThere is a system-supplied primary method for\nupdate-instance-for-different-class that has two parameter specializers,\neach of which is the class standard-object.  First this method checks the\nvalidity of initialization arguments and signals an error if an\ninitialization argument is supplied that is not declared as valid.  (For\nmore information, see *Note Declaring the Validity of Initialization\nArguments::.) Then it calls the generic function shared-initialize with\nthe following arguments: the new instance, a list of names of the newly\nadded slots, and the initialization arguments it received.\n\n"
}