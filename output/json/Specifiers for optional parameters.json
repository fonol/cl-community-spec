{
    "name": "Specifiers for optional parameters",
    "prev": "Specifiers for the required parameters",
    "next": "A specifier for a rest parameter",
    "up": "Ordinary Lambda Lists",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Specifiers for optional parameters",
            "text": "If &optional is present, the optional parameter specifiers are those\nfollowing &optional up to the next lambda list keyword or the end of the\nlist.  If optional parameters are specified, then each one is processed as\nfollows.  If any unprocessed arguments remain, then the parameter variable\nvar is bound to the next remaining argument, just as for a required\nparameter.  If no arguments remain, however, then init-form is evaluated,\nand the parameter variable is bound to the resulting value (or to nil if\nno init-form appears in the parameter specifier).  If another variable\nname supplied-p-parameter appears in the specifier, it is bound to true if\nan argument had been available, and to false if no argument remained (and\ntherefore init-form had to be evaluated).  Supplied-p-parameter is bound\nnot to an argument but to a value indicating whether or not an argument\nhad been supplied for the corresponding var.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Specifiers for optional parameters,  Next: A specifier for a rest parameter,  Prev: Specifiers for the required parameters,  Up: Ordinary Lambda Lists\n\nSpecifiers for optional parameters\n..................................\n\nIf &optional is present, the optional parameter specifiers are those\nfollowing &optional up to the next lambda list keyword or the end of the\nlist.  If optional parameters are specified, then each one is processed as\nfollows.  If any unprocessed arguments remain, then the parameter variable\nvar is bound to the next remaining argument, just as for a required\nparameter.  If no arguments remain, however, then init-form is evaluated,\nand the parameter variable is bound to the resulting value (or to nil if\nno init-form appears in the parameter specifier).  If another variable\nname supplied-p-parameter appears in the specifier, it is bound to true if\nan argument had been available, and to false if no argument remained (and\ntherefore init-form had to be evaluated).  Supplied-p-parameter is bound\nnot to an argument but to a value indicating whether or not an argument\nhad been supplied for the corresponding var.\n\n"
}