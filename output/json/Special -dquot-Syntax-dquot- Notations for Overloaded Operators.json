{
    "name": "Special \"Syntax\" Notations for Overloaded Operators",
    "prev": "The \"Syntax\" Section of a Dictionary Entry",
    "next": "Naming Conventions for Rest Parameters",
    "up": "Interpreting Dictionary Entries",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "file-position",
                    "text": " stream =>  position\n"
                },
                {
                    "name": "file-position",
                    "text": " stream position-spec =>  success-p\n\nis operationally equivalent to this line:\n\n"
                },
                {
                    "name": "file-position",
                    "text": " stream &optional position-spec =>  result\n\nand differs only in that it provides on opportunity to introduce different\nnames for parameter and values for each case.  The separated (multi-line)\nnotation is used when an operator is overloaded in such a way that the\nparameters are used in different ways depending on how many arguments are\nsupplied (e.g., for the function /) or the return values are different in\nthe two cases (e.g., for the function file-position).\n\n"
                }
            ],
            "text": "`file-position'  stream =>  position\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Special ``Syntax'' Notations for Overloaded Operators,  Next: Naming Conventions for Rest Parameters,  Prev: The ``Syntax'' Section of a Dictionary Entry,  Up: Interpreting Dictionary Entries\n\nSpecial \"Syntax\" Notations for Overloaded Operators\n...................................................\n\nIf two descriptions exist for the same operation but with different\nnumbers of arguments, then the extra arguments are to be treated as\noptional.  For example, this pair of lines:\n\n`file-position'  stream =>  position\n\n`file-position'  stream position-spec =>  success-p\n\nis operationally equivalent to this line:\n\n`file-position'  stream &optional position-spec =>  result\n\nand differs only in that it provides on opportunity to introduce different\nnames for parameter and values for each case.  The separated (multi-line)\nnotation is used when an operator is overloaded in such a way that the\nparameters are used in different ways depending on how many arguments are\nsupplied (e.g., for the function /) or the return values are different in\nthe two cases (e.g., for the function file-position).\n\n"
}