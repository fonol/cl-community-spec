{
    "name": "and (Type Specifier)",
    "prev": "not (Type Specifier)",
    "next": "or (Type Specifier)",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "Type Specifier",
        "text": "and"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Combining.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`and'{{typespec}*})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "typespec--a type specifier.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the set of all objects of the type determined by the\nintersection of the typespecs.\n* is not permitted as an argument.\nThe type specifiers (and) and t are equivalent.  The symbol and is not\nvalid as a type specifier, and, specifically, it is not an abbreviation\nfor (and).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: and (Type Specifier),  Next: or (Type Specifier),  Prev: not (Type Specifier),  Up: Types and Classes Dictionary\n\nand                                                        [Type Specifier]\n---------------------------------------------------------------------------\n\nCompound Type Specifier Kind::\n..............................\n\nCombining.\n\nCompound Type Specifier Syntax::\n................................\n\n(`and'{{typespec}*})\n\nCompound Type Specifier Arguments::\n...................................\n\ntypespec--a type specifier.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the set of all objects of the type determined by the\nintersection of the typespecs.\n\n* is not permitted as an argument.\n\nThe type specifiers (and) and t are equivalent.  The symbol and is not\nvalid as a type specifier, and, specifically, it is not an abbreviation\nfor (and).\n\n"
}