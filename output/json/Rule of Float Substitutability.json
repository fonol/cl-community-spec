{
    "name": "Rule of Float Substitutability",
    "prev": "Rule of Canonical Representation for Rationals",
    "next": null,
    "up": "Rational Computations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Rule of Float Substitutability",
            "text": "When the arguments to an irrational mathematical function\n[Reviewer Note by Barmar: There should be a table of these functions.] are\nall rational and the true mathematical result is also (mathematically)\nrational, then unless otherwise noted an implementation is free to return\neither an accurate rational result or a single float approximation.  If\nthe arguments are all rational but the result cannot be expressed as a\nrational number, then a single float approximation is always returned.\nIf the arguments to a mathematical function are all of type (or rational\n(complex rational)) and the true mathematical result is (mathematically) a\ncomplex number with rational real and imaginary parts, then unless\notherwise noted an implementation is free to return either an accurate\nresult of type (or rational (complex rational)) or a single float\n(permissible only if the imaginary part of the true mathematical result is\nzero) or (complex single-float). If the arguments are all of type (or\nrational (complex rational)) but the result cannot be expressed as a\nrational or complex rational, then the returned value will be of type\nsingle-float (permissible only if the imaginary part of the true\nmathematical result is zero) or (complex single-float).\n  Function  Sample Results                                   \n  abs       (abs #c(3 4)) =>  5 or 5.0                       \n  acos      (acos 1) =>  0 or 0.0                            \n  acosh     (acosh 1) =>  0 or 0.0                           \n  asin      (asin 0) =>  0 or 0.0                            \n  asinh     (asinh 0) =>  0 or 0.0                           \n  atan      (atan 0) =>  0 or 0.0                            \n  atanh     (atanh 0) =>  0 or 0.0                           \n  cis       (cis 0) =>  #c(1 0) or #c(1.0 0.0)               \n  cos       (cos 0) =>  1 or 1.0                             \n  cosh      (cosh 0) =>  1 or 1.0                            \n  exp       (exp 0) =>  1 or 1.0                             \n  expt      (expt 8 1/3) =>  2 or 2.0                        \n  log       (log 1) =>  0 or 0.0                             \n            (log 8 2) =>  3 or 3.0                           \n  phase     (phase 7) =>  0 or 0.0                           \n  signum    (signum #c(3 4)) =>  #c(3/5 4/5) or #c(0.6 0.8)  \n  sin       (sin 0) =>  0 or 0.0                             \n  sinh      (sinh 0) =>  0 or 0.0                            \n  sqrt      (sqrt 4) =>  2 or 2.0                            \n            (sqrt 9/16) =>  3/4 or 0.75                      \n  tan       (tan 0) =>  0 or 0.0                             \n  tanh      (tanh 0) =>  0 or 0.0                            \n  Figure 12-8: Functions Affected by Rule of Float Substitutability\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Rule of Float Substitutability,  Prev: Rule of Canonical Representation for Rationals,  Up: Rational Computations\n\nRule of Float Substitutability\n..............................\n\nWhen the arguments to an irrational mathematical function\n\n[Reviewer Note by Barmar: There should be a table of these functions.] are\nall rational and the true mathematical result is also (mathematically)\nrational, then unless otherwise noted an implementation is free to return\neither an accurate rational result or a single float approximation.  If\nthe arguments are all rational but the result cannot be expressed as a\nrational number, then a single float approximation is always returned.\n\nIf the arguments to a mathematical function are all of type (or rational\n(complex rational)) and the true mathematical result is (mathematically) a\ncomplex number with rational real and imaginary parts, then unless\notherwise noted an implementation is free to return either an accurate\nresult of type (or rational (complex rational)) or a single float\n(permissible only if the imaginary part of the true mathematical result is\nzero) or (complex single-float). If the arguments are all of type (or\nrational (complex rational)) but the result cannot be expressed as a\nrational or complex rational, then the returned value will be of type\nsingle-float (permissible only if the imaginary part of the true\nmathematical result is zero) or (complex single-float).\n\n  Function  Sample Results                                   \n  abs       (abs #c(3 4)) =>  5 or 5.0                       \n  acos      (acos 1) =>  0 or 0.0                            \n  acosh     (acosh 1) =>  0 or 0.0                           \n  asin      (asin 0) =>  0 or 0.0                            \n  asinh     (asinh 0) =>  0 or 0.0                           \n  atan      (atan 0) =>  0 or 0.0                            \n  atanh     (atanh 0) =>  0 or 0.0                           \n  cis       (cis 0) =>  #c(1 0) or #c(1.0 0.0)               \n  cos       (cos 0) =>  1 or 1.0                             \n  cosh      (cosh 0) =>  1 or 1.0                            \n  exp       (exp 0) =>  1 or 1.0                             \n  expt      (expt 8 1/3) =>  2 or 2.0                        \n  log       (log 1) =>  0 or 0.0                             \n            (log 8 2) =>  3 or 3.0                           \n  phase     (phase 7) =>  0 or 0.0                           \n  signum    (signum #c(3 4)) =>  #c(3/5 4/5) or #c(0.6 0.8)  \n  sin       (sin 0) =>  0 or 0.0                             \n  sinh      (sinh 0) =>  0 or 0.0                            \n  sqrt      (sqrt 4) =>  2 or 2.0                            \n            (sqrt 9/16) =>  3/4 or 0.75                      \n  tan       (tan 0) =>  0 or 0.0                             \n  tanh      (tanh 0) =>  0 or 0.0                            \n\n  Figure 12-8: Functions Affected by Rule of Float Substitutability\n\n\n"
}