{
    "name": "write-to-string",
    "prev": "write",
    "next": "*print-array*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Function",
        "text": "write-to-string, prin1-to-string, princ-to-string"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "write-to-string",
                    "text": " object &key \\writekeys=>  string\n\n"
                },
                {
                    "name": "prin",
                    "text": " 1 =>  -to-string object string\n\n"
                },
                {
                    "name": "princ-to-string",
                    "text": " object =>  string\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object.\\writekeydescriptions\n"
                },
                {
                    "name": "string",
                    "desc": "a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "write-to-string, prin1-to-string, and princ-to-string are used to create a\nstring consisting of the printed representation of object.  Object is\neffectively printed as if by write, prin1, or princ, respectively, and the\ncharacters that would be output are made into a string.\nwrite-to-string is the general output function.  It has the ability to\nspecify all the parameters applicable to the printing of object.\nprin1-to-string acts like write-to-string with :escape t, that is, escape\ncharacters are written where appropriate.\nprinc-to-string acts like write-to-string with\n:escape nil :readably nil.\nThus no escape characters are written.\nAll other keywords that would be specified to write-to-string are default\nvalues when prin1-to-string or princ-to-string is invoked.\nThe meanings and defaults for the keyword arguments to write-to-string are\nthe same as those for write.\n"
        },
        {
            "type": "Examples",
            "text": "      (prin1-to-string \"abc\") =>  \"\\\"abc\\\"\"\n      (princ-to-string \"abc\") =>  \"abc\"\n"
        },
        {
            "type": "Affected By",
            "text": "*print-escape*, *print-radix*, *print-base*, *print-circle*,\n*print-pretty*, *print-level*, *print-length*, *print-case*,\n*print-gensym*, *print-array*, *read-default-float-format*.\n"
        },
        {
            "type": "See Also",
            "text": "*Note write; prin1; print; pprint; princ::\n"
        },
        {
            "type": "Notes",
            "text": "      (write-to-string object {key argument}*)\n     == (with-output-to-string (#1=#:string-stream)\n          (write object :stream #1# {key argument}*))\n      (princ-to-string object)\n     == (with-output-to-string (string-stream)\n          (princ object string-stream))\n      (prin1-to-string object)\n     == (with-output-to-string (string-stream)\n          (prin1 object string-stream))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: write-to-string,  Next: *print-array*,  Prev: write,  Up: Printer Dictionary\n\nwrite-to-string, prin1-to-string, princ-to-string                [Function]\n---------------------------------------------------------------------------\n\n`write-to-string'  object &key \\writekeys\n=>  string\n\n`prin'  1 =>  -to-string object string\n\n`princ-to-string'  object =>  string\n\nArguments and Values::\n......................\n\nobject--an object.\n\n\\writekeydescriptions\n\nstring--a string.\n\nDescription::\n.............\n\nwrite-to-string, prin1-to-string, and princ-to-string are used to create a\nstring consisting of the printed representation of object.  Object is\neffectively printed as if by write, prin1, or princ, respectively, and the\ncharacters that would be output are made into a string.\n\nwrite-to-string is the general output function.  It has the ability to\nspecify all the parameters applicable to the printing of object.\n\nprin1-to-string acts like write-to-string with :escape t, that is, escape\ncharacters are written where appropriate.\n\nprinc-to-string acts like write-to-string with\n\n:escape nil :readably nil.\n\nThus no escape characters are written.\n\nAll other keywords that would be specified to write-to-string are default\nvalues when prin1-to-string or princ-to-string is invoked.\n\nThe meanings and defaults for the keyword arguments to write-to-string are\nthe same as those for write.\n\nExamples::\n..........\n\n      (prin1-to-string \"abc\") =>  \"\\\"abc\\\"\"\n      (princ-to-string \"abc\") =>  \"abc\"\n\nAffected By::\n.............\n\n*print-escape*, *print-radix*, *print-base*, *print-circle*,\n*print-pretty*, *print-level*, *print-length*, *print-case*,\n*print-gensym*, *print-array*, *read-default-float-format*.\n\nSee Also::\n..........\n\n*Note write; prin1; print; pprint; princ::\n\nNotes::\n.......\n\n      (write-to-string object {key argument}*)\n     == (with-output-to-string (#1=#:string-stream)\n          (write object :stream #1# {key argument}*))\n     \n      (princ-to-string object)\n     == (with-output-to-string (string-stream)\n          (princ object string-stream))\n     \n      (prin1-to-string object)\n     == (with-output-to-string (string-stream)\n          (prin1 object string-stream))\n\n"
}