{
    "name": "Constraints on the COMMON-LISP Package for Conforming Programs",
    "prev": "Constraints on the COMMON-LISP Package for Conforming Implementations",
    "next": "Some Exceptions to Constraints on the COMMON-LISP Package for Conforming Programs",
    "up": "Standardized Packages",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Constraints on the COMMON-LISP Package for Conforming Programs",
            "text": "Except where explicitly allowed, the consequences are undefined if any of\nthe following actions are performed on an external symbol of the\nCOMMON-LISP package:\n1.\n     Binding or altering its value (lexically or dynamically).  (Some\n     exceptions are noted below.)\n2.\n     Defining,\n     undefining,\n     or binding it as a function.  (Some exceptions are noted below.)\n3.\n     Defining,\n     undefining,\n     or binding it as a macro\n     or compiler macro.\n     (Some exceptions are noted below.)\n4.\n     Defining it as a type specifier (via defstruct, defclass, deftype,\n     define-condition).\n5.\n     Defining it as a structure (via defstruct).\n6.\n     Defining it as a declaration with a declaration proclamation.\n7.\n     Defining it as a symbol macro.\n8.\n     Altering its home package.\n9.\n     Tracing it  (via trace).\n10.\n     Declaring or proclaiming it special (via declare,\n     declaim,\n     or proclaim).\n11.\n     Declaring or proclaiming its type or ftype (via declare,\n     declaim,\n     or proclaim).  (Some exceptions are noted below.)\n12.\n     Removing it from the COMMON-LISP package.\n13.\n     Defining a setf expander for it (via defsetf or define-setf-method).\n14.\n     Defining, undefining, or binding its setf function name.\n15.\n     Defining it as a method combination type (via\n     define-method-combination).\n16.\n     Using it as the class-name argument to setf of find-class.\n17.\n     Binding it as a catch tag.\n18.\n     Binding it as a restart name.\n19.\n     Defining a method for a standardized generic function which is\n     applicable when all of the arguments are direct instances of\n     standardized classes.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Constraints on the COMMON-LISP Package for Conforming Programs,  Next: Some Exceptions to Constraints on the COMMON-LISP Package for Conforming Programs,  Prev: Constraints on the COMMON-LISP Package for Conforming Implementations,  Up: Standardized Packages\n\nConstraints on the COMMON-LISP Package for Conforming Programs\n..............................................................\n\nExcept where explicitly allowed, the consequences are undefined if any of\nthe following actions are performed on an external symbol of the\nCOMMON-LISP package:\n\n1.\n     Binding or altering its value (lexically or dynamically).  (Some\n     exceptions are noted below.)\n\n2.\n     Defining,\n\n     undefining,\n\n     or binding it as a function.  (Some exceptions are noted below.)\n\n3.\n     Defining,\n\n     undefining,\n\n     or binding it as a macro\n\n     or compiler macro.\n\n     (Some exceptions are noted below.)\n\n4.\n     Defining it as a type specifier (via defstruct, defclass, deftype,\n     define-condition).\n\n5.\n     Defining it as a structure (via defstruct).\n\n6.\n     Defining it as a declaration with a declaration proclamation.\n\n7.\n     Defining it as a symbol macro.\n\n8.\n     Altering its home package.\n\n9.\n     Tracing it  (via trace).\n\n10.\n     Declaring or proclaiming it special (via declare,\n\n     declaim,\n\n     or proclaim).\n\n11.\n     Declaring or proclaiming its type or ftype (via declare,\n\n     declaim,\n\n     or proclaim).  (Some exceptions are noted below.)\n\n12.\n     Removing it from the COMMON-LISP package.\n\n13.\n     Defining a setf expander for it (via defsetf or define-setf-method).\n\n14.\n     Defining, undefining, or binding its setf function name.\n\n15.\n     Defining it as a method combination type (via\n     define-method-combination).\n\n16.\n     Using it as the class-name argument to setf of find-class.\n\n17.\n     Binding it as a catch tag.\n\n18.\n     Binding it as a restart name.\n\n19.\n     Defining a method for a standardized generic function which is\n     applicable when all of the arguments are direct instances of\n     standardized classes.\n\n"
}