{
    "name": "bit",
    "prev": "vectorp",
    "next": "bit-and",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Accessor",
        "text": "bit, sbit"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "bit",
                    "text": " bit-array &rest subscripts =>  bit\n"
                },
                {
                    "name": "sbit",
                    "text": " bit-array &rest subscripts =>  bit\n\n(setf (`bit' bit-array &rest subscripts) new-bit)\n(setf (`sbit' bit-array &rest subscripts) new-bit)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "bit-array",
                    "desc": "for bit,  a bit array; for sbit, a simple bit array."
                },
                {
                    "name": "subscripts",
                    "desc": "a list of valid array indices for the bit-array."
                },
                {
                    "name": "bit",
                    "desc": "a bit."
                }
            ]
        },
        {
            "type": "Description",
            "text": "bit and sbit access the bit-array element specified by subscripts.\nThese functions ignore the fill pointer when accessing elements.\n"
        },
        {
            "type": "Examples",
            "text": "      (bit (setq ba (make-array 8\n                                 :element-type 'bit\n                                 :initial-element 1))\n            3) =>  1\n      (setf (bit ba 3) 0) =>  0\n      (bit ba 3) =>  0\n      (sbit ba 5) =>  1\n      (setf (sbit ba 5) 1) =>  1\n      (sbit ba 5) =>  1\n"
        },
        {
            "type": "See Also",
            "text": "*Note aref:: ,\n*Note Compiler Terminology::\n"
        },
        {
            "type": "Notes",
            "text": "bit and sbit are like aref except that they require arrays to be a bit\narray and a simple bit array, respectively.\nbit and sbit, unlike char and schar, allow the first argument to be an\narray of any rank.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: bit,  Next: bit-and,  Prev: vectorp,  Up: Arrays Dictionary\n\nbit, sbit                                                        [Accessor]\n---------------------------------------------------------------------------\n\n`bit'  bit-array &rest subscripts =>  bit\n\n`sbit'  bit-array &rest subscripts =>  bit\n\n(setf (`bit' bit-array &rest subscripts) new-bit)\n(setf (`sbit' bit-array &rest subscripts) new-bit)\nArguments and Values::\n......................\n\nbit-array--for bit,  a bit array; for sbit, a simple bit array.\n\nsubscripts--a list of valid array indices for the bit-array.\n\nbit--a bit.\n\nDescription::\n.............\n\nbit and sbit access the bit-array element specified by subscripts.\n\nThese functions ignore the fill pointer when accessing elements.\n\nExamples::\n..........\n\n      (bit (setq ba (make-array 8\n                                 :element-type 'bit\n                                 :initial-element 1))\n            3) =>  1\n      (setf (bit ba 3) 0) =>  0\n      (bit ba 3) =>  0\n      (sbit ba 5) =>  1\n      (setf (sbit ba 5) 1) =>  1\n      (sbit ba 5) =>  1\n\nSee Also::\n..........\n\n*Note aref:: ,\n\n*Note Compiler Terminology::\n\nNotes::\n.......\n\nbit and sbit are like aref except that they require arrays to be a bit\narray and a simple bit array, respectively.\n\nbit and sbit, unlike char and schar, allow the first argument to be an\narray of any rank.\n\n"
}