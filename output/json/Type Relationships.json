{
    "name": "Type Relationships",
    "prev": "Data Type Definition",
    "next": "Type Specifiers",
    "up": "Types",
    "header": {
        "type": null,
        "text": "Type Relationships"
    },
    "sections": [
        {
            "type": "",
            "text": "*\n     The types cons, symbol, array, number, character, hash-table,\n     function,\n     readtable, package, pathname, stream, random-state, condition,\n     restart, and any single other type created by defstruct,\n     define-condition,\n     or defclass are pairwise disjoint, except for type relations\n     explicitly established by specifying superclasses in defclass\n     or define-condition\n     or the :include option of destruct.\n*\n     Any two types created by defstruct are disjoint unless one is a\n     supertype of the other by virtue of the defstruct :include option.\n     [Editorial Note by KMP: The comments in the source say gray suggested\n     some change from \"common superclass\" to \"common subclass\" in the\n     following, but the result looks suspicious to me.]\n*\n     Any two distinct classes created by defclass or define-condition are\n     disjoint unless they have a common subclass or one class is a\n     subclass of the other.\n*\n     An implementation may be extended to add other subtype relationships\n     between the specified types, as long as they do not violate the type\n     relationships and disjointness requirements specified here.  An\n     implementation may define additional types that are subtypes or\n     supertypes of any specified types, as long as each additional type is\n     a subtype of type t and a supertype of type nil and the disjointness\n     requirements are not violated.\n     At the discretion of the implementation, either standard-object or\n     structure-object might appear in any class precedence list for a\n     system class that does not already specify either standard-object or\n     structure-object.  If it does, it must precede the class t and follow\n     all other standardized classes.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Type Relationships,  Next: Type Specifiers,  Prev: Data Type Definition,  Up: Types\n\nType Relationships\n------------------\n\n*\n     The types cons, symbol, array, number, character, hash-table,\n\n     function,\n\n     readtable, package, pathname, stream, random-state, condition,\n     restart, and any single other type created by defstruct,\n\n     define-condition,\n\n     or defclass are pairwise disjoint, except for type relations\n     explicitly established by specifying superclasses in defclass\n\n     or define-condition\n\n     or the :include option of destruct.\n\n*\n     Any two types created by defstruct are disjoint unless one is a\n     supertype of the other by virtue of the defstruct :include option.\n\n     [Editorial Note by KMP: The comments in the source say gray suggested\n     some change from \"common superclass\" to \"common subclass\" in the\n     following, but the result looks suspicious to me.]\n\n*\n     Any two distinct classes created by defclass or define-condition are\n     disjoint unless they have a common subclass or one class is a\n     subclass of the other.\n\n*\n     An implementation may be extended to add other subtype relationships\n     between the specified types, as long as they do not violate the type\n     relationships and disjointness requirements specified here.  An\n     implementation may define additional types that are subtypes or\n     supertypes of any specified types, as long as each additional type is\n     a subtype of type t and a supertype of type nil and the disjointness\n     requirements are not violated.\n\n     At the discretion of the implementation, either standard-object or\n     structure-object might appear in any class precedence list for a\n     system class that does not already specify either standard-object or\n     structure-object.  If it does, it must precede the class t and follow\n     all other standardized classes.\n\n"
}