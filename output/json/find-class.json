{
    "name": "find-class",
    "prev": "defmethod",
    "next": "next-method-p",
    "up": "Objects Dictionary",
    "header": {
        "type": "Accessor",
        "text": "find-class"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "find-class",
                    "text": " symbol &optional errorp environment =>  class\n(setf (`         find-class' symbol &optional errorp environment)\nnew-class)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbol",
                    "desc": "a symbol."
                },
                {
                    "name": "errorp",
                    "desc": "a generalized boolean.  The default is true.environment - same as the &environment argument to macro expansion\nfunctions and is used to distinguish between compile-time and run-time\nenvironments.\nThe &environment argument has dynamic extent; the consequences are\nundefined if the &environment argument is referred to outside the dynamic\nextent of the macro expansion function.\n"
                },
                {
                    "name": "class",
                    "desc": "a class object, or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the class object named by the symbol in the environment.  If there\nis no such class, nil is returned if errorp is false; otherwise, if errorp\nis true, an error is signaled.\nThe class associated with a particular symbol can be changed by using setf\nwith find-class;\nor, if the new class given to setf is nil, the class association is removed\n(but the class object itself is not affected).\nThe results are undefined if the user attempts to change\nor remove\nthe class associated with a symbol that is defined as a type specifier in\nthis standard.  See *Note Integrating Types and Classes::.\nWhen using setf of find-class, any errorp argument is evaluated for\neffect, but any values it returns are ignored; the errorp parameter is\npermitted primarily so that the environment parameter can be used.\nThe environment might be used to distinguish between a compile-time and a\nrun-time environment.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If there is no such class and errorp is true, find-class signals an error\nof type error.\n"
        },
        {
            "type": "See Also",
            "text": "*Note defmacro:: , *Note Integrating Types and Classes::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: find-class,  Next: next-method-p,  Prev: defmethod,  Up: Objects Dictionary\n\nfind-class                                                       [Accessor]\n---------------------------------------------------------------------------\n\n`find-class'  symbol &optional errorp environment =>  class\n\n(setf (`         find-class' symbol &optional errorp environment)\nnew-class)\nArguments and Values::\n......................\n\nsymbol--a symbol.\n\nerrorp--a generalized boolean.  The default is true.\n\nenvironment - same as the &environment argument to macro expansion\nfunctions and is used to distinguish between compile-time and run-time\nenvironments.\n\nThe &environment argument has dynamic extent; the consequences are\nundefined if the &environment argument is referred to outside the dynamic\nextent of the macro expansion function.\n\nclass--a class object, or nil.\n\nDescription::\n.............\n\nReturns the class object named by the symbol in the environment.  If there\nis no such class, nil is returned if errorp is false; otherwise, if errorp\nis true, an error is signaled.\n\nThe class associated with a particular symbol can be changed by using setf\nwith find-class;\n\nor, if the new class given to setf is nil, the class association is removed\n(but the class object itself is not affected).\n\nThe results are undefined if the user attempts to change\n\nor remove\n\nthe class associated with a symbol that is defined as a type specifier in\nthis standard.  See *Note Integrating Types and Classes::.\n\nWhen using setf of find-class, any errorp argument is evaluated for\neffect, but any values it returns are ignored; the errorp parameter is\npermitted primarily so that the environment parameter can be used.\n\nThe environment might be used to distinguish between a compile-time and a\nrun-time environment.\n\nExceptional Situations::\n........................\n\nIf there is no such class and errorp is true, find-class signals an error\nof type error.\n\nSee Also::\n..........\n\n*Note defmacro:: , *Note Integrating Types and Classes::\n\n"
}