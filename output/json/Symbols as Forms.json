{
    "name": "Symbols as Forms",
    "prev": "Form Evaluation",
    "next": "Lexical Variables",
    "up": "The Evaluation Model",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Symbols as Forms",
            "text": "If a form is a symbol, then it is either a symbol macro or a variable.\nThe symbol names a symbol macro if there is a binding of the symbol as a\nsymbol macro in the current lexical environment\n(see define-symbol-macro and symbol-macrolet).\nIf the symbol is a symbol macro, its expansion function is obtained.  The\nexpansion function is a function of two arguments, and is invoked by\ncalling the macroexpand hook with the expansion function as its first\nargument, the symbol as its second argument, and an environment object\n(corresponding to the current lexical environment) as its third argument.\nThe macroexpand hook, in turn, calls the expansion function with the form\nas its first argument and the environment as its second argument.  The\nvalue of the expansion function, which is passed through by the\nmacroexpand hook, is a form.  This resulting form is processed in place of\nthe original symbol.\nIf a form is a symbol that is not a symbol macro, then it is the name of a\nvariable, and the value of that variable is returned. There are three\nkinds of variables: lexical variables, dynamic variables, and constant\nvariables.  A variable can store one object.  The main operations on a\nvariable are to read_1 and to write_1 its value.\nAn error of type unbound-variable should be signaled if an unbound\nvariable is referenced.\nNon-constant variables can be assigned by using setq or bound_3 by using\nlet.  Figure 3-1 lists some defined names that are applicable to\nassigning, binding, and defining variables.\n  boundp        let                  progv         \n  defconstant   let*                 psetq         \n  defparameter  makunbound           set           \n  defvar        multiple-value-bind  setq          \n  lambda        multiple-value-setq  symbol-value  \n  Figure 3-1: Some Defined Names Applicable to Variables\nThe following is a description of each kind of variable.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Symbols as Forms,  Next: Lexical Variables,  Prev: Form Evaluation,  Up: The Evaluation Model\n\nSymbols as Forms\n................\n\nIf a form is a symbol, then it is either a symbol macro or a variable.\n\nThe symbol names a symbol macro if there is a binding of the symbol as a\nsymbol macro in the current lexical environment\n\n(see define-symbol-macro and symbol-macrolet).\n\nIf the symbol is a symbol macro, its expansion function is obtained.  The\nexpansion function is a function of two arguments, and is invoked by\ncalling the macroexpand hook with the expansion function as its first\nargument, the symbol as its second argument, and an environment object\n(corresponding to the current lexical environment) as its third argument.\nThe macroexpand hook, in turn, calls the expansion function with the form\nas its first argument and the environment as its second argument.  The\nvalue of the expansion function, which is passed through by the\nmacroexpand hook, is a form.  This resulting form is processed in place of\nthe original symbol.\n\nIf a form is a symbol that is not a symbol macro, then it is the name of a\nvariable, and the value of that variable is returned. There are three\nkinds of variables: lexical variables, dynamic variables, and constant\nvariables.  A variable can store one object.  The main operations on a\nvariable are to read_1 and to write_1 its value.\n\nAn error of type unbound-variable should be signaled if an unbound\nvariable is referenced.\n\nNon-constant variables can be assigned by using setq or bound_3 by using\nlet.  Figure 3-1 lists some defined names that are applicable to\nassigning, binding, and defining variables.\n\n  boundp        let                  progv         \n  defconstant   let*                 psetq         \n  defparameter  makunbound           set           \n  defvar        multiple-value-bind  setq          \n  lambda        multiple-value-setq  symbol-value  \n\n  Figure 3-1: Some Defined Names Applicable to Variables\n\n\nThe following is a description of each kind of variable.\n\n"
}