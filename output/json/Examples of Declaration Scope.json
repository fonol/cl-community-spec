{
    "name": "Examples of Declaration Scope",
    "prev": "Declaration Scope",
    "next": null,
    "up": "Declaration Scope",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Declaration Scope",
            "text": "Here is an example illustrating the scope of bound declarations.\n      (let ((x 1))                ;[1] 1st occurrence of x\n        (declare (special x))     ;[2] 2nd occurrence of x\n        (let ((x 2))              ;[3] 3rd occurrence of x\n          (let ((old-x x)         ;[4] 4th occurrence of x\n                (x 3))            ;[5] 5th occurrence of x\n            (declare (special x)) ;[6] 6th occurrence of x\n            (list old-x x))))     ;[7] 7th occurrence of x\n     =>  (2 3)\nThe first occurrence of x establishes a dynamic binding of x because of\nthe special declaration for x in the second line.  The third occurrence of\nx establishes a lexical binding of x (because there is no special\ndeclaration in the corresponding let form).  The fourth occurrence of x x\nis a reference to the lexical binding of x established in the third line.\nThe fifth occurrence of x establishes a dynamic binding of x for the body\nof the let form that begins on that line because of the special\ndeclaration for x in the sixth line. The reference to x in the fourth line\nis not affected by the special declaration in the sixth line because that\nreference is not within the \"would-be lexical scope\" of the variable x in\nthe fifth line.  The reference to x in the seventh line is a reference to\nthe dynamic binding of x established in the fifth line.\nHere is another example, to illustrate the scope of a free declaration.\nIn the following:\n      (lambda (&optional (x (foo 1))) ;[1]\n        (declare (notinline foo))     ;[2]\n        (foo x))                      ;[3]\nthe call to foo in the first line might be compiled inline even though the\ncall to foo in the third line must not be.  This is because the notinline\ndeclaration for foo in the second line applies only to the body on the\nthird line.  In order to suppress inlining for both calls, one might write:\n      (locally (declare (notinline foo)) ;[1]\n        (lambda (&optional (x (foo 1)))  ;[2]\n          (foo x)))                      ;[3]\nor, alternatively:\n      (lambda (&optional                               ;[1]\n                 (x (locally (declare (notinline foo)) ;[2]\n                      (foo 1))))                       ;[3]\n        (declare (notinline foo))                      ;[4]\n        (foo x))                                       ;[5]\nFinally, here is an example that shows the scope of declarations in an\niteration form.\n      (let ((x  1))                     ;[1]\n        (declare (special x))           ;[2]\n          (let ((x 2))                  ;[3]\n            (dotimes (i x x)            ;[4]\n              (declare (special x)))))  ;[5]\n     =>  1\nIn this example, the first reference to x on the fourth line is to the\nlexical binding of x established on the third line.  However, the second\noccurrence of x on the fourth line lies within the scope of the free\ndeclaration on the fifth line (because this is the result-form of the\ndotimes) and therefore refers to the dynamic binding of x.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Declaration Scope,  Prev: Declaration Scope,  Up: Declaration Scope\n\nExamples of Declaration Scope\n.............................\n\nHere is an example illustrating the scope of bound declarations.\n\n      (let ((x 1))                ;[1] 1st occurrence of x\n        (declare (special x))     ;[2] 2nd occurrence of x\n        (let ((x 2))              ;[3] 3rd occurrence of x\n          (let ((old-x x)         ;[4] 4th occurrence of x\n                (x 3))            ;[5] 5th occurrence of x\n            (declare (special x)) ;[6] 6th occurrence of x\n            (list old-x x))))     ;[7] 7th occurrence of x\n     =>  (2 3)\n\nThe first occurrence of x establishes a dynamic binding of x because of\nthe special declaration for x in the second line.  The third occurrence of\nx establishes a lexical binding of x (because there is no special\ndeclaration in the corresponding let form).  The fourth occurrence of x x\nis a reference to the lexical binding of x established in the third line.\nThe fifth occurrence of x establishes a dynamic binding of x for the body\nof the let form that begins on that line because of the special\ndeclaration for x in the sixth line. The reference to x in the fourth line\nis not affected by the special declaration in the sixth line because that\nreference is not within the \"would-be lexical scope\" of the variable x in\nthe fifth line.  The reference to x in the seventh line is a reference to\nthe dynamic binding of x established in the fifth line.\n\nHere is another example, to illustrate the scope of a free declaration.\nIn the following:\n\n      (lambda (&optional (x (foo 1))) ;[1]\n        (declare (notinline foo))     ;[2]\n        (foo x))                      ;[3]\n\nthe call to foo in the first line might be compiled inline even though the\ncall to foo in the third line must not be.  This is because the notinline\ndeclaration for foo in the second line applies only to the body on the\nthird line.  In order to suppress inlining for both calls, one might write:\n\n      (locally (declare (notinline foo)) ;[1]\n        (lambda (&optional (x (foo 1)))  ;[2]\n          (foo x)))                      ;[3]\n\nor, alternatively:\n\n      (lambda (&optional                               ;[1]\n                 (x (locally (declare (notinline foo)) ;[2]\n                      (foo 1))))                       ;[3]\n        (declare (notinline foo))                      ;[4]\n        (foo x))                                       ;[5]\n\nFinally, here is an example that shows the scope of declarations in an\niteration form.\n\n      (let ((x  1))                     ;[1]\n        (declare (special x))           ;[2]\n          (let ((x 2))                  ;[3]\n            (dotimes (i x x)            ;[4]\n              (declare (special x)))))  ;[5]\n     =>  1\n\nIn this example, the first reference to x on the fourth line is to the\nlexical binding of x established on the third line.  However, the second\noccurrence of x on the fourth line lies within the scope of the free\ndeclaration on the fifth line (because this is the result-form of the\ndotimes) and therefore refers to the dynamic binding of x.\n\n"
}