{
    "name": "Restrictions on Constructing Pathnames",
    "prev": "Notes about the Pathname Version Component",
    "next": null,
    "up": "Interpreting Pathname Component Values",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Restrictions on Constructing Pathnames",
            "text": "When constructing a pathname from components, conforming programs must\nfollow these rules:\n*\n     Any component can be nil.  nil in the host might mean a default host\n     rather than an actual nil in some implementations.\n*\n     The host, device, directory, name, and type can be strings.  There\n     are implementation-dependent limits on the number and type of\n     characters in these strings.\n*\n     The directory can be a list of strings and symbols.  There are\n     implementation-dependent limits on the list's length and contents.\n*\n     The version can be :newest.\n*\n     Any component can be taken from the corresponding component of\n     another pathname.  When the two pathnames are for different file\n     systems (in implementations that support multiple file systems), an\n     appropriate translation occurs.  If no meaningful translation is\n     possible, an error is signaled.  The definitions of \"appropriate\" and\n     \"meaningful\" are implementation-dependent.\n*\n     An implementation might support other values for some components, but\n     a portable program cannot use those values.  A conforming program can\n     use implementation-dependent values but this can make it non-portable;\n     for example, it might work only with Unix file systems.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Restrictions on Constructing Pathnames,  Prev: Notes about the Pathname Version Component,  Up: Interpreting Pathname Component Values\n\nRestrictions on Constructing Pathnames\n......................................\n\nWhen constructing a pathname from components, conforming programs must\nfollow these rules:\n\n*\n     Any component can be nil.  nil in the host might mean a default host\n     rather than an actual nil in some implementations.\n\n*\n     The host, device, directory, name, and type can be strings.  There\n     are implementation-dependent limits on the number and type of\n     characters in these strings.\n\n*\n     The directory can be a list of strings and symbols.  There are\n     implementation-dependent limits on the list's length and contents.\n\n*\n     The version can be :newest.\n\n*\n     Any component can be taken from the corresponding component of\n     another pathname.  When the two pathnames are for different file\n     systems (in implementations that support multiple file systems), an\n     appropriate translation occurs.  If no meaningful translation is\n     possible, an error is signaled.  The definitions of \"appropriate\" and\n     \"meaningful\" are implementation-dependent.\n\n*\n     An implementation might support other values for some components, but\n     a portable program cannot use those values.  A conforming program can\n     use implementation-dependent values but this can make it non-portable;\n     for example, it might work only with Unix file systems.\n\n"
}