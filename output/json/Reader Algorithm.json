{
    "name": "Reader Algorithm",
    "prev": "Character Syntax",
    "next": "Interpretation of Tokens",
    "up": "Syntax",
    "header": {
        "type": null,
        "text": "Reader Algorithm"
    },
    "sections": [
        {
            "type": "",
            "text": "This section describes the algorithm used by the Lisp reader to parse\nobjects from an input character stream, including how the Lisp reader\nprocesses macro characters.\nWhen dealing with tokens, the reader's basic function is to distinguish\nrepresentations of symbols from those of numbers.  When a token is\naccumulated, it is assumed to represent a number if it satisfies the\nsyntax for numbers listed in Figure~2-9.  If it does not represent a\nnumber, it is then assumed to be a potential number if it satisfies the\nrules governing the syntax for a potential number.  If a valid token is\nneither a representation of a number nor a potential number, it represents\na symbol.\nThe algorithm performed by the Lisp reader is as follows:\n1.\n     If at end of file, end-of-file processing is performed as specified\n     in read.  Otherwise, one character, x,  is read from the input\n     stream, and dispatched according to the syntax type of x to one of\n     steps 2 to 7.\n2.\n     If x is an invalid character, an error of type reader-error is\n     signaled.\n3.\n     If x is a whitespace_2 character, then it is discarded and step 1 is\n     re-entered.\n4.\n     If x is a terminating or non-terminating macro character then its\n     associated reader macro function is called with two arguments, the\n     input stream and x.\n     The reader macro function may read characters from the input stream;\n     if it does, it will see those characters following the macro\n     character.  The Lisp reader may be invoked recursively from the\n     reader macro function.\n     The reader macro function must not have any side effects other than\n     on the input stream; because of backtracking and restarting of the\n     read operation, front ends to the Lisp reader (e.g., \"editors\" and\n     \"rubout handlers\") may cause the reader macro function to be called\n     repeatedly during the reading of a single expression in which x only\n     appears once.\n     The reader macro function may return zero values or one value.  If\n     one value is returned, then that value is returned as the result of\n     the read operation; the algorithm is done.  If zero values are\n     returned, then step 1 is re-entered.\n5.\n     If x is a single escape character then the next character, y, is\n     read, or an error of type end-of-file is signaled if at the end of\n     file.  y is treated as if it is a constituent whose only constituent\n     trait is alphabetic_2.  y is used to begin a token, and step 8 is\n     entered.\n6.\n     If x is a multiple escape character then a token (initially\n     containing no characters) is  begun and step 9 is entered.\n7.\n     If x is a constituent character, then it begins a token.  After the\n     token is read in, it will be interpreted either as a Lisp object or\n     as being of invalid syntax.  If the token represents an object, that\n     object is returned as the result of the read operation.  If the token\n     is of invalid syntax, an error is signaled.  If x is a character with\n     case, it might be replaced with the corresponding character of the\n     opposite case, depending on the readtable case of the current\n     readtable, as outlined in *Note Effect of Readtable Case on the Lisp\n     Reader::.  X is used to begin a token, and step 8 is entered.\n8.\n     At this point a token is being accumulated, and an even number of\n     multiple escape characters have been encountered.  If at end of file,\n     step 10 is entered.  Otherwise, a character, y, is read, and one of\n     the following actions is performed according to its syntax type:\n    *\n          If y is a constituent or non-terminating macro character:\n         -\n               If y is a character with case, it might be replaced with\n               the corresponding character of the opposite case, depending\n               on the readtable case of the current readtable, as outlined\n               in *Note Effect of Readtable Case on the Lisp Reader::.\n         -\n               Y is appended to the token being built.\n         -\n               Step 8 is repeated.\n    *\n          If y is a single escape character, then the next character, z,\n          is read, or an error of type end-of-file is signaled if at end\n          of file.  Z is treated as if it is a constituent whose only\n          constituent trait is alphabetic_2.  Z is appended to the token\n          being built, and step 8 is repeated.\n    *\n          If y is a multiple escape character, then step 9 is entered.\n    *\n          If y is an invalid character, an error of type reader-error is\n          signaled.\n    *\n          If y is a terminating macro character, then it terminates the\n          token.  First the character y is unread (see unread-char), and\n          then step 10 is entered.\n    *\n          If y is a whitespace_2 character, then it terminates the token.\n          First the character y is unread if appropriate (see\n          read-preserving-whitespace), and then step 10 is entered.\n9.\n     At this point a token is being accumulated, and an odd number of\n     multiple escape characters have been encountered.  If at end of file,\n     an error of type end-of-file is signaled.  Otherwise, a character, y,\n     is read, and one of the following actions is performed according to\n     its syntax type:\n    *\n          If y is a constituent, macro, or whitespace_2 character, y is\n          treated as a constituent whose only constituent trait is\n          alphabetic_2.  Y is appended to the token being built, and step\n          9 is repeated.\n    *\n          If y is a single escape character, then the next character, z,\n          is read, or an error of type end-of-file is signaled if at end\n          of file.  Z is treated as a constituent whose only constituent\n          trait is alphabetic_2.  Z is appended to the token being built,\n          and step 9 is repeated.\n    *\n          If y is a multiple escape character, then step 8 is entered.\n    *\n          If y is an invalid character, an error of type reader-error is\n          signaled.\n10.\n     An entire token has been accumulated.  The object represented by the\n     token is returned as the result of the read operation, or an error of\n     type reader-error is signaled if the token is not of valid syntax.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Reader Algorithm,  Next: Interpretation of Tokens,  Prev: Character Syntax,  Up: Syntax\n\nReader Algorithm\n================\n\nThis section describes the algorithm used by the Lisp reader to parse\nobjects from an input character stream, including how the Lisp reader\nprocesses macro characters.\n\nWhen dealing with tokens, the reader's basic function is to distinguish\nrepresentations of symbols from those of numbers.  When a token is\naccumulated, it is assumed to represent a number if it satisfies the\nsyntax for numbers listed in Figure~2-9.  If it does not represent a\nnumber, it is then assumed to be a potential number if it satisfies the\nrules governing the syntax for a potential number.  If a valid token is\nneither a representation of a number nor a potential number, it represents\na symbol.\n\nThe algorithm performed by the Lisp reader is as follows:\n\n1.\n     If at end of file, end-of-file processing is performed as specified\n     in read.  Otherwise, one character, x,  is read from the input\n     stream, and dispatched according to the syntax type of x to one of\n     steps 2 to 7.\n\n2.\n     If x is an invalid character, an error of type reader-error is\n     signaled.\n\n3.\n     If x is a whitespace_2 character, then it is discarded and step 1 is\n     re-entered.\n\n4.\n     If x is a terminating or non-terminating macro character then its\n     associated reader macro function is called with two arguments, the\n     input stream and x.\n\n     The reader macro function may read characters from the input stream;\n     if it does, it will see those characters following the macro\n     character.  The Lisp reader may be invoked recursively from the\n     reader macro function.\n\n     The reader macro function must not have any side effects other than\n     on the input stream; because of backtracking and restarting of the\n     read operation, front ends to the Lisp reader (e.g., \"editors\" and\n     \"rubout handlers\") may cause the reader macro function to be called\n     repeatedly during the reading of a single expression in which x only\n     appears once.\n\n     The reader macro function may return zero values or one value.  If\n     one value is returned, then that value is returned as the result of\n     the read operation; the algorithm is done.  If zero values are\n     returned, then step 1 is re-entered.\n\n5.\n     If x is a single escape character then the next character, y, is\n     read, or an error of type end-of-file is signaled if at the end of\n     file.  y is treated as if it is a constituent whose only constituent\n     trait is alphabetic_2.  y is used to begin a token, and step 8 is\n     entered.\n\n6.\n     If x is a multiple escape character then a token (initially\n     containing no characters) is  begun and step 9 is entered.\n\n7.\n     If x is a constituent character, then it begins a token.  After the\n     token is read in, it will be interpreted either as a Lisp object or\n     as being of invalid syntax.  If the token represents an object, that\n     object is returned as the result of the read operation.  If the token\n     is of invalid syntax, an error is signaled.  If x is a character with\n     case, it might be replaced with the corresponding character of the\n     opposite case, depending on the readtable case of the current\n     readtable, as outlined in *Note Effect of Readtable Case on the Lisp\n     Reader::.  X is used to begin a token, and step 8 is entered.\n\n8.\n     At this point a token is being accumulated, and an even number of\n     multiple escape characters have been encountered.  If at end of file,\n     step 10 is entered.  Otherwise, a character, y, is read, and one of\n     the following actions is performed according to its syntax type:\n\n    *\n          If y is a constituent or non-terminating macro character:\n         -\n               If y is a character with case, it might be replaced with\n               the corresponding character of the opposite case, depending\n               on the readtable case of the current readtable, as outlined\n               in *Note Effect of Readtable Case on the Lisp Reader::.\n\n         -\n               Y is appended to the token being built.\n\n         -\n               Step 8 is repeated.\n\n    *\n          If y is a single escape character, then the next character, z,\n          is read, or an error of type end-of-file is signaled if at end\n          of file.  Z is treated as if it is a constituent whose only\n          constituent trait is alphabetic_2.  Z is appended to the token\n          being built, and step 8 is repeated.\n\n    *\n          If y is a multiple escape character, then step 9 is entered.\n\n    *\n          If y is an invalid character, an error of type reader-error is\n          signaled.\n\n    *\n          If y is a terminating macro character, then it terminates the\n          token.  First the character y is unread (see unread-char), and\n          then step 10 is entered.\n\n    *\n          If y is a whitespace_2 character, then it terminates the token.\n          First the character y is unread if appropriate (see\n          read-preserving-whitespace), and then step 10 is entered.\n\n9.\n     At this point a token is being accumulated, and an odd number of\n     multiple escape characters have been encountered.  If at end of file,\n     an error of type end-of-file is signaled.  Otherwise, a character, y,\n     is read, and one of the following actions is performed according to\n     its syntax type:\n\n    *\n          If y is a constituent, macro, or whitespace_2 character, y is\n          treated as a constituent whose only constituent trait is\n          alphabetic_2.  Y is appended to the token being built, and step\n          9 is repeated.\n\n    *\n          If y is a single escape character, then the next character, z,\n          is read, or an error of type end-of-file is signaled if at end\n          of file.  Z is treated as a constituent whose only constituent\n          trait is alphabetic_2.  Z is appended to the token being built,\n          and step 9 is repeated.\n\n    *\n          If y is a multiple escape character, then step 8 is entered.\n\n    *\n          If y is an invalid character, an error of type reader-error is\n          signaled.\n\n10.\n     An entire token has been accumulated.  The object represented by the\n     token is returned as the result of the read operation, or an error of\n     type reader-error is signaled if the token is not of valid syntax.\n\n"
}