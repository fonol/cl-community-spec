{
    "name": "vector-push",
    "prev": "vector-pop",
    "next": "vectorp",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "vector-push, vector-push-extend"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "vector-push",
                    "text": " new-element vector =>  new-index-p\n"
                },
                {
                    "name": "vector-push-extend",
                    "text": " new-element vector &optional extension =>  new-index\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "new-element",
                    "desc": "an object."
                },
                {
                    "name": "vector",
                    "desc": "a vector with a fill pointer."
                },
                {
                    "name": "extension",
                    "desc": "a positive integer.  The default is implementation-dependent."
                },
                {
                    "name": "new-index-p",
                    "desc": "a valid array index for vector, or nil."
                },
                {
                    "name": "new-index",
                    "desc": "a valid array index for vector."
                }
            ]
        },
        {
            "type": "Description",
            "text": "vector-push and vector-push-extend store new-element in vector.\nvector-push attempts to store new-element in the element of vector\ndesignated by the fill pointer, and to increase the fill pointer by one.\nIf the (>= (fill-pointer vector) (array-dimension vector 0)), neither\nvector nor its fill pointer are affected.  Otherwise, the store and\nincrement take place and vector-push returns the former value of the fill\npointer which is one less than the one it leaves in vector.\nvector-push-extend is just like vector-push except that if the fill\npointer gets too large, vector is extended using adjust-array so that it\ncan contain more elements.  Extension is the minimum number of elements to\nbe added to vector if it must be extended.\nvector-push and vector-push-extend return the index of new-element in\nvector.  If (>= (fill-pointer vector) (array-dimension vector 0)),\nvector-push returns nil.\n"
        },
        {
            "type": "Examples",
            "text": "      (vector-push (setq fable (list 'fable))\n                   (setq fa (make-array 8\n                                        :fill-pointer 2\n                                        :initial-element 'first-one))) =>  2\n      (fill-pointer fa) =>  3\n      (eq (aref fa 2) fable) =>  true\n      (vector-push-extend #\\X\n                         (setq aa\n                               (make-array 5\n                                           :element-type 'character\n                                           :adjustable t\n                                           :fill-pointer 3))) =>  3\n      (fill-pointer aa) =>  4\n      (vector-push-extend #\\Y aa 4) =>  4\n      (array-total-size aa) =>  at least 5\n      (vector-push-extend #\\Z aa 4) =>  5\n      (array-total-size aa) =>  9 ;(or more)\n"
        },
        {
            "type": "Affected By",
            "text": "The value of the fill pointer.\nHow vector was created.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "An error of type error is signaled by vector-push-extend if it tries to\nextend vector and vector is not actually adjustable.\nAn error of type error is signaled if vector does not have a fill pointer.\n"
        },
        {
            "type": "See Also",
            "text": "*Note adjustable-array-p:: , *Note fill-pointer:: , *Note vector-pop::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: vector-push,  Next: vectorp,  Prev: vector-pop,  Up: Arrays Dictionary\n\nvector-push, vector-push-extend                                  [Function]\n---------------------------------------------------------------------------\n\n`vector-push'  new-element vector =>  new-index-p\n\n`vector-push-extend'  new-element vector &optional extension =>  new-index\n\nArguments and Values::\n......................\n\nnew-element--an object.\n\nvector--a vector with a fill pointer.\n\nextension--a positive integer.  The default is implementation-dependent.\n\nnew-index-p--a valid array index for vector, or nil.\n\nnew-index--a valid array index for vector.\n\nDescription::\n.............\n\nvector-push and vector-push-extend store new-element in vector.\nvector-push attempts to store new-element in the element of vector\ndesignated by the fill pointer, and to increase the fill pointer by one.\nIf the (>= (fill-pointer vector) (array-dimension vector 0)), neither\nvector nor its fill pointer are affected.  Otherwise, the store and\nincrement take place and vector-push returns the former value of the fill\npointer which is one less than the one it leaves in vector.\n\nvector-push-extend is just like vector-push except that if the fill\npointer gets too large, vector is extended using adjust-array so that it\ncan contain more elements.  Extension is the minimum number of elements to\nbe added to vector if it must be extended.\n\nvector-push and vector-push-extend return the index of new-element in\nvector.  If (>= (fill-pointer vector) (array-dimension vector 0)),\nvector-push returns nil.\n\nExamples::\n..........\n\n      (vector-push (setq fable (list 'fable))\n                   (setq fa (make-array 8\n                                        :fill-pointer 2\n                                        :initial-element 'first-one))) =>  2\n      (fill-pointer fa) =>  3\n      (eq (aref fa 2) fable) =>  true\n      (vector-push-extend #\\X\n                         (setq aa\n                               (make-array 5\n                                           :element-type 'character\n                                           :adjustable t\n                                           :fill-pointer 3))) =>  3\n      (fill-pointer aa) =>  4\n      (vector-push-extend #\\Y aa 4) =>  4\n      (array-total-size aa) =>  at least 5\n      (vector-push-extend #\\Z aa 4) =>  5\n      (array-total-size aa) =>  9 ;(or more)\n\nAffected By::\n.............\n\nThe value of the fill pointer.\n\nHow vector was created.\n\nExceptional Situations::\n........................\n\nAn error of type error is signaled by vector-push-extend if it tries to\nextend vector and vector is not actually adjustable.\n\nAn error of type error is signaled if vector does not have a fill pointer.\n\nSee Also::\n..........\n\n*Note adjustable-array-p:: , *Note fill-pointer:: , *Note vector-pop::\n\n"
}