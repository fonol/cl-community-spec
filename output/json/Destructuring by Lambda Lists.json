{
    "name": "Destructuring by Lambda Lists",
    "prev": "Macro Lambda Lists",
    "next": "Data-directed Destructuring by Lambda Lists",
    "up": "Macro Lambda Lists",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Destructuring by Lambda Lists",
            "text": "Anywhere in a macro lambda list where a parameter name can appear, and\nwhere ordinary lambda list syntax (as described in *Note Ordinary Lambda\nLists::) does not otherwise allow a list, a destructuring lambda list can\nappear in place of the parameter name.  When this is done, then the\nargument that would match the parameter is treated as a (possibly dotted)\nlist, to be used as an argument list for satisfying the parameters in the\nembedded lambda list.  This is known as destructuring.\nDestructuring is the process of decomposing a compound object into its\ncomponent parts, using an abbreviated, declarative syntax, rather than\nwriting it out by hand using the primitive component-accessing functions.\nEach component part is bound to a variable.\nA destructuring operation requires an object to be decomposed, a pattern\nthat specifies what components are to be extracted, and the names of the\nvariables whose values are to be the components.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Destructuring by Lambda Lists,  Next: Data-directed Destructuring by Lambda Lists,  Prev: Macro Lambda Lists,  Up: Macro Lambda Lists\n\nDestructuring by Lambda Lists\n.............................\n\nAnywhere in a macro lambda list where a parameter name can appear, and\nwhere ordinary lambda list syntax (as described in *Note Ordinary Lambda\nLists::) does not otherwise allow a list, a destructuring lambda list can\nappear in place of the parameter name.  When this is done, then the\nargument that would match the parameter is treated as a (possibly dotted)\nlist, to be used as an argument list for satisfying the parameters in the\nembedded lambda list.  This is known as destructuring.\n\nDestructuring is the process of decomposing a compound object into its\ncomponent parts, using an abbreviated, declarative syntax, rather than\nwriting it out by hand using the primitive component-accessing functions.\nEach component part is bound to a variable.\n\nA destructuring operation requires an object to be decomposed, a pattern\nthat specifies what components are to be extracted, and the names of the\nvariables whose values are to be the components.\n\n"
}