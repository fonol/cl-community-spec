{
    "name": "copy-seq",
    "prev": "sequence",
    "next": "elt",
    "up": "Sequences Dictionary",
    "header": {
        "type": "Function",
        "text": "copy-seq"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "copy-seq",
                    "text": " sequence =>  copied-sequence\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "sequence",
                    "desc": "a proper sequence."
                },
                {
                    "name": "copied-sequence",
                    "desc": "a proper sequence."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a copy of sequence.  The elements of the new sequence are the same\nas the corresponding elements of the given sequence.\nIf sequence is a vector, the result is a fresh simple array of rank one\nthat has the same actual array element type as sequence.  If sequence is a\nlist, the result is a fresh list.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq str \"a string\") =>  \"a string\"\n      (equalp str (copy-seq str)) =>  true\n      (eql str (copy-seq str)) =>  false\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n"
        },
        {
            "type": "See Also",
            "text": "*Note copy-list::\n"
        },
        {
            "type": "Notes",
            "text": "From a functional standpoint,\n      (copy-seq x) == (subseq x 0)\nHowever, the programmer intent is typically very different in these two\ncases.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: copy-seq,  Next: elt,  Prev: sequence,  Up: Sequences Dictionary\n\ncopy-seq                                                         [Function]\n---------------------------------------------------------------------------\n\n`copy-seq'  sequence =>  copied-sequence\n\nArguments and Values::\n......................\n\nsequence--a proper sequence.\n\ncopied-sequence--a proper sequence.\n\nDescription::\n.............\n\nCreates a copy of sequence.  The elements of the new sequence are the same\nas the corresponding elements of the given sequence.\n\nIf sequence is a vector, the result is a fresh simple array of rank one\nthat has the same actual array element type as sequence.  If sequence is a\nlist, the result is a fresh list.\n\nExamples::\n..........\n\n      (setq str \"a string\") =>  \"a string\"\n      (equalp str (copy-seq str)) =>  true\n      (eql str (copy-seq str)) =>  false\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n\nSee Also::\n..........\n\n*Note copy-list::\n\nNotes::\n.......\n\nFrom a functional standpoint,\n      (copy-seq x) == (subseq x 0)\n\nHowever, the programmer intent is typically very different in these two\ncases.\n\n"
}