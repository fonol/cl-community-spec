{
    "name": "Sharpsign A",
    "prev": "Sharpsign C",
    "next": "Sharpsign S",
    "up": "Sharpsign",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Sharpsign A",
            "text": "#nA\n#nAobject constructs an n-dimensional array, using object as the value of\nthe :initial-contents argument to make-array.\nFor example, #2A((0 1 5) (foo 2 (hot dog))) represents a 2-by-3 matrix:\n      0       1       5\n      foo     2       (hot dog)\nIn contrast, #1A((0 1 5) (foo 2 (hot dog))) represents a vector of length 2\nwhose elements are lists:\n      (0 1 5) (foo 2 (hot dog))\n#0A((0 1 5) (foo 2 (hot dog))) represents a zero-dimensional array whose\nsole element is a list:\n      ((0 1 5) (foo 2 (hot dog)))\n#0A foo represents a zero-dimensional array whose sole element is the\nsymbol foo.  The notation #1A foo is not valid because foo is not a\nsequence.\nIf some dimension of the array whose representation is being parsed is\nfound to be 0, all dimensions to the right (i.e., the higher numbered\ndimensions) are also considered to be 0.\nFor information on how the Lisp printer prints arrays, see *Note Printing\nStrings::, *Note Printing Bit Vectors::, *Note Printing Other Vectors::,\nor *Note Printing Other Arrays::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sharpsign A,  Next: Sharpsign S,  Prev: Sharpsign C,  Up: Sharpsign\n\nSharpsign A\n...........\n\n#nA\n\n#nAobject constructs an n-dimensional array, using object as the value of\nthe :initial-contents argument to make-array.\n\nFor example, #2A((0 1 5) (foo 2 (hot dog))) represents a 2-by-3 matrix:\n\n      0       1       5\n      foo     2       (hot dog)\n\nIn contrast, #1A((0 1 5) (foo 2 (hot dog))) represents a vector of length 2\nwhose elements are lists:\n\n      (0 1 5) (foo 2 (hot dog))\n\n#0A((0 1 5) (foo 2 (hot dog))) represents a zero-dimensional array whose\nsole element is a list:\n\n      ((0 1 5) (foo 2 (hot dog)))\n\n#0A foo represents a zero-dimensional array whose sole element is the\nsymbol foo.  The notation #1A foo is not valid because foo is not a\nsequence.\n\nIf some dimension of the array whose representation is being parsed is\nfound to be 0, all dimensions to the right (i.e., the higher numbered\ndimensions) are also considered to be 0.\n\nFor information on how the Lisp printer prints arrays, see *Note Printing\nStrings::, *Note Printing Bit Vectors::, *Note Printing Other Vectors::,\nor *Note Printing Other Arrays::.\n\n"
}