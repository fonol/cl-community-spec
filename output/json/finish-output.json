{
    "name": "finish-output",
    "prev": "clear-input",
    "next": "y-or-n-p",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "finish-output, force-output, clear-output"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "finish-output",
                    "text": " &optional output-stream =>  nil\n"
                },
                {
                    "name": "force-output",
                    "text": " &optional output-stream =>  nil\n\n"
                },
                {
                    "name": "clear-output",
                    "text": " &optional output-stream =>  nil\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "output-stream",
                    "desc": "an output stream designator.  The default is standard"
                }
            ]
        },
        {
            "type": "Description",
            "text": "finish-output, force-output, and clear-output exercise control over the\ninternal handling of buffered stream output.\nfinish-output attempts to ensure that any buffered output sent to\noutput-stream has reached its destination, and then returns.\nforce-output initiates the emptying of any internal buffers but does not\nwait for completion or acknowledgment to return.\nclear-output attempts to abort any outstanding output operation in\nprogress in order to allow as little output as possible to continue to the\ndestination.\nIf any of these operations does not make sense for output-stream, then it\ndoes nothing.  The precise actions of these functions are\nimplementation-dependent.\n"
        },
        {
            "type": "Examples",
            "text": "     ;; Implementation A\n      (progn (princ \"am i seen?\") (clear-output))\n     =>  NIL\n     ;; Implementation B\n      (progn (princ \"am i seen?\") (clear-output))\n      |>  am i seen?\n     =>  NIL\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if output-stream is not a stream\ndesignator.\n"
        },
        {
            "type": "See Also",
            "text": "*Note clear-input::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: finish-output,  Next: y-or-n-p,  Prev: clear-input,  Up: Streams Dictionary\n\nfinish-output, force-output, clear-output                        [Function]\n---------------------------------------------------------------------------\n\n`finish-output'  &optional output-stream =>  nil\n\n`force-output'  &optional output-stream =>  nil\n\n`clear-output'  &optional output-stream =>  nil\n\nArguments and Values::\n......................\n\noutput-stream--an output stream designator.  The default is standard\noutput.\n\nDescription::\n.............\n\nfinish-output, force-output, and clear-output exercise control over the\ninternal handling of buffered stream output.\n\nfinish-output attempts to ensure that any buffered output sent to\noutput-stream has reached its destination, and then returns.\n\nforce-output initiates the emptying of any internal buffers but does not\nwait for completion or acknowledgment to return.\n\nclear-output attempts to abort any outstanding output operation in\nprogress in order to allow as little output as possible to continue to the\ndestination.\n\nIf any of these operations does not make sense for output-stream, then it\ndoes nothing.  The precise actions of these functions are\nimplementation-dependent.\n\nExamples::\n..........\n\n     ;; Implementation A\n      (progn (princ \"am i seen?\") (clear-output))\n     =>  NIL\n     \n     ;; Implementation B\n      (progn (princ \"am i seen?\") (clear-output))\n      |>  am i seen?\n     =>  NIL\n\nAffected By::\n.............\n\n*standard-output*\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if output-stream is not a stream\ndesignator.\n\nSee Also::\n..........\n\n*Note clear-input::\n\n"
}