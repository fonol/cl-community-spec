{
    "name": "make-list",
    "prev": "listp",
    "next": "push",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "make-list"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-list",
                    "text": " size &key initial-element =>  list\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "size",
                    "desc": "a non-negative integer."
                },
                {
                    "name": "initial-element",
                    "desc": "an object.  The default is nil."
                },
                {
                    "name": "list",
                    "desc": "a list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a list of length given by size, each of the elements of which is\ninitial-element.\n"
        },
        {
            "type": "Examples",
            "text": "      (make-list 5) =>  (NIL NIL NIL NIL NIL)\n      (make-list 3 :initial-element 'rah) =>  (RAH RAH RAH)\n      (make-list 2 :initial-element '(1 2 3)) =>  ((1 2 3) (1 2 3))\n      (make-list 0) =>  NIL ;i.e., ()\n      (make-list 0 :initial-element 'new-element) =>  NIL\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if size is not a non-negative\ninteger.\n"
        },
        {
            "type": "See Also",
            "text": "*Note cons:: , *Note list::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-list,  Next: push,  Prev: listp,  Up: Conses Dictionary\n\nmake-list                                                        [Function]\n---------------------------------------------------------------------------\n\n`make-list'  size &key initial-element =>  list\n\nArguments and Values::\n......................\n\nsize--a non-negative integer.\n\ninitial-element--an object.  The default is nil.\n\nlist--a list.\n\nDescription::\n.............\n\nReturns a list of length given by size, each of the elements of which is\ninitial-element.\n\nExamples::\n..........\n\n      (make-list 5) =>  (NIL NIL NIL NIL NIL)\n      (make-list 3 :initial-element 'rah) =>  (RAH RAH RAH)\n      (make-list 2 :initial-element '(1 2 3)) =>  ((1 2 3) (1 2 3))\n      (make-list 0) =>  NIL ;i.e., ()\n      (make-list 0 :initial-element 'new-element) =>  NIL\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if size is not a non-negative\ninteger.\n\nSee Also::\n..........\n\n*Note cons:: , *Note list::\n\n"
}