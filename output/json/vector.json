{
    "name": "vector",
    "prev": "svref",
    "next": "vector-pop",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "vector"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "vector",
                    "text": " &rest objects =>  vector\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "vector",
                    "desc": "a vector of type (vector t *)."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a fresh simple general vector whose size corresponds to the number\nof objects.\nThe vector is initialized to contain the objects.\n"
        },
        {
            "type": "Examples",
            "text": "      (arrayp (setq v (vector 1 2 'sirens))) =>  true\n      (vectorp v) =>  true\n      (simple-vector-p v) =>  true\n      (length v) =>  3\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-array::\n"
        },
        {
            "type": "Notes",
            "text": "vector is analogous to list.\n      (vector a_1 a_2 ... a_n)\n       == (make-array (list n) :element-type t\n                               :initial-contents\n                                 (list a_1 a_2 ... a_n))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: vector,  Next: vector-pop,  Prev: svref,  Up: Arrays Dictionary\n\nvector                                                           [Function]\n---------------------------------------------------------------------------\n\n`vector'  &rest objects =>  vector\n\nArguments and Values::\n......................\n\nobject--an object.\n\nvector--a vector of type (vector t *).\n\nDescription::\n.............\n\nCreates a fresh simple general vector whose size corresponds to the number\nof objects.\n\nThe vector is initialized to contain the objects.\n\nExamples::\n..........\n\n      (arrayp (setq v (vector 1 2 'sirens))) =>  true\n      (vectorp v) =>  true\n      (simple-vector-p v) =>  true\n      (length v) =>  3\n\nSee Also::\n..........\n\n*Note make-array::\n\nNotes::\n.......\n\nvector is analogous to list.\n\n      (vector a_1 a_2 ... a_n)\n       == (make-array (list n) :element-type t\n                               :initial-contents\n                                 (list a_1 a_2 ... a_n))\n\n"
}