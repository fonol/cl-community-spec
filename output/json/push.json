{
    "name": "push",
    "prev": "make-list",
    "next": "pop",
    "up": "Conses Dictionary",
    "header": {
        "type": "Macro",
        "text": "push"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "push",
                    "text": " item place =>  new-place-value\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "item",
                    "desc": "an object."
                },
                {
                    "name": "place",
                    "desc": "a place, the value of which may be any object."
                },
                {
                    "name": "new-place-value",
                    "desc": "a list (the new value of place)."
                }
            ]
        },
        {
            "type": "Description",
            "text": "push prepends item to the list that is stored in place, stores the\nresulting list in place, and returns the list.\nFor information about the evaluation of subforms of place, see *Note\nEvaluation of Subforms to Places::.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq llst '(nil)) =>  (NIL)\n      (push 1 (car llst)) =>  (1)\n      llst =>  ((1))\n      (push 1 (car llst)) =>  (1 1)\n      llst =>  ((1 1))\n      (setq x '(a (b c) d)) =>  (A (B C) D)\n      (push 5 (cadr x)) =>  (5 B C)\n      x =>  (A (5 B C) D)\n"
        },
        {
            "type": "Side Effects",
            "text": "The contents of place are modified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note pop:: , *Note pushnew:: , *Note Generalized Reference::\n"
        },
        {
            "type": "Notes",
            "text": "The effect of (push item place) is equivalent to\n      (setf place (cons item place))\nexcept that the subforms of place are evaluated only once, and item is\nevaluated before place.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: push,  Next: pop,  Prev: make-list,  Up: Conses Dictionary\n\npush                                                                [Macro]\n---------------------------------------------------------------------------\n\n`push'  item place =>  new-place-value\n\nArguments and Values::\n......................\n\nitem--an object.\n\nplace--a place, the value of which may be any object.\n\nnew-place-value--a list (the new value of place).\n\nDescription::\n.............\n\npush prepends item to the list that is stored in place, stores the\nresulting list in place, and returns the list.\n\nFor information about the evaluation of subforms of place, see *Note\nEvaluation of Subforms to Places::.\n\nExamples::\n..........\n\n      (setq llst '(nil)) =>  (NIL)\n      (push 1 (car llst)) =>  (1)\n      llst =>  ((1))\n      (push 1 (car llst)) =>  (1 1)\n      llst =>  ((1 1))\n      (setq x '(a (b c) d)) =>  (A (B C) D)\n      (push 5 (cadr x)) =>  (5 B C)\n      x =>  (A (5 B C) D)\n\nSide Effects::\n..............\n\nThe contents of place are modified.\n\nSee Also::\n..........\n\n*Note pop:: , *Note pushnew:: , *Note Generalized Reference::\n\nNotes::\n.......\n\nThe effect of (push item place) is equivalent to\n\n      (setf place (cons item place))\n\nexcept that the subforms of place are evaluated only once, and item is\nevaluated before place.\n\n"
}