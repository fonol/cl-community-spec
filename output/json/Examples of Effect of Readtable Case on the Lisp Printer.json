{
    "name": "Examples of Effect of Readtable Case on the Lisp Printer",
    "prev": "Effect of Readtable Case on the Lisp Printer",
    "next": "Printing Strings",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Effect of Readtable Case on the Lisp Printer",
            "text": "      (defun test-readtable-case-printing ()\n        (let ((*readtable* (copy-readtable nil))\n              (*print-case* *print-case*))\n          (format t \"READTABLE-CASE *PRINT-CASE*  Symbol-name  Output~\n                   ~\n                   ~\n          (dolist (readtable-case '(:upcase :downcase :preserve :invert))\n            (setf (readtable-case *readtable*) readtable-case)\n            (dolist (print-case '(:upcase :downcase :capitalize))\n              (dolist (symbol '(|ZEBRA| |Zebra| |zebra|))\n                (setq *print-case* print-case)\n                (format t \"~&:~A~15T:~A~29T~A~42T~A\"\n                        (string-upcase readtable-case)\n                        (string-upcase print-case)\n                        (symbol-name symbol)\n                        (prin1-to-string symbol)))))))\nThe output from (test-readtable-case-printing) should be as follows:\n         READTABLE-CASE *PRINT-CASE*  Symbol-name  Output\n         --------------------------------------------------\n         :UPCASE        :UPCASE       ZEBRA        ZEBRA\n         :UPCASE        :UPCASE       Zebra        |Zebra|\n         :UPCASE        :UPCASE       zebra        |zebra|\n         :UPCASE        :DOWNCASE     ZEBRA        zebra\n         :UPCASE        :DOWNCASE     Zebra        |Zebra|\n         :UPCASE        :DOWNCASE     zebra        |zebra|\n         :UPCASE        :CAPITALIZE   ZEBRA        Zebra\n         :UPCASE        :CAPITALIZE   Zebra        |Zebra|\n         :UPCASE        :CAPITALIZE   zebra        |zebra|\n         :DOWNCASE      :UPCASE       ZEBRA        |ZEBRA|\n         :DOWNCASE      :UPCASE       Zebra        |Zebra|\n         :DOWNCASE      :UPCASE       zebra        ZEBRA\n         :DOWNCASE      :DOWNCASE     ZEBRA        |ZEBRA|\n         :DOWNCASE      :DOWNCASE     Zebra        |Zebra|\n         :DOWNCASE      :DOWNCASE     zebra        zebra\n         :DOWNCASE      :CAPITALIZE   ZEBRA        |ZEBRA|\n         :DOWNCASE      :CAPITALIZE   Zebra        |Zebra|\n         :DOWNCASE      :CAPITALIZE   zebra        Zebra\n         :PRESERVE      :UPCASE       ZEBRA        ZEBRA\n         :PRESERVE      :UPCASE       Zebra        Zebra\n         :PRESERVE      :UPCASE       zebra        zebra\n         :PRESERVE      :DOWNCASE     ZEBRA        ZEBRA\n         :PRESERVE      :DOWNCASE     Zebra        Zebra\n         :PRESERVE      :DOWNCASE     zebra        zebra\n         :PRESERVE      :CAPITALIZE   ZEBRA        ZEBRA\n         :PRESERVE      :CAPITALIZE   Zebra        Zebra\n         :PRESERVE      :CAPITALIZE   zebra        zebra\n         :INVERT        :UPCASE       ZEBRA        zebra\n         :INVERT        :UPCASE       Zebra        Zebra\n         :INVERT        :UPCASE       zebra        ZEBRA\n         :INVERT        :DOWNCASE     ZEBRA        zebra\n         :INVERT        :DOWNCASE     Zebra        Zebra\n         :INVERT        :DOWNCASE     zebra        ZEBRA\n         :INVERT        :CAPITALIZE   ZEBRA        zebra\n         :INVERT        :CAPITALIZE   Zebra        Zebra\n         :INVERT        :CAPITALIZE   zebra        ZEBRA\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Effect of Readtable Case on the Lisp Printer,  Next: Printing Strings,  Prev: Effect of Readtable Case on the Lisp Printer,  Up: Default Print-Object Methods\n\nExamples of Effect of Readtable Case on the Lisp Printer\n........................................................\n\n      (defun test-readtable-case-printing ()\n        (let ((*readtable* (copy-readtable nil))\n              (*print-case* *print-case*))\n          (format t \"READTABLE-CASE *PRINT-CASE*  Symbol-name  Output~\n                   ~\n                   ~\n          (dolist (readtable-case '(:upcase :downcase :preserve :invert))\n            (setf (readtable-case *readtable*) readtable-case)\n            (dolist (print-case '(:upcase :downcase :capitalize))\n              (dolist (symbol '(|ZEBRA| |Zebra| |zebra|))\n                (setq *print-case* print-case)\n                (format t \"~&:~A~15T:~A~29T~A~42T~A\"\n                        (string-upcase readtable-case)\n                        (string-upcase print-case)\n                        (symbol-name symbol)\n                        (prin1-to-string symbol)))))))\n\nThe output from (test-readtable-case-printing) should be as follows:\n\n         READTABLE-CASE *PRINT-CASE*  Symbol-name  Output\n         --------------------------------------------------\n         :UPCASE        :UPCASE       ZEBRA        ZEBRA\n         :UPCASE        :UPCASE       Zebra        |Zebra|\n         :UPCASE        :UPCASE       zebra        |zebra|\n         :UPCASE        :DOWNCASE     ZEBRA        zebra\n         :UPCASE        :DOWNCASE     Zebra        |Zebra|\n         :UPCASE        :DOWNCASE     zebra        |zebra|\n         :UPCASE        :CAPITALIZE   ZEBRA        Zebra\n         :UPCASE        :CAPITALIZE   Zebra        |Zebra|\n         :UPCASE        :CAPITALIZE   zebra        |zebra|\n         :DOWNCASE      :UPCASE       ZEBRA        |ZEBRA|\n         :DOWNCASE      :UPCASE       Zebra        |Zebra|\n         :DOWNCASE      :UPCASE       zebra        ZEBRA\n         :DOWNCASE      :DOWNCASE     ZEBRA        |ZEBRA|\n         :DOWNCASE      :DOWNCASE     Zebra        |Zebra|\n         :DOWNCASE      :DOWNCASE     zebra        zebra\n         :DOWNCASE      :CAPITALIZE   ZEBRA        |ZEBRA|\n         :DOWNCASE      :CAPITALIZE   Zebra        |Zebra|\n         :DOWNCASE      :CAPITALIZE   zebra        Zebra\n         :PRESERVE      :UPCASE       ZEBRA        ZEBRA\n         :PRESERVE      :UPCASE       Zebra        Zebra\n         :PRESERVE      :UPCASE       zebra        zebra\n         :PRESERVE      :DOWNCASE     ZEBRA        ZEBRA\n         :PRESERVE      :DOWNCASE     Zebra        Zebra\n         :PRESERVE      :DOWNCASE     zebra        zebra\n         :PRESERVE      :CAPITALIZE   ZEBRA        ZEBRA\n         :PRESERVE      :CAPITALIZE   Zebra        Zebra\n         :PRESERVE      :CAPITALIZE   zebra        zebra\n         :INVERT        :UPCASE       ZEBRA        zebra\n         :INVERT        :UPCASE       Zebra        Zebra\n         :INVERT        :UPCASE       zebra        ZEBRA\n         :INVERT        :DOWNCASE     ZEBRA        zebra\n         :INVERT        :DOWNCASE     Zebra        Zebra\n         :INVERT        :DOWNCASE     zebra        ZEBRA\n         :INVERT        :CAPITALIZE   ZEBRA        zebra\n         :INVERT        :CAPITALIZE   Zebra        Zebra\n         :INVERT        :CAPITALIZE   zebra        ZEBRA\n\n"
}