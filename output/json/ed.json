{
    "name": "ed",
    "prev": "room",
    "next": "inspect",
    "up": "Environment Dictionary",
    "header": {
        "type": "Function",
        "text": "ed"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "ed",
                    "text": " &optional x =>  implementation-dependent\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": []
        },
        {
            "type": "Description",
            "text": "ed invokes the editor if the implementation provides a resident editor.\nIf x is nil, the editor is entered.  If the editor had been previously\nentered, its prior state is resumed, if possible.\nIf x is a pathname or string, it is taken as the pathname designator for a\nfile to be edited.\nIf x is a function name, the text of its definition is edited.  The means\nby which the function text is obtained is implementation-defined.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if the implementation does not provide a\nresident editor.\nMight signal type-error if its argument is supplied but is not a symbol, a\npathname, or nil.\nIf a failure occurs when performing some operation on the file system\nwhile attempting to edit a file, an error of type file-error is signaled.\nAn error of type file-error might be signaled if x is a designator for a\nwild pathname.\nImplementation-dependent additional conditions might be signaled as well.\n"
        },
        {
            "type": "See Also",
            "text": "pathname,\nlogical-pathname,\n*Note compile-file:: , *Note load:: ,\n*Note Pathnames as Filenames::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ed,  Next: inspect,  Prev: room,  Up: Environment Dictionary\n\ned                                                               [Function]\n---------------------------------------------------------------------------\n\n`ed'  &optional x =>  implementation-dependent\n\nArguments and Values::\n......................\n\nx--nil, a pathname, a string, or a function name.\n\nThe default is nil.\n\nDescription::\n.............\n\ned invokes the editor if the implementation provides a resident editor.\n\nIf x is nil, the editor is entered.  If the editor had been previously\nentered, its prior state is resumed, if possible.\n\nIf x is a pathname or string, it is taken as the pathname designator for a\nfile to be edited.\n\nIf x is a function name, the text of its definition is edited.  The means\nby which the function text is obtained is implementation-defined.\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if the implementation does not provide a\nresident editor.\n\nMight signal type-error if its argument is supplied but is not a symbol, a\npathname, or nil.\n\nIf a failure occurs when performing some operation on the file system\nwhile attempting to edit a file, an error of type file-error is signaled.\n\nAn error of type file-error might be signaled if x is a designator for a\nwild pathname.\n\nImplementation-dependent additional conditions might be signaled as well.\n\nSee Also::\n..........\n\npathname,\n\nlogical-pathname,\n\n*Note compile-file:: , *Note load:: ,\n\n*Note Pathnames as Filenames::\n\n"
}