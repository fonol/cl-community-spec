{
    "name": "count",
    "prev": "reduce",
    "next": "length",
    "up": "Sequences Dictionary",
    "header": {
        "type": "Function",
        "text": "count, count-if, count-if-not"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "count",
                    "text": " item sequence &key from-end start end key test test-not =>  n\n"
                },
                {
                    "name": "count-if",
                    "text": " predicate sequence &key from-end start end key =>  n\n\n"
                },
                {
                    "name": "count-if-not",
                    "text": " predicate sequence &key from-end start end key =>  n\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "item",
                    "desc": "an object."
                },
                {
                    "name": "sequence",
                    "desc": "a proper sequence."
                },
                {
                    "name": "predicate",
                    "desc": "a designator for a function of one argument that returns a"
                },
                {
                    "name": "predicate",
                    "desc": "a designator for a function of one argument that returns ageneralized boolean.\n"
                },
                {
                    "name": "from-end",
                    "desc": "a generalized boolean.  The default is false."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "start, end",
                    "desc": "bounding index designators of sequence.  The defaults for"
                },
                {
                    "name": "start, end",
                    "desc": "bounding index designators of sequence.  The defaults forstart and end are 0 and nil, respectively.\n"
                },
                {
                    "name": "key",
                    "desc": "a designator for a function of one argument, or nil."
                },
                {
                    "name": "n",
                    "desc": "a non-negative integer less than or equal to the length of sequence."
                }
            ]
        },
        {
            "type": "Description",
            "text": "count, count-if, and count-if-not count and return the number of elements\nin the sequence bounded by start and end that satisfy the test.\nThe from-end has no direct effect on the result.  However, if from-end is\ntrue, the elements of sequence will be supplied as arguments to the test,\ntest-not, and key in reverse order, which may change the side-effects, if\nany, of those functions.\n"
        },
        {
            "type": "Examples",
            "text": "      (count #\\a \"how many A's are there in here?\") =>  2\n      (count-if-not #'oddp '((1) (2) (3) (4)) :key #'car) =>  2\n      (count-if #'upper-case-p \"The Crying of Lot 49\" :start 4) =>  2\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Rules about Test Functions::,\n*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not argument is deprecated.\nThe function count-if-not is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: count,  Next: length,  Prev: reduce,  Up: Sequences Dictionary\n\ncount, count-if, count-if-not                                    [Function]\n---------------------------------------------------------------------------\n\n`count'  item sequence &key from-end start end key test test-not =>  n\n\n`count-if'  predicate sequence &key from-end start end key =>  n\n\n`count-if-not'  predicate sequence &key from-end start end key =>  n\n\nArguments and Values::\n......................\n\nitem--an object.\n\nsequence--a proper sequence.\n\npredicate--a designator for a function of one argument that returns a\ngeneralized boolean.\n\nfrom-end--a generalized boolean.  The default is false.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\nstart, end--bounding index designators of sequence.  The defaults for\nstart and end are 0 and nil, respectively.\n\nkey--a designator for a function of one argument, or nil.\n\nn--a non-negative integer less than or equal to the length of sequence.\n\nDescription::\n.............\n\ncount, count-if, and count-if-not count and return the number of elements\nin the sequence bounded by start and end that satisfy the test.\n\nThe from-end has no direct effect on the result.  However, if from-end is\ntrue, the elements of sequence will be supplied as arguments to the test,\ntest-not, and key in reverse order, which may change the side-effects, if\nany, of those functions.\n\nExamples::\n..........\n\n      (count #\\a \"how many A's are there in here?\") =>  2\n      (count-if-not #'oddp '((1) (2) (3) (4)) :key #'car) =>  2\n      (count-if #'upper-case-p \"The Crying of Lot 49\" :start 4) =>  2\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n\nSee Also::\n..........\n\n*Note Rules about Test Functions::,\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not argument is deprecated.\n\nThe function count-if-not is deprecated.\n\n"
}