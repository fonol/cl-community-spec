{
    "name": "Sharpsign Backslash",
    "prev": "Sharpsign",
    "next": "Sharpsign Single-Quote",
    "up": "Sharpsign",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Sharpsign Backslash",
            "text": "Syntax: #\\<<x>>\nWhen the token x is a single character long, this parses as the literal\ncharacter char.  Uppercase and lowercase letters are distinguished after\n#\\; #\\A and #\\a denote different character objects.  Any single character\nworks after #\\, even those that are normally special to read, such as\nleft-parenthesis and right-parenthesis.\nIn the single character case, the x must be followed by a non-constituent\ncharacter.  After #\\ is read, the reader backs up over the slash and then\nreads a token, treating the initial slash as a single escape character\n(whether it really is or not in the current readtable).\nWhen the token x is more than one character long, the x must have the\nsyntax of a symbol with no embedded package markers.  In this case, the\nsharpsign backslash notation parses as the character whose name is\n(string-upcase x); see *Note Character Names::.\nFor information about how the Lisp printer prints character objects, see\n*Note Printing Characters::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sharpsign Backslash,  Next: Sharpsign Single-Quote,  Prev: Sharpsign,  Up: Sharpsign\n\nSharpsign Backslash\n...................\n\nSyntax: #\\<<x>>\n\nWhen the token x is a single character long, this parses as the literal\ncharacter char.  Uppercase and lowercase letters are distinguished after\n#\\; #\\A and #\\a denote different character objects.  Any single character\nworks after #\\, even those that are normally special to read, such as\nleft-parenthesis and right-parenthesis.\n\nIn the single character case, the x must be followed by a non-constituent\ncharacter.  After #\\ is read, the reader backs up over the slash and then\nreads a token, treating the initial slash as a single escape character\n(whether it really is or not in the current readtable).\n\nWhen the token x is more than one character long, the x must have the\nsyntax of a symbol with no embedded package markers.  In this case, the\nsharpsign backslash notation parses as the character whose name is\n(string-upcase x); see *Note Character Names::.\n\nFor information about how the Lisp printer prints character objects, see\n*Note Printing Characters::.\n\n"
}