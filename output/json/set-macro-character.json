{
    "name": "set-macro-character",
    "prev": "set-dispatch-macro-character",
    "next": "set-syntax-from-char",
    "up": "Reader Dictionary",
    "header": {
        "type": "Function",
        "text": "set-macro-character, get-macro-character"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "get-macro-character",
                    "text": " char &optional readtable =>  function,non-terminating-p\n\n"
                },
                {
                    "name": "set-macro-character",
                    "text": " char new-function &optional non-terminating-p\nreadtable =>  t\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "char",
                    "desc": "a character."
                },
                {
                    "name": "non-terminating-p",
                    "desc": "a generalized boolean.  The default is false."
                },
                {
                    "name": "readtable",
                    "desc": "a readtable designator.The default is the current readtable.\n"
                },
                {
                    "name": "function",
                    "desc": "nil, or a designator for a function of two arguments."
                },
                {
                    "name": "new-function",
                    "desc": "a function designator."
                }
            ]
        },
        {
            "type": "Description",
            "text": "get-macro-character returns as its primary value, function, the reader\nmacro function associated with char in readtable (if any), or else nil if\nchar is not a macro character in readtable.  The secondary value,\nnon-terminating-p, is true if char is a non-terminating macro character;\notherwise, it is false.\nset-macro-character causes char to be a macro character associated with\nthe reader macro function new-function (or the designator for\nnew-function) in readtable.  If non-terminating-p is true, char becomes a\nnon-terminating macro character; otherwise it becomes a     terminating\nmacro character.\n"
        },
        {
            "type": "Examples",
            "text": "      (get-macro-character #\\{) =>  NIL, false\n      (not (get-macro-character #\\;)) =>  false\nThe following is a possible definition for the single-quote reader macro\nin standard syntax:\n      (defun single-quote-reader (stream char)\n        (declare (ignore char))\n        (list 'quote (read stream t nil t))) =>  SINGLE-QUOTE-READER\n      (set-macro-character #\\' #'single-quote-reader) =>  T\nHere single-quote-reader reads an object following the single-quote and\nreturns a list of quote and that object.  The char argument is ignored.\nThe following is a possible definition for the semicolon reader macro in\nstandard syntax:\n      (defun semicolon-reader (stream char)\n        (declare (ignore char))\n        ;; First swallow the rest of the current input line.\n        ;; End-of-file is acceptable for terminating the comment.\n        (do () ((char= (read-char stream nil #\\Newline t) #\\Newline)))\n        ;; Return zero values.\n        (values)) =>  SEMICOLON-READER\n      (set-macro-character #\\; #'semicolon-reader) =>  T\n"
        },
        {
            "type": "Side Effects",
            "text": "The readtable is modified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note readtable::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: set-macro-character,  Next: set-syntax-from-char,  Prev: set-dispatch-macro-character,  Up: Reader Dictionary\n\nset-macro-character, get-macro-character                         [Function]\n---------------------------------------------------------------------------\n\n`get-macro-character'  char &optional readtable =>  function,\nnon-terminating-p\n\n`set-macro-character'  char new-function &optional non-terminating-p\nreadtable =>  t\n\nArguments and Values::\n......................\n\nchar--a character.\n\nnon-terminating-p--a generalized boolean.  The default is false.\n\nreadtable--a readtable designator.\n\nThe default is the current readtable.\n\nfunction--nil, or a designator for a function of two arguments.\n\nnew-function--a function designator.\n\nDescription::\n.............\n\nget-macro-character returns as its primary value, function, the reader\nmacro function associated with char in readtable (if any), or else nil if\nchar is not a macro character in readtable.  The secondary value,\nnon-terminating-p, is true if char is a non-terminating macro character;\notherwise, it is false.\n\nset-macro-character causes char to be a macro character associated with\nthe reader macro function new-function (or the designator for\nnew-function) in readtable.  If non-terminating-p is true, char becomes a\nnon-terminating macro character; otherwise it becomes a     terminating\nmacro character.\n\nExamples::\n..........\n\n      (get-macro-character #\\{) =>  NIL, false\n      (not (get-macro-character #\\;)) =>  false\n\nThe following is a possible definition for the single-quote reader macro\nin standard syntax:\n\n      (defun single-quote-reader (stream char)\n        (declare (ignore char))\n        (list 'quote (read stream t nil t))) =>  SINGLE-QUOTE-READER\n      (set-macro-character #\\' #'single-quote-reader) =>  T\n\nHere single-quote-reader reads an object following the single-quote and\nreturns a list of quote and that object.  The char argument is ignored.\n\nThe following is a possible definition for the semicolon reader macro in\nstandard syntax:\n\n      (defun semicolon-reader (stream char)\n        (declare (ignore char))\n        ;; First swallow the rest of the current input line.\n        ;; End-of-file is acceptable for terminating the comment.\n        (do () ((char= (read-char stream nil #\\Newline t) #\\Newline)))\n        ;; Return zero values.\n        (values)) =>  SEMICOLON-READER\n      (set-macro-character #\\; #'semicolon-reader) =>  T\n\nSide Effects::\n..............\n\nThe readtable is modified.\n\nSee Also::\n..........\n\n*Note readtable::\n\n"
}