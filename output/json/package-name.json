{
    "name": "package-name",
    "prev": "intern",
    "next": "package-nicknames",
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "package-name"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "package-name",
                    "text": " package =>  name\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "package",
                    "desc": "a package designator."
                }
            ]
        },
        {
            "type": "Description",
            "text": "package-name returns the string that names package,\nor nil if the package designator is a package object that has no name (see\nthe function delete-package).\n"
        },
        {
            "type": "Examples",
            "text": "      (in-package \"COMMON-LISP-USER\") =>  #<PACKAGE \"COMMON-LISP-USER\">\n      (package-name *package*) =>  \"COMMON-LISP-USER\"\n      (package-name (symbol-package :test)) =>  \"KEYWORD\"\n      (package-name (find-package 'common-lisp)) =>  \"COMMON-LISP\"\n      (defvar *foo-package* (make-package \"FOO\"))\n      (rename-package \"FOO\" \"FOO0\")\n      (package-name *foo-package*) =>  \"FOO0\"\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if package is not a package\ndesignator.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: package-name,  Next: package-nicknames,  Prev: intern,  Up: Packages Dictionary\n\npackage-name                                                     [Function]\n---------------------------------------------------------------------------\n\n`package-name'  package =>  name\n\nArguments and Values::\n......................\n\npackage--a package designator.\n\nname--a string\n\nor nil.\n\nDescription::\n.............\n\npackage-name returns the string that names package,\n\nor nil if the package designator is a package object that has no name (see\nthe function delete-package).\n\nExamples::\n..........\n\n      (in-package \"COMMON-LISP-USER\") =>  #<PACKAGE \"COMMON-LISP-USER\">\n      (package-name *package*) =>  \"COMMON-LISP-USER\"\n      (package-name (symbol-package :test)) =>  \"KEYWORD\"\n      (package-name (find-package 'common-lisp)) =>  \"COMMON-LISP\"\n\n      (defvar *foo-package* (make-package \"FOO\"))\n      (rename-package \"FOO\" \"FOO0\")\n      (package-name *foo-package*) =>  \"FOO0\"\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if package is not a package\ndesignator.\n\n"
}