{
    "name": "Rules for Initialization Arguments",
    "prev": "Defaulting of Initialization Arguments",
    "next": "Shared-Initialize",
    "up": "Object Creation and Initialization",
    "header": {
        "type": null,
        "text": "Rules for Initialization Arguments"
    },
    "sections": [
        {
            "type": "",
            "text": "The :initarg slot option may be specified more than once for a given slot.\nThe following rules specify when initialization arguments may be multiply\ndefined:\n*\n     A given initialization argument can be used to initialize more than\n     one slot if the same initialization argument name appears in more\n     than one :initarg slot option.\n*\n     A given initialization argument name can appear in the lambda list of\n     more than one initialization method.\n*\n     A given initialization argument name can appear both in an :initarg\n     slot option and in the lambda list of an initialization method.\n[Reviewer Note by The next three paragraphs could be replaced by \"If two\nor more initialization arguments that initialize the same slot appear in\nthe defaulted initialization argument list, the leftmost of these supplies\nthe value, even if they have different names.\"  And the rest would follow\nfrom the rules above.]\nIf two or more initialization arguments that initialize the same slot are\ngiven in the arguments to make-instance, the leftmost of these\ninitialization arguments in the initialization argument list supplies the\nvalue, even if the initialization arguments have different names.\nIf two or more different initialization arguments that initialize the same\nslot have default values and none is given explicitly in the arguments to\nmake-instance, the initialization argument that appears in a\n:default-initargs class option in the most specific of the classes\nsupplies the value. If a single :default-initargs class option specifies\ntwo or more initialization arguments that initialize the same slot and\nnone is given explicitly in the arguments to make-instance, the leftmost in\nthe :default-initargs class option supplies the value, and the values of\nthe remaining default value forms are ignored.\nInitialization arguments given explicitly in the arguments to\nmake-instance appear to the left of defaulted initialization arguments.\nSuppose that the classes C_1 and C_2 supply the values of defaulted\ninitialization arguments for different slots, and suppose that C_1 is more\nspecific than C_2; then the defaulted initialization argument whose value\nis supplied by C_1 is to the left of the defaulted initialization argument\nwhose value is supplied by C_2 in the defaulted initialization argument\nlist.  If a single :default-initargs class option supplies the values of\ninitialization arguments for two different slots, the initialization\nargument whose value is specified farther to the left in the\n:default-initargs class option appears farther to the left in the\ndefaulted initialization argument list.\n[Reviewer Note by Barmar: End of claim made three paragraphs back.]\nIf a slot has both an :initform form and an :initarg slot option, and the\ninitialization argument is defaulted using :default-initargs or is\nsupplied to make-instance, the captured :initform form is neither used nor\nevaluated.\nThe following is an example of the above rules:\n      (defclass q () ((x :initarg a)))\n      (defclass r (q) ((x :initarg b))\n        (:default-initargs a 1 b 2))\n                                 Defaulted                                     \n      Form                         Initialization Argument List Contents of Slot X \n      _____________________________________________________________________________\n      (make-instance 'r)           (a 1 b 2)                    1                  \n      (make-instance 'r 'a 3)      (a 3 b 2)                    3                  \n      (make-instance 'r 'b 4)      (b 4 a 1)                    4                  \n      (make-instance 'r 'a 1 'a 2) (a 1 a 2 b 2)                1                  \n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Rules for Initialization Arguments,  Next: Shared-Initialize,  Prev: Defaulting of Initialization Arguments,  Up: Object Creation and Initialization\n\nRules for Initialization Arguments\n----------------------------------\n\nThe :initarg slot option may be specified more than once for a given slot.\n\nThe following rules specify when initialization arguments may be multiply\ndefined:\n\n*\n     A given initialization argument can be used to initialize more than\n     one slot if the same initialization argument name appears in more\n     than one :initarg slot option.\n\n*\n     A given initialization argument name can appear in the lambda list of\n     more than one initialization method.\n\n*\n     A given initialization argument name can appear both in an :initarg\n     slot option and in the lambda list of an initialization method.\n\n[Reviewer Note by The next three paragraphs could be replaced by \"If two\nor more initialization arguments that initialize the same slot appear in\nthe defaulted initialization argument list, the leftmost of these supplies\nthe value, even if they have different names.\"  And the rest would follow\nfrom the rules above.]\n\nIf two or more initialization arguments that initialize the same slot are\ngiven in the arguments to make-instance, the leftmost of these\ninitialization arguments in the initialization argument list supplies the\nvalue, even if the initialization arguments have different names.\n\nIf two or more different initialization arguments that initialize the same\nslot have default values and none is given explicitly in the arguments to\nmake-instance, the initialization argument that appears in a\n:default-initargs class option in the most specific of the classes\nsupplies the value. If a single :default-initargs class option specifies\ntwo or more initialization arguments that initialize the same slot and\nnone is given explicitly in the arguments to make-instance, the leftmost in\nthe :default-initargs class option supplies the value, and the values of\nthe remaining default value forms are ignored.\n\nInitialization arguments given explicitly in the arguments to\nmake-instance appear to the left of defaulted initialization arguments.\nSuppose that the classes C_1 and C_2 supply the values of defaulted\ninitialization arguments for different slots, and suppose that C_1 is more\nspecific than C_2; then the defaulted initialization argument whose value\nis supplied by C_1 is to the left of the defaulted initialization argument\nwhose value is supplied by C_2 in the defaulted initialization argument\nlist.  If a single :default-initargs class option supplies the values of\ninitialization arguments for two different slots, the initialization\nargument whose value is specified farther to the left in the\n:default-initargs class option appears farther to the left in the\ndefaulted initialization argument list.\n\n[Reviewer Note by Barmar: End of claim made three paragraphs back.]\n\nIf a slot has both an :initform form and an :initarg slot option, and the\ninitialization argument is defaulted using :default-initargs or is\nsupplied to make-instance, the captured :initform form is neither used nor\nevaluated.\n\nThe following is an example of the above rules:\n\n      (defclass q () ((x :initarg a)))\n      (defclass r (q) ((x :initarg b))\n        (:default-initargs a 1 b 2))\n\n                                     \n\n                                 Defaulted                                     \n      Form                         Initialization Argument List Contents of Slot X \n      _____________________________________________________________________________\n      (make-instance 'r)           (a 1 b 2)                    1                  \n      (make-instance 'r 'a 3)      (a 3 b 2)                    3                  \n      (make-instance 'r 'b 4)      (b 4 a 1)                    4                  \n      (make-instance 'r 'a 1 'a 2) (a 1 a 2 b 2)                1                  \n\n\n"
}