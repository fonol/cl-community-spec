{
    "name": "char-name",
    "prev": "char-code-limit",
    "next": "name-char",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "char-name"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "char-name",
                    "text": " character =>  name\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character",
                    "desc": "a character."
                },
                {
                    "name": "name",
                    "desc": "a string or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a string that is the name of the character, or nil if the\ncharacter has no name.\nAll non-graphic characters are required to have names unless they have\nsome implementation-defined attribute which is not null.  Whether or not\nother characters have names is implementation-dependent.\nThe standard characters <Newline> and <Space> have the respective names\n\"Newline\" and \"Space\".  The semi-standard characters <Tab>, <Page>,\n<Rubout>, <Linefeed>, <Return>, and <Backspace> (if they are supported by\nthe implementation) have the respective names \"Tab\",  \"Page\",  \"Rubout\",\n\"Linefeed\",  \"Return\", and \"Backspace\" (in the indicated case, even though\nname lookup by \"#\\\" and by the function name-char is not case sensitive).\n"
        },
        {
            "type": "Examples",
            "text": "      (char-name #\\ ) =>  \"Space\"\n      (char-name #\\Space) =>  \"Space\"\n      (char-name #\\Page) =>  \"Page\"\n      (char-name #\\a)\n     =>  NIL\n     OR=> \"LOWERCASE-a\"\n     OR=> \"Small-A\"\n     OR=> \"LA01\"\n      (char-name #\\A)\n     =>  NIL\n     OR=> \"UPPERCASE-A\"\n     OR=> \"Capital-A\"\n     OR=> \"LA02\"\n      ;; Even though its CHAR-NAME can vary, #\\A prints as #\\A\n      (prin1-to-string (read-from-string (format nil \"#\\\\~A\" (or (char-name #\\A) \"A\"))))\n     =>  \"#\\\\A\"\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if character is not a character.\n"
        },
        {
            "type": "See Also",
            "text": "*Note name-char:: , *Note Printing Characters::\n"
        },
        {
            "type": "Notes",
            "text": "Non-graphic characters having names are written by the Lisp printer as\n\"#\\\" followed by the their name; see *Note Printing Characters::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: char-name,  Next: name-char,  Prev: char-code-limit,  Up: Characters Dictionary\n\nchar-name                                                        [Function]\n---------------------------------------------------------------------------\n\n`char-name'  character =>  name\n\nArguments and Values::\n......................\n\ncharacter--a character.\n\nname--a string or nil.\n\nDescription::\n.............\n\nReturns a string that is the name of the character, or nil if the\ncharacter has no name.\n\nAll non-graphic characters are required to have names unless they have\nsome implementation-defined attribute which is not null.  Whether or not\nother characters have names is implementation-dependent.\n\nThe standard characters <Newline> and <Space> have the respective names\n\"Newline\" and \"Space\".  The semi-standard characters <Tab>, <Page>,\n<Rubout>, <Linefeed>, <Return>, and <Backspace> (if they are supported by\nthe implementation) have the respective names \"Tab\",  \"Page\",  \"Rubout\",\n\"Linefeed\",  \"Return\", and \"Backspace\" (in the indicated case, even though\nname lookup by \"#\\\" and by the function name-char is not case sensitive).\n\nExamples::\n..........\n\n      (char-name #\\ ) =>  \"Space\"\n      (char-name #\\Space) =>  \"Space\"\n      (char-name #\\Page) =>  \"Page\"\n     \n      (char-name #\\a)\n     =>  NIL\n     OR=> \"LOWERCASE-a\"\n     OR=> \"Small-A\"\n     OR=> \"LA01\"\n     \n      (char-name #\\A)\n     =>  NIL\n     OR=> \"UPPERCASE-A\"\n     OR=> \"Capital-A\"\n     OR=> \"LA02\"\n     \n      ;; Even though its CHAR-NAME can vary, #\\A prints as #\\A\n      (prin1-to-string (read-from-string (format nil \"#\\\\~A\" (or (char-name #\\A) \"A\"))))\n     =>  \"#\\\\A\"\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if character is not a character.\n\nSee Also::\n..........\n\n*Note name-char:: , *Note Printing Characters::\n\nNotes::\n.......\n\nNon-graphic characters having names are written by the Lisp printer as\n\"#\\\" followed by the their name; see *Note Printing Characters::.\n\n"
}