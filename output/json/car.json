{
    "name": "car",
    "prev": "rplaca",
    "next": "copy-tree",
    "up": "Conses Dictionary",
    "header": {
        "type": null,
        "text": "cdaaar, cdaadr, cdadar, cdaddr, cddaar, cddadr, cdddar, cddddr"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "car'  x =>  object (setf (`car",
                    "text": "x) new-object)"
                },
                {
                    "name": "cdr'  x =>  object (setf (`cdr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caar'  x =>  object (setf (`caar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cadr'  x =>  object (setf (`cadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdar'  x =>  object (setf (`cdar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cddr'  x =>  object (setf (`cddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caaar'  x =>  object (setf (`caaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caadr'  x =>  object (setf (`caadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cadar'  x =>  object (setf (`cadar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caddr'  x =>  object (setf (`caddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdaar'  x =>  object (setf (`cdaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdadr'  x =>  object (setf (`cdadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cddar'  x =>  object (setf (`cddar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdddr'  x =>  object (setf (`cdddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caaaar'  x =>  object (setf (`caaaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caaadr'  x =>  object (setf (`caaadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caadar'  x =>  object (setf (`caadar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caaddr'  x =>  object (setf (`caaddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cadaar'  x =>  object (setf (`cadaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cadadr'  x =>  object (setf (`cadadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "caddar'  x =>  object (setf (`caddar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cadddr'  x =>  object (setf (`cadddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdaaar'  x =>  object (setf (`cdaaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdaadr'  x =>  object (setf (`cdaadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdadar'  x =>  object (setf (`cdadar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdaddr'  x =>  object (setf (`cdaddr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cddaar'  x =>  object (setf (`cddaar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cddadr'  x =>  object (setf (`cddadr",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cdddar'  x =>  object (setf (`cdddar",
                    "text": "x) new-object)\n"
                },
                {
                    "name": "cddddr'  x =>  object (setf (`cddddr",
                    "text": "x) new-object)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Pronunciation",
            "text": "cadr: pronounced 'ka ,de r\ncaddr: pronounced 'kad e ,de r or pronounced 'ka ,dude r\ncdr: pronounced 'ku ,de r\ncddr: pronounced 'kud e ,de r or pronounced 'ke ,dude r\n"
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "x",
                    "desc": "a list."
                },
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "new-object",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "If x is a cons, car returns the car of that cons.  If x is nil, car\nreturns nil.\nIf x is a cons, cdr returns the cdr of that cons.  If x is nil, cdr\nreturns nil.\nFunctions are provided which perform compositions of up to four car and\ncdr operations.  Their names consist of a C, followed by two, three, or\nfour occurrences of A or D, and finally an R.  The series of A's and D's\nin each function's name is chosen to identify the series of car and cdr\noperations that is performed by the function.  The order in which the A's\nand D's appear is the inverse of the order in which the corresponding\noperations are performed.  Figure 14-6 defines the relationships precisely.\n  This place ...  Is equivalent to this place ...  \n  (caar x)        (car (car x))                    \n  (cadr x)        (car (cdr x))                    \n  (cdar x)        (cdr (car x))                    \n  (cddr x)        (cdr (cdr x))                    \n  (caaar x)       (car (car (car x)))              \n  (caadr x)       (car (car (cdr x)))              \n  (cadar x)       (car (cdr (car x)))              \n  (caddr x)       (car (cdr (cdr x)))              \n  (cdaar x)       (cdr (car (car x)))              \n  (cdadr x)       (cdr (car (cdr x)))              \n  (cddar x)       (cdr (cdr (car x)))              \n  (cdddr x)       (cdr (cdr (cdr x)))              \n  (caaaar x)      (car (car (car (car x))))        \n  (caaadr x)      (car (car (car (cdr x))))        \n  (caadar x)      (car (car (cdr (car x))))        \n  (caaddr x)      (car (car (cdr (cdr x))))        \n  (cadaar x)      (car (cdr (car (car x))))        \n  (cadadr x)      (car (cdr (car (cdr x))))        \n  (caddar x)      (car (cdr (cdr (car x))))        \n  (cadddr x)      (car (cdr (cdr (cdr x))))        \n  (cdaaar x)      (cdr (car (car (car x))))        \n  (cdaadr x)      (cdr (car (car (cdr x))))        \n  (cdadar x)      (cdr (car (cdr (car x))))        \n  (cdaddr x)      (cdr (car (cdr (cdr x))))        \n  (cddaar x)      (cdr (cdr (car (car x))))        \n  (cddadr x)      (cdr (cdr (car (cdr x))))        \n  (cdddar x)      (cdr (cdr (cdr (car x))))        \n  (cddddr x)      (cdr (cdr (cdr (cdr x))))        \n         Figure 14-6: CAR and CDR variants        \nsetf can also be used with any of these functions to change an existing\ncomponent of x, but setf will not make new components.  So, for example,\nthe car of a cons can be assigned with setf of car, but the car of nil\ncannot be assigned with setf of car.  Similarly, the car of the car of a\ncons whose car is a cons can be assigned with setf of caar, but neither\nnil nor a cons whose car is nil can be assigned with setf of caar.\nThe argument x is permitted to be a dotted list or a circular list.\n"
        },
        {
            "type": "Examples",
            "text": "      (car nil) =>  NIL\n      (cdr '(1 . 2)) =>  2\n      (cdr '(1 2)) =>  (2)\n      (cadr '(1 2)) =>  2\n      (car '(a b c)) =>  A\n      (cdr '(a b c)) =>  (B C)\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The functions car and cdr should signal type-error if they receive an\nargument which is not a list.  The other functions (caar, cadr, ...\ncddddr) should behave for the purpose of error checking as if defined by\nappropriate calls to car and cdr.\n"
        },
        {
            "type": "See Also",
            "text": "*Note rplaca; rplacd:: , *Note first; second; third; fourth; fifth; sixth;\nseventh; eighth; ninth; tenth:: , *Note rest::\n"
        },
        {
            "type": "Notes",
            "text": "The car of a cons can also be altered by using rplaca, and the cdr of a\ncons can be altered by using rplacd.\n     (car x)    == (first x)\n     (cadr x)   == (second x) == (car (cdr x))\n     (caddr x)  == (third x)  == (car (cdr (cdr x)))\n     (cadddr x) == (fourth x) == (car (cdr (cdr (cdr x))))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: car,  Next: copy-tree,  Prev: rplaca,  Up: Conses Dictionary\n\ncar,    cdr,\n------------\n\ncaar,   cadr,   cdar,   cddr,\n-----------------------------\n\ncaaar,  caadr,  cadar,  caddr,  cdaar,  cdadr,  cddar,  cdddr,\n--------------------------------------------------------------\n\ncaaaar, caaadr, caadar, caaddr, cadaar, cadadr, caddar, cadddr,\n---------------------------------------------------------------\n\ncdaaar, cdaadr, cdadar, cdaddr, cddaar, cddadr, cdddar, cddddr\n--------------------------------------------------------------\n\n                                                                [Accessor]\n\n`car'  x =>  object (setf (`car' x) new-object)\n`cdr'  x =>  object (setf (`cdr' x) new-object)\n`\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt' x) new-object)\n`caar'  x =>  object (setf (`caar' x) new-object)\n`cadr'  x =>  object (setf (`cadr' x) new-object)\n`cdar'  x =>  object (setf (`cdar' x) new-object)\n`cddr'  x =>  object (setf (`cddr' x) new-object)\n`\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt' x) new-object)\n`caaar'  x =>  object (setf (`caaar' x) new-object)\n`caadr'  x =>  object (setf (`caadr' x) new-object)\n`cadar'  x =>  object (setf (`cadar' x) new-object)\n`caddr'  x =>  object (setf (`caddr' x) new-object)\n`cdaar'  x =>  object (setf (`cdaar' x) new-object)\n`cdadr'  x =>  object (setf (`cdadr' x) new-object)\n`cddar'  x =>  object (setf (`cddar' x) new-object)\n`cdddr'  x =>  object (setf (`cdddr' x) new-object)\n`\\vksip 5pt'  x =>  object (setf (`\\vksip 5pt' x) new-object)\n`caaaar'  x =>  object (setf (`caaaar' x) new-object)\n`caaadr'  x =>  object (setf (`caaadr' x) new-object)\n`caadar'  x =>  object (setf (`caadar' x) new-object)\n`caaddr'  x =>  object (setf (`caaddr' x) new-object)\n`cadaar'  x =>  object (setf (`cadaar' x) new-object)\n`cadadr'  x =>  object (setf (`cadadr' x) new-object)\n`caddar'  x =>  object (setf (`caddar' x) new-object)\n`cadddr'  x =>  object (setf (`cadddr' x) new-object)\n`cdaaar'  x =>  object (setf (`cdaaar' x) new-object)\n`cdaadr'  x =>  object (setf (`cdaadr' x) new-object)\n`cdadar'  x =>  object (setf (`cdadar' x) new-object)\n`cdaddr'  x =>  object (setf (`cdaddr' x) new-object)\n`cddaar'  x =>  object (setf (`cddaar' x) new-object)\n`cddadr'  x =>  object (setf (`cddadr' x) new-object)\n`cdddar'  x =>  object (setf (`cdddar' x) new-object)\n`cddddr'  x =>  object (setf (`cddddr' x) new-object)\nPronunciation::\n...............\n\ncadr: pronounced 'ka ,de r\n\ncaddr: pronounced 'kad e ,de r or pronounced 'ka ,dude r\n\ncdr: pronounced 'ku ,de r\n\ncddr: pronounced 'kud e ,de r or pronounced 'ke ,dude r\n\nArguments and Values::\n......................\n\nx--a list.\n\nobject--an object.\n\nnew-object--an object.\n\nDescription::\n.............\n\nIf x is a cons, car returns the car of that cons.  If x is nil, car\nreturns nil.\n\nIf x is a cons, cdr returns the cdr of that cons.  If x is nil, cdr\nreturns nil.\n\nFunctions are provided which perform compositions of up to four car and\ncdr operations.  Their names consist of a C, followed by two, three, or\nfour occurrences of A or D, and finally an R.  The series of A's and D's\nin each function's name is chosen to identify the series of car and cdr\noperations that is performed by the function.  The order in which the A's\nand D's appear is the inverse of the order in which the corresponding\noperations are performed.  Figure 14-6 defines the relationships precisely.\n\n  This place ...  Is equivalent to this place ...  \n  (caar x)        (car (car x))                    \n  (cadr x)        (car (cdr x))                    \n  (cdar x)        (cdr (car x))                    \n  (cddr x)        (cdr (cdr x))                    \n  (caaar x)       (car (car (car x)))              \n  (caadr x)       (car (car (cdr x)))              \n  (cadar x)       (car (cdr (car x)))              \n  (caddr x)       (car (cdr (cdr x)))              \n  (cdaar x)       (cdr (car (car x)))              \n  (cdadr x)       (cdr (car (cdr x)))              \n  (cddar x)       (cdr (cdr (car x)))              \n  (cdddr x)       (cdr (cdr (cdr x)))              \n  (caaaar x)      (car (car (car (car x))))        \n  (caaadr x)      (car (car (car (cdr x))))        \n  (caadar x)      (car (car (cdr (car x))))        \n  (caaddr x)      (car (car (cdr (cdr x))))        \n  (cadaar x)      (car (cdr (car (car x))))        \n  (cadadr x)      (car (cdr (car (cdr x))))        \n  (caddar x)      (car (cdr (cdr (car x))))        \n  (cadddr x)      (car (cdr (cdr (cdr x))))        \n  (cdaaar x)      (cdr (car (car (car x))))        \n  (cdaadr x)      (cdr (car (car (cdr x))))        \n  (cdadar x)      (cdr (car (cdr (car x))))        \n  (cdaddr x)      (cdr (car (cdr (cdr x))))        \n  (cddaar x)      (cdr (cdr (car (car x))))        \n  (cddadr x)      (cdr (cdr (car (cdr x))))        \n  (cdddar x)      (cdr (cdr (cdr (car x))))        \n  (cddddr x)      (cdr (cdr (cdr (cdr x))))        \n\n         Figure 14-6: CAR and CDR variants        \n\n\nsetf can also be used with any of these functions to change an existing\ncomponent of x, but setf will not make new components.  So, for example,\nthe car of a cons can be assigned with setf of car, but the car of nil\ncannot be assigned with setf of car.  Similarly, the car of the car of a\ncons whose car is a cons can be assigned with setf of caar, but neither\nnil nor a cons whose car is nil can be assigned with setf of caar.\n\nThe argument x is permitted to be a dotted list or a circular list.\n\nExamples::\n..........\n\n      (car nil) =>  NIL\n      (cdr '(1 . 2)) =>  2\n      (cdr '(1 2)) =>  (2)\n      (cadr '(1 2)) =>  2\n      (car '(a b c)) =>  A\n      (cdr '(a b c)) =>  (B C)\n\nExceptional Situations::\n........................\n\nThe functions car and cdr should signal type-error if they receive an\nargument which is not a list.  The other functions (caar, cadr, ...\ncddddr) should behave for the purpose of error checking as if defined by\nappropriate calls to car and cdr.\n\nSee Also::\n..........\n\n*Note rplaca; rplacd:: , *Note first; second; third; fourth; fifth; sixth;\nseventh; eighth; ninth; tenth:: , *Note rest::\n\nNotes::\n.......\n\nThe car of a cons can also be altered by using rplaca, and the cdr of a\ncons can be altered by using rplacd.\n\n     (car x)    == (first x)\n     (cadr x)   == (second x) == (car (cdr x))\n     (caddr x)  == (third x)  == (car (cdr (cdr x)))\n     (cadddr x) == (fourth x) == (car (cdr (cdr (cdr x))))\n\n"
}