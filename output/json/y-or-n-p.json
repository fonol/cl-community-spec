{
    "name": "y-or-n-p",
    "prev": "finish-output",
    "next": "make-synonym-stream",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "y-or-n-p, yes-or-no-p"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "y-or-n-p",
                    "text": " &optional control &rest arguments =>  generalized-boolean\n"
                },
                {
                    "name": "yes-or-no-p",
                    "text": " &optional control &rest arguments =>  generalized-boolean\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "control",
                    "desc": "a format control."
                },
                {
                    "name": "arguments",
                    "desc": "format arguments for control."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "These functions ask a question and parse a response from the user.  They\nreturn true if the answer is affirmative, or false if the answer is\nnegative.\ny-or-n-p is for asking the user a question whose answer is either \"yes\" or\n\"no.\" It is intended that the reply require the user to answer a yes-or-no\nquestion with a single character.  yes-or-no-p is also for asking the user\na question whose answer is either \"Yes\" or \"No.\" It is intended that the\nreply require the user to take more action than just a single keystroke,\nsuch as typing the full word yes or no followed by a newline.\ny-or-n-p types out a message (if supplied), reads an answer in some\nimplementation-dependent manner (intended to be short and simple, such as\nreading a single character such as Y or N).  yes-or-no-p types out a\nmessage (if supplied), attracts the user's attention (for example, by\nringing the terminal's bell), and reads an answer in some\nimplementation-dependent manner (intended to be multiple characters, such\nas YES or NO).\nIf format-control is supplied and not nil, then a fresh-line operation is\nperformed; then a message is printed as if format-control and arguments\nwere given to format.  In any case, yes-or-no-p and y-or-n-p will provide\na prompt such as \"(Y or N)\" or \"(Yes or No)\" if appropriate.\nAll input and output are performed using query I/O.\n"
        },
        {
            "type": "Examples",
            "text": "      (y-or-n-p \"(t or nil) given by\")\n      |>  (t or nil) given by (Y or N) |>>Y<<|\n     =>  true\n      (yes-or-no-p \"a ~S message\" 'frightening)\n      |>  a FRIGHTENING message (Yes or No) |>>no<<|\n     =>  false\n      (y-or-n-p \"Produce listing file?\")\n      |>  Produce listing file?\n      |>  Please respond with Y or N. |>>n<<|\n     =>  false\n"
        },
        {
            "type": "Side Effects",
            "text": "Output to and input from query I/O will occur.\n"
        },
        {
            "type": "Affected By",
            "text": "*query-io*.\n"
        },
        {
            "type": "See Also",
            "text": "*Note format::\n"
        },
        {
            "type": "Notes",
            "text": "yes-or-no-p and yes-or-no-p do not add question marks to the end of the\nprompt string, so any desired question mark or other punctuation should be\nexplicitly included in the text query.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: y-or-n-p,  Next: make-synonym-stream,  Prev: finish-output,  Up: Streams Dictionary\n\ny-or-n-p, yes-or-no-p                                            [Function]\n---------------------------------------------------------------------------\n\n`y-or-n-p'  &optional control &rest arguments =>  generalized-boolean\n\n`yes-or-no-p'  &optional control &rest arguments =>  generalized-boolean\n\nArguments and Values::\n......................\n\ncontrol--a format control.\n\narguments--format arguments for control.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nThese functions ask a question and parse a response from the user.  They\nreturn true if the answer is affirmative, or false if the answer is\nnegative.\n\ny-or-n-p is for asking the user a question whose answer is either \"yes\" or\n\"no.\" It is intended that the reply require the user to answer a yes-or-no\nquestion with a single character.  yes-or-no-p is also for asking the user\na question whose answer is either \"Yes\" or \"No.\" It is intended that the\nreply require the user to take more action than just a single keystroke,\nsuch as typing the full word yes or no followed by a newline.\n\ny-or-n-p types out a message (if supplied), reads an answer in some\nimplementation-dependent manner (intended to be short and simple, such as\nreading a single character such as Y or N).  yes-or-no-p types out a\nmessage (if supplied), attracts the user's attention (for example, by\nringing the terminal's bell), and reads an answer in some\nimplementation-dependent manner (intended to be multiple characters, such\nas YES or NO).\n\nIf format-control is supplied and not nil, then a fresh-line operation is\nperformed; then a message is printed as if format-control and arguments\nwere given to format.  In any case, yes-or-no-p and y-or-n-p will provide\na prompt such as \"(Y or N)\" or \"(Yes or No)\" if appropriate.\n\nAll input and output are performed using query I/O.\n\nExamples::\n..........\n\n      (y-or-n-p \"(t or nil) given by\")\n      |>  (t or nil) given by (Y or N) |>>Y<<|\n     =>  true\n      (yes-or-no-p \"a ~S message\" 'frightening)\n      |>  a FRIGHTENING message (Yes or No) |>>no<<|\n     =>  false\n      (y-or-n-p \"Produce listing file?\")\n      |>  Produce listing file?\n      |>  Please respond with Y or N. |>>n<<|\n     =>  false\n\nSide Effects::\n..............\n\nOutput to and input from query I/O will occur.\n\nAffected By::\n.............\n\n*query-io*.\n\nSee Also::\n..........\n\n*Note format::\n\nNotes::\n.......\n\nyes-or-no-p and yes-or-no-p do not add question marks to the end of the\nprompt string, so any desired question mark or other punctuation should be\nexplicitly included in the text query.\n\n"
}