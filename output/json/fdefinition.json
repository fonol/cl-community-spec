{
    "name": "fdefinition",
    "prev": "defun",
    "next": "fboundp",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Accessor",
        "text": "fdefinition"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "fdefinition",
                    "text": " function-name =>  definition\n(setf (`         fdefinition' function-name) new-definition)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "function-name",
                    "desc": "a function name.In the non-setf case, the name must be fbound in the global environment.\n"
                },
                {
                    "name": "definition",
                    "desc": "Current global function definition named by function-name."
                },
                {
                    "name": "new-definition",
                    "desc": "a function."
                }
            ]
        },
        {
            "type": "Description",
            "text": "fdefinition accesses the current global function definition named by\nfunction-name.  The definition may be a function or may be an object\nrepresenting a special form or macro.\nThe value returned by fdefinition when fboundp returns true but the\nfunction-name denotes a macro or special form is not well-defined, but\nfdefinition does not signal an error.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if function-name is not a\nfunction name.\nAn error of type undefined-function is signaled in the non-setf case if\nfunction-name is not fbound.\n"
        },
        {
            "type": "See Also",
            "text": "*Note fboundp:: , *Note fmakunbound:: , *Note macro-function:: ,\n*Note special-operator-p:: ,\n*Note symbol-function::\n"
        },
        {
            "type": "Notes",
            "text": "fdefinition cannot access the value of a lexical function name produced by\nflet or labels; it can access only the global function value.\nsetf can be used with fdefinition to replace a global function definition\nwhen the function-name's function definition does not represent a special\nform.\nsetf of fdefinition requires a function as the new value.  It is an error\nto set the fdefinition of a function-name to a symbol, a list, or the\nvalue returned by fdefinition on the name of a macro or special form.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: fdefinition,  Next: fboundp,  Prev: defun,  Up: Data and Control Flow Dictionary\n\nfdefinition                                                      [Accessor]\n---------------------------------------------------------------------------\n\n`fdefinition'  function-name =>  definition\n\n(setf (`         fdefinition' function-name) new-definition)\nArguments and Values::\n......................\n\nfunction-name--a function name.\n\nIn the non-setf case, the name must be fbound in the global environment.\n\ndefinition--Current global function definition named by function-name.\n\nnew-definition--a function.\n\nDescription::\n.............\n\nfdefinition accesses the current global function definition named by\nfunction-name.  The definition may be a function or may be an object\nrepresenting a special form or macro.\n\nThe value returned by fdefinition when fboundp returns true but the\nfunction-name denotes a macro or special form is not well-defined, but\nfdefinition does not signal an error.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if function-name is not a\nfunction name.\n\nAn error of type undefined-function is signaled in the non-setf case if\nfunction-name is not fbound.\n\nSee Also::\n..........\n\n*Note fboundp:: , *Note fmakunbound:: , *Note macro-function:: ,\n\n*Note special-operator-p:: ,\n\n*Note symbol-function::\n\nNotes::\n.......\n\nfdefinition cannot access the value of a lexical function name produced by\nflet or labels; it can access only the global function value.\n\nsetf can be used with fdefinition to replace a global function definition\nwhen the function-name's function definition does not represent a special\nform.\n\nsetf of fdefinition requires a function as the new value.  It is an error\nto set the fdefinition of a function-name to a symbol, a list, or the\nvalue returned by fdefinition on the name of a macro or special form.\n\n"
}