{
    "name": "maphash",
    "prev": "remhash",
    "next": "with-hash-table-iterator",
    "up": "Hash Tables Dictionary",
    "header": {
        "type": "Function",
        "text": "maphash"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "maphash",
                    "text": " function hash-table =>  nil\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "function",
                    "desc": "a designator for a function of two arguments, the key and the"
                },
                {
                    "name": "function",
                    "desc": "a designator for a function of two arguments, the key and thevalue.\n"
                },
                {
                    "name": "hash-table",
                    "desc": "a hash table."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Iterates over all entries in the hash-table.  For each entry, the function\nis called with two arguments-the key and the value of that entry.\nThe consequences are unspecified if any attempt is made to add or remove\nan entry from the hash-table while a maphash is in progress, with two\nexceptions: the function can use can use setf of gethash to change the\nvalue part of the entry currently being processed, or it can use remhash\nto remove that entry.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32304110>\n      (dotimes (i 10) (setf (gethash i table) i)) =>  NIL\n      (let ((sum-of-squares 0))\n         (maphash #'(lambda (key val)\n                      (let ((square (* val val)))\n                        (incf sum-of-squares square)\n                        (setf (gethash key table) square)))\n                  table)\n         sum-of-squares) =>  285\n      (hash-table-count table) =>  10\n      (maphash #'(lambda (key val)\n                    (when (oddp val) (remhash key table)))\n                table) =>  NIL\n      (hash-table-count table) =>  5\n      (maphash #'(lambda (k v) (print (list k v))) table)\n     (0 0)\n     (8 64)\n     (2 4)\n     (6 36)\n     (4 16)\n     =>  NIL\n"
        },
        {
            "type": "Side Effects",
            "text": "None, other than any which might be done by the function.\n"
        },
        {
            "type": "See Also",
            "text": "*Note loop:: , *Note with-hash-table-iterator:: ,\n*Note Traversal Rules and Side Effects::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: maphash,  Next: with-hash-table-iterator,  Prev: remhash,  Up: Hash Tables Dictionary\n\nmaphash                                                          [Function]\n---------------------------------------------------------------------------\n\n`maphash'  function hash-table =>  nil\n\nArguments and Values::\n......................\n\nfunction--a designator for a function of two arguments, the key and the\nvalue.\n\nhash-table--a hash table.\n\nDescription::\n.............\n\nIterates over all entries in the hash-table.  For each entry, the function\nis called with two arguments-the key and the value of that entry.\n\nThe consequences are unspecified if any attempt is made to add or remove\nan entry from the hash-table while a maphash is in progress, with two\nexceptions: the function can use can use setf of gethash to change the\nvalue part of the entry currently being processed, or it can use remhash\nto remove that entry.\n\nExamples::\n..........\n\n      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32304110>\n      (dotimes (i 10) (setf (gethash i table) i)) =>  NIL\n      (let ((sum-of-squares 0))\n         (maphash #'(lambda (key val)\n                      (let ((square (* val val)))\n                        (incf sum-of-squares square)\n                        (setf (gethash key table) square)))\n                  table)\n         sum-of-squares) =>  285\n      (hash-table-count table) =>  10\n      (maphash #'(lambda (key val)\n                    (when (oddp val) (remhash key table)))\n                table) =>  NIL\n      (hash-table-count table) =>  5\n      (maphash #'(lambda (k v) (print (list k v))) table)\n     (0 0)\n     (8 64)\n     (2 4)\n     (6 36)\n     (4 16)\n     =>  NIL\n\nSide Effects::\n..............\n\nNone, other than any which might be done by the function.\n\nSee Also::\n..........\n\n*Note loop:: , *Note with-hash-table-iterator:: ,\n\n*Note Traversal Rules and Side Effects::\n\n"
}