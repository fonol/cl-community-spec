{
    "name": "vector (System Class)",
    "prev": "simple-array",
    "next": "simple-vector",
    "up": "Arrays Dictionary",
    "header": {
        "type": "System Class",
        "text": "vector"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "vector",
                    "link": "vector"
                },
                {
                    "name": " array",
                    "link": null
                },
                {
                    "name": " sequence",
                    "link": null
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "Any one-dimensional array is a vector.\nThe type vector is a subtype of type array; for all types x, (vector x) is\nthe same as (array x (*)).\nThe type (vector t), the type string, and the type bit-vector are disjoint\nsubtypes of type vector.\n"
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Specializing.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`vector'{[{element-type | *} [{size | *}]]})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "size--a non-negative fixnum.\nelement-type--a type specifier.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the set of specialized vectors whose element type and\ndimension match the specified values.  Specifically:\nIf element-type is the symbol *, vectors are not excluded on the basis of\ntheir element type.  Otherwise, only those vectors are included whose\nactual array element type\nis the result of upgrading element-type; see *Note Array Upgrading::.\nIf a size is specified, the set includes only those vectors whose only\ndimension is size.  If the symbol * is specified instead of a size, the\nset is not restricted on the basis of dimension.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Required Kinds of Specialized Arrays::, *Note Sharpsign\nLeft-Parenthesis::, *Note Printing Other Vectors::, *Note Sharpsign A::\n"
        },
        {
            "type": "Notes",
            "text": "The type (vector e s) is equivalent to the type (array e (s)).\nThe type (vector bit) has the name bit-vector.\nThe union of all types (vector C), where C is any subtype of character,\nhas the name string.\n(vector *) refers to all vectors regardless of element type, (vector\ntype-specifier) refers only to those vectors that can result from giving\ntype-specifier as the :element-type argument to make-array.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: vector (System Class),  Next: simple-vector,  Prev: simple-array,  Up: Arrays Dictionary\n\nvector                                                       [System Class]\n---------------------------------------------------------------------------\n\nClass Precedence List::\n.......................\n\nvector, array, sequence, t\n\nDescription::\n.............\n\nAny one-dimensional array is a vector.\n\nThe type vector is a subtype of type array; for all types x, (vector x) is\nthe same as (array x (*)).\n\nThe type (vector t), the type string, and the type bit-vector are disjoint\nsubtypes of type vector.\n\nCompound Type Specifier Kind::\n..............................\n\nSpecializing.\n\nCompound Type Specifier Syntax::\n................................\n\n(`vector'{[{element-type | *} [{size | *}]]})\n\nCompound Type Specifier Arguments::\n...................................\n\nsize--a non-negative fixnum.\n\nelement-type--a type specifier.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the set of specialized vectors whose element type and\ndimension match the specified values.  Specifically:\n\nIf element-type is the symbol *, vectors are not excluded on the basis of\ntheir element type.  Otherwise, only those vectors are included whose\nactual array element type\n\nis the result of upgrading element-type; see *Note Array Upgrading::.\n\nIf a size is specified, the set includes only those vectors whose only\ndimension is size.  If the symbol * is specified instead of a size, the\nset is not restricted on the basis of dimension.\n\nSee Also::\n..........\n\n*Note Required Kinds of Specialized Arrays::, *Note Sharpsign\nLeft-Parenthesis::, *Note Printing Other Vectors::, *Note Sharpsign A::\n\nNotes::\n.......\n\nThe type (vector e s) is equivalent to the type (array e (s)).\n\nThe type (vector bit) has the name bit-vector.\n\nThe union of all types (vector C), where C is any subtype of character,\nhas the name string.\n\n(vector *) refers to all vectors regardless of element type, (vector\ntype-specifier) refers only to those vectors that can result from giving\ntype-specifier as the :element-type argument to make-array.\n\n"
}