{
    "name": "Transfer of Control to an Exit Point",
    "prev": "Generalized Reference",
    "next": "Data and Control Flow Dictionary",
    "up": "Data and Control Flow",
    "header": {
        "type": null,
        "text": "Transfer of Control to an Exit Point"
    },
    "sections": [
        {
            "type": "",
            "text": "When a transfer of control is initiated by go, return-from, or throw the\nfollowing events occur in order to accomplish the transfer of control.\nNote that for go, the exit point is the form within the tagbody that is\nbeing executed at the time the go is performed; for return-from, the exit\npoint is the corresponding block form; and for throw, the exit point is\nthe corresponding catch form.\n1.\n     Intervening exit points are \"abandoned\" (i.e., their extent ends and\n     it is no longer valid to attempt to transfer control through them).\n2.\n     The cleanup clauses of any intervening unwind-protect clauses are\n     evaluated.\n3.\n     Intervening dynamic bindings of special variables, catch tags,\n     condition handlers, and restarts are undone.\n4.\n     The extent of the exit point being invoked ends, and control is\n     passed to the target.\nThe extent of an exit being \"abandoned\" because it is being passed over\nends as soon as the transfer of control is initiated. That is, event 1\noccurs at the beginning of the initiation of the transfer of control.  The\nconsequences are undefined if an attempt is made to transfer control to an\nexit point whose dynamic extent has ended.\nEvents 2 and 3 are actually performed interleaved, in the order\ncorresponding to the reverse order in which they were established.  The\neffect of this is that the cleanup clauses of an unwind-protect see the\nsame dynamic bindings of variables and catch tags as were visible when the\nunwind-protect was entered.\nEvent 4 occurs at the end of the transfer of control.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Transfer of Control to an Exit Point,  Next: Data and Control Flow Dictionary,  Prev: Generalized Reference,  Up: Data and Control Flow\n\nTransfer of Control to an Exit Point\n====================================\n\nWhen a transfer of control is initiated by go, return-from, or throw the\nfollowing events occur in order to accomplish the transfer of control.\nNote that for go, the exit point is the form within the tagbody that is\nbeing executed at the time the go is performed; for return-from, the exit\npoint is the corresponding block form; and for throw, the exit point is\nthe corresponding catch form.\n\n1.\n     Intervening exit points are \"abandoned\" (i.e., their extent ends and\n     it is no longer valid to attempt to transfer control through them).\n\n2.\n     The cleanup clauses of any intervening unwind-protect clauses are\n     evaluated.\n\n3.\n     Intervening dynamic bindings of special variables, catch tags,\n     condition handlers, and restarts are undone.\n\n4.\n     The extent of the exit point being invoked ends, and control is\n     passed to the target.\n\nThe extent of an exit being \"abandoned\" because it is being passed over\nends as soon as the transfer of control is initiated. That is, event 1\noccurs at the beginning of the initiation of the transfer of control.  The\nconsequences are undefined if an attempt is made to transfer control to an\nexit point whose dynamic extent has ended.\n\nEvents 2 and 3 are actually performed interleaved, in the order\ncorresponding to the reverse order in which they were established.  The\neffect of this is that the cleanup clauses of an unwind-protect see the\nsame dynamic bindings of variables and catch tags as were visible when the\nunwind-protect was entered.\n\nEvent 4 occurs at the end of the transfer of control.\n\n"
}