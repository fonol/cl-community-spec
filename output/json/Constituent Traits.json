{
    "name": "Constituent Traits",
    "prev": "Constituent Characters",
    "next": "Invalid Characters",
    "up": "Character Syntax Types",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Constituent Traits",
            "text": "Every character has one or more constituent traits that define how the\ncharacter is to be interpreted by the Lisp reader when the character is a\nconstituent character.  These constituent traits are alphabetic_2, digit,\npackage marker, plus sign, minus sign, dot, decimal point, ratio marker,\nexponent marker, and invalid.  Figure~2-8 shows the constituent traits of\nthe standard characters and of certain semi-standard characters; no\nmechanism is provided for changing the constituent trait of a character.\nAny character with the alphadigit constituent trait in that figure is a\ndigit if the current input base is greater than that character's digit\nvalue, otherwise the character is alphabetic_2.  Any character quoted by a\nsingle escape is treated as an alphabetic_2 constituent, regardless of its\nnormal syntax.\n constituent traits         constituent traits                                   \n character                  character   \n ________________________________________________________________________________\n Backspace   invalid        {           alphabetic_2                             \n Tab         invalid*       }           alphabetic_2                             \n Newline     invalid*       +           alphabetic_2, plus sign                  \n Linefeed    invalid*       -           alphabetic_2, minus sign                 \n Page        invalid*       .           alphabetic_2, dot, decimal point         \n Return      invalid*       /           alphabetic_2, ratio marker               \n Space       invalid*       A, a        alphadigit                               \n !           alphabetic_2   B, b        alphadigit                               \n \"           alphabetic_2*  C, c        alphadigit                               \n #           alphabetic_2*  D, d        alphadigit, double-float exponent marker \n $          alphabetic_2   E, e        alphadigit, float exponent marker        \n %           alphabetic_2   F, f        alphadigit, single-float exponent marker \n &           alphabetic_2   G, g        alphadigit                               \n '           alphabetic_2*  H, h        alphadigit                               \n (           alphabetic_2*  I, i        alphadigit                               \n )           alphabetic_2*  J, j        alphadigit                               \n *           alphabetic_2   K, k        alphadigit                               \n ,           alphabetic_2*  L, l        alphadigit, long-float exponent marker   \n 0-9         alphadigit     M, m        alphadigit                               \n :           package marker N, n        alphadigit                               \n ;           alphabetic_2*  O, o        alphadigit                               \n <           alphabetic_2   P, p        alphadigit                               \n =           alphabetic_2   Q, q        alphadigit                               \n >           alphabetic_2   R, r        alphadigit                               \n ?           alphabetic_2   S, s        alphadigit, short-float exponent marker  \n @           alphabetic_2   T, t        alphadigit                               \n [           alphabetic_2   U, u        alphadigit                               \n \\           alphabetic_2*  V, v        alphadigit                               \n ]           alphabetic_2   W, w        alphadigit                               \n ^           alphabetic_2   X, x        alphadigit                               \n _           alphabetic_2   Y, y        alphadigit                               \n `           alphabetic_2*  Z, z        alphadigit                               \n |           alphabetic_2*  Rubout      invalid                                  \n ~           alphabetic_2   \n  Figure 2-8: Constituent Traits of Standard Characters and Semi-Standard Characters\nThe interpretations in this table apply only to characters whose syntax\ntype is constituent.  Entries marked with an asterisk (*) are normally\nshadowed_2 because the indicated characters are of syntax type\nwhitespace_2, macro character, single escape, or multiple escape; these\nconstituent traits apply to them only if their syntax types are changed to\nconstituent.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Constituent Traits,  Next: Invalid Characters,  Prev: Constituent Characters,  Up: Character Syntax Types\n\nConstituent Traits\n..................\n\nEvery character has one or more constituent traits that define how the\ncharacter is to be interpreted by the Lisp reader when the character is a\nconstituent character.  These constituent traits are alphabetic_2, digit,\npackage marker, plus sign, minus sign, dot, decimal point, ratio marker,\nexponent marker, and invalid.  Figure~2-8 shows the constituent traits of\nthe standard characters and of certain semi-standard characters; no\nmechanism is provided for changing the constituent trait of a character.\nAny character with the alphadigit constituent trait in that figure is a\ndigit if the current input base is greater than that character's digit\nvalue, otherwise the character is alphabetic_2.  Any character quoted by a\nsingle escape is treated as an alphabetic_2 constituent, regardless of its\nnormal syntax.\n\n constituent traits         constituent traits                                   \n character                  character   \n ________________________________________________________________________________\n Backspace   invalid        {           alphabetic_2                             \n Tab         invalid*       }           alphabetic_2                             \n Newline     invalid*       +           alphabetic_2, plus sign                  \n Linefeed    invalid*       -           alphabetic_2, minus sign                 \n Page        invalid*       .           alphabetic_2, dot, decimal point         \n Return      invalid*       /           alphabetic_2, ratio marker               \n Space       invalid*       A, a        alphadigit                               \n !           alphabetic_2   B, b        alphadigit                               \n \"           alphabetic_2*  C, c        alphadigit                               \n #           alphabetic_2*  D, d        alphadigit, double-float exponent marker \n $          alphabetic_2   E, e        alphadigit, float exponent marker        \n %           alphabetic_2   F, f        alphadigit, single-float exponent marker \n &           alphabetic_2   G, g        alphadigit                               \n '           alphabetic_2*  H, h        alphadigit                               \n (           alphabetic_2*  I, i        alphadigit                               \n )           alphabetic_2*  J, j        alphadigit                               \n *           alphabetic_2   K, k        alphadigit                               \n ,           alphabetic_2*  L, l        alphadigit, long-float exponent marker   \n 0-9         alphadigit     M, m        alphadigit                               \n :           package marker N, n        alphadigit                               \n ;           alphabetic_2*  O, o        alphadigit                               \n <           alphabetic_2   P, p        alphadigit                               \n =           alphabetic_2   Q, q        alphadigit                               \n >           alphabetic_2   R, r        alphadigit                               \n ?           alphabetic_2   S, s        alphadigit, short-float exponent marker  \n @           alphabetic_2   T, t        alphadigit                               \n [           alphabetic_2   U, u        alphadigit                               \n \\           alphabetic_2*  V, v        alphadigit                               \n ]           alphabetic_2   W, w        alphadigit                               \n ^           alphabetic_2   X, x        alphadigit                               \n _           alphabetic_2   Y, y        alphadigit                               \n `           alphabetic_2*  Z, z        alphadigit                               \n |           alphabetic_2*  Rubout      invalid                                  \n ~           alphabetic_2   \n\n  Figure 2-8: Constituent Traits of Standard Characters and Semi-Standard Characters\n\nThe interpretations in this table apply only to characters whose syntax\ntype is constituent.  Entries marked with an asterisk (*) are normally\nshadowed_2 because the indicated characters are of syntax type\nwhitespace_2, macro character, single escape, or multiple escape; these\nconstituent traits apply to them only if their syntax types are changed to\nconstituent.\n\n"
}