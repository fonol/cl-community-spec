{
    "name": "rational",
    "prev": "numerator",
    "next": "rationalp",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "rational, rationalize"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "rational",
                    "text": " number =>  rational\n"
                },
                {
                    "name": "rationalize",
                    "text": " number =>  rational\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "number",
                    "desc": "a real."
                },
                {
                    "name": "rational",
                    "desc": "a rational."
                }
            ]
        },
        {
            "type": "Description",
            "text": "rational and rationalize convert\nreals\nto rationals.\nIf number is already rational, it is returned.\nIf number is a float, rational returns a rational that is mathematically\nequal in value to the float.  rationalize returns a rational that\napproximates the float to the accuracy of the underlying floating-point\nrepresentation.\nrational assumes that the float is completely accurate.\nrationalize assumes that the float is accurate only to the precision of the\nfloating-point representation.\n"
        },
        {
            "type": "Examples",
            "text": "      (rational 0) =>  0\n      (rationalize -11/100) =>  -11/100\n      (rational .1) =>  13421773/134217728 ;implementation-dependent\n      (rationalize .1) =>  1/10\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if number is not a real.  Might\nsignal arithmetic-error.\n"
        },
        {
            "type": "Notes",
            "text": "It is always the case that\n      (float (rational x) x) == x\nand\n      (float (rationalize x) x) == x\nThat is, rationalizing a float by either method and then converting it back\nto a float of the same format produces the original number.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: rational,  Next: rationalp,  Prev: numerator,  Up: Numbers Dictionary\n\nrational, rationalize                                            [Function]\n---------------------------------------------------------------------------\n\n`rational'  number =>  rational\n\n`rationalize'  number =>  rational\n\nArguments and Values::\n......................\n\nnumber--a real.\n\nrational--a rational.\n\nDescription::\n.............\n\nrational and rationalize convert\n\nreals\n\nto rationals.\n\nIf number is already rational, it is returned.\n\nIf number is a float, rational returns a rational that is mathematically\nequal in value to the float.  rationalize returns a rational that\napproximates the float to the accuracy of the underlying floating-point\nrepresentation.\n\nrational assumes that the float is completely accurate.\n\nrationalize assumes that the float is accurate only to the precision of the\nfloating-point representation.\n\nExamples::\n..........\n\n      (rational 0) =>  0\n      (rationalize -11/100) =>  -11/100\n      (rational .1) =>  13421773/134217728 ;implementation-dependent\n      (rationalize .1) =>  1/10\n\nAffected By::\n.............\n\nThe implementation.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if number is not a real.  Might\nsignal arithmetic-error.\n\nNotes::\n.......\n\nIt is always the case that\n\n      (float (rational x) x) == x\n\nand\n\n      (float (rationalize x) x) == x\n\nThat is, rationalizing a float by either method and then converting it back\nto a float of the same format produces the original number.\n\n"
}