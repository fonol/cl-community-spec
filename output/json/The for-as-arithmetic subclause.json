{
    "name": "The for-as-arithmetic subclause",
    "prev": "Iteration Control",
    "next": "Examples of for-as-arithmetic subclause",
    "up": "Variable Initialization and Stepping Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The for-as-arithmetic subclause",
            "text": "In the for-as-arithmetic subclause, the for or as construct iterates from\nthe value supplied by form1 to the value supplied by form2 in increments or\ndecrements denoted by form3. Each expression is evaluated only once and\nmust evaluate to a number.  The variable var is bound to the value of\nform1 in the first iteration and is stepped_1 by the value of form3 in\neach succeeding iteration, or by 1 if form3 is not provided.  The\nfollowing loop keywords serve as valid prepositions within this syntax.\nAt least one of the prepositions must be used; and at most one from each\nline may be used in a single subclause.\nfrom | downfrom | upfrom\nto | downto | upto | below | above\nby\nThe prepositional phrases in each subclause may appear in any order.  For\nexample, either \"from x by y\" or \"by y from x\" is permitted.  However,\nbecause left-to-right order of evaluation is preserved, the effects will\nbe different in the case of side effects.\nConsider:\n     (let ((x 1)) (loop for i from x by (incf x) to 10 collect i))\n     =>  (1 3 5 7 9)\n     (let ((x 1)) (loop for i by (incf x) from x to 10 collect i))\n     =>  (2 4 6 8 10)\nThe descriptions of the prepositions follow:\nfrom\n     The loop keyword from specifies the value from which stepping_1\n     begins, as supplied by form1.  Stepping_1 is incremental by default.\n     If decremental stepping_1 is desired, the preposition downto or above\n     must be used with form2.  For incremental stepping_1, the default\n     from value is 0.\ndownfrom, upfrom\n     The loop keyword downfrom indicates that the variable var is\n     decreased in decrements supplied by form3; the loop keyword upfrom\n     indicates that var is increased in increments supplied by form3.\nto\n     The loop keyword to marks the end value for stepping_1 supplied in\n     form2.  Stepping_1 is incremental by default.  If decremental\n     stepping_1 is desired, the preposition downfrom must be used with\n     form1, or else the preposition downto or above should be used instead\n     of to with form2.\ndownto, upto\n     The loop keyword downto specifies decremental stepping; the loop\n     keyword upto specifies incremental stepping.  In both cases, the\n     amount of change on each step is specified by form3, and the loop\n     terminates when the variable var passes the value of form2.  Since\n     there is no default for form1 in decremental stepping_1, a form1\n     value must be supplied (using from or downfrom) when downto is\n     supplied.\nbelow, above\n     The loop keywords below and above are analogous to upto and downto\n     respectively.  These keywords stop iteration just before the value of\n     the variable var reaches the value supplied by form2; the end value\n     of form2 is not included.  Since there is no default for form1 in\n     decremental stepping_1, a form1 value must be supplied (using from or\n     downfrom) when above is supplied.\nby\n     The loop keyword by marks the increment or decrement supplied by\n     form3.  The value of form3 can be any positive number.  The default\n     value is 1.\nIn an iteration control clause, the for or as construct causes termination\nwhen the supplied limit is reached.  That is, iteration continues until\nthe value var is stepped to the exclusive or inclusive limit supplied by\nform2.  The range is exclusive if form3 increases or decreases var to the\nvalue of form2 without reaching that value; the loop keywords below and\nabove provide exclusive limits.  An inclusive limit allows var to attain\nthe value of form2; to, downto, and upto provide inclusive limits.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The for-as-arithmetic subclause,  Next: Examples of for-as-arithmetic subclause,  Prev: Iteration Control,  Up: Variable Initialization and Stepping Clauses\n\nThe for-as-arithmetic subclause\n...............................\n\nIn the for-as-arithmetic subclause, the for or as construct iterates from\nthe value supplied by form1 to the value supplied by form2 in increments or\ndecrements denoted by form3. Each expression is evaluated only once and\nmust evaluate to a number.  The variable var is bound to the value of\nform1 in the first iteration and is stepped_1 by the value of form3 in\neach succeeding iteration, or by 1 if form3 is not provided.  The\nfollowing loop keywords serve as valid prepositions within this syntax.\nAt least one of the prepositions must be used; and at most one from each\nline may be used in a single subclause.\n\nfrom | downfrom | upfrom\nto | downto | upto | below | above\nby\nThe prepositional phrases in each subclause may appear in any order.  For\nexample, either \"from x by y\" or \"by y from x\" is permitted.  However,\nbecause left-to-right order of evaluation is preserved, the effects will\nbe different in the case of side effects.\n\nConsider:\n\n     (let ((x 1)) (loop for i from x by (incf x) to 10 collect i))\n     =>  (1 3 5 7 9)\n     (let ((x 1)) (loop for i by (incf x) from x to 10 collect i))\n     =>  (2 4 6 8 10)\n\nThe descriptions of the prepositions follow:\n\nfrom\n     The loop keyword from specifies the value from which stepping_1\n     begins, as supplied by form1.  Stepping_1 is incremental by default.\n     If decremental stepping_1 is desired, the preposition downto or above\n     must be used with form2.  For incremental stepping_1, the default\n     from value is 0.\n\ndownfrom, upfrom\n     The loop keyword downfrom indicates that the variable var is\n     decreased in decrements supplied by form3; the loop keyword upfrom\n     indicates that var is increased in increments supplied by form3.\n\nto\n     The loop keyword to marks the end value for stepping_1 supplied in\n     form2.  Stepping_1 is incremental by default.  If decremental\n     stepping_1 is desired, the preposition downfrom must be used with\n     form1, or else the preposition downto or above should be used instead\n     of to with form2.\n\ndownto, upto\n     The loop keyword downto specifies decremental stepping; the loop\n     keyword upto specifies incremental stepping.  In both cases, the\n     amount of change on each step is specified by form3, and the loop\n     terminates when the variable var passes the value of form2.  Since\n     there is no default for form1 in decremental stepping_1, a form1\n     value must be supplied (using from or downfrom) when downto is\n     supplied.\n\nbelow, above\n     The loop keywords below and above are analogous to upto and downto\n     respectively.  These keywords stop iteration just before the value of\n     the variable var reaches the value supplied by form2; the end value\n     of form2 is not included.  Since there is no default for form1 in\n     decremental stepping_1, a form1 value must be supplied (using from or\n     downfrom) when above is supplied.\n\nby\n     The loop keyword by marks the increment or decrement supplied by\n     form3.  The value of form3 can be any positive number.  The default\n     value is 1.\n\nIn an iteration control clause, the for or as construct causes termination\nwhen the supplied limit is reached.  That is, iteration continues until\nthe value var is stepped to the exclusive or inclusive limit supplied by\nform2.  The range is exclusive if form3 increases or decreases var to the\nvalue of form2 without reaching that value; the loop keywords below and\nabove provide exclusive limits.  An inclusive limit allows var to attain\nthe value of form2; to, downto, and upto provide inclusive limits.\n\n"
}