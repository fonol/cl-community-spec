{
    "name": "char-code",
    "prev": "upper-case-p",
    "next": "char-int",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "char-code"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "char-code",
                    "text": " character =>  code\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character",
                    "desc": "a character."
                },
                {
                    "name": "code",
                    "desc": "a character code."
                }
            ]
        },
        {
            "type": "Description",
            "text": "char-code returns the code attribute of character.\n"
        },
        {
            "type": "Examples",
            "text": "     ;; An implementation using ASCII character encoding\n     ;; might return these values:\n     (char-code #\\$) =>  36\n     (char-code #\\a) =>  97\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if character is not a character.\n"
        },
        {
            "type": "See Also",
            "text": "*Note char-code-limit::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: char-code,  Next: char-int,  Prev: upper-case-p,  Up: Characters Dictionary\n\nchar-code                                                        [Function]\n---------------------------------------------------------------------------\n\n`char-code'  character =>  code\n\nArguments and Values::\n......................\n\ncharacter--a character.\n\ncode--a character code.\n\nDescription::\n.............\n\nchar-code returns the code attribute of character.\n\nExamples::\n..........\n\n     ;; An implementation using ASCII character encoding\n     ;; might return these values:\n     (char-code #\\$) =>  36\n     (char-code #\\a) =>  97\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if character is not a character.\n\nSee Also::\n..........\n\n*Note char-code-limit::\n\n"
}