{
    "name": "Signaling and Handling Conditions",
    "prev": "Printing Conditions",
    "next": "Assertions",
    "up": "Condition System Concepts",
    "header": {
        "type": null,
        "text": "Signaling and Handling Conditions"
    },
    "sections": [
        {
            "type": "",
            "text": "The operation of the condition system depends on the ordering of active\napplicable handlers from most recent to least recent.\nEach handler is associated with a type specifier that must designate a\nsubtype of type condition.  A handler is said to be applicable to a\ncondition if that condition is of the type designated by the associated\ntype specifier.\nActive handlers are established by using handler-bind (or an abstraction\nbased on handler-bind, such as handler-case or ignore-errors).\nActive handlers can be established within the dynamic scope of other\nactive handlers.  At any point during program execution, there is a set of\nactive handlers.  When a condition is signaled, the most recent active\napplicable handler for that condition is selected from this set.  Given a\ncondition, the order of recentness of active applicable handlers is\ndefined by the following two rules:\n1.\n     Each handler in a set of active handlers H_1 is more recent than\n     every handler in a set H_2 if the handlers in H_2 were active when\n     the handlers in H_1 were established.\n2.\n     Let h_1 and h_2 be two applicable active handlers established by the\n     same form. Then h_1 is more recent than h_2 if h_1 was defined to the\n     left of h_2 in the form that established them.\nOnce a handler in a handler binding form (such as handler-bind or\nhandler-case) has been selected, all handlers in that form become inactive\nfor the remainder of the signaling process.  While the selected handler\nruns, no other handler established by that form is active. That is, if the\nhandler declines, no other handler established by that form will be\nconsidered for possible invocation.\nFigure 9-4 shows operators relating to the handling of conditions.\n  handler-bind  handler-case  ignore-errors  \n  Figure 9-4: Operators relating to handling conditions.\n* Menu:\n* Signaling::\n* Resignaling a Condition::\n* Restarts::\n* Interactive Use of Restarts::\n* Interfaces to Restarts::\n* Restart Tests::\n* Associating a Restart with a Condition::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Signaling and Handling Conditions,  Next: Assertions,  Prev: Printing Conditions,  Up: Condition System Concepts\n\nSignaling and Handling Conditions\n---------------------------------\n\nThe operation of the condition system depends on the ordering of active\napplicable handlers from most recent to least recent.\n\nEach handler is associated with a type specifier that must designate a\nsubtype of type condition.  A handler is said to be applicable to a\ncondition if that condition is of the type designated by the associated\ntype specifier.\n\nActive handlers are established by using handler-bind (or an abstraction\nbased on handler-bind, such as handler-case or ignore-errors).\n\nActive handlers can be established within the dynamic scope of other\nactive handlers.  At any point during program execution, there is a set of\nactive handlers.  When a condition is signaled, the most recent active\napplicable handler for that condition is selected from this set.  Given a\ncondition, the order of recentness of active applicable handlers is\ndefined by the following two rules:\n\n1.\n     Each handler in a set of active handlers H_1 is more recent than\n     every handler in a set H_2 if the handlers in H_2 were active when\n     the handlers in H_1 were established.\n\n2.\n     Let h_1 and h_2 be two applicable active handlers established by the\n     same form. Then h_1 is more recent than h_2 if h_1 was defined to the\n     left of h_2 in the form that established them.\n\nOnce a handler in a handler binding form (such as handler-bind or\nhandler-case) has been selected, all handlers in that form become inactive\nfor the remainder of the signaling process.  While the selected handler\nruns, no other handler established by that form is active. That is, if the\nhandler declines, no other handler established by that form will be\nconsidered for possible invocation.\n\nFigure 9-4 shows operators relating to the handling of conditions.\n\n  handler-bind  handler-case  ignore-errors  \n\n  Figure 9-4: Operators relating to handling conditions.\n\n\n* Menu:\n\n* Signaling::\n* Resignaling a Condition::\n* Restarts::\n* Interactive Use of Restarts::\n* Interfaces to Restarts::\n* Restart Tests::\n* Associating a Restart with a Condition::\n\n"
}