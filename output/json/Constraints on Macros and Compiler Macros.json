{
    "name": "Constraints on Macros and Compiler Macros",
    "prev": "Processing of Defining Macros",
    "next": null,
    "up": "File Compilation",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Constraints on Macros and Compiler Macros",
            "text": "Except where explicitly stated otherwise, no macro defined in the Common\nLisp standard produces an expansion that could cause any of the subforms\nof the macro form to be treated as top level forms.  If an implementation\nalso provides a special operator definition of a Common Lisp macro, the\nspecial operator definition must be semantically equivalent in this\nrespect.\nCompiler macro expansions must also have the same top level evaluation\nsemantics as the form which they replace.  This is of concern both to\nconforming implementations and to conforming programs.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Constraints on Macros and Compiler Macros,  Prev: Processing of Defining Macros,  Up: File Compilation\n\nConstraints on Macros and Compiler Macros\n.........................................\n\nExcept where explicitly stated otherwise, no macro defined in the Common\nLisp standard produces an expansion that could cause any of the subforms\nof the macro form to be treated as top level forms.  If an implementation\nalso provides a special operator definition of a Common Lisp macro, the\nspecial operator definition must be semantically equivalent in this\nrespect.\n\nCompiler macro expansions must also have the same top level evaluation\nsemantics as the form which they replace.  This is of concern both to\nconforming implementations and to conforming programs.\n\n"
}