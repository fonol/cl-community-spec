{
    "name": "Associativity and Commutativity in Numeric Operations",
    "prev": "Numeric Operations",
    "next": "Examples of Associativity and Commutativity in Numeric Operations",
    "up": "Numeric Operations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Associativity and Commutativity in Numeric Operations",
            "text": "For functions that are mathematically associative (and possibly\ncommutative), a conforming implementation may process the arguments in any\nmanner consistent with associative (and possibly commutative)\nrearrangement.  This does not affect the order in which the argument forms\nare evaluated; for a discussion of evaluation order, see *Note Function\nForms::.  What is unspecified is only the order in which the parameter\nvalues are processed.  This implies that implementations may differ in\nwhich automatic coercions are applied; see *Note Contagion in Numeric\nOperations::.\nA conforming program can control the order of processing explicitly by\nseparating the operations into separate (possibly nested) function forms,\nor by writing explicit calls to functions that perform coercions.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Associativity and Commutativity in Numeric Operations,  Next: Examples of Associativity and Commutativity in Numeric Operations,  Prev: Numeric Operations,  Up: Numeric Operations\n\nAssociativity and Commutativity in Numeric Operations\n.....................................................\n\nFor functions that are mathematically associative (and possibly\ncommutative), a conforming implementation may process the arguments in any\nmanner consistent with associative (and possibly commutative)\nrearrangement.  This does not affect the order in which the argument forms\nare evaluated; for a discussion of evaluation order, see *Note Function\nForms::.  What is unspecified is only the order in which the parameter\nvalues are processed.  This implies that implementations may differ in\nwhich automatic coercions are applied; see *Note Contagion in Numeric\nOperations::.\n\nA conforming program can control the order of processing explicitly by\nseparating the operations into separate (possibly nested) function forms,\nor by writing explicit calls to functions that perform coercions.\n\n"
}