{
    "name": "Sharpsign S",
    "prev": "Sharpsign A",
    "next": "Sharpsign P",
    "up": "Sharpsign",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Sharpsign S",
            "text": "#s(name slot1 value1 slot2 value2 ...) denotes a structure.  This is valid\nonly if name is the name of a structure type already defined by defstruct\nand if the structure type has a standard constructor function.  Let cm\nstand for the name of this constructor function; then this syntax is\nequivalent to\n      #.(cm keyword1 'value1 keyword2 'value2 ...)\nwhere each keywordj is the result of computing\n      (intern (string slotj) (find-package 'keyword))\nThe net effect is that the constructor function is called with the\nspecified slots having the specified values.\n(This coercion feature is deprecated; in the future, keyword names will be\ntaken in the package they are read in, so symbols that are actually in the\nKEYWORD package should be used if that is what is desired.)\nWhatever object the constructor function returns is returned by the #S\nsyntax.\nFor information on how the Lisp printer prints structures, see *Note\nPrinting Structures::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sharpsign S,  Next: Sharpsign P,  Prev: Sharpsign A,  Up: Sharpsign\n\nSharpsign S\n...........\n\n#s(name slot1 value1 slot2 value2 ...) denotes a structure.  This is valid\nonly if name is the name of a structure type already defined by defstruct\nand if the structure type has a standard constructor function.  Let cm\nstand for the name of this constructor function; then this syntax is\nequivalent to\n\n      #.(cm keyword1 'value1 keyword2 'value2 ...)\n\nwhere each keywordj is the result of computing\n\n      (intern (string slotj) (find-package 'keyword))\n\nThe net effect is that the constructor function is called with the\nspecified slots having the specified values.\n\n(This coercion feature is deprecated; in the future, keyword names will be\ntaken in the package they are read in, so symbols that are actually in the\nKEYWORD package should be used if that is what is desired.)\n\nWhatever object the constructor function returns is returned by the #S\nsyntax.\n\nFor information on how the Lisp printer prints structures, see *Note\nPrinting Structures::.\n\n"
}