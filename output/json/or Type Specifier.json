{
    "name": "or (Type Specifier)",
    "prev": "and (Type Specifier)",
    "next": "values (Type Specifier)",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "Type Specifier",
        "text": "or"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Combining.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`or'{{typespec}*})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "typespec--a type specifier.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the set of all objects of the type determined by the union of\nthe typespecs.  For example, the type list by definition is the same as\n(or null cons).  Also, the value returned by position is an object of type\n(or null (integer 0 *)); i.e., either nil or a non-negative integer.\n* is not permitted as an argument.\nThe type specifiers (or) and nil are equivalent.  The symbol or is not\nvalid as a type specifier; and, specifically, it is not an abbreviation\nfor (or).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: or (Type Specifier),  Next: values (Type Specifier),  Prev: and (Type Specifier),  Up: Types and Classes Dictionary\n\nor                                                         [Type Specifier]\n---------------------------------------------------------------------------\n\nCompound Type Specifier Kind::\n..............................\n\nCombining.\n\nCompound Type Specifier Syntax::\n................................\n\n(`or'{{typespec}*})\n\nCompound Type Specifier Arguments::\n...................................\n\ntypespec--a type specifier.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the set of all objects of the type determined by the union of\nthe typespecs.  For example, the type list by definition is the same as\n(or null cons).  Also, the value returned by position is an object of type\n(or null (integer 0 *)); i.e., either nil or a non-negative integer.\n\n* is not permitted as an argument.\n\nThe type specifiers (or) and nil are equivalent.  The symbol or is not\nvalid as a type specifier; and, specifically, it is not an abbreviation\nfor (or).\n\n"
}