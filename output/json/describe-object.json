{
    "name": "describe-object",
    "prev": "describe",
    "next": "trace",
    "up": "Environment Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "describe-object"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "describe-object",
                    "text": " object stream =>  implementation-dependent\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "describe-object",
                    "text": " (object standard-object) stream\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "stream",
                    "desc": "a stream."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function describe-object prints a description of object to a\nstream.  describe-object is called by describe; it must not be called by\nthe user.\nEach implementation is required to provide a method on the class\nstandard-object and methods on enough other classes so as to ensure that\nthere is always an applicable method.  Implementations are free to add\nmethods for other classes.  Users can write methods for describe-object\nfor their own classes if they do not wish to inherit an\nimplementation-supplied method.\nMethods on describe-object can recursively call describe.  Indentation,\ndepth limits, and circularity detection are all taken care of\nautomatically, provided that each method handles exactly one level of\nstructure and calls describe recursively if there are more structural\nlevels.  The consequences are undefined if this rule is not obeyed.\nIn some implementations the stream argument passed to a describe-object\nmethod is not the original stream, but is an intermediate stream that\nimplements parts of describe.  Methods should therefore not depend on the\nidentity of this stream.\n"
        },
        {
            "type": "Examples",
            "text": "      (defclass spaceship ()\n        ((captain :initarg :captain :accessor spaceship-captain)\n         (serial# :initarg :serial-number :accessor spaceship-serial-number)))\n      (defclass federation-starship (spaceship) ())\n      (defmethod describe-object ((s spaceship) stream)\n        (with-slots (captain serial#) s\n          (format stream \"~&~S is a spaceship of type ~S,~\n                          ~\n                            and with serial number ~D.~\n                  s (type-of s) captain serial#)))\n      (make-instance 'federation-starship\n                     :captain \"Rachel Garrett\"\n                     :serial-number \"NCC-1701-C\")\n     =>  #<FEDERATION-STARSHIP 26312465>\n      (describe *)\n      |>  #<FEDERATION-STARSHIP 26312465> is a spaceship of type FEDERATION-STARSHIP,\n      |>  with Rachel Garrett at the helm and with serial number NCC-1701-C.\n     =>  <no values>\n"
        },
        {
            "type": "See Also",
            "text": "*Note describe::\n"
        },
        {
            "type": "Notes",
            "text": "The same implementation techniques that are applicable to print-object are\napplicable to describe-object.\nThe reason for making the return values for describe-object unspecified is\nto  avoid forcing users to include explicit (values) in all of their\nmethods.  describe takes care of that.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: describe-object,  Next: trace,  Prev: describe,  Up: Environment Dictionary\n\ndescribe-object                                 [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`describe-object'  object stream =>  implementation-dependent\n\nMethod Signatures::\n...................\n\n`describe-object'  (object standard-object) stream\n\nArguments and Values::\n......................\n\nobject--an object.\n\nstream--a stream.\n\nDescription::\n.............\n\nThe generic function describe-object prints a description of object to a\nstream.  describe-object is called by describe; it must not be called by\nthe user.\n\nEach implementation is required to provide a method on the class\nstandard-object and methods on enough other classes so as to ensure that\nthere is always an applicable method.  Implementations are free to add\nmethods for other classes.  Users can write methods for describe-object\nfor their own classes if they do not wish to inherit an\nimplementation-supplied method.\n\nMethods on describe-object can recursively call describe.  Indentation,\ndepth limits, and circularity detection are all taken care of\nautomatically, provided that each method handles exactly one level of\nstructure and calls describe recursively if there are more structural\nlevels.  The consequences are undefined if this rule is not obeyed.\n\nIn some implementations the stream argument passed to a describe-object\nmethod is not the original stream, but is an intermediate stream that\nimplements parts of describe.  Methods should therefore not depend on the\nidentity of this stream.\n\nExamples::\n..........\n\n      (defclass spaceship ()\n        ((captain :initarg :captain :accessor spaceship-captain)\n         (serial# :initarg :serial-number :accessor spaceship-serial-number)))\n     \n      (defclass federation-starship (spaceship) ())\n     \n      (defmethod describe-object ((s spaceship) stream)\n        (with-slots (captain serial#) s\n          (format stream \"~&~S is a spaceship of type ~S,~\n                          ~\n                            and with serial number ~D.~\n                  s (type-of s) captain serial#)))\n     \n      (make-instance 'federation-starship\n                     :captain \"Rachel Garrett\"\n                     :serial-number \"NCC-1701-C\")\n     =>  #<FEDERATION-STARSHIP 26312465>\n     \n      (describe *)\n      |>  #<FEDERATION-STARSHIP 26312465> is a spaceship of type FEDERATION-STARSHIP,\n      |>  with Rachel Garrett at the helm and with serial number NCC-1701-C.\n     =>  <no values>\n\nSee Also::\n..........\n\n*Note describe::\n\nNotes::\n.......\n\nThe same implementation techniques that are applicable to print-object are\napplicable to describe-object.\n\nThe reason for making the return values for describe-object unspecified is\nto  avoid forcing users to include explicit (values) in all of their\nmethods.  describe takes care of that.\n\n"
}