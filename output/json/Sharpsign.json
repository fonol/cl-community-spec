{
    "name": "Sharpsign",
    "prev": "Comma",
    "next": "Re-Reading Abbreviated Expressions",
    "up": "Standard Macro Characters",
    "header": {
        "type": null,
        "text": "Sharpsign"
    },
    "sections": [
        {
            "type": "",
            "text": "Sharpsign is a non-terminating dispatching macro character.  It reads an\noptional sequence of digits and then one more character, and uses that\ncharacter to select a function to run as a reader macro function.\nThe standard syntax includes constructs introduced by the # character.\nThe syntax of these constructs is as follows: a character that identifies\nthe type of construct is followed by arguments in some form.  If the\ncharacter is a letter, its case is not important; #O and #o are considered\nto be equivalent, for example.\nCertain # constructs allow an unsigned decimal number to appear between\nthe # and the character.\nThe reader macros associated with the dispatching macro character # are\ndescribed later in this section and summarized in Figure 2-19.\n  dispatch char  purpose                  dispatch char  purpose                \n  Backspace      signals error            {              undefined*             \n  Tab            signals error            }              undefined*             \n  Newline        signals error            +              read-time conditional  \n  Linefeed       signals error            -              read-time conditional  \n  Page           signals error            .              read-time evaluation   \n  Return         signals error            /              undefined              \n  Space          signals error            A, a           array                  \n  !              undefined*               B, b           binary rational        \n  \"              undefined                C, c           complex number         \n  #              reference to = label     D, d           undefined              \n  $             undefined                E, e           undefined              \n  %              undefined                F, f           undefined              \n  &              undefined                G, g           undefined              \n  '              function abbreviation    H, h           undefined              \n  (              simple vector            I, i           undefined              \n  )              signals error            J, j           undefined              \n  *              bit vector               K, k           undefined              \n  ,              undefined                L, l           undefined              \n  :              uninterned symbol        M, m           undefined              \n  ;              undefined                N, n           undefined              \n  <              signals error            O, o           octal rational         \n  =              labels following object  P, p           pathname               \n  >              undefined                Q, q           undefined              \n  ?              undefined*               R, r           radix-n rational       \n  @              undefined                S, s           structure              \n  [              undefined*               T, t           undefined              \n  \\              character object         U, u           undefined              \n  ]              undefined*               V, v           undefined              \n  ^            undefined                W, w           undefined              \n  _              undefined                X, x           hexadecimal rational   \n  `              undefined                Y, y           undefined              \n  |              balanced comment         Z, z           undefined              \n  ~              undefined                Rubout         undefined              \n           Figure 2-19: Standard # Dispatching Macro Character Syntax         \nThe combinations marked by an asterisk (*) are explicitly reserved to the\nuser.  No conforming implementation defines them.\nNote also that digits do not appear in the preceding table.  This is\nbecause the notations #0, #1, ..., #9 are reserved for another purpose\nwhich occupies the same syntactic space.  When a digit follows a sharpsign,\nit is not treated as a dispatch character.  Instead, an unsigned integer\nargument is accumulated and passed as an argument to the reader macro for\nthe character that follows the digits.  For example, #2A((1 2) (3 4)) is a\nuse of #A with an argument of 2.\n* Menu:\n* Sharpsign Backslash::\n* Sharpsign Single-Quote::\n* Sharpsign Left-Parenthesis::\n* Sharpsign Asterisk::\n* Examples of Sharpsign Asterisk::\n* Sharpsign Colon::\n* Sharpsign Dot::\n* Sharpsign B::\n* Sharpsign O::\n* Sharpsign X::\n* Sharpsign R::\n* Sharpsign C::\n* Sharpsign A::\n* Sharpsign S::\n* Sharpsign P::\n* Sharpsign Equal-Sign::\n* Sharpsign Sharpsign::\n* Sharpsign Plus::\n* Sharpsign Minus::\n* Sharpsign Vertical-Bar::\n* Examples of Sharpsign Vertical-Bar::\n* Notes about Style for Sharpsign Vertical-Bar::\n* Sharpsign Less-Than-Sign::\n* Sharpsign Whitespace::\n* Sharpsign Right-Parenthesis::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sharpsign,  Next: Re-Reading Abbreviated Expressions,  Prev: Comma,  Up: Standard Macro Characters\n\nSharpsign\n---------\n\nSharpsign is a non-terminating dispatching macro character.  It reads an\noptional sequence of digits and then one more character, and uses that\ncharacter to select a function to run as a reader macro function.\n\nThe standard syntax includes constructs introduced by the # character.\nThe syntax of these constructs is as follows: a character that identifies\nthe type of construct is followed by arguments in some form.  If the\ncharacter is a letter, its case is not important; #O and #o are considered\nto be equivalent, for example.\n\nCertain # constructs allow an unsigned decimal number to appear between\nthe # and the character.\n\nThe reader macros associated with the dispatching macro character # are\ndescribed later in this section and summarized in Figure 2-19.\n\n  dispatch char  purpose                  dispatch char  purpose                \n  Backspace      signals error            {              undefined*             \n  Tab            signals error            }              undefined*             \n  Newline        signals error            +              read-time conditional  \n  Linefeed       signals error            -              read-time conditional  \n  Page           signals error            .              read-time evaluation   \n  Return         signals error            /              undefined              \n  Space          signals error            A, a           array                  \n  !              undefined*               B, b           binary rational        \n  \"              undefined                C, c           complex number         \n  #              reference to = label     D, d           undefined              \n  $             undefined                E, e           undefined              \n  %              undefined                F, f           undefined              \n  &              undefined                G, g           undefined              \n  '              function abbreviation    H, h           undefined              \n  (              simple vector            I, i           undefined              \n  )              signals error            J, j           undefined              \n  *              bit vector               K, k           undefined              \n  ,              undefined                L, l           undefined              \n  :              uninterned symbol        M, m           undefined              \n  ;              undefined                N, n           undefined              \n  <              signals error            O, o           octal rational         \n  =              labels following object  P, p           pathname               \n  >              undefined                Q, q           undefined              \n  ?              undefined*               R, r           radix-n rational       \n  @              undefined                S, s           structure              \n  [              undefined*               T, t           undefined              \n  \\              character object         U, u           undefined              \n  ]              undefined*               V, v           undefined              \n  ^            undefined                W, w           undefined              \n  _              undefined                X, x           hexadecimal rational   \n  `              undefined                Y, y           undefined              \n  |              balanced comment         Z, z           undefined              \n  ~              undefined                Rubout         undefined              \n\n           Figure 2-19: Standard # Dispatching Macro Character Syntax         \n\n\nThe combinations marked by an asterisk (*) are explicitly reserved to the\nuser.  No conforming implementation defines them.\n\nNote also that digits do not appear in the preceding table.  This is\nbecause the notations #0, #1, ..., #9 are reserved for another purpose\nwhich occupies the same syntactic space.  When a digit follows a sharpsign,\nit is not treated as a dispatch character.  Instead, an unsigned integer\nargument is accumulated and passed as an argument to the reader macro for\nthe character that follows the digits.  For example, #2A((1 2) (3 4)) is a\nuse of #A with an argument of 2.\n\n* Menu:\n\n* Sharpsign Backslash::\n* Sharpsign Single-Quote::\n* Sharpsign Left-Parenthesis::\n* Sharpsign Asterisk::\n* Examples of Sharpsign Asterisk::\n* Sharpsign Colon::\n* Sharpsign Dot::\n* Sharpsign B::\n* Sharpsign O::\n* Sharpsign X::\n* Sharpsign R::\n* Sharpsign C::\n* Sharpsign A::\n* Sharpsign S::\n* Sharpsign P::\n* Sharpsign Equal-Sign::\n* Sharpsign Sharpsign::\n* Sharpsign Plus::\n* Sharpsign Minus::\n* Sharpsign Vertical-Bar::\n* Examples of Sharpsign Vertical-Bar::\n* Notes about Style for Sharpsign Vertical-Bar::\n* Sharpsign Less-Than-Sign::\n* Sharpsign Whitespace::\n* Sharpsign Right-Parenthesis::\n\n"
}