{
    "name": "->UNSPECIFIC as a Component Value",
    "prev": "->WILD as a Component Value",
    "next": "Relation between component values NIL and ->UNSPECIFIC",
    "up": "Interpreting Pathname Component Values",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": ":UNSPECIFIC as a Component Value",
            "text": "If :unspecific is the value of a pathname component, the component is\nconsidered to be \"absent\" or to \"have no meaning\" in the filename being\nrepresented by the pathname.\nWhether a value of :unspecific is permitted for any component on any given\nfile system accessible to the implementation is implementation-defined.  A\nconforming program must never unconditionally use a :unspecific as the\nvalue of a pathname component because such a value is not guaranteed to be\npermissible in all implementations.  However, a conforming program can, if\nit is careful, successfully manipulate user-supplied data which contains\nor refers to non-portable pathname components.  And certainly a conforming\nprogram should be prepared for the possibility that any components of a\npathname could be :unspecific.\nWhen reading_1 the value of any pathname component, conforming programs\nshould be prepared for the value to be :unspecific.\nWhen writing_1 the value of any pathname component, the consequences are\nundefined if :unspecific is given for a pathname in a file system for\nwhich it does not make sense.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ->UNSPECIFIC as a Component Value,  Next: Relation between component values NIL and ->UNSPECIFIC,  Prev: ->WILD as a Component Value,  Up: Interpreting Pathname Component Values\n\n:UNSPECIFIC as a Component Value\n................................\n\nIf :unspecific is the value of a pathname component, the component is\nconsidered to be \"absent\" or to \"have no meaning\" in the filename being\nrepresented by the pathname.\n\nWhether a value of :unspecific is permitted for any component on any given\nfile system accessible to the implementation is implementation-defined.  A\nconforming program must never unconditionally use a :unspecific as the\nvalue of a pathname component because such a value is not guaranteed to be\npermissible in all implementations.  However, a conforming program can, if\nit is careful, successfully manipulate user-supplied data which contains\nor refers to non-portable pathname components.  And certainly a conforming\nprogram should be prepared for the possibility that any components of a\npathname could be :unspecific.\n\nWhen reading_1 the value of any pathname component, conforming programs\nshould be prepared for the value to be :unspecific.\n\nWhen writing_1 the value of any pathname component, the consequences are\nundefined if :unspecific is given for a pathname in a file system for\nwhich it does not make sense.\n\n"
}