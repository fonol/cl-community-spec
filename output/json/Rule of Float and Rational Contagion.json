{
    "name": "Rule of Float and Rational Contagion",
    "prev": "Floating-point Computations",
    "next": "Examples of Rule of Float and Rational Contagion",
    "up": "Floating-point Computations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Rule of Float and Rational Contagion",
            "text": "When rationals and floats are combined by a numerical function, the\nrational is first converted to a float of the same format.  For functions\nsuch as + that take more than two arguments, it is permitted that part of\nthe operation be carried out exactly using rationals and the rest be done\nusing floating-point arithmetic.\nWhen rationals and floats are compared by a numerical function, the\nfunction rational is effectively called to convert the float to a rational\nand then an exact comparison is performed. In the case of complex numbers,\nthe real and imaginary parts are effectively handled individually.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Rule of Float and Rational Contagion,  Next: Examples of Rule of Float and Rational Contagion,  Prev: Floating-point Computations,  Up: Floating-point Computations\n\nRule of Float and Rational Contagion\n....................................\n\nWhen rationals and floats are combined by a numerical function, the\nrational is first converted to a float of the same format.  For functions\nsuch as + that take more than two arguments, it is permitted that part of\nthe operation be carried out exactly using rationals and the rest be done\nusing floating-point arithmetic.\n\nWhen rationals and floats are compared by a numerical function, the\nfunction rational is effectively called to convert the float to a rational\nand then an exact comparison is performed. In the case of complex numbers,\nthe real and imaginary parts are effectively handled individually.\n\n"
}