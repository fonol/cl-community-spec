{
    "name": "multiple-value-call",
    "prev": "multiple-value-bind",
    "next": "multiple-value-list",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Special Operator",
        "text": "multiple-value-call"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "multiple-value-call",
                    "text": " function-form form* =>  {result}*\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "function-form",
                    "desc": "a form; evaluated to produce function."
                },
                {
                    "name": "function",
                    "desc": "a function designator resulting from the evaluation of"
                },
                {
                    "name": "function",
                    "desc": "a function designator resulting from the evaluation offunction-form.\n"
                },
                {
                    "name": "form",
                    "desc": "a form."
                },
                {
                    "name": "results",
                    "desc": "the values returned by the function."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Applies function to a list of the objects collected from groups of\nmultiple values_2.\nmultiple-value-call first evaluates the function-form to obtain function,\nand then evaluates each form.  All the values of each form are gathered\ntogether (not just one value from each) and given as arguments to the\nfunction.\n"
        },
        {
            "type": "Examples",
            "text": "      (multiple-value-call #'list 1 '/ (values 2 3) '/ (values) '/ (floor 2.5))\n     =>  (1 / 2 3 / / 2 0.5)\n      (+ (floor 5 3) (floor 19 4)) == (+ 1 4)\n     =>  5\n      (multiple-value-call #'+ (floor 5 3) (floor 19 4)) == (+ 1 2 4 3)\n     =>  10\n"
        },
        {
            "type": "See Also",
            "text": "*Note multiple-value-list:: , *Note multiple-value-bind::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: multiple-value-call,  Next: multiple-value-list,  Prev: multiple-value-bind,  Up: Data and Control Flow Dictionary\n\nmultiple-value-call                                      [Special Operator]\n---------------------------------------------------------------------------\n\n`multiple-value-call'  function-form form* =>  {result}*\n\nArguments and Values::\n......................\n\nfunction-form--a form; evaluated to produce function.\n\nfunction--a function designator resulting from the evaluation of\nfunction-form.\n\nform--a form.\n\nresults--the values returned by the function.\n\nDescription::\n.............\n\nApplies function to a list of the objects collected from groups of\nmultiple values_2.\n\nmultiple-value-call first evaluates the function-form to obtain function,\nand then evaluates each form.  All the values of each form are gathered\ntogether (not just one value from each) and given as arguments to the\nfunction.\n\nExamples::\n..........\n\n      (multiple-value-call #'list 1 '/ (values 2 3) '/ (values) '/ (floor 2.5))\n     =>  (1 / 2 3 / / 2 0.5)\n      (+ (floor 5 3) (floor 19 4)) == (+ 1 4)\n     =>  5\n      (multiple-value-call #'+ (floor 5 3) (floor 19 4)) == (+ 1 2 4 3)\n     =>  10\n\nSee Also::\n..........\n\n*Note multiple-value-list:: , *Note multiple-value-bind::\n\n"
}