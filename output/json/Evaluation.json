{
    "name": "Evaluation",
    "prev": "Evaluation and Compilation",
    "next": "Compilation",
    "up": "Evaluation and Compilation",
    "header": {
        "type": null,
        "text": "Evaluation"
    },
    "sections": [
        {
            "type": "",
            "text": "Execution of code can be accomplished by a variety of means ranging from\ndirect interpretation of a form representing a program to invocation of\ncompiled code produced by a compiler.\nEvaluation is the process by which a program is executed in Common Lisp.\nThe mechanism of evaluation is manifested both implicitly through the\neffect of the Lisp read-eval-print loop, and  explicitly through the\npresence of the functions eval, compile, compile-file, and load.  Any of\nthese facilities might share the same execution strategy, or each might\nuse a different one.\nThe behavior of a conforming program processed by eval and by compile-file\nmight differ; see *Note Semantic Constraints::.\nEvaluation can be understood in terms of a model in which an interpreter\nrecursively traverses a form performing each step of the computation as it\ngoes.  This model, which describes the semantics of Common Lisp programs,\nis described in *Note The Evaluation Model::.\n* Menu:\n* Introduction to Environments::\n* The Evaluation Model::\n* Lambda Expressions::\n* Closures and Lexical Binding::\n* Shadowing::\n* Extent::\n* Return Values::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Evaluation,  Next: Compilation,  Prev: Evaluation and Compilation,  Up: Evaluation and Compilation\n\nEvaluation\n==========\n\nExecution of code can be accomplished by a variety of means ranging from\ndirect interpretation of a form representing a program to invocation of\ncompiled code produced by a compiler.\n\nEvaluation is the process by which a program is executed in Common Lisp.\nThe mechanism of evaluation is manifested both implicitly through the\neffect of the Lisp read-eval-print loop, and  explicitly through the\npresence of the functions eval, compile, compile-file, and load.  Any of\nthese facilities might share the same execution strategy, or each might\nuse a different one.\n\nThe behavior of a conforming program processed by eval and by compile-file\nmight differ; see *Note Semantic Constraints::.\n\nEvaluation can be understood in terms of a model in which an interpreter\nrecursively traverses a form performing each step of the computation as it\ngoes.  This model, which describes the semantics of Common Lisp programs,\nis described in *Note The Evaluation Model::.\n\n* Menu:\n\n* Introduction to Environments::\n* The Evaluation Model::\n* Lambda Expressions::\n* Closures and Lexical Binding::\n* Shadowing::\n* Extent::\n* Return Values::\n\n"
}