{
    "name": "Tilde P-> Plural",
    "prev": "Tilde Right-Paren-> End of Case Conversion",
    "next": null,
    "up": "FORMAT Miscellaneous Operations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde P: Plural",
            "text": "If arg is not eql to the integer 1, a lowercase s is printed; if arg is\neql to 1, nothing is printed.  If arg is a floating-point 1.0, the s is\nprinted.\n~:P does the same thing, after doing a ~:* to back up one argument; that\nis, it prints a lowercase s if the previous argument was not 1.\n~@P prints y if the argument is 1, or ies if it is not.  ~:@P does the\nsame thing, but backs up first.\n      (format nil \"~D tr~:@P/~D win~:P\" 7 1) =>  \"7 tries/1 win\"\n      (format nil \"~D tr~:@P/~D win~:P\" 1 0) =>  \"1 try/0 wins\"\n      (format nil \"~D tr~:@P/~D win~:P\" 1 3) =>  \"1 try/3 wins\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde P-> Plural,  Prev: Tilde Right-Paren-> End of Case Conversion,  Up: FORMAT Miscellaneous Operations\n\nTilde P: Plural\n...............\n\nIf arg is not eql to the integer 1, a lowercase s is printed; if arg is\neql to 1, nothing is printed.  If arg is a floating-point 1.0, the s is\nprinted.\n\n~:P does the same thing, after doing a ~:* to back up one argument; that\nis, it prints a lowercase s if the previous argument was not 1.\n\n~@P prints y if the argument is 1, or ies if it is not.  ~:@P does the\nsame thing, but backs up first.\n\n      (format nil \"~D tr~:@P/~D win~:P\" 7 1) =>  \"7 tries/1 win\"\n      (format nil \"~D tr~:@P/~D win~:P\" 1 0) =>  \"1 try/0 wins\"\n      (format nil \"~D tr~:@P/~D win~:P\" 1 3) =>  \"1 try/3 wins\"\n\n"
}