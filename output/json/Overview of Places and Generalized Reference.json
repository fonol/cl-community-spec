{
    "name": "Overview of Places and Generalized Reference",
    "prev": "Generalized Reference",
    "next": "Kinds of Places",
    "up": "Generalized Reference",
    "header": {
        "type": null,
        "text": "Overview of Places and Generalized Reference"
    },
    "sections": [
        {
            "type": "",
            "text": "A generalized reference is the use of a form, sometimes called a place ,\nas if it were a variable that could be read and written.  The value of a\nplace is the object to which the place form evaluates.  The value of a\nplace can be changed by using setf.  The concept of binding a place is not\ndefined in Common Lisp, but an implementation is permitted to extend the\nlanguage by defining this concept.\nFigure 5-1 contains examples of the use of setf.  Note that the values\nreturned by evaluating the forms in column two are not necessarily the\nsame as those obtained by evaluating the forms in column three.  In\ngeneral, the exact macro expansion of a setf form is not guaranteed and\ncan even be implementation-dependent; all that is guaranteed is that the\nexpansion is an update form that works for that particular implementation,\nthat the left-to-right evaluation of subforms is preserved, and that the\nultimate result of evaluating setf is the value or values being stored.\n  Access function   Update Function   Update using setf              \n  x                 (setq x datum)    (setf x datum)                 \n  (car x)           (rplaca x datum)  (setf (car x) datum)           \n  (symbol-value x)  (set x datum)     (setf (symbol-value x) datum)  \n                     Figure 5-1: Examples of setf                   \nFigure 5-2 shows operators relating to places and generalized reference.\n  assert                defsetf             push     \n  ccase                 get-setf-expansion  remf     \n  ctypecase             getf                rotatef  \n  decf                  incf                setf     \n  define-modify-macro   pop                 shiftf   \n  define-setf-expander  psetf                        \n  Figure 5-2: Operators relating to places and generalized reference.\nSome of the operators above manipulate places and some manipulate setf\nexpanders.  A setf expansion can be derived from any place.\nNew setf expanders can be defined by using defsetf and\ndefine-setf-expander.\n* Menu:\n* Evaluation of Subforms to Places::\n* Examples of Evaluation of Subforms to Places::\n* Setf Expansions::\n* Examples of Setf Expansions::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Overview of Places and Generalized Reference,  Next: Kinds of Places,  Prev: Generalized Reference,  Up: Generalized Reference\n\nOverview of Places and Generalized Reference\n--------------------------------------------\n\nA generalized reference is the use of a form, sometimes called a place ,\nas if it were a variable that could be read and written.  The value of a\nplace is the object to which the place form evaluates.  The value of a\nplace can be changed by using setf.  The concept of binding a place is not\ndefined in Common Lisp, but an implementation is permitted to extend the\nlanguage by defining this concept.\n\nFigure 5-1 contains examples of the use of setf.  Note that the values\nreturned by evaluating the forms in column two are not necessarily the\nsame as those obtained by evaluating the forms in column three.  In\ngeneral, the exact macro expansion of a setf form is not guaranteed and\ncan even be implementation-dependent; all that is guaranteed is that the\nexpansion is an update form that works for that particular implementation,\nthat the left-to-right evaluation of subforms is preserved, and that the\nultimate result of evaluating setf is the value or values being stored.\n\n  Access function   Update Function   Update using setf              \n  x                 (setq x datum)    (setf x datum)                 \n  (car x)           (rplaca x datum)  (setf (car x) datum)           \n  (symbol-value x)  (set x datum)     (setf (symbol-value x) datum)  \n\n                     Figure 5-1: Examples of setf                   \n\n\nFigure 5-2 shows operators relating to places and generalized reference.\n\n  assert                defsetf             push     \n  ccase                 get-setf-expansion  remf     \n  ctypecase             getf                rotatef  \n  decf                  incf                setf     \n  define-modify-macro   pop                 shiftf   \n  define-setf-expander  psetf                        \n\n  Figure 5-2: Operators relating to places and generalized reference.\n\n\nSome of the operators above manipulate places and some manipulate setf\nexpanders.  A setf expansion can be derived from any place.\n\nNew setf expanders can be defined by using defsetf and\ndefine-setf-expander.\n\n* Menu:\n\n* Evaluation of Subforms to Places::\n* Examples of Evaluation of Subforms to Places::\n* Setf Expansions::\n* Examples of Setf Expansions::\n\n"
}