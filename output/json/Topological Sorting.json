{
    "name": "Topological Sorting",
    "prev": "Determining the Class Precedence List",
    "next": "Examples of Class Precedence List Determination",
    "up": "Determining the Class Precedence List",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Topological Sorting",
            "text": "Topological sorting proceeds by finding a class C in~S_C such that no\nother class precedes that element according to the elements in~R.  The\nclass C is placed first in the result.  Remove C from S_C, and remove all\npairs of the form (C,D), D\\in S_C, from R. Repeat the process, adding\nclasses with no predecessors to the end of the result.  Stop when no\nelement can be found that has no predecessor.\nIf S_C is not empty and the process has stopped, the set R is\ninconsistent. If every class in the finite set of classes is preceded by\nanother, then R contains a loop. That is, there is a chain of classes\nC_1,...,C_n such that C_i precedes C_{i+1}, 1<= i<n, and C_n precedes C_1.\nSometimes there are several classes from S_C with no predecessors.  In\nthis case select the one that has a direct subclass rightmost in the class\nprecedence list computed so far.  (If there is no such candidate class, R\ndoes not generate a partial ordering--the R_c, c\\in S_C, are inconsistent.)\nIn more precise terms, let {N_1,...,N_m}, m>= 2, be the classes from S_C\nwith no predecessors.  Let (C_1... C_n), n>= 1, be the class precedence\nlist constructed so far.  C_1 is the most specific class, and C_n is the\nleast specific.  Let 1<= j<= n be the largest number such that there\nexists an i where 1<= i<= m and N_i is a direct superclass of C_j; N_i is\nplaced next.\nThe effect of this rule for selecting from a set of classes with no\npredecessors is that the classes in a simple superclass chain are adjacent\nin the class precedence list and that classes in each relatively separated\nsubgraph are adjacent in the class precedence list.  For example, let T_1\nand T_2 be subgraphs whose only element in common is the class J.  Suppose\nthat no superclass of J appears in either T_1 or T_2, and that J is in the\nsuperclass chain of every class in both T_1 and T_2.  Let C_1 be the\nbottom of T_1; and let C_2 be the bottom of T_2.  Suppose C is a class\nwhose direct superclasses are C_1 and C_2 in that order, then the class\nprecedence list for C starts with C and is followed by all classes in T_1\nexcept J.  All the classes of T_2 are next.  The class J and its\nsuperclasses appear last.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Topological Sorting,  Next: Examples of Class Precedence List Determination,  Prev: Determining the Class Precedence List,  Up: Determining the Class Precedence List\n\nTopological Sorting\n...................\n\nTopological sorting proceeds by finding a class C in~S_C such that no\nother class precedes that element according to the elements in~R.  The\nclass C is placed first in the result.  Remove C from S_C, and remove all\npairs of the form (C,D), D\\in S_C, from R. Repeat the process, adding\nclasses with no predecessors to the end of the result.  Stop when no\nelement can be found that has no predecessor.\n\nIf S_C is not empty and the process has stopped, the set R is\ninconsistent. If every class in the finite set of classes is preceded by\nanother, then R contains a loop. That is, there is a chain of classes\nC_1,...,C_n such that C_i precedes C_{i+1}, 1<= i<n, and C_n precedes C_1.\n\nSometimes there are several classes from S_C with no predecessors.  In\nthis case select the one that has a direct subclass rightmost in the class\nprecedence list computed so far.  (If there is no such candidate class, R\ndoes not generate a partial ordering--the R_c, c\\in S_C, are inconsistent.)\n\nIn more precise terms, let {N_1,...,N_m}, m>= 2, be the classes from S_C\nwith no predecessors.  Let (C_1... C_n), n>= 1, be the class precedence\nlist constructed so far.  C_1 is the most specific class, and C_n is the\nleast specific.  Let 1<= j<= n be the largest number such that there\nexists an i where 1<= i<= m and N_i is a direct superclass of C_j; N_i is\nplaced next.\n\nThe effect of this rule for selecting from a set of classes with no\npredecessors is that the classes in a simple superclass chain are adjacent\nin the class precedence list and that classes in each relatively separated\nsubgraph are adjacent in the class precedence list.  For example, let T_1\nand T_2 be subgraphs whose only element in common is the class J.  Suppose\nthat no superclass of J appears in either T_1 or T_2, and that J is in the\nsuperclass chain of every class in both T_1 and T_2.  Let C_1 be the\nbottom of T_1; and let C_2 be the bottom of T_2.  Suppose C is a class\nwhose direct superclasses are C_1 and C_2 in that order, then the class\nprecedence list for C starts with C and is followed by all classes in T_1\nexcept J.  All the classes of T_2 are next.  The class J and its\nsuperclasses appear last.\n\n"
}