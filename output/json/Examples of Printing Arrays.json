{
    "name": "Examples of Printing Arrays",
    "prev": "Printing Other Arrays",
    "next": "Printing Random States",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Printing Arrays",
            "text": "      (let ((a (make-array '(3 3)))\n            (*print-pretty* t)\n            (*print-array* t))\n        (dotimes (i 3) (dotimes (j 3) (setf (aref a i j) (format nil \"<~D,~D>\" i j))))\n        (print a)\n        (print (make-array 9 :displaced-to a)))\n      |>  #2A((\"<0,0>\" \"<0,1>\" \"<0,2>\")\n      |>      (\"<1,0>\" \"<1,1>\" \"<1,2>\")\n      |>      (\"<2,0>\" \"<2,1>\" \"<2,2>\"))\n      |>  #(\"<0,0>\" \"<0,1>\" \"<0,2>\" \"<1,0>\" \"<1,1>\" \"<1,2>\" \"<2,0>\" \"<2,1>\" \"<2,2>\")\n     =>  #<ARRAY 9 indirect 36363476>\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Printing Arrays,  Next: Printing Random States,  Prev: Printing Other Arrays,  Up: Default Print-Object Methods\n\nExamples of Printing Arrays\n...........................\n\n      (let ((a (make-array '(3 3)))\n            (*print-pretty* t)\n            (*print-array* t))\n        (dotimes (i 3) (dotimes (j 3) (setf (aref a i j) (format nil \"<~D,~D>\" i j))))\n        (print a)\n        (print (make-array 9 :displaced-to a)))\n      |>  #2A((\"<0,0>\" \"<0,1>\" \"<0,2>\")\n      |>      (\"<1,0>\" \"<1,1>\" \"<1,2>\")\n      |>      (\"<2,0>\" \"<2,1>\" \"<2,2>\"))\n      |>  #(\"<0,0>\" \"<0,1>\" \"<0,2>\" \"<1,0>\" \"<1,1>\" \"<1,2>\" \"<2,0>\" \"<2,1>\" \"<2,2>\")\n     =>  #<ARRAY 9 indirect 36363476>\n\n"
}