{
    "name": "unexport",
    "prev": "with-package-iterator",
    "next": "unintern",
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "unexport"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "unexport",
                    "text": " symbols &optional package =>  t\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbols",
                    "desc": "a designator for a list of symbols."
                }
            ]
        },
        {
            "type": "Description",
            "text": "unexport reverts external symbols in package to internal status; it undoes\nthe effect of export.\nunexport works only on symbols present in package, switching them back to\ninternal status.  If unexport is given a symbol that is already accessible\nas an internal symbol in package, it does nothing.\n"
        },
        {
            "type": "Examples",
            "text": "      (in-package \"COMMON-LISP-USER\") =>  #<PACKAGE \"COMMON-LISP-USER\">\n      (export (intern \"CONTRABAND\" (make-package 'temp)) 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  NIL, NIL\n      (use-package 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  CONTRABAND, :INHERITED\n      (unexport 'contraband 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  NIL, NIL\n"
        },
        {
            "type": "Side Effects",
            "text": "Package system is modified.\n"
        },
        {
            "type": "Affected By",
            "text": "Current state of the package system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If unexport is given a symbol not accessible in package at all, an error\nof type package-error is signaled.\nThe consequences are undefined if package is the KEYWORD package or the\nCOMMON-LISP package.\n"
        },
        {
            "type": "See Also",
            "text": "*Note export:: , *Note Package Concepts::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: unexport,  Next: unintern,  Prev: with-package-iterator,  Up: Packages Dictionary\n\nunexport                                                         [Function]\n---------------------------------------------------------------------------\n\n`unexport'  symbols &optional package =>  t\n\nArguments and Values::\n......................\n\nsymbols--a designator for a list of symbols.\n\npackage--a package designator.\n\nThe default is the current package.\n\nDescription::\n.............\n\nunexport reverts external symbols in package to internal status; it undoes\nthe effect of export.\n\nunexport works only on symbols present in package, switching them back to\ninternal status.  If unexport is given a symbol that is already accessible\nas an internal symbol in package, it does nothing.\n\nExamples::\n..........\n\n      (in-package \"COMMON-LISP-USER\") =>  #<PACKAGE \"COMMON-LISP-USER\">\n      (export (intern \"CONTRABAND\" (make-package 'temp)) 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  NIL, NIL\n      (use-package 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  CONTRABAND, :INHERITED\n      (unexport 'contraband 'temp) =>  T\n      (find-symbol \"CONTRABAND\") =>  NIL, NIL\n\nSide Effects::\n..............\n\nPackage system is modified.\n\nAffected By::\n.............\n\nCurrent state of the package system.\n\nExceptional Situations::\n........................\n\nIf unexport is given a symbol not accessible in package at all, an error\nof type package-error is signaled.\n\nThe consequences are undefined if package is the KEYWORD package or the\nCOMMON-LISP package.\n\nSee Also::\n..........\n\n*Note export:: , *Note Package Concepts::\n\n"
}