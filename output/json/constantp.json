{
    "name": "constantp",
    "prev": "special-operator-p",
    "next": null,
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Function",
        "text": "constantp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "constantp",
                    "text": " form &optional environment =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "form",
                    "desc": "a form."
                },
                {
                    "name": "environment",
                    "desc": "an environment object.  The default is nil."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if form can be determined by the implementation to be a\nconstant form in the indicated environment; otherwise, it returns false\nindicating either that the form is not a constant form or that it cannot\nbe determined whether or not form is a constant form.\nThe following kinds of forms are considered constant forms:\n*\n     Self-evaluating objects (such as numbers, characters, and the various\n     kinds of arrays) are always considered constant forms and must be\n     recognized as such by constantp.\n*\n     Constant variables, such as keywords, symbols defined by Common Lisp\n     as constant (such as nil, t, and pi), and symbols declared as\n     constant by the user in the indicated environment using defconstant\n     are always considered constant forms and must be recognized as such\n     by constantp.\n*\n     quote forms are always considered constant forms and must be\n     recognized as such by constantp.\n*\n     An implementation is permitted, but not required, to detect\n     additional constant forms.  If it does, it is also permitted, but not\n     required, to make use of information in the environment.  Examples of\n     constant forms for which constantp might or might not return true are:\n     (sqrt pi), (+ 3 2), (length '(a b c)), and (let ((x 7)) (zerop x)).\nIf an implementation chooses to make use of the environment information,\nsuch actions as expanding macros or performing function inlining are\npermitted to be used, but not required; however, expanding compiler macros\nis not permitted.\n"
        },
        {
            "type": "Examples",
            "text": "      (constantp 1) =>  true\n      (constantp 'temp) =>  false\n      (constantp ''temp)) =>  true\n      (defconstant this-is-a-constant 'never-changing) =>  THIS-IS-A-CONSTANT\n      (constantp 'this-is-a-constant) =>  true\n      (constantp \"temp\") =>  true\n      (setq a 6) =>  6\n      (constantp a) =>  true\n      (constantp '(sin pi)) =>  implementation-dependent\n      (constantp '(car '(x))) =>  implementation-dependent\n      (constantp '(eql x x)) =>  implementation-dependent\n      (constantp '(typep x 'nil)) =>  implementation-dependent\n      (constantp '(typep x 't)) =>  implementation-dependent\n      (constantp '(values this-is-a-constant)) =>  implementation-dependent\n      (constantp '(values 'x 'y)) =>  implementation-dependent\n      (constantp '(let ((a '(a b c))) (+ (length a) 6))) =>  implementation-dependent\n"
        },
        {
            "type": "Affected By",
            "text": "The state of the global environment (e.g., which symbols have been\ndeclared to be the names of constant variables).\n"
        },
        {
            "type": "See Also",
            "text": "*Note defconstant::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: constantp,  Prev: special-operator-p,  Up: Evaluation and Compilation Dictionary\n\nconstantp                                                        [Function]\n---------------------------------------------------------------------------\n\n`constantp'  form &optional environment =>  generalized-boolean\n\nArguments and Values::\n......................\n\nform--a form.\n\nenvironment--an environment object.  The default is nil.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if form can be determined by the implementation to be a\nconstant form in the indicated environment; otherwise, it returns false\nindicating either that the form is not a constant form or that it cannot\nbe determined whether or not form is a constant form.\n\nThe following kinds of forms are considered constant forms:\n*\n     Self-evaluating objects (such as numbers, characters, and the various\n     kinds of arrays) are always considered constant forms and must be\n     recognized as such by constantp.\n\n*\n     Constant variables, such as keywords, symbols defined by Common Lisp\n     as constant (such as nil, t, and pi), and symbols declared as\n     constant by the user in the indicated environment using defconstant\n     are always considered constant forms and must be recognized as such\n     by constantp.\n\n*\n     quote forms are always considered constant forms and must be\n     recognized as such by constantp.\n\n*\n     An implementation is permitted, but not required, to detect\n     additional constant forms.  If it does, it is also permitted, but not\n     required, to make use of information in the environment.  Examples of\n     constant forms for which constantp might or might not return true are:\n     (sqrt pi), (+ 3 2), (length '(a b c)), and (let ((x 7)) (zerop x)).\n\nIf an implementation chooses to make use of the environment information,\nsuch actions as expanding macros or performing function inlining are\npermitted to be used, but not required; however, expanding compiler macros\nis not permitted.\n\nExamples::\n..........\n\n      (constantp 1) =>  true\n      (constantp 'temp) =>  false\n      (constantp ''temp)) =>  true\n      (defconstant this-is-a-constant 'never-changing) =>  THIS-IS-A-CONSTANT\n      (constantp 'this-is-a-constant) =>  true\n      (constantp \"temp\") =>  true\n      (setq a 6) =>  6\n      (constantp a) =>  true\n      (constantp '(sin pi)) =>  implementation-dependent\n      (constantp '(car '(x))) =>  implementation-dependent\n      (constantp '(eql x x)) =>  implementation-dependent\n      (constantp '(typep x 'nil)) =>  implementation-dependent\n      (constantp '(typep x 't)) =>  implementation-dependent\n      (constantp '(values this-is-a-constant)) =>  implementation-dependent\n      (constantp '(values 'x 'y)) =>  implementation-dependent\n      (constantp '(let ((a '(a b c))) (+ (length a) 6))) =>  implementation-dependent\n\nAffected By::\n.............\n\nThe state of the global environment (e.g., which symbols have been\ndeclared to be the names of constant variables).\n\nSee Also::\n..........\n\n*Note defconstant::\n\n"
}