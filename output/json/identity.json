{
    "name": "identity",
    "prev": "equalp",
    "next": "complement",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "identity"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "identity",
                    "text": " object =>  object\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns its argument object.\n"
        },
        {
            "type": "Examples",
            "text": "      (identity 101) =>  101\n      (mapcan #'identity (list (list 1 2 3) '(4 5 6))) =>  (1 2 3 4 5 6)\n"
        },
        {
            "type": "Notes",
            "text": "identity is intended for use with functions that require a function as an\nargument.\n(eql x (identity x)) returns true for all possible values of x, but (eq x\n(identity x)) might return false when x is a number or character.\nidentity could be defined by\n     (defun identity (x) x)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: identity,  Next: complement,  Prev: equalp,  Up: Data and Control Flow Dictionary\n\nidentity                                                         [Function]\n---------------------------------------------------------------------------\n\n`identity'  object =>  object\n\nArguments and Values::\n......................\n\nobject--an object.\n\nDescription::\n.............\n\nReturns its argument object.\n\nExamples::\n..........\n\n      (identity 101) =>  101\n      (mapcan #'identity (list (list 1 2 3) '(4 5 6))) =>  (1 2 3 4 5 6)\n\nNotes::\n.......\n\nidentity is intended for use with functions that require a function as an\nargument.\n\n(eql x (identity x)) returns true for all possible values of x, but (eq x\n(identity x)) might return false when x is a number or character.\n\nidentity could be defined by\n\n     (defun identity (x) x)\n\n"
}