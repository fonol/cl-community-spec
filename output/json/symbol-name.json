{
    "name": "symbol-name",
    "prev": "symbol-function",
    "next": "symbol-package",
    "up": "Symbols Dictionary",
    "header": {
        "type": "Function",
        "text": "symbol-name"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "symbol-name",
                    "text": " symbol =>  name\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbol",
                    "desc": "a symbol."
                },
                {
                    "name": "name",
                    "desc": "a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "symbol-name returns the name of symbol.\nThe consequences are undefined if name is ever modified.\n"
        },
        {
            "type": "Examples",
            "text": "      (symbol-name 'temp) =>  \"TEMP\"\n      (symbol-name :start) =>  \"START\"\n      (symbol-name (gensym)) =>  \"G1234\" ;for example\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if symbol is not a symbol.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: symbol-name,  Next: symbol-package,  Prev: symbol-function,  Up: Symbols Dictionary\n\nsymbol-name                                                      [Function]\n---------------------------------------------------------------------------\n\n`symbol-name'  symbol =>  name\n\nArguments and Values::\n......................\n\nsymbol--a symbol.\n\nname--a string.\n\nDescription::\n.............\n\nsymbol-name returns the name of symbol.\n\nThe consequences are undefined if name is ever modified.\n\nExamples::\n..........\n\n      (symbol-name 'temp) =>  \"TEMP\"\n      (symbol-name :start) =>  \"START\"\n      (symbol-name (gensym)) =>  \"G1234\" ;for example\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if symbol is not a symbol.\n\n"
}