{
    "name": "make-instance",
    "prev": "remove-method",
    "next": "make-instances-obsolete",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "make-instance"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-instance",
                    "text": " class &rest initargs &key &allow-other-keys =>  instance\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-instance",
                    "text": " (class standard-class) &rest initargs\n"
                },
                {
                    "name": "make-instance",
                    "text": " (class symbol) &rest initargs\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "class",
                    "desc": "a class, or a symbol that names a class."
                },
                {
                    "name": "initargs",
                    "desc": "an initialization argument list."
                },
                {
                    "name": "instance",
                    "desc": "a fresh instance of class class."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function make-instance creates and returns a new instance of\nthe given class.\nIf the second of the above methods is selected, that method invokes\nmake-instance on the arguments (find-class class) and initargs.\nThe initialization arguments are checked within make-instance.\nThe generic function make-instance may be used as described in *Note\nObject Creation and Initialization::.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If any of the initialization arguments has not been declared as valid, an\nerror of type error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note defclass:: , *Note class-of:: , *Note allocate-instance:: , *Note\nInitialize-Instance:: , *Note Object Creation and Initialization::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-instance,  Next: make-instances-obsolete,  Prev: remove-method,  Up: Objects Dictionary\n\nmake-instance                                   [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`make-instance'  class &rest initargs &key &allow-other-keys =>  instance\n\nMethod Signatures::\n...................\n\n`make-instance'  (class standard-class) &rest initargs\n\n`make-instance'  (class symbol) &rest initargs\n\nArguments and Values::\n......................\n\nclass--a class, or a symbol that names a class.\n\ninitargs--an initialization argument list.\n\ninstance--a fresh instance of class class.\n\nDescription::\n.............\n\nThe generic function make-instance creates and returns a new instance of\nthe given class.\n\nIf the second of the above methods is selected, that method invokes\nmake-instance on the arguments (find-class class) and initargs.\n\nThe initialization arguments are checked within make-instance.\n\nThe generic function make-instance may be used as described in *Note\nObject Creation and Initialization::.\n\nExceptional Situations::\n........................\n\nIf any of the initialization arguments has not been declared as valid, an\nerror of type error is signaled.\n\nSee Also::\n..........\n\n*Note defclass:: , *Note class-of:: , *Note allocate-instance:: , *Note\nInitialize-Instance:: , *Note Object Creation and Initialization::\n\n"
}