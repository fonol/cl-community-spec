{
    "name": "Ordinary Lambda Lists",
    "prev": "Lambda Lists",
    "next": "Generic Function Lambda Lists",
    "up": "Lambda Lists",
    "header": {
        "type": null,
        "text": "Ordinary Lambda Lists"
    },
    "sections": [
        {
            "type": "",
            "text": "An ordinary lambda list is used to describe how a set of arguments is\nreceived by an ordinary function.  The defined names in Figure 3-12 are\nthose which use ordinary lambda lists:\n  define-method-combination  handler-case  restart-case  \n  defun                      labels                      \n  flet                       lambda                      \n  Figure 3-12: Standardized Operators that use Ordinary Lambda Lists\nAn ordinary lambda list can contain the lambda list keywords shown in\nFigure 3-13.\n  &allow-other-keys  &key       &rest  \n  &aux               &optional         \n  Figure 3-13: Lambda List Keywords used by Ordinary Lambda Lists\nEach element of a lambda list is either a parameter specifier or a lambda\nlist keyword.  Implementations are free to provide additional lambda list\nkeywords.  For a list of all lambda list keywords used by the\nimplementation, see lambda-list-keywords.\nThe syntax for ordinary lambda lists is as follows:\nlambda-list ::=({var}*\n                 [&optional {var | (var [init-form [supplied-p-parameter]])}*]\n                 [&rest var]\n                 [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* pt [&allow-other-keys]]\n                 [&aux {var | (var [init-form])}*])                \nA var or supplied-p-parameter must be a symbol that is not the name of a\nconstant variable.\nAn init-form can be any form.  Whenever any init-form is evaluated for any\nparameter specifier, that form may refer to any parameter variable to the\nleft of the specifier in which the init-form appears, including any\nsupplied-p-parameter variables, and may rely on the fact that no other\nparameter variable has yet been bound (including its own parameter\nvariable).\nA keyword-name can be any symbol, but by convention is normally a\nkeyword_1; all standardized functions follow that convention.\nAn ordinary lambda list has five parts, any or all of which may be empty.\nFor information about the treatment of argument mismatches, see *Note\nError Checking in Function Calls::.\n* Menu:\n* Specifiers for the required parameters::\n* Specifiers for optional parameters::\n* A specifier for a rest parameter::\n* Specifiers for keyword parameters::\n* Suppressing Keyword Argument Checking::\n* Examples of Suppressing Keyword Argument Checking::\n* Specifiers for &aux variables::\n* Examples of Ordinary Lambda Lists::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Ordinary Lambda Lists,  Next: Generic Function Lambda Lists,  Prev: Lambda Lists,  Up: Lambda Lists\n\nOrdinary Lambda Lists\n---------------------\n\nAn ordinary lambda list is used to describe how a set of arguments is\nreceived by an ordinary function.  The defined names in Figure 3-12 are\nthose which use ordinary lambda lists:\n\n  define-method-combination  handler-case  restart-case  \n  defun                      labels                      \n  flet                       lambda                      \n\n  Figure 3-12: Standardized Operators that use Ordinary Lambda Lists\n\n\nAn ordinary lambda list can contain the lambda list keywords shown in\nFigure 3-13.\n\n  &allow-other-keys  &key       &rest  \n  &aux               &optional         \n\n  Figure 3-13: Lambda List Keywords used by Ordinary Lambda Lists\n\n\nEach element of a lambda list is either a parameter specifier or a lambda\nlist keyword.  Implementations are free to provide additional lambda list\nkeywords.  For a list of all lambda list keywords used by the\nimplementation, see lambda-list-keywords.\n\nThe syntax for ordinary lambda lists is as follows:\n\nlambda-list ::=({var}*\n                 [&optional {var | (var [init-form [supplied-p-parameter]])}*]\n                 [&rest var]\n                 [&key {var | ({var | (keyword-name var)} [init-form [supplied-p-parameter]])}* pt [&allow-other-keys]]\n                 [&aux {var | (var [init-form])}*])                \n\nA var or supplied-p-parameter must be a symbol that is not the name of a\nconstant variable.\n\nAn init-form can be any form.  Whenever any init-form is evaluated for any\nparameter specifier, that form may refer to any parameter variable to the\nleft of the specifier in which the init-form appears, including any\nsupplied-p-parameter variables, and may rely on the fact that no other\nparameter variable has yet been bound (including its own parameter\nvariable).\n\nA keyword-name can be any symbol, but by convention is normally a\nkeyword_1; all standardized functions follow that convention.\n\nAn ordinary lambda list has five parts, any or all of which may be empty.\nFor information about the treatment of argument mismatches, see *Note\nError Checking in Function Calls::.\n\n* Menu:\n\n* Specifiers for the required parameters::\n* Specifiers for optional parameters::\n* A specifier for a rest parameter::\n* Specifiers for keyword parameters::\n* Suppressing Keyword Argument Checking::\n* Examples of Suppressing Keyword Argument Checking::\n* Specifiers for &aux variables::\n* Examples of Ordinary Lambda Lists::\n\n"
}