{
    "name": "initialize-instance",
    "prev": "add-method",
    "next": "class-name",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "initialize-instance"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "initialize-instance",
                    "text": " instance &rest initargs &key &allow-other-keys =>instance\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "initialize-instance",
                    "text": " (instance standard-object) &rest initargs\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "instance",
                    "desc": "an object."
                },
                {
                    "name": "initargs",
                    "desc": "a defaulted initialization argument list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Called by make-instance to initialize a newly created instance.  The\ngeneric function is called with the new instance and the defaulted\ninitialization argument list.\nThe system-supplied primary method on initialize-instance initializes the\nslots of the instance with values according to the initargs and the\n:initform forms of the slots.  It does this by calling the generic\nfunction shared-initialize with the following arguments: the instance, t\n(this indicates that all slots for which no initialization arguments are\nprovided should be initialized according to their :initform forms), and\nthe initargs.\nProgrammers can define methods for initialize-instance to specify actions\nto be taken when an instance is initialized.  If only after methods are\ndefined, they will be run after the system-supplied primary method for\ninitialization and therefore will not interfere with the default behavior\nof initialize-instance.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Shared-Initialize:: , *Note make-instance:: , *Note slot-boundp:: ,\n*Note slot-makunbound:: , *Note Object Creation and Initialization::,\n*Note Rules for Initialization Arguments::, *Note Declaring the Validity\nof Initialization Arguments::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: initialize-instance,  Next: class-name,  Prev: add-method,  Up: Objects Dictionary\n\ninitialize-instance                             [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`initialize-instance'  instance &rest initargs &key &allow-other-keys =>\ninstance\n\nMethod Signatures::\n...................\n\n`initialize-instance'  (instance standard-object) &rest initargs\n\nArguments and Values::\n......................\n\ninstance--an object.\n\ninitargs--a defaulted initialization argument list.\n\nDescription::\n.............\n\nCalled by make-instance to initialize a newly created instance.  The\ngeneric function is called with the new instance and the defaulted\ninitialization argument list.\n\nThe system-supplied primary method on initialize-instance initializes the\nslots of the instance with values according to the initargs and the\n:initform forms of the slots.  It does this by calling the generic\nfunction shared-initialize with the following arguments: the instance, t\n(this indicates that all slots for which no initialization arguments are\nprovided should be initialized according to their :initform forms), and\nthe initargs.\n\nProgrammers can define methods for initialize-instance to specify actions\nto be taken when an instance is initialized.  If only after methods are\ndefined, they will be run after the system-supplied primary method for\ninitialization and therefore will not interfere with the default behavior\nof initialize-instance.\n\nSee Also::\n..........\n\n*Note Shared-Initialize:: , *Note make-instance:: , *Note slot-boundp:: ,\n*Note slot-makunbound:: , *Note Object Creation and Initialization::,\n*Note Rules for Initialization Arguments::, *Note Declaring the Validity\nof Initialization Arguments::\n\n"
}