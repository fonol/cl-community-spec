{
    "name": "disassemble",
    "prev": "get-internal-run-time",
    "next": "documentation",
    "up": "Environment Dictionary",
    "header": {
        "type": "Function",
        "text": "disassemble"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "disassemble",
                    "text": " fn =>  nil\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "fn",
                    "desc": "an extended function designator or a lambda expression."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The function disassemble is a debugging aid that composes symbolic\ninstructions or expressions in some implementation-dependent language\nwhich represent the code used to produce the function which is or is named\nby the argument fn.  The result is displayed to standard output in an\nimplementation-dependent format.\nIf fn is a lambda expression or interpreted function, it is compiled first\nand the result is disassembled.\nIf the fn designator is a function name, the function that it names is\ndisassembled.\n(If that function is an interpreted function, it is first compiled but the\nresult of this implicit compilation is not installed.)\n"
        },
        {
            "type": "Examples",
            "text": "      (defun f (a) (1+ a)) =>  F\n      (eq (symbol-function 'f)\n          (progn (disassemble 'f)\n                 (symbol-function 'f))) =>  true\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if fn is not an extended\nfunction designator or a lambda expression.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: disassemble,  Next: documentation,  Prev: get-internal-run-time,  Up: Environment Dictionary\n\ndisassemble                                                      [Function]\n---------------------------------------------------------------------------\n\n`disassemble'  fn =>  nil\n\nArguments and Values::\n......................\n\nfn--an extended function designator or a lambda expression.\n\nDescription::\n.............\n\nThe function disassemble is a debugging aid that composes symbolic\ninstructions or expressions in some implementation-dependent language\nwhich represent the code used to produce the function which is or is named\nby the argument fn.  The result is displayed to standard output in an\nimplementation-dependent format.\n\nIf fn is a lambda expression or interpreted function, it is compiled first\nand the result is disassembled.\n\nIf the fn designator is a function name, the function that it names is\ndisassembled.\n\n(If that function is an interpreted function, it is first compiled but the\nresult of this implicit compilation is not installed.)\n\nExamples::\n..........\n\n      (defun f (a) (1+ a)) =>  F\n      (eq (symbol-function 'f)\n          (progn (disassemble 'f)\n                 (symbol-function 'f))) =>  true\n\nAffected By::\n.............\n\n*standard-output*.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if fn is not an extended\nfunction designator or a lambda expression.\n\n"
}