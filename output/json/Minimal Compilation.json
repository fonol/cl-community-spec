{
    "name": "Minimal Compilation",
    "prev": "Notes about the Implementation of Compiler Macros",
    "next": "Semantic Constraints",
    "up": "Compilation Semantics",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Minimal Compilation",
            "text": "Minimal compilation is defined as follows:\n*\n     All compiler macro calls appearing in the source code being compiled\n     are expanded, if at all, at compile time; they will not be expanded\n     at run time.\n*\n     All macro and symbol macro calls appearing in the source code being\n     compiled are expanded at compile time in such a way that they will\n     not be expanded again at run time.  macrolet\n     and symbol-macrolet\n     are effectively replaced by forms corresponding to their bodies in\n     which calls to macros are replaced by their expansions.\n*\n     The first argument in a load-time-value\n     form in source code processed by compile\n     is evaluated at compile time; in source code processed by compile-file\n     , the compiler arranges for it to be evaluated at load time.  In\n     either case, the result of the evaluation is remembered and used\n     later as the value of the load-time-value form at execution time.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Minimal Compilation,  Next: Semantic Constraints,  Prev: Notes about the Implementation of Compiler Macros,  Up: Compilation Semantics\n\nMinimal Compilation\n...................\n\nMinimal compilation is defined as follows:\n\n*\n     All compiler macro calls appearing in the source code being compiled\n     are expanded, if at all, at compile time; they will not be expanded\n     at run time.\n\n*\n     All macro and symbol macro calls appearing in the source code being\n     compiled are expanded at compile time in such a way that they will\n     not be expanded again at run time.  macrolet\n\n     and symbol-macrolet\n\n     are effectively replaced by forms corresponding to their bodies in\n     which calls to macros are replaced by their expansions.\n\n*\n     The first argument in a load-time-value\n\n     form in source code processed by compile\n\n     is evaluated at compile time; in source code processed by compile-file\n     , the compiler arranges for it to be evaluated at load time.  In\n     either case, the result of the evaluation is remembered and used\n     later as the value of the load-time-value form at execution time.\n\n"
}