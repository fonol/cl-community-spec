{
    "name": "not",
    "prev": "nil",
    "next": "t",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "not"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "not",
                    "text": " x =>  boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "x",
                    "desc": "a generalized boolean (i.e., any object)."
                },
                {
                    "name": "boolean",
                    "desc": "a boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns t if x is false; otherwise, returns nil.\n"
        },
        {
            "type": "Examples",
            "text": "      (not nil) =>  T\n      (not '()) =>  T\n      (not (integerp 'sss)) =>  T\n      (not (integerp 1)) =>  NIL\n      (not 3.7) =>  NIL\n      (not 'apple) =>  NIL\n"
        },
        {
            "type": "See Also",
            "text": "*Note null::\n"
        },
        {
            "type": "Notes",
            "text": "not is intended to be used to invert the `truth value' of a boolean (or\ngeneralized boolean) whereas null is intended to be used to test for the\nempty list.  Operationally, not and null compute the same result; which to\nuse is a matter of style.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: not,  Next: t,  Prev: nil,  Up: Data and Control Flow Dictionary\n\nnot                                                              [Function]\n---------------------------------------------------------------------------\n\n`not'  x =>  boolean\n\nArguments and Values::\n......................\n\nx--a generalized boolean (i.e., any object).\n\nboolean--a boolean.\n\nDescription::\n.............\n\nReturns t if x is false; otherwise, returns nil.\n\nExamples::\n..........\n\n      (not nil) =>  T\n      (not '()) =>  T\n      (not (integerp 'sss)) =>  T\n      (not (integerp 1)) =>  NIL\n      (not 3.7) =>  NIL\n      (not 'apple) =>  NIL\n\nSee Also::\n..........\n\n*Note null::\n\nNotes::\n.......\n\nnot is intended to be used to invert the `truth value' of a boolean (or\ngeneralized boolean) whereas null is intended to be used to test for the\nempty list.  Operationally, not and null compute the same result; which to\nuse is a matter of style.\n\n"
}