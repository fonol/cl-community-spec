{
    "name": "slot-boundp",
    "prev": "change-class",
    "next": "slot-exists-p",
    "up": "Objects Dictionary",
    "header": {
        "type": "Function",
        "text": "slot-boundp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "slot-boundp",
                    "text": " instance slot-name =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "instance",
                    "desc": "an object."
                },
                {
                    "name": "slot-name",
                    "desc": "a symbol naming a slot of instance."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if the slot named slot-name in instance is bound; otherwise,\nreturns false.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If no slot of the name slot-name exists in the instance, slot-missing is\ncalled as follows:\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'slot-boundp)\n(If slot-missing is invoked and returns a value, a boolean equivalent to\nits primary value is returned by slot-boundp.)\nThe specific behavior depends on instance's metaclass.  An error is never\nsignaled if instance has metaclass standard-class.  An error is always\nsignaled if instance has metaclass built-in-class.  The consequences are\nundefined if instance has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note slot-makunbound:: , *Note slot-missing::\n"
        },
        {
            "type": "Notes",
            "text": "The function slot-boundp allows for writing after methods on\ninitialize-instance in order to initialize only those slots that have not\nalready been bound.\nAlthough no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-boundp using the function\nslot-boundp-using-class described in the Metaobject Protocol.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: slot-boundp,  Next: slot-exists-p,  Prev: change-class,  Up: Objects Dictionary\n\nslot-boundp                                                      [Function]\n---------------------------------------------------------------------------\n\n`slot-boundp'  instance slot-name =>  generalized-boolean\n\nArguments and Values::\n......................\n\ninstance--an object.\n\nslot-name--a symbol naming a slot of instance.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if the slot named slot-name in instance is bound; otherwise,\nreturns false.\n\nExceptional Situations::\n........................\n\nIf no slot of the name slot-name exists in the instance, slot-missing is\ncalled as follows:\n\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'slot-boundp)\n\n(If slot-missing is invoked and returns a value, a boolean equivalent to\nits primary value is returned by slot-boundp.)\n\nThe specific behavior depends on instance's metaclass.  An error is never\nsignaled if instance has metaclass standard-class.  An error is always\nsignaled if instance has metaclass built-in-class.  The consequences are\nundefined if instance has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n\nSee Also::\n..........\n\n*Note slot-makunbound:: , *Note slot-missing::\n\nNotes::\n.......\n\nThe function slot-boundp allows for writing after methods on\ninitialize-instance in order to initialize only those slots that have not\nalready been bound.\n\nAlthough no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-boundp using the function\nslot-boundp-using-class described in the Metaobject Protocol.\n\n"
}