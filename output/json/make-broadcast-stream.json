{
    "name": "make-broadcast-stream",
    "prev": "broadcast-stream-streams",
    "next": "make-two-way-stream",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "make-broadcast-stream"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-broadcast-stream",
                    "text": " &rest streams =>  broadcast-stream\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "stream",
                    "desc": "an output stream."
                },
                {
                    "name": "broadcast-stream",
                    "desc": "a broadcast stream."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a broadcast stream.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq a-stream (make-string-output-stream)\n             b-stream (make-string-output-stream)) =>  #<String Output Stream>\n      (format (make-broadcast-stream a-stream b-stream)\n               \"this will go to both streams\") =>  NIL\n      (get-output-stream-string a-stream) =>  \"this will go to both streams\"\n      (get-output-stream-string b-stream) =>  \"this will go to both streams\"\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if any stream is not an output\nstream.\n"
        },
        {
            "type": "See Also",
            "text": "*Note broadcast-stream-streams::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-broadcast-stream,  Next: make-two-way-stream,  Prev: broadcast-stream-streams,  Up: Streams Dictionary\n\nmake-broadcast-stream                                            [Function]\n---------------------------------------------------------------------------\n\n`make-broadcast-stream'  &rest streams =>  broadcast-stream\n\nArguments and Values::\n......................\n\nstream--an output stream.\n\nbroadcast-stream--a broadcast stream.\n\nDescription::\n.............\n\nReturns a broadcast stream.\n\nExamples::\n..........\n\n      (setq a-stream (make-string-output-stream)\n             b-stream (make-string-output-stream)) =>  #<String Output Stream>\n      (format (make-broadcast-stream a-stream b-stream)\n               \"this will go to both streams\") =>  NIL\n      (get-output-stream-string a-stream) =>  \"this will go to both streams\"\n      (get-output-stream-string b-stream) =>  \"this will go to both streams\"\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if any stream is not an output\nstream.\n\nSee Also::\n..........\n\n*Note broadcast-stream-streams::\n\n"
}