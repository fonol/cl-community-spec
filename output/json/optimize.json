{
    "name": "optimize",
    "prev": "declaration",
    "next": "special",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Declaration",
        "text": "optimize"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "text": "(optimize {quality | (quality value)}*)\n"
        },
        {
            "type": "Arguments",
            "text": "quality--an optimize quality.\nvalue--one of the integers 0, 1, 2, or 3.\n"
        },
        {
            "type": "Valid Context",
            "text": "declaration or proclamation\n"
        },
        {
            "type": "Description",
            "text": "Advises the compiler that each quality should be given attention according\nto the specified corresponding value.  Each quality must be a symbol\nnaming an optimize quality; the names and meanings of the standard\noptimize qualities are shown in Figure 3-25.\n  Name               Meaning                            \n  compilation-speed  speed of the compilation process   \n  debug              ease of debugging                  \n  safety             run-time error checking            \n  space              both code size and run-time space  \n  speed              speed of the object code           \n             Figure 3-25: Optimize qualities           \nThere may be other, implementation-defined optimize qualities.\nA value 0 means that the corresponding quality is totally unimportant, and\n3 that the quality is extremely important; 1 and 2 are intermediate\nvalues, with 1 the neutral value.  (quality 3) can be abbreviated to\nquality.\nNote that code which has the optimization (safety 3), or just safety, is\ncalled safe code.\nThe consequences are unspecified if a quality appears more than once with\ndifferent values.\n"
        },
        {
            "type": "Examples",
            "text": "      (defun often-used-subroutine (x y)\n        (declare (optimize (safety 2)))\n        (error-check x y)\n        (hairy-setup x)\n        (do ((i 0 (+ i 1))\n             (z x (cdr z)))\n            ((null z))\n          ;; This inner loop really needs to burn.\n          (declare (optimize speed))\n          (declare (fixnum i))\n          ))\n"
        },
        {
            "type": "See Also",
            "text": "declare, *Note declaim:: , *Note proclaim:: , *Note Declaration Scope::\n"
        },
        {
            "type": "Notes",
            "text": "An optimize declaration never applies to either a variable or a function\nbinding.  An optimize declaration can only be a free declaration.  For\nmore information, see *Note Declaration Scope::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: optimize,  Next: special,  Prev: declaration,  Up: Evaluation and Compilation Dictionary\n\noptimize                                                      [Declaration]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n(optimize {quality | (quality value)}*)\n\nArguments::\n...........\n\nquality--an optimize quality.\n\nvalue--one of the integers 0, 1, 2, or 3.\n\nValid Context::\n...............\n\ndeclaration or proclamation\n\nDescription::\n.............\n\nAdvises the compiler that each quality should be given attention according\nto the specified corresponding value.  Each quality must be a symbol\nnaming an optimize quality; the names and meanings of the standard\noptimize qualities are shown in Figure 3-25.\n\n  Name               Meaning                            \n  compilation-speed  speed of the compilation process   \n  debug              ease of debugging                  \n  safety             run-time error checking            \n  space              both code size and run-time space  \n  speed              speed of the object code           \n\n             Figure 3-25: Optimize qualities           \n\n\nThere may be other, implementation-defined optimize qualities.\n\nA value 0 means that the corresponding quality is totally unimportant, and\n3 that the quality is extremely important; 1 and 2 are intermediate\nvalues, with 1 the neutral value.  (quality 3) can be abbreviated to\nquality.\n\nNote that code which has the optimization (safety 3), or just safety, is\ncalled safe code.\n\nThe consequences are unspecified if a quality appears more than once with\ndifferent values.\n\nExamples::\n..........\n\n      (defun often-used-subroutine (x y)\n        (declare (optimize (safety 2)))\n        (error-check x y)\n        (hairy-setup x)\n        (do ((i 0 (+ i 1))\n             (z x (cdr z)))\n            ((null z))\n          ;; This inner loop really needs to burn.\n          (declare (optimize speed))\n          (declare (fixnum i))\n          ))\n\nSee Also::\n..........\n\ndeclare, *Note declaim:: , *Note proclaim:: , *Note Declaration Scope::\n\nNotes::\n.......\n\nAn optimize declaration never applies to either a variable or a function\nbinding.  An optimize declaration can only be a free declaration.  For\nmore information, see *Note Declaration Scope::.\n\n"
}