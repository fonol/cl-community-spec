{
    "name": "use-package",
    "prev": "unuse-package",
    "next": "defpackage",
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "use-package"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "use-package",
                    "text": " packages-to-use &optional package =>  t\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "packages-to-use",
                    "desc": "a designator for a list of package designators.  The"
                },
                {
                    "name": "packages-to-use",
                    "desc": "a designator for a list of package designators.  TheKEYWORD package may not be supplied.\n"
                },
                {
                    "name": "package",
                    "desc": "a package designator.  The KEYWORD package cannot be supplied."
                }
            ]
        },
        {
            "type": "Description",
            "text": "use-package causes package to inherit all the external symbols of\npackages-to-use.  The inherited symbols become accessible as internal\nsymbols of package.\nPackages-to-use are added to the use list of package if they are not there\nalready.  All external symbols in packages-to-use become accessible in\npackage as internal symbols.  use-package does not cause any new symbols\nto be present in package but only makes them accessible by inheritance.\nuse-package checks for name conflicts between the newly imported symbols\nand those already accessible in package.  A name conflict in use-package\nbetween two external symbols inherited by package from packages-to-use may\nbe resolved in favor of either symbol by importing one of them into\npackage and making it a shadowing symbol.\n"
        },
        {
            "type": "Examples",
            "text": "      (export (intern \"LAND-FILL\" (make-package 'trash)) 'trash) =>  T\n      (find-symbol \"LAND-FILL\" (make-package 'temp)) =>  NIL, NIL\n      (package-use-list 'temp) =>  (#<PACKAGE \"TEMP\">)\n      (use-package 'trash 'temp) =>  T\n      (package-use-list 'temp) =>  (#<PACKAGE \"TEMP\"> #<PACKAGE \"TRASH\">)\n      (find-symbol \"LAND-FILL\" 'temp) =>  TRASH:LAND-FILL, :INHERITED\n"
        },
        {
            "type": "Side Effects",
            "text": "The use list of package may be modified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note unuse-package:: , *Note package-use-list:: , *Note Package Concepts::\n"
        },
        {
            "type": "Notes",
            "text": "It is permissible for a package P_1 to use a package P_2 even if P_2\nalready uses P_1.  The using of packages is not transitive, so no problem\nresults from the apparent circularity.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: use-package,  Next: defpackage,  Prev: unuse-package,  Up: Packages Dictionary\n\nuse-package                                                      [Function]\n---------------------------------------------------------------------------\n\n`use-package'  packages-to-use &optional package =>  t\n\nArguments and Values::\n......................\n\npackages-to-use--a designator for a list of package designators.  The\nKEYWORD package may not be supplied.\n\npackage--a package designator.  The KEYWORD package cannot be supplied.\nThe default is the current package.\n\nDescription::\n.............\n\nuse-package causes package to inherit all the external symbols of\npackages-to-use.  The inherited symbols become accessible as internal\nsymbols of package.\n\nPackages-to-use are added to the use list of package if they are not there\nalready.  All external symbols in packages-to-use become accessible in\npackage as internal symbols.  use-package does not cause any new symbols\nto be present in package but only makes them accessible by inheritance.\n\nuse-package checks for name conflicts between the newly imported symbols\nand those already accessible in package.  A name conflict in use-package\nbetween two external symbols inherited by package from packages-to-use may\nbe resolved in favor of either symbol by importing one of them into\npackage and making it a shadowing symbol.\n\nExamples::\n..........\n\n      (export (intern \"LAND-FILL\" (make-package 'trash)) 'trash) =>  T\n      (find-symbol \"LAND-FILL\" (make-package 'temp)) =>  NIL, NIL\n      (package-use-list 'temp) =>  (#<PACKAGE \"TEMP\">)\n      (use-package 'trash 'temp) =>  T\n      (package-use-list 'temp) =>  (#<PACKAGE \"TEMP\"> #<PACKAGE \"TRASH\">)\n      (find-symbol \"LAND-FILL\" 'temp) =>  TRASH:LAND-FILL, :INHERITED\n\nSide Effects::\n..............\n\nThe use list of package may be modified.\n\nSee Also::\n..........\n\n*Note unuse-package:: , *Note package-use-list:: , *Note Package Concepts::\n\nNotes::\n.......\n\nIt is permissible for a package P_1 to use a package P_2 even if P_2\nalready uses P_1.  The using of packages is not transitive, so no problem\nresults from the apparent circularity.\n\n"
}