{
    "name": "with-output-to-string",
    "prev": "with-input-from-string",
    "next": "*debug-io*",
    "up": "Streams Dictionary",
    "header": {
        "type": "Macro",
        "text": "with-output-to-string"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "with-output-to-string",
                    "text": " (var &optional string-form &key element-type){declaration}* {form}*\n=>  {result}*\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "var",
                    "desc": "a variable name."
                },
                {
                    "name": "string-form",
                    "desc": "a form or nil; if non-nil, evaluated to produce string."
                },
                {
                    "name": "string",
                    "desc": "a string that has a fill pointer."
                },
                {
                    "name": "element-type",
                    "desc": "a type specifier; evaluated.The default is character.\n"
                },
                {
                    "name": "declaration",
                    "desc": "a declare expression; not evaluated."
                },
                {
                    "name": "forms",
                    "desc": "an implicit progn."
                },
                {
                    "name": "results",
                    "desc": "If a string-form is not supplied or nil, a string; otherwise, the"
                }
            ]
        },
        {
            "type": "Description",
            "text": "with-output-to-string creates a\ncharacter output stream, performs a series of operations that may send\nresults to this stream, and then closes the stream.\nThe element-type names the type of the elements of the stream; a stream is\nconstructed of the most specialized type that can accommodate elements of\nthe given type.\nThe body is executed as an implicit progn with var bound to an output\nstring stream.  All output to that string stream is saved in a string.\nIf string is supplied, element-type is ignored, and the output is\nincrementally appended to string as if by use of vector-push-extend.\nThe output stream is automatically closed on exit from\nwith-output-from-string, no matter whether the exit is normal or abnormal.\nThe output string stream to which the variable var is bound has dynamic\nextent; its extent ends when the form is exited.\nIf no string is provided, then with-output-from-string\nproduces a stream that accepts characters and returns a string of the\nindicated element-type.\nIf string is provided, with-output-to-string returns the results of\nevaluating the last form.\nThe consequences are undefined if an attempt is made to assign the\nvariable var.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq fstr (make-array '(0) :element-type 'base-char\n                                  :fill-pointer 0 :adjustable t)) =>  \"\"\n      (with-output-to-string (s fstr)\n         (format s \"here's some output\")\n         (input-stream-p s)) =>  false\n      fstr =>  \"here's some output\"\n"
        },
        {
            "type": "Side Effects",
            "text": "The string is modified.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if destructive modifications are performed\ndirectly on the string during the dynamic extent of the call.\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-string-output-stream:: , vector-push-extend,\n*Note Traversal Rules and Side Effects::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: with-output-to-string,  Next: *debug-io*,  Prev: with-input-from-string,  Up: Streams Dictionary\n\nwith-output-to-string                                               [Macro]\n---------------------------------------------------------------------------\n\n`with-output-to-string'  (var &optional string-form &key element-type)\n{declaration}* {form}*\n=>  {result}*\n\nArguments and Values::\n......................\n\nvar--a variable name.\n\nstring-form--a form or nil; if non-nil, evaluated to produce string.\n\nstring--a string that has a fill pointer.\n\nelement-type--a type specifier; evaluated.\n\nThe default is character.\n\ndeclaration--a declare expression; not evaluated.\n\nforms--an implicit progn.\n\nresults--If a string-form is not supplied or nil, a string; otherwise, the\nvalues returned by the forms.\n\nDescription::\n.............\n\nwith-output-to-string creates a\n\ncharacter output stream, performs a series of operations that may send\nresults to this stream, and then closes the stream.\n\nThe element-type names the type of the elements of the stream; a stream is\nconstructed of the most specialized type that can accommodate elements of\nthe given type.\n\nThe body is executed as an implicit progn with var bound to an output\nstring stream.  All output to that string stream is saved in a string.\n\nIf string is supplied, element-type is ignored, and the output is\nincrementally appended to string as if by use of vector-push-extend.\n\nThe output stream is automatically closed on exit from\nwith-output-from-string, no matter whether the exit is normal or abnormal.\n\nThe output string stream to which the variable var is bound has dynamic\nextent; its extent ends when the form is exited.\n\nIf no string is provided, then with-output-from-string\n\nproduces a stream that accepts characters and returns a string of the\nindicated element-type.\n\nIf string is provided, with-output-to-string returns the results of\nevaluating the last form.\n\nThe consequences are undefined if an attempt is made to assign the\nvariable var.\n\nExamples::\n..........\n\n      (setq fstr (make-array '(0) :element-type 'base-char\n                                  :fill-pointer 0 :adjustable t)) =>  \"\"\n      (with-output-to-string (s fstr)\n         (format s \"here's some output\")\n         (input-stream-p s)) =>  false\n      fstr =>  \"here's some output\"\n\nSide Effects::\n..............\n\nThe string is modified.\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if destructive modifications are performed\ndirectly on the string during the dynamic extent of the call.\n\nSee Also::\n..........\n\n*Note make-string-output-stream:: , vector-push-extend,\n\n*Note Traversal Rules and Side Effects::\n\n"
}