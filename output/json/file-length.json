{
    "name": "file-length",
    "prev": "write-sequence",
    "next": "file-position",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "file-length"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "file-length",
                    "text": " stream =>  length\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "stream",
                    "desc": "a stream associated with a file."
                },
                {
                    "name": "length",
                    "desc": "a non-negative integer or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "file-length returns the length of stream, or nil if the length cannot be\ndetermined.\nFor a binary file, the length is measured in units of the element type of\nthe stream.\n"
        },
        {
            "type": "Examples",
            "text": "      (with-open-file (s \"decimal-digits.text\"\n                         :direction :output :if-exists :error)\n        (princ \"0123456789\" s)\n        (truename s))\n     =>  #P\"A:>Joe>decimal-digits.text.1\"\n      (with-open-file (s \"decimal-digits.text\")\n        (file-length s))\n     =>  10\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if stream is not a stream\nassociated with a file.\n"
        },
        {
            "type": "See Also",
            "text": "*Note open::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: file-length,  Next: file-position,  Prev: write-sequence,  Up: Streams Dictionary\n\nfile-length                                                      [Function]\n---------------------------------------------------------------------------\n\n`file-length'  stream =>  length\n\nArguments and Values::\n......................\n\nstream--a stream associated with a file.\n\nlength--a non-negative integer or nil.\n\nDescription::\n.............\n\nfile-length returns the length of stream, or nil if the length cannot be\ndetermined.\n\nFor a binary file, the length is measured in units of the element type of\nthe stream.\n\nExamples::\n..........\n\n      (with-open-file (s \"decimal-digits.text\"\n                         :direction :output :if-exists :error)\n        (princ \"0123456789\" s)\n        (truename s))\n     =>  #P\"A:>Joe>decimal-digits.text.1\"\n      (with-open-file (s \"decimal-digits.text\")\n        (file-length s))\n     =>  10\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if stream is not a stream\nassociated with a file.\n\nSee Also::\n..........\n\n*Note open::\n\n"
}