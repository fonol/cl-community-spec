{
    "name": "code-char",
    "prev": "char-int",
    "next": "char-code-limit",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "code-char"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "code-char",
                    "text": " code =>  char-p\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "code",
                    "desc": "a character code."
                },
                {
                    "name": "char-p",
                    "desc": "a character or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a character with the code attribute given by code.  If no such\ncharacter exists and one cannot be created, nil is returned.\n"
        },
        {
            "type": "Examples",
            "text": "     (code-char 65.) =>  #\\A  ;in an implementation using ASCII codes\n     (code-char (char-code #\\Space)) =>  #\\Space  ;in any implementation\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation's character encoding.\n"
        },
        {
            "type": "See Also",
            "text": "*Note char-code::\n"
        },
        {
            "type": "Notes",
            "text": ""
        }
    ],
    "_otext": "File: gcl.info,  Node: code-char,  Next: char-code-limit,  Prev: char-int,  Up: Characters Dictionary\n\ncode-char                                                        [Function]\n---------------------------------------------------------------------------\n\n`code-char'  code =>  char-p\n\nArguments and Values::\n......................\n\ncode--a character code.\n\nchar-p--a character or nil.\n\nDescription::\n.............\n\nReturns a character with the code attribute given by code.  If no such\ncharacter exists and one cannot be created, nil is returned.\n\nExamples::\n..........\n\n     (code-char 65.) =>  #\\A  ;in an implementation using ASCII codes\n     (code-char (char-code #\\Space)) =>  #\\Space  ;in any implementation\n\nAffected By::\n.............\n\nThe implementation's character encoding.\n\nSee Also::\n..........\n\n*Note char-code::\n\nNotes::\n.......\n\n"
}