{
    "name": "Examples of Suppressing Keyword Argument Checking",
    "prev": "Suppressing Keyword Argument Checking",
    "next": "Specifiers for @b{&aux} variables",
    "up": "Ordinary Lambda Lists",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Suppressing Keyword Argument Checking",
            "text": "     ;;; The caller can supply :ALLOW-OTHER-KEYS T to suppress checking.\n      ((lambda (&key x) x) :x 1 :y 2 :allow-other-keys t) =>  1\n     ;;; The callee can use &ALLOW-OTHER-KEYS to suppress checking.\n      ((lambda (&key x &allow-other-keys) x) :x 1 :y 2) =>  1\n     ;;; :ALLOW-OTHER-KEYS NIL is always permitted.\n      ((lambda (&key) t) :allow-other-keys nil) =>  T\n     ;;; As with other keyword arguments, only the left-most pair\n     ;;; named :ALLOW-OTHER-KEYS has any effect.\n      ((lambda (&key x) x)\n       :x 1 :y 2 :allow-other-keys t :allow-other-keys nil)\n     =>  1\n     ;;; Only the left-most pair named :ALLOW-OTHER-KEYS has any effect,\n     ;;; so in safe code this signals a PROGRAM-ERROR (and might enter the\n     ;;; debugger).  In unsafe code, the consequences are undefined.\n      ((lambda (&key x) x)                   ;This call is not valid\n       :x 1 :y 2 :allow-other-keys nil :allow-other-keys t)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Suppressing Keyword Argument Checking,  Next: Specifiers for @b{&aux} variables,  Prev: Suppressing Keyword Argument Checking,  Up: Ordinary Lambda Lists\n\nExamples of Suppressing Keyword Argument Checking\n.................................................\n\n     ;;; The caller can supply :ALLOW-OTHER-KEYS T to suppress checking.\n      ((lambda (&key x) x) :x 1 :y 2 :allow-other-keys t) =>  1\n     ;;; The callee can use &ALLOW-OTHER-KEYS to suppress checking.\n      ((lambda (&key x &allow-other-keys) x) :x 1 :y 2) =>  1\n     ;;; :ALLOW-OTHER-KEYS NIL is always permitted.\n      ((lambda (&key) t) :allow-other-keys nil) =>  T\n     ;;; As with other keyword arguments, only the left-most pair\n     ;;; named :ALLOW-OTHER-KEYS has any effect.\n      ((lambda (&key x) x)\n       :x 1 :y 2 :allow-other-keys t :allow-other-keys nil)\n     =>  1\n     ;;; Only the left-most pair named :ALLOW-OTHER-KEYS has any effect,\n     ;;; so in safe code this signals a PROGRAM-ERROR (and might enter the\n     ;;; debugger).  In unsafe code, the consequences are undefined.\n      ((lambda (&key x) x)                   ;This call is not valid\n       :x 1 :y 2 :allow-other-keys nil :allow-other-keys t)\n\n"
}