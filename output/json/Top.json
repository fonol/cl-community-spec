{
    "name": "Top",
    "prev": null,
    "next": "Introduction (Introduction)",
    "up": null,
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": "* Menu:\n* Introduction (Introduction)::\n* Syntax::\n* Evaluation and Compilation::\n* Types and Classes::\n* Data and Control Flow::\n* Iteration::\n* Objects::\n* Structures::\n* Conditions::\n* Symbols::\n* Packages::\n* Numbers (Numbers)::\n* Characters::\n* Conses::\n* Arrays::\n* Strings::\n* Sequences::\n* Hash Tables::\n* Filenames::\n* Files::\n* Streams::\n* Printer::\n* Reader::\n* System Construction::\n* Environment::\n* Glossary (Glossary)::\n* Appendix::\n* Introduction:\n* Scope::\n* Organization of the Document::\n* Referenced Publications::\n* Definitions::\n* Conformance::\n* Language Extensions::\n* Language Subsets::\n* Deprecated Language Features::\n* Symbols in the COMMON-LISP Package::\n* Scope, Purpose, and History:\n* Scope and Purpose::\n* History::\n* Definitions:\n* Notational Conventions::\n* Error Terminology::\n* Sections Not Formally Part Of This Standard::\n* Interpreting Dictionary Entries::\n* Notational Conventions:\n* Font Key::\n* Modified BNF Syntax::\n* Splicing in Modified BNF Syntax::\n* Indirection in Modified BNF Syntax::\n* Additional Uses for Indirect Definitions in Modified BNF Syntax::\n* Special Symbols::\n* Objects with Multiple Notations::\n* Case in Symbols::\n* Numbers (Objects with Multiple Notations)::\n* Use of the Dot Character::\n* NIL::\n* Designators::\n* Nonsense Words::\n* Interpreting Dictionary Entries:\n* The \"Affected By\" Section of a Dictionary Entry::\n* The \"Arguments\" Section of a Dictionary Entry::\n* The \"Arguments and Values\" Section of a Dictionary Entry::\n* The \"Binding Types Affected\" Section of a Dictionary Entry::\n* The \"Class Precedence List\" Section of a Dictionary Entry::\n* Dictionary Entries for Type Specifiers::\n* The \"Compound Type Specifier Kind\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Syntax\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Arguments\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Description\" Section of a Dictionary Entry::\n* The \"Constant Value\" Section of a Dictionary Entry::\n* The \"Description\" Section of a Dictionary Entry::\n* The \"Examples\" Section of a Dictionary Entry::\n* The \"Exceptional Situations\" Section of a Dictionary Entry::\n* The \"Initial Value\" Section of a Dictionary Entry::\n* The \"Argument Precedence Order\" Section of a Dictionary Entry::\n* The \"Method Signature\" Section of a Dictionary Entry::\n* The \"Name\" Section of a Dictionary Entry::\n* The \"Notes\" Section of a Dictionary Entry::\n* The \"Pronunciation\" Section of a Dictionary Entry::\n* The \"See Also\" Section of a Dictionary Entry::\n* The \"Side Effects\" Section of a Dictionary Entry::\n* The \"Supertypes\" Section of a Dictionary Entry::\n* The \"Syntax\" Section of a Dictionary Entry::\n* Special \"Syntax\" Notations for Overloaded Operators::\n* Naming Conventions for Rest Parameters::\n* Requiring Non-Null Rest Parameters in the \"Syntax\" Section::\n* Return values in the \"Syntax\" Section::\n* No Arguments or Values in the \"Syntax\" Section::\n* Unconditional Transfer of Control in the \"Syntax\" Section::\n* The \"Valid Context\" Section of a Dictionary Entry::\n* The \"Value Type\" Section of a Dictionary Entry::\n* Conformance:\n* Conforming Implementations::\n* Conforming Programs::\n* Conforming Implementations:\n* Required Language Features::\n* Documentation of Implementation-Dependent Features::\n* Documentation of Extensions::\n* Treatment of Exceptional Situations::\n* Resolution of Apparent Conflicts in Exceptional Situations::\n* Examples of Resolution of Apparent Conflict in Exceptional Situations::\n* Conformance Statement::\n* Conforming Programs:\n* Use of Implementation-Defined Language Features::\n* Use of Read-Time Conditionals::\n* Deprecated Language Features:\n* Deprecated Functions::\n* Deprecated Argument Conventions::\n* Deprecated Variables::\n* Deprecated Reader Syntax::\n* Syntax:\n* Character Syntax::\n* Reader Algorithm::\n* Interpretation of Tokens::\n* Standard Macro Characters::\n* Character Syntax:\n* Readtables::\n* Variables that affect the Lisp Reader::\n* Standard Characters::\n* Character Syntax Types::\n* Readtables:\n* The Current Readtable::\n* The Standard Readtable::\n* The Initial Readtable::\n* Character Syntax Types:\n* Constituent Characters::\n* Constituent Traits::\n* Invalid Characters::\n* Macro Characters::\n* Multiple Escape Characters::\n* Examples of Multiple Escape Characters::\n* Single Escape Character::\n* Examples of Single Escape Characters::\n* Whitespace Characters::\n* Examples of Whitespace Characters::\n* Interpretation of Tokens:\n* Numbers as Tokens::\n* Constructing Numbers from Tokens::\n* The Consing Dot::\n* Symbols as Tokens::\n* Valid Patterns for Tokens::\n* Package System Consistency Rules::\n* Numbers as Tokens:\n* Potential Numbers as Tokens::\n* Escape Characters and Potential Numbers::\n* Examples of Potential Numbers::\n* Constructing Numbers from Tokens:\n* Syntax of a Rational::\n* Syntax of an Integer::\n* Syntax of a Ratio::\n* Syntax of a Float::\n* Syntax of a Complex::\n* Standard Macro Characters:\n* Left-Parenthesis::\n* Right-Parenthesis::\n* Single-Quote::\n* Semicolon::\n* Double-Quote::\n* Backquote::\n* Comma::\n* Sharpsign::\n* Re-Reading Abbreviated Expressions::\n* Single-Quote:\n* Examples of Single-Quote::\n* Semicolon:\n* Examples of Semicolon::\n* Notes about Style for Semicolon::\n* Use of Single Semicolon::\n* Use of Double Semicolon::\n* Use of Triple Semicolon::\n* Use of Quadruple Semicolon::\n* Examples of Style for Semicolon::\n* Backquote:\n* Notes about Backquote::\n* Sharpsign:\n* Sharpsign Backslash::\n* Sharpsign Single-Quote::\n* Sharpsign Left-Parenthesis::\n* Sharpsign Asterisk::\n* Examples of Sharpsign Asterisk::\n* Sharpsign Colon::\n* Sharpsign Dot::\n* Sharpsign B::\n* Sharpsign O::\n* Sharpsign X::\n* Sharpsign R::\n* Sharpsign C::\n* Sharpsign A::\n* Sharpsign S::\n* Sharpsign P::\n* Sharpsign Equal-Sign::\n* Sharpsign Sharpsign::\n* Sharpsign Plus::\n* Sharpsign Minus::\n* Sharpsign Vertical-Bar::\n* Examples of Sharpsign Vertical-Bar::\n* Notes about Style for Sharpsign Vertical-Bar::\n* Sharpsign Less-Than-Sign::\n* Sharpsign Whitespace::\n* Sharpsign Right-Parenthesis::\n* Evaluation and Compilation:\n* Evaluation::\n* Compilation::\n* Declarations::\n* Lambda Lists::\n* Error Checking in Function Calls::\n* Traversal Rules and Side Effects::\n* Destructive Operations::\n* Evaluation and Compilation Dictionary::\n* Evaluation:\n* Introduction to Environments::\n* The Evaluation Model::\n* Lambda Expressions::\n* Closures and Lexical Binding::\n* Shadowing::\n* Extent::\n* Return Values::\n* Introduction to Environments:\n* The Global Environment::\n* Dynamic Environments::\n* Lexical Environments::\n* The Null Lexical Environment::\n* Environment Objects::\n* The Evaluation Model:\n* Form Evaluation::\n* Symbols as Forms::\n* Lexical Variables::\n* Dynamic Variables::\n* Constant Variables::\n* Symbols Naming Both Lexical and Dynamic Variables::\n* Conses as Forms::\n* Special Forms::\n* Macro Forms::\n* Function Forms::\n* Lambda Forms::\n* Self-Evaluating Objects::\n* Examples of Self-Evaluating Objects::\n* Compilation:\n* Compiler Terminology::\n* Compilation Semantics::\n* File Compilation::\n* Literal Objects in Compiled Files::\n* Exceptional Situations in the Compiler::\n* Compilation Semantics:\n* Compiler Macros::\n* Purpose of Compiler Macros::\n* Naming of Compiler Macros::\n* When Compiler Macros Are Used::\n* Notes about the Implementation of Compiler Macros::\n* Minimal Compilation::\n* Semantic Constraints::\n* File Compilation:\n* Processing of Top Level Forms::\n* Processing of Defining Macros::\n* Constraints on Macros and Compiler Macros::\n* Literal Objects in Compiled Files:\n* Externalizable Objects::\n* Similarity of Literal Objects::\n* Similarity of Aggregate Objects::\n* Definition of Similarity::\n* Extensions to Similarity Rules::\n* Additional Constraints on Externalizable Objects::\n* Declarations:\n* Minimal Declaration Processing Requirements::\n* Declaration Specifiers::\n* Declaration Identifiers::\n* Declaration Scope::\n* Declaration Identifiers:\n* Shorthand notation for Type Declarations::\n* Declaration Scope:\n* Examples of Declaration Scope::\n* Lambda Lists:\n* Ordinary Lambda Lists::\n* Generic Function Lambda Lists::\n* Specialized Lambda Lists::\n* Macro Lambda Lists::\n* Destructuring Lambda Lists::\n* Boa Lambda Lists::\n* Defsetf Lambda Lists::\n* Deftype Lambda Lists::\n* Define-modify-macro Lambda Lists::\n* Define-method-combination Arguments Lambda Lists::\n* Syntactic Interaction of Documentation Strings and Declarations::\n* Ordinary Lambda Lists:\n* Specifiers for the required parameters::\n* Specifiers for optional parameters::\n* A specifier for a rest parameter::\n* Specifiers for keyword parameters::\n* Suppressing Keyword Argument Checking::\n* Examples of Suppressing Keyword Argument Checking::\n* Specifiers for &aux variables::\n* Examples of Ordinary Lambda Lists::\n* Macro Lambda Lists:\n* Destructuring by Lambda Lists::\n* Data-directed Destructuring by Lambda Lists::\n* Examples of Data-directed Destructuring by Lambda Lists::\n* Lambda-list-directed Destructuring by Lambda Lists::\n* Error Checking in Function Calls:\n* Argument Mismatch Detection::\n* Argument Mismatch Detection:\n* Safe and Unsafe Calls::\n* Error Detection Time in Safe Calls::\n* Too Few Arguments::\n* Too Many Arguments::\n* Unrecognized Keyword Arguments::\n* Invalid Keyword Arguments::\n* Odd Number of Keyword Arguments::\n* Destructuring Mismatch::\n* Errors When Calling a Next Method::\n* Destructive Operations:\n* Modification of Literal Objects::\n* Transfer of Control during a Destructive Operation::\n* Transfer of Control during a Destructive Operation:\n* Examples of Transfer of Control during a Destructive Operation::\n* Evaluation and Compilation Dictionary:\n* lambda (Symbol)::\n* lambda::\n* compile::\n* eval::\n* eval-when::\n* load-time-value::\n* quote::\n* compiler-macro-function::\n* define-compiler-macro::\n* defmacro::\n* macro-function::\n* macroexpand::\n* define-symbol-macro::\n* symbol-macrolet::\n* *macroexpand-hook*::\n* proclaim::\n* declaim::\n* declare::\n* ignore::\n* dynamic-extent::\n* type::\n* inline::\n* ftype::\n* declaration::\n* optimize::\n* special::\n* locally::\n* the::\n* special-operator-p::\n* constantp::\n* Types and Classes:\n* Introduction (Types and Classes)::\n* Types::\n* Classes::\n* Types and Classes Dictionary::\n* Types:\n* Data Type Definition::\n* Type Relationships::\n* Type Specifiers::\n* Classes:\n* Introduction to Classes::\n* Defining Classes::\n* Creating Instances of Classes::\n* Inheritance::\n* Determining the Class Precedence List::\n* Redefining Classes::\n* Integrating Types and Classes::\n* Introduction to Classes:\n* Standard Metaclasses::\n* Inheritance:\n* Examples of Inheritance::\n* Inheritance of Class Options::\n* Determining the Class Precedence List:\n* Topological Sorting::\n* Examples of Class Precedence List Determination::\n* Redefining Classes:\n* Modifying the Structure of Instances::\n* Initializing Newly Added Local Slots (Redefining Classes)::\n* Customizing Class Redefinition::\n* Types and Classes Dictionary:\n* nil (Type)::\n* boolean::\n* function (System Class)::\n* compiled-function::\n* generic-function::\n* standard-generic-function::\n* class::\n* built-in-class::\n* structure-class::\n* standard-class::\n* method::\n* standard-method::\n* structure-object::\n* standard-object::\n* method-combination::\n* t (System Class)::\n* satisfies::\n* member::\n* not (Type Specifier)::\n* and (Type Specifier)::\n* or (Type Specifier)::\n* values (Type Specifier)::\n* eql (Type Specifier)::\n* coerce::\n* deftype::\n* subtypep::\n* type-of::\n* typep::\n* type-error::\n* type-error-datum::\n* simple-type-error::\n* Data and Control Flow:\n* Generalized Reference::\n* Transfer of Control to an Exit Point::\n* Data and Control Flow Dictionary::\n* Generalized Reference:\n* Overview of Places and Generalized Reference::\n* Kinds of Places::\n* Treatment of Other Macros Based on SETF::\n* Overview of Places and Generalized Reference:\n* Evaluation of Subforms to Places::\n* Examples of Evaluation of Subforms to Places::\n* Setf Expansions::\n* Examples of Setf Expansions::\n* Kinds of Places:\n* Variable Names as Places::\n* Function Call Forms as Places::\n* VALUES Forms as Places::\n* THE Forms as Places::\n* APPLY Forms as Places::\n* Setf Expansions and Places::\n* Macro Forms as Places::\n* Symbol Macros as Places::\n* Other Compound Forms as Places::\n* Data and Control Flow Dictionary:\n* apply::\n* defun::\n* fdefinition::\n* fboundp::\n* fmakunbound::\n* flet::\n* funcall::\n* function (Special Operator)::\n* function-lambda-expression::\n* functionp::\n* compiled-function-p::\n* call-arguments-limit::\n* lambda-list-keywords::\n* lambda-parameters-limit::\n* defconstant::\n* defparameter::\n* destructuring-bind::\n* let::\n* progv::\n* setq::\n* psetq::\n* block::\n* catch::\n* go::\n* return-from::\n* return::\n* tagbody::\n* throw::\n* unwind-protect::\n* nil::\n* not::\n* t::\n* eq::\n* eql::\n* equal::\n* equalp::\n* identity::\n* complement::\n* constantly::\n* every::\n* and::\n* cond::\n* if::\n* or::\n* when::\n* case::\n* typecase::\n* multiple-value-bind::\n* multiple-value-call::\n* multiple-value-list::\n* multiple-value-prog1::\n* multiple-value-setq::\n* values::\n* values-list::\n* multiple-values-limit::\n* nth-value::\n* prog::\n* prog1::\n* progn::\n* define-modify-macro::\n* defsetf::\n* define-setf-expander::\n* get-setf-expansion::\n* setf::\n* shiftf::\n* rotatef::\n* control-error::\n* program-error::\n* undefined-function::\n* Iteration:\n* The LOOP Facility::\n* Iteration Dictionary::\n* The LOOP Facility:\n* Overview of the Loop Facility::\n* Variable Initialization and Stepping Clauses::\n* Value Accumulation Clauses::\n* Termination Test Clauses::\n* Unconditional Execution Clauses::\n* Conditional Execution Clauses::\n* Miscellaneous Clauses::\n* Examples of Miscellaneous Loop Features::\n* Notes about Loop::\n* Overview of the Loop Facility:\n* Simple vs Extended Loop::\n* Simple Loop::\n* Extended Loop::\n* Loop Keywords::\n* Parsing Loop Clauses::\n* Expanding Loop Forms::\n* Summary of Loop Clauses::\n* Summary of Variable Initialization and Stepping Clauses::\n* Summary of Value Accumulation Clauses::\n* Summary of Termination Test Clauses::\n* Summary of Unconditional Execution Clauses::\n* Summary of Conditional Execution Clauses::\n* Summary of Miscellaneous Clauses::\n* Order of Execution::\n* Destructuring::\n* Restrictions on Side-Effects::\n* Variable Initialization and Stepping Clauses:\n* Iteration Control::\n* The for-as-arithmetic subclause::\n* Examples of for-as-arithmetic subclause::\n* The for-as-in-list subclause::\n* Examples of for-as-in-list subclause::\n* The for-as-on-list subclause::\n* Examples of for-as-on-list subclause::\n* The for-as-equals-then subclause::\n* Examples of for-as-equals-then subclause::\n* The for-as-across subclause::\n* Examples of for-as-across subclause::\n* The for-as-hash subclause::\n* The for-as-package subclause::\n* Examples of for-as-package subclause::\n* Local Variable Initializations::\n* Examples of WITH clause::\n* Value Accumulation Clauses:\n* Examples of COLLECT clause::\n* Examples of APPEND and NCONC clauses::\n* Examples of COUNT clause::\n* Examples of MAXIMIZE and MINIMIZE clauses::\n* Examples of SUM clause::\n* Termination Test Clauses:\n* Examples of REPEAT clause::\n* Examples of ALWAYS::\n* Examples of WHILE and UNTIL clauses::\n* Unconditional Execution Clauses:\n* Examples of unconditional execution::\n* Conditional Execution Clauses:\n* Examples of WHEN clause::\n* Miscellaneous Clauses:\n* Control Transfer Clauses::\n* Examples of NAMED clause::\n* Initial and Final Execution::\n* Examples of Miscellaneous Loop Features:\n* Examples of clause grouping::\n* Iteration Dictionary:\n* do::\n* dotimes::\n* dolist::\n* loop::\n* loop-finish::\n* Objects:\n* Object Creation and Initialization::\n* Changing the Class of an Instance::\n* Reinitializing an Instance::\n* Meta-Objects::\n* Slots::\n* Generic Functions and Methods::\n* Objects Dictionary::\n* Object Creation and Initialization:\n* Initialization Arguments::\n* Declaring the Validity of Initialization Arguments::\n* Defaulting of Initialization Arguments::\n* Rules for Initialization Arguments::\n* Shared-Initialize::\n* Initialize-Instance::\n* Definitions of Make-Instance and Initialize-Instance::\n* Changing the Class of an Instance:\n* Modifying the Structure of the Instance::\n* Initializing Newly Added Local Slots (Changing the Class of an Instance)::\n* Customizing the Change of Class of an Instance::\n* Reinitializing an Instance:\n* Customizing Reinitialization::\n* Meta-Objects:\n* Standard Meta-objects::\n* Slots:\n* Introduction to Slots::\n* Accessing Slots::\n* Inheritance of Slots and Slot Options::\n* Generic Functions and Methods:\n* Introduction to Generic Functions::\n* Introduction to Methods::\n* Agreement on Parameter Specializers and Qualifiers::\n* Congruent Lambda-lists for all Methods of a Generic Function::\n* Keyword Arguments in Generic Functions and Methods::\n* Method Selection and Combination::\n* Inheritance of Methods::\n* Keyword Arguments in Generic Functions and Methods:\n* Examples of Keyword Arguments in Generic Functions and Methods::\n* Method Selection and Combination:\n* Determining the Effective Method::\n* Selecting the Applicable Methods::\n* Sorting the Applicable Methods by Precedence Order::\n* Applying method combination to the sorted list of applicable methods::\n* Standard Method Combination::\n* Declarative Method Combination::\n* Built-in Method Combination Types::\n* Objects Dictionary:\n* function-keywords::\n* ensure-generic-function::\n* allocate-instance::\n* reinitialize-instance::\n* shared-initialize::\n* update-instance-for-different-class::\n* update-instance-for-redefined-class::\n* change-class::\n* slot-boundp::\n* slot-exists-p::\n* slot-makunbound::\n* slot-missing::\n* slot-unbound::\n* slot-value::\n* method-qualifiers::\n* no-applicable-method::\n* no-next-method::\n* remove-method::\n* make-instance::\n* make-instances-obsolete::\n* make-load-form::\n* make-load-form-saving-slots::\n* with-accessors::\n* with-slots::\n* defclass::\n* defgeneric::\n* defmethod::\n* find-class::\n* next-method-p::\n* call-method::\n* call-next-method::\n* compute-applicable-methods::\n* define-method-combination::\n* find-method::\n* add-method::\n* initialize-instance::\n* class-name::\n* (setf class-name)::\n* class-of::\n* unbound-slot::\n* unbound-slot-instance::\n* Structures:\n* Structures Dictionary::\n* Structures Dictionary:\n* defstruct::\n* copy-structure::\n* Conditions:\n* Condition System Concepts::\n* Conditions Dictionary::\n* Condition System Concepts:\n* Condition Types::\n* Creating Conditions::\n* Printing Conditions::\n* Signaling and Handling Conditions::\n* Assertions::\n* Notes about the Condition System's Background::\n* Condition Types:\n* Serious Conditions::\n* Creating Conditions:\n* Condition Designators::\n* Printing Conditions:\n* Recommended Style in Condition Reporting::\n* Capitalization and Punctuation in Condition Reports::\n* Leading and Trailing Newlines in Condition Reports::\n* Embedded Newlines in Condition Reports::\n* Note about Tabs in Condition Reports::\n* Mentioning Containing Function in Condition Reports::\n* Signaling and Handling Conditions:\n* Signaling::\n* Resignaling a Condition::\n* Restarts::\n* Interactive Use of Restarts::\n* Interfaces to Restarts::\n* Restart Tests::\n* Associating a Restart with a Condition::\n* Conditions Dictionary:\n* condition::\n* warning::\n* style-warning::\n* serious-condition::\n* error (Condition Type)::\n* cell-error::\n* cell-error-name::\n* parse-error::\n* storage-condition::\n* assert::\n* error::\n* cerror::\n* check-type::\n* simple-error::\n* invalid-method-error::\n* method-combination-error::\n* signal::\n* simple-condition::\n* simple-condition-format-control::\n* warn::\n* simple-warning::\n* invoke-debugger::\n* break::\n* *debugger-hook*::\n* *break-on-signals*::\n* handler-bind::\n* handler-case::\n* ignore-errors::\n* define-condition::\n* make-condition::\n* restart::\n* compute-restarts::\n* find-restart::\n* invoke-restart::\n* invoke-restart-interactively::\n* restart-bind::\n* restart-case::\n* restart-name::\n* with-condition-restarts::\n* with-simple-restart::\n* abort::\n* continue::\n* muffle-warning::\n* store-value::\n* use-value::\n* abort::\n* Symbols:\n* Symbol Concepts::\n* Symbols Dictionary::\n* Symbols Dictionary:\n* symbol::\n* keyword::\n* symbolp::\n* keywordp::\n* make-symbol::\n* copy-symbol::\n* gensym::\n* *gensym-counter*::\n* gentemp::\n* symbol-function::\n* symbol-name::\n* symbol-package::\n* symbol-plist::\n* symbol-value::\n* get::\n* remprop::\n* boundp::\n* makunbound::\n* set::\n* unbound-variable::\n* Packages:\n* Package Concepts::\n* Packages Dictionary::\n* Package Concepts:\n* Introduction to Packages::\n* Standardized Packages::\n* Introduction to Packages:\n* Package Names and Nicknames::\n* Symbols in a Package::\n* Internal and External Symbols::\n* Package Inheritance::\n* Accessibility of Symbols in a Package::\n* Locating a Symbol in a Package::\n* Prevention of Name Conflicts in Packages::\n* Standardized Packages:\n* The COMMON-LISP Package::\n* Constraints on the COMMON-LISP Package for Conforming Implementations::\n* Constraints on the COMMON-LISP Package for Conforming Programs::\n* Some Exceptions to Constraints on the COMMON-LISP Package for Conforming Programs::\n* The COMMON-LISP-USER Package::\n* The KEYWORD Package::\n* Interning a Symbol in the KEYWORD Package::\n* Notes about The KEYWORD Package::\n* Implementation-Defined Packages::\n* Packages Dictionary:\n* package::\n* export::\n* find-symbol::\n* find-package::\n* find-all-symbols::\n* import::\n* list-all-packages::\n* rename-package::\n* shadow::\n* shadowing-import::\n* delete-package::\n* make-package::\n* with-package-iterator::\n* unexport::\n* unintern::\n* in-package::\n* unuse-package::\n* use-package::\n* defpackage::\n* do-symbols::\n* intern::\n* package-name::\n* package-nicknames::\n* package-shadowing-symbols::\n* package-use-list::\n* package-used-by-list::\n* packagep::\n* *package*::\n* package-error::\n* package-error-package::\n* Numbers:\n* Number Concepts::\n* Numbers Dictionary::\n* Number Concepts:\n* Numeric Operations::\n* Implementation-Dependent Numeric Constants::\n* Rational Computations::\n* Floating-point Computations::\n* Complex Computations::\n* Interval Designators::\n* Random-State Operations::\n* Numeric Operations:\n* Associativity and Commutativity in Numeric Operations::\n* Examples of Associativity and Commutativity in Numeric Operations::\n* Contagion in Numeric Operations::\n* Viewing Integers as Bits and Bytes::\n* Logical Operations on Integers::\n* Byte Operations on Integers::\n* Rational Computations:\n* Rule of Unbounded Rational Precision::\n* Rule of Canonical Representation for Rationals::\n* Rule of Float Substitutability::\n* Floating-point Computations:\n* Rule of Float and Rational Contagion::\n* Examples of Rule of Float and Rational Contagion::\n* Rule of Float Approximation::\n* Rule of Float Underflow and Overflow::\n* Rule of Float Precision Contagion::\n* Complex Computations:\n* Rule of Complex Substitutability::\n* Rule of Complex Contagion::\n* Rule of Canonical Representation for Complex Rationals::\n* Examples of Rule of Canonical Representation for Complex Rationals::\n* Principal Values and Branch Cuts::\n* Numbers Dictionary:\n* number::\n* complex (System Class)::\n* real::\n* float (System Class)::\n* short-float::\n* rational::\n* ratio::\n* integer::\n* signed-byte::\n* unsigned-byte::\n* mod::\n* bit::\n* fixnum::\n* bignum::\n* =::\n* max::\n* minusp::\n* zerop::\n* floor::\n* sin::\n* asin::\n* pi::\n* sinh::\n* *::\n* +::\n* -::\n* /::\n* 1+::\n* abs::\n* evenp::\n* exp::\n* gcd::\n* incf::\n* lcm::\n* log::\n* mod::\n* signum::\n* sqrt::\n* random-state::\n* make-random-state::\n* random::\n* random-state-p::\n* *random-state*::\n* numberp::\n* cis::\n* complex::\n* complexp::\n* conjugate::\n* phase::\n* realpart::\n* upgraded-complex-part-type::\n* realp::\n* numerator::\n* rational::\n* rationalp::\n* ash::\n* integer-length::\n* integerp::\n* parse-integer::\n* boole::\n* boole-1::\n* logand::\n* logbitp::\n* logcount::\n* logtest::\n* byte::\n* deposit-field::\n* dpb::\n* ldb::\n* ldb-test::\n* mask-field::\n* most-positive-fixnum::\n* decode-float::\n* float::\n* floatp::\n* most-positive-short-float::\n* short-float-epsilon::\n* arithmetic-error::\n* arithmetic-error-operands::\n* division-by-zero::\n* floating-point-invalid-operation::\n* floating-point-inexact::\n* floating-point-overflow::\n* floating-point-underflow::\n* Characters:\n* Character Concepts::\n* Characters Dictionary::\n* Character Concepts:\n* Introduction to Characters::\n* Introduction to Scripts and Repertoires::\n* Character Attributes::\n* Character Categories::\n* Identity of Characters::\n* Ordering of Characters::\n* Character Names::\n* Treatment of Newline during Input and Output::\n* Character Encodings::\n* Documentation of Implementation-Defined Scripts::\n* Introduction to Scripts and Repertoires:\n* Character Scripts::\n* Character Repertoires::\n* Character Categories:\n* Graphic Characters::\n* Alphabetic Characters::\n* Characters With Case::\n* Uppercase Characters::\n* Lowercase Characters::\n* Corresponding Characters in the Other Case::\n* Case of Implementation-Defined Characters::\n* Numeric Characters::\n* Alphanumeric Characters::\n* Digits in a Radix::\n* Characters Dictionary:\n* character (System Class)::\n* base-char::\n* standard-char::\n* extended-char::\n* char=::\n* character::\n* characterp::\n* alpha-char-p::\n* alphanumericp::\n* digit-char::\n* digit-char-p::\n* graphic-char-p::\n* standard-char-p::\n* char-upcase::\n* upper-case-p::\n* char-code::\n* char-int::\n* code-char::\n* char-code-limit::\n* char-name::\n* name-char::\n* Conses:\n* Cons Concepts::\n* Conses Dictionary::\n* Cons Concepts:\n* Conses as Trees::\n* Conses as Lists::\n* Conses as Trees:\n* General Restrictions on Parameters that must be Trees::\n* Conses as Lists:\n* Lists as Association Lists::\n* Lists as Sets::\n* General Restrictions on Parameters that must be Lists::\n* Conses Dictionary:\n* list::\n* null (System Class)::\n* cons (System Class)::\n* atom (Type)::\n* cons::\n* consp::\n* atom::\n* rplaca::\n* car::\n* copy-tree::\n* sublis::\n* subst::\n* tree-equal::\n* copy-list::\n* list::\n* list-length::\n* listp::\n* make-list::\n* push::\n* pop::\n* first::\n* nth::\n* endp::\n* null::\n* nconc::\n* append::\n* revappend::\n* butlast::\n* last::\n* ldiff::\n* nthcdr::\n* rest::\n* member::\n* mapc::\n* acons::\n* assoc::\n* copy-alist::\n* pairlis::\n* rassoc::\n* get-properties::\n* getf::\n* remf::\n* intersection::\n* adjoin::\n* pushnew::\n* set-difference::\n* set-exclusive-or::\n* subsetp::\n* union::\n* Arrays:\n* Array Concepts::\n* Arrays Dictionary::\n* Array Concepts:\n* Array Elements::\n* Specialized Arrays::\n* Array Elements:\n* Array Indices::\n* Array Dimensions::\n* Implementation Limits on Individual Array Dimensions::\n* Array Rank::\n* Vectors::\n* Fill Pointers::\n* Multidimensional Arrays::\n* Storage Layout for Multidimensional Arrays::\n* Implementation Limits on Array Rank::\n* Specialized Arrays:\n* Array Upgrading::\n* Required Kinds of Specialized Arrays::\n* Arrays Dictionary:\n* array::\n* simple-array::\n* vector (System Class)::\n* simple-vector::\n* bit-vector::\n* simple-bit-vector::\n* make-array::\n* adjust-array::\n* adjustable-array-p::\n* aref::\n* array-dimension::\n* array-dimensions::\n* array-element-type::\n* array-has-fill-pointer-p::\n* array-displacement::\n* array-in-bounds-p::\n* array-rank::\n* array-row-major-index::\n* array-total-size::\n* arrayp::\n* fill-pointer::\n* row-major-aref::\n* upgraded-array-element-type::\n* array-dimension-limit::\n* array-rank-limit::\n* array-total-size-limit::\n* simple-vector-p::\n* svref::\n* vector::\n* vector-pop::\n* vector-push::\n* vectorp::\n* bit::\n* bit-and::\n* bit-vector-p::\n* simple-bit-vector-p::\n* Strings:\n* String Concepts::\n* Strings Dictionary::\n* String Concepts:\n* Implications of Strings Being Arrays::\n* Subtypes of STRING::\n* Strings Dictionary:\n* string (System Class)::\n* base-string::\n* simple-string::\n* simple-base-string::\n* simple-string-p::\n* char::\n* string::\n* string-upcase::\n* string-trim::\n* string=::\n* stringp::\n* make-string::\n* Sequences:\n* Sequence Concepts::\n* Rules about Test Functions::\n* Sequences Dictionary::\n* Sequence Concepts:\n* General Restrictions on Parameters that must be Sequences::\n* Rules about Test Functions:\n* Satisfying a Two-Argument Test::\n* Satisfying a One-Argument Test::\n* Satisfying a Two-Argument Test:\n* Examples of Satisfying a Two-Argument Test::\n* Satisfying a One-Argument Test:\n* Examples of Satisfying a One-Argument Test::\n* Sequences Dictionary:\n* sequence::\n* copy-seq::\n* elt::\n* fill::\n* make-sequence::\n* subseq::\n* map::\n* map-into::\n* reduce::\n* count::\n* length::\n* reverse::\n* sort::\n* find::\n* position::\n* search::\n* mismatch::\n* replace::\n* substitute::\n* concatenate::\n* merge::\n* remove::\n* remove-duplicates::\n* Hash Tables:\n* Hash Table Concepts::\n* Hash Tables Dictionary::\n* Hash Table Concepts:\n* Hash-Table Operations::\n* Modifying Hash Table Keys::\n* Modifying Hash Table Keys:\n* Visible Modification of Objects with respect to EQ and EQL::\n* Visible Modification of Objects with respect to EQUAL::\n* Visible Modification of Conses with respect to EQUAL::\n* Visible Modification of Bit Vectors and Strings with respect to EQUAL::\n* Visible Modification of Objects with respect to EQUALP::\n* Visible Modification of Structures with respect to EQUALP::\n* Visible Modification of Arrays with respect to EQUALP::\n* Visible Modification of Hash Tables with respect to EQUALP::\n* Visible Modifications by Language Extensions::\n* Hash Tables Dictionary:\n* hash-table::\n* make-hash-table::\n* hash-table-p::\n* hash-table-count::\n* hash-table-rehash-size::\n* hash-table-rehash-threshold::\n* hash-table-size::\n* hash-table-test::\n* gethash::\n* remhash::\n* maphash::\n* with-hash-table-iterator::\n* clrhash::\n* sxhash::\n* Filenames:\n* Overview of Filenames::\n* Pathnames::\n* Logical Pathnames::\n* Filenames Dictionary::\n* Overview of Filenames:\n* Namestrings as Filenames::\n* Pathnames as Filenames::\n* Parsing Namestrings Into Pathnames::\n* Pathnames:\n* Pathname Components::\n* Interpreting Pathname Component Values::\n* Merging Pathnames::\n* Pathname Components:\n* The Pathname Host Component::\n* The Pathname Device Component::\n* The Pathname Directory Component::\n* The Pathname Name Component::\n* The Pathname Type Component::\n* The Pathname Version Component::\n* Interpreting Pathname Component Values:\n* Strings in Component Values::\n* Special Characters in Pathname Components::\n* Case in Pathname Components::\n* Local Case in Pathname Components::\n* Common Case in Pathname Components::\n* Special Pathname Component Values::\n* NIL as a Component Value::\n* ->WILD as a Component Value::\n* ->UNSPECIFIC as a Component Value::\n* Relation between component values NIL and ->UNSPECIFIC::\n* Restrictions on Wildcard Pathnames::\n* Restrictions on Examining Pathname Components::\n* Restrictions on Examining a Pathname Host Component::\n* Restrictions on Examining a Pathname Device Component::\n* Restrictions on Examining a Pathname Directory Component::\n* Directory Components in Non-Hierarchical File Systems::\n* Restrictions on Examining a Pathname Name Component::\n* Restrictions on Examining a Pathname Type Component::\n* Restrictions on Examining a Pathname Version Component::\n* Notes about the Pathname Version Component::\n* Restrictions on Constructing Pathnames::\n* Merging Pathnames:\n* Examples of Merging Pathnames::\n* Logical Pathnames:\n* Syntax of Logical Pathname Namestrings::\n* Logical Pathname Components::\n* Syntax of Logical Pathname Namestrings:\n* Additional Information about Parsing Logical Pathname Namestrings::\n* The Host part of a Logical Pathname Namestring::\n* The Device part of a Logical Pathname Namestring::\n* The Directory part of a Logical Pathname Namestring::\n* The Type part of a Logical Pathname Namestring::\n* The Version part of a Logical Pathname Namestring::\n* Wildcard Words in a Logical Pathname Namestring::\n* Lowercase Letters in a Logical Pathname Namestring::\n* Other Syntax in a Logical Pathname Namestring::\n* Logical Pathname Components:\n* Unspecific Components of a Logical Pathname::\n* Null Strings as Components of a Logical Pathname::\n* Filenames Dictionary:\n* pathname (System Class)::\n* logical-pathname (System Class)::\n* pathname::\n* make-pathname::\n* pathnamep::\n* pathname-host::\n* load-logical-pathname-translations::\n* logical-pathname-translations::\n* logical-pathname::\n* *default-pathname-defaults*::\n* namestring::\n* parse-namestring::\n* wild-pathname-p::\n* pathname-match-p::\n* translate-logical-pathname::\n* translate-pathname::\n* merge-pathnames::\n* Files:\n* File System Concepts::\n* Files Dictionary::\n* File System Concepts:\n* Coercion of Streams to Pathnames::\n* File Operations on Open and Closed Streams::\n* Truenames::\n* Truenames:\n* Examples of Truenames::\n* Files Dictionary:\n* directory::\n* probe-file::\n* ensure-directories-exist::\n* truename::\n* file-author::\n* file-write-date::\n* rename-file::\n* delete-file::\n* file-error::\n* file-error-pathname::\n* Streams:\n* Stream Concepts::\n* Streams Dictionary::\n* Stream Concepts:\n* Introduction to Streams::\n* Stream Variables::\n* Stream Arguments to Standardized Functions::\n* Restrictions on Composite Streams::\n* Introduction to Streams:\n* Abstract Classifications of Streams (Introduction to Streams)::\n* Input::\n* Open and Closed Streams::\n* Interactive Streams::\n* Abstract Classifications of Streams::\n* File Streams::\n* Other Subclasses of Stream::\n* Streams Dictionary:\n* stream::\n* broadcast-stream::\n* concatenated-stream::\n* echo-stream::\n* file-stream::\n* string-stream::\n* synonym-stream::\n* two-way-stream::\n* input-stream-p::\n* interactive-stream-p::\n* open-stream-p::\n* stream-element-type::\n* streamp::\n* read-byte::\n* write-byte::\n* peek-char::\n* read-char::\n* read-char-no-hang::\n* terpri::\n* unread-char::\n* write-char::\n* read-line::\n* write-string::\n* read-sequence::\n* write-sequence::\n* file-length::\n* file-position::\n* file-string-length::\n* open::\n* stream-external-format::\n* with-open-file::\n* close::\n* with-open-stream::\n* listen::\n* clear-input::\n* finish-output::\n* y-or-n-p::\n* make-synonym-stream::\n* synonym-stream-symbol::\n* broadcast-stream-streams::\n* make-broadcast-stream::\n* make-two-way-stream::\n* two-way-stream-input-stream::\n* echo-stream-input-stream::\n* make-echo-stream::\n* concatenated-stream-streams::\n* make-concatenated-stream::\n* get-output-stream-string::\n* make-string-input-stream::\n* make-string-output-stream::\n* with-input-from-string::\n* with-output-to-string::\n* *debug-io*::\n* *terminal-io*::\n* stream-error::\n* stream-error-stream::\n* end-of-file::\n* Printer:\n* The Lisp Printer::\n* The Lisp Pretty Printer::\n* Formatted Output::\n* Printer Dictionary::\n* The Lisp Printer:\n* Overview of The Lisp Printer::\n* Printer Dispatching::\n* Default Print-Object Methods::\n* Examples of Printer Behavior::\n* Overview of The Lisp Printer:\n* Multiple Possible Textual Representations::\n* Printer Escaping::\n* Default Print-Object Methods:\n* Printing Numbers::\n* Printing Integers::\n* Printing Ratios::\n* Printing Floats::\n* Printing Complexes::\n* Note about Printing Numbers::\n* Printing Characters::\n* Printing Symbols::\n* Package Prefixes for Symbols::\n* Effect of Readtable Case on the Lisp Printer::\n* Examples of Effect of Readtable Case on the Lisp Printer::\n* Printing Strings::\n* Printing Lists and Conses::\n* Printing Bit Vectors::\n* Printing Other Vectors::\n* Printing Other Arrays::\n* Examples of Printing Arrays::\n* Printing Random States::\n* Printing Pathnames::\n* Printing Structures::\n* Printing Other Objects::\n* The Lisp Pretty Printer:\n* Pretty Printer Concepts::\n* Examples of using the Pretty Printer::\n* Notes about the Pretty Printer's Background::\n* Pretty Printer Concepts:\n* Dynamic Control of the Arrangement of Output::\n* Format Directive Interface::\n* Compiling Format Strings::\n* Pretty Print Dispatch Tables::\n* Pretty Printer Margins::\n* Formatted Output:\n* FORMAT Basic Output::\n* FORMAT Radix Control::\n* FORMAT Floating-Point Printers::\n* FORMAT Printer Operations::\n* FORMAT Pretty Printer Operations::\n* FORMAT Layout Control::\n* FORMAT Control-Flow Operations::\n* FORMAT Miscellaneous Operations::\n* FORMAT Miscellaneous Pseudo-Operations::\n* Additional Information about FORMAT Operations::\n* Examples of FORMAT::\n* Notes about FORMAT::\n* FORMAT Basic Output:\n* Tilde C-> Character::\n* Tilde Percent-> Newline::\n* Tilde Ampersand-> Fresh-Line::\n* Tilde Vertical-Bar-> Page::\n* Tilde Tilde-> Tilde::\n* FORMAT Radix Control:\n* Tilde R-> Radix::\n* Tilde D-> Decimal::\n* Tilde B-> Binary::\n* Tilde O-> Octal::\n* Tilde X-> Hexadecimal::\n* FORMAT Floating-Point Printers:\n* Tilde F-> Fixed-Format Floating-Point::\n* Tilde E-> Exponential Floating-Point::\n* Tilde G-> General Floating-Point::\n* Tilde Dollarsign-> Monetary Floating-Point::\n* FORMAT Printer Operations:\n* Tilde A-> Aesthetic::\n* Tilde S-> Standard::\n* Tilde W-> Write::\n* FORMAT Pretty Printer Operations:\n* Tilde Underscore-> Conditional Newline::\n* Tilde Less-Than-Sign-> Logical Block::\n* Tilde I-> Indent::\n* Tilde Slash-> Call Function::\n* FORMAT Layout Control:\n* Tilde T-> Tabulate::\n* Tilde Less-Than-Sign-> Justification::\n* Tilde Greater-Than-Sign-> End of Justification::\n* FORMAT Control-Flow Operations:\n* Tilde Asterisk-> Go-To::\n* Tilde Left-Bracket-> Conditional Expression::\n* Tilde Right-Bracket-> End of Conditional Expression::\n* Tilde Left-Brace-> Iteration::\n* Tilde Right-Brace-> End of Iteration::\n* Tilde Question-Mark-> Recursive Processing::\n* FORMAT Miscellaneous Operations:\n* Tilde Left-Paren-> Case Conversion::\n* Tilde Right-Paren-> End of Case Conversion::\n* Tilde P-> Plural::\n* FORMAT Miscellaneous Pseudo-Operations:\n* Tilde Semicolon-> Clause Separator::\n* Tilde Circumflex-> Escape Upward::\n* Tilde Newline-> Ignored Newline::\n* Additional Information about FORMAT Operations:\n* Nesting of FORMAT Operations::\n* Missing and Additional FORMAT Arguments::\n* Additional FORMAT Parameters::\n* Undefined FORMAT Modifier Combinations::\n* Printer Dictionary:\n* copy-pprint-dispatch::\n* formatter::\n* pprint-dispatch::\n* pprint-exit-if-list-exhausted::\n* pprint-fill::\n* pprint-indent::\n* pprint-logical-block::\n* pprint-newline::\n* pprint-pop::\n* pprint-tab::\n* print-object::\n* print-unreadable-object::\n* set-pprint-dispatch::\n* write::\n* write-to-string::\n* *print-array*::\n* *print-base*::\n* *print-case*::\n* *print-circle*::\n* *print-escape*::\n* *print-gensym*::\n* *print-level*::\n* *print-lines*::\n* *print-miser-width*::\n* *print-pprint-dispatch*::\n* *print-pretty*::\n* *print-readably*::\n* *print-right-margin*::\n* print-not-readable::\n* print-not-readable-object::\n* format::\n* Reader:\n* Reader Concepts::\n* Reader Dictionary::\n* Reader Concepts:\n* Dynamic Control of the Lisp Reader::\n* Effect of Readtable Case on the Lisp Reader::\n* Argument Conventions of Some Reader Functions::\n* Effect of Readtable Case on the Lisp Reader:\n* Examples of Effect of Readtable Case on the Lisp Reader::\n* Argument Conventions of Some Reader Functions:\n* The EOF-ERROR-P argument::\n* The RECURSIVE-P argument::\n* Reader Dictionary:\n* readtable::\n* copy-readtable::\n* make-dispatch-macro-character::\n* read::\n* read-delimited-list::\n* read-from-string::\n* readtable-case::\n* readtablep::\n* set-dispatch-macro-character::\n* set-macro-character::\n* set-syntax-from-char::\n* with-standard-io-syntax::\n* *read-base*::\n* *read-default-float-format*::\n* *read-eval*::\n* *read-suppress*::\n* *readtable*::\n* reader-error::\n* System Construction:\n* System Construction Concepts::\n* System Construction Dictionary::\n* System Construction Concepts:\n* Loading::\n* Features::\n* Features:\n* Feature Expressions::\n* Examples of Feature Expressions::\n* System Construction Dictionary:\n* compile-file::\n* compile-file-pathname::\n* load::\n* with-compilation-unit::\n* *features*::\n* *compile-file-pathname*::\n* *load-pathname*::\n* *compile-print*::\n* *load-print*::\n* *modules*::\n* provide::\n* Environment:\n* The External Environment::\n* Environment Dictionary::\n* The External Environment:\n* Top level loop::\n* Debugging Utilities::\n* Environment Inquiry::\n* Time::\n* Time:\n* Decoded Time::\n* Universal Time::\n* Internal Time::\n* Seconds::\n* Environment Dictionary:\n* decode-universal-time::\n* encode-universal-time::\n* get-universal-time::\n* sleep::\n* apropos::\n* describe::\n* describe-object::\n* trace::\n* step::\n* time::\n* internal-time-units-per-second::\n* get-internal-real-time::\n* get-internal-run-time::\n* disassemble::\n* documentation::\n* room::\n* ed::\n* inspect::\n* dribble::\n* -::\n* +::\n* *::\n* /::\n* lisp-implementation-type::\n* short-site-name::\n* machine-instance::\n* machine-type::\n* machine-version::\n* software-type::\n* user-homedir-pathname::\n* Glossary:\n* Glossary::\n* Appendix:\n* Removed Language Features::\n* Removed Language Features:\n* Requirements for removed and deprecated features::\n* Removed Types::\n* Removed Operators::\n* Removed Argument Conventions::\n* Removed Variables::\n* Removed Reader Syntax::\n* Packages No Longer Required::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Top,  Next: Introduction (Introduction),  Prev: (dir),  Up: (dir)\n\n* Menu:\n\n* Introduction (Introduction)::\n* Syntax::\n* Evaluation and Compilation::\n* Types and Classes::\n* Data and Control Flow::\n* Iteration::\n* Objects::\n* Structures::\n* Conditions::\n* Symbols::\n* Packages::\n* Numbers (Numbers)::\n* Characters::\n* Conses::\n* Arrays::\n* Strings::\n* Sequences::\n* Hash Tables::\n* Filenames::\n* Files::\n* Streams::\n* Printer::\n* Reader::\n* System Construction::\n* Environment::\n* Glossary (Glossary)::\n* Appendix::\n\n\n* Introduction:\n\n* Scope::\n* Organization of the Document::\n* Referenced Publications::\n* Definitions::\n* Conformance::\n* Language Extensions::\n* Language Subsets::\n* Deprecated Language Features::\n* Symbols in the COMMON-LISP Package::\n\n* Scope, Purpose, and History:\n\n* Scope and Purpose::\n* History::\n\n* Definitions:\n\n* Notational Conventions::\n* Error Terminology::\n* Sections Not Formally Part Of This Standard::\n* Interpreting Dictionary Entries::\n\n* Notational Conventions:\n\n* Font Key::\n* Modified BNF Syntax::\n* Splicing in Modified BNF Syntax::\n* Indirection in Modified BNF Syntax::\n* Additional Uses for Indirect Definitions in Modified BNF Syntax::\n* Special Symbols::\n* Objects with Multiple Notations::\n* Case in Symbols::\n* Numbers (Objects with Multiple Notations)::\n* Use of the Dot Character::\n* NIL::\n* Designators::\n* Nonsense Words::\n\n* Interpreting Dictionary Entries:\n\n* The \"Affected By\" Section of a Dictionary Entry::\n* The \"Arguments\" Section of a Dictionary Entry::\n* The \"Arguments and Values\" Section of a Dictionary Entry::\n* The \"Binding Types Affected\" Section of a Dictionary Entry::\n* The \"Class Precedence List\" Section of a Dictionary Entry::\n* Dictionary Entries for Type Specifiers::\n* The \"Compound Type Specifier Kind\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Syntax\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Arguments\" Section of a Dictionary Entry::\n* The \"Compound Type Specifier Description\" Section of a Dictionary Entry::\n* The \"Constant Value\" Section of a Dictionary Entry::\n* The \"Description\" Section of a Dictionary Entry::\n* The \"Examples\" Section of a Dictionary Entry::\n* The \"Exceptional Situations\" Section of a Dictionary Entry::\n* The \"Initial Value\" Section of a Dictionary Entry::\n* The \"Argument Precedence Order\" Section of a Dictionary Entry::\n* The \"Method Signature\" Section of a Dictionary Entry::\n* The \"Name\" Section of a Dictionary Entry::\n* The \"Notes\" Section of a Dictionary Entry::\n* The \"Pronunciation\" Section of a Dictionary Entry::\n* The \"See Also\" Section of a Dictionary Entry::\n* The \"Side Effects\" Section of a Dictionary Entry::\n* The \"Supertypes\" Section of a Dictionary Entry::\n* The \"Syntax\" Section of a Dictionary Entry::\n* Special \"Syntax\" Notations for Overloaded Operators::\n* Naming Conventions for Rest Parameters::\n* Requiring Non-Null Rest Parameters in the \"Syntax\" Section::\n* Return values in the \"Syntax\" Section::\n* No Arguments or Values in the \"Syntax\" Section::\n* Unconditional Transfer of Control in the \"Syntax\" Section::\n* The \"Valid Context\" Section of a Dictionary Entry::\n* The \"Value Type\" Section of a Dictionary Entry::\n\n* Conformance:\n\n* Conforming Implementations::\n* Conforming Programs::\n\n* Conforming Implementations:\n\n* Required Language Features::\n* Documentation of Implementation-Dependent Features::\n* Documentation of Extensions::\n* Treatment of Exceptional Situations::\n* Resolution of Apparent Conflicts in Exceptional Situations::\n* Examples of Resolution of Apparent Conflict in Exceptional Situations::\n* Conformance Statement::\n\n* Conforming Programs:\n\n* Use of Implementation-Defined Language Features::\n* Use of Read-Time Conditionals::\n\n* Deprecated Language Features:\n\n* Deprecated Functions::\n* Deprecated Argument Conventions::\n* Deprecated Variables::\n* Deprecated Reader Syntax::\n\n* Syntax:\n\n* Character Syntax::\n* Reader Algorithm::\n* Interpretation of Tokens::\n* Standard Macro Characters::\n\n* Character Syntax:\n\n* Readtables::\n* Variables that affect the Lisp Reader::\n* Standard Characters::\n* Character Syntax Types::\n\n* Readtables:\n\n* The Current Readtable::\n* The Standard Readtable::\n* The Initial Readtable::\n\n* Character Syntax Types:\n\n* Constituent Characters::\n* Constituent Traits::\n* Invalid Characters::\n* Macro Characters::\n* Multiple Escape Characters::\n* Examples of Multiple Escape Characters::\n* Single Escape Character::\n* Examples of Single Escape Characters::\n* Whitespace Characters::\n* Examples of Whitespace Characters::\n\n* Interpretation of Tokens:\n\n* Numbers as Tokens::\n* Constructing Numbers from Tokens::\n* The Consing Dot::\n* Symbols as Tokens::\n* Valid Patterns for Tokens::\n* Package System Consistency Rules::\n\n* Numbers as Tokens:\n\n* Potential Numbers as Tokens::\n* Escape Characters and Potential Numbers::\n* Examples of Potential Numbers::\n\n* Constructing Numbers from Tokens:\n\n* Syntax of a Rational::\n* Syntax of an Integer::\n* Syntax of a Ratio::\n* Syntax of a Float::\n* Syntax of a Complex::\n\n* Standard Macro Characters:\n\n* Left-Parenthesis::\n* Right-Parenthesis::\n* Single-Quote::\n* Semicolon::\n* Double-Quote::\n* Backquote::\n* Comma::\n* Sharpsign::\n* Re-Reading Abbreviated Expressions::\n\n* Single-Quote:\n\n* Examples of Single-Quote::\n\n* Semicolon:\n\n* Examples of Semicolon::\n* Notes about Style for Semicolon::\n* Use of Single Semicolon::\n* Use of Double Semicolon::\n* Use of Triple Semicolon::\n* Use of Quadruple Semicolon::\n* Examples of Style for Semicolon::\n\n* Backquote:\n\n* Notes about Backquote::\n\n* Sharpsign:\n\n* Sharpsign Backslash::\n* Sharpsign Single-Quote::\n* Sharpsign Left-Parenthesis::\n* Sharpsign Asterisk::\n* Examples of Sharpsign Asterisk::\n* Sharpsign Colon::\n* Sharpsign Dot::\n* Sharpsign B::\n* Sharpsign O::\n* Sharpsign X::\n* Sharpsign R::\n* Sharpsign C::\n* Sharpsign A::\n* Sharpsign S::\n* Sharpsign P::\n* Sharpsign Equal-Sign::\n* Sharpsign Sharpsign::\n* Sharpsign Plus::\n* Sharpsign Minus::\n* Sharpsign Vertical-Bar::\n* Examples of Sharpsign Vertical-Bar::\n* Notes about Style for Sharpsign Vertical-Bar::\n* Sharpsign Less-Than-Sign::\n* Sharpsign Whitespace::\n* Sharpsign Right-Parenthesis::\n\n* Evaluation and Compilation:\n\n* Evaluation::\n* Compilation::\n* Declarations::\n* Lambda Lists::\n* Error Checking in Function Calls::\n* Traversal Rules and Side Effects::\n* Destructive Operations::\n* Evaluation and Compilation Dictionary::\n\n* Evaluation:\n\n* Introduction to Environments::\n* The Evaluation Model::\n* Lambda Expressions::\n* Closures and Lexical Binding::\n* Shadowing::\n* Extent::\n* Return Values::\n\n* Introduction to Environments:\n\n* The Global Environment::\n* Dynamic Environments::\n* Lexical Environments::\n* The Null Lexical Environment::\n* Environment Objects::\n\n* The Evaluation Model:\n\n* Form Evaluation::\n* Symbols as Forms::\n* Lexical Variables::\n* Dynamic Variables::\n* Constant Variables::\n* Symbols Naming Both Lexical and Dynamic Variables::\n* Conses as Forms::\n* Special Forms::\n* Macro Forms::\n* Function Forms::\n* Lambda Forms::\n* Self-Evaluating Objects::\n* Examples of Self-Evaluating Objects::\n\n* Compilation:\n\n* Compiler Terminology::\n* Compilation Semantics::\n* File Compilation::\n* Literal Objects in Compiled Files::\n* Exceptional Situations in the Compiler::\n\n* Compilation Semantics:\n\n* Compiler Macros::\n* Purpose of Compiler Macros::\n* Naming of Compiler Macros::\n* When Compiler Macros Are Used::\n* Notes about the Implementation of Compiler Macros::\n* Minimal Compilation::\n* Semantic Constraints::\n\n* File Compilation:\n\n* Processing of Top Level Forms::\n* Processing of Defining Macros::\n* Constraints on Macros and Compiler Macros::\n\n* Literal Objects in Compiled Files:\n\n* Externalizable Objects::\n* Similarity of Literal Objects::\n* Similarity of Aggregate Objects::\n* Definition of Similarity::\n* Extensions to Similarity Rules::\n* Additional Constraints on Externalizable Objects::\n\n* Declarations:\n\n* Minimal Declaration Processing Requirements::\n* Declaration Specifiers::\n* Declaration Identifiers::\n* Declaration Scope::\n\n* Declaration Identifiers:\n\n* Shorthand notation for Type Declarations::\n\n* Declaration Scope:\n\n* Examples of Declaration Scope::\n\n* Lambda Lists:\n\n* Ordinary Lambda Lists::\n* Generic Function Lambda Lists::\n* Specialized Lambda Lists::\n* Macro Lambda Lists::\n* Destructuring Lambda Lists::\n* Boa Lambda Lists::\n* Defsetf Lambda Lists::\n* Deftype Lambda Lists::\n* Define-modify-macro Lambda Lists::\n* Define-method-combination Arguments Lambda Lists::\n* Syntactic Interaction of Documentation Strings and Declarations::\n\n* Ordinary Lambda Lists:\n\n* Specifiers for the required parameters::\n* Specifiers for optional parameters::\n* A specifier for a rest parameter::\n* Specifiers for keyword parameters::\n* Suppressing Keyword Argument Checking::\n* Examples of Suppressing Keyword Argument Checking::\n* Specifiers for &aux variables::\n* Examples of Ordinary Lambda Lists::\n\n* Macro Lambda Lists:\n\n* Destructuring by Lambda Lists::\n* Data-directed Destructuring by Lambda Lists::\n* Examples of Data-directed Destructuring by Lambda Lists::\n* Lambda-list-directed Destructuring by Lambda Lists::\n\n* Error Checking in Function Calls:\n\n* Argument Mismatch Detection::\n\n* Argument Mismatch Detection:\n\n* Safe and Unsafe Calls::\n* Error Detection Time in Safe Calls::\n* Too Few Arguments::\n* Too Many Arguments::\n* Unrecognized Keyword Arguments::\n* Invalid Keyword Arguments::\n* Odd Number of Keyword Arguments::\n* Destructuring Mismatch::\n* Errors When Calling a Next Method::\n\n* Destructive Operations:\n\n* Modification of Literal Objects::\n* Transfer of Control during a Destructive Operation::\n\n* Transfer of Control during a Destructive Operation:\n\n* Examples of Transfer of Control during a Destructive Operation::\n\n* Evaluation and Compilation Dictionary:\n\n* lambda (Symbol)::\n* lambda::\n* compile::\n* eval::\n* eval-when::\n* load-time-value::\n* quote::\n* compiler-macro-function::\n* define-compiler-macro::\n* defmacro::\n* macro-function::\n* macroexpand::\n* define-symbol-macro::\n* symbol-macrolet::\n* *macroexpand-hook*::\n* proclaim::\n* declaim::\n* declare::\n* ignore::\n* dynamic-extent::\n* type::\n* inline::\n* ftype::\n* declaration::\n* optimize::\n* special::\n* locally::\n* the::\n* special-operator-p::\n* constantp::\n\n* Types and Classes:\n\n* Introduction (Types and Classes)::\n* Types::\n* Classes::\n* Types and Classes Dictionary::\n\n* Types:\n\n* Data Type Definition::\n* Type Relationships::\n* Type Specifiers::\n\n* Classes:\n\n* Introduction to Classes::\n* Defining Classes::\n* Creating Instances of Classes::\n* Inheritance::\n* Determining the Class Precedence List::\n* Redefining Classes::\n* Integrating Types and Classes::\n\n* Introduction to Classes:\n\n* Standard Metaclasses::\n\n* Inheritance:\n\n* Examples of Inheritance::\n* Inheritance of Class Options::\n\n* Determining the Class Precedence List:\n\n* Topological Sorting::\n* Examples of Class Precedence List Determination::\n\n* Redefining Classes:\n\n* Modifying the Structure of Instances::\n* Initializing Newly Added Local Slots (Redefining Classes)::\n* Customizing Class Redefinition::\n\n* Types and Classes Dictionary:\n\n* nil (Type)::\n* boolean::\n* function (System Class)::\n* compiled-function::\n* generic-function::\n* standard-generic-function::\n* class::\n* built-in-class::\n* structure-class::\n* standard-class::\n* method::\n* standard-method::\n* structure-object::\n* standard-object::\n* method-combination::\n* t (System Class)::\n* satisfies::\n* member::\n* not (Type Specifier)::\n* and (Type Specifier)::\n* or (Type Specifier)::\n* values (Type Specifier)::\n* eql (Type Specifier)::\n* coerce::\n* deftype::\n* subtypep::\n* type-of::\n* typep::\n* type-error::\n* type-error-datum::\n* simple-type-error::\n\n* Data and Control Flow:\n\n* Generalized Reference::\n* Transfer of Control to an Exit Point::\n* Data and Control Flow Dictionary::\n\n* Generalized Reference:\n\n* Overview of Places and Generalized Reference::\n* Kinds of Places::\n* Treatment of Other Macros Based on SETF::\n\n* Overview of Places and Generalized Reference:\n\n* Evaluation of Subforms to Places::\n* Examples of Evaluation of Subforms to Places::\n* Setf Expansions::\n* Examples of Setf Expansions::\n\n* Kinds of Places:\n\n* Variable Names as Places::\n* Function Call Forms as Places::\n* VALUES Forms as Places::\n* THE Forms as Places::\n* APPLY Forms as Places::\n* Setf Expansions and Places::\n* Macro Forms as Places::\n* Symbol Macros as Places::\n* Other Compound Forms as Places::\n\n* Data and Control Flow Dictionary:\n\n* apply::\n* defun::\n* fdefinition::\n* fboundp::\n* fmakunbound::\n* flet::\n* funcall::\n* function (Special Operator)::\n* function-lambda-expression::\n* functionp::\n* compiled-function-p::\n* call-arguments-limit::\n* lambda-list-keywords::\n* lambda-parameters-limit::\n* defconstant::\n* defparameter::\n* destructuring-bind::\n* let::\n* progv::\n* setq::\n* psetq::\n* block::\n* catch::\n* go::\n* return-from::\n* return::\n* tagbody::\n* throw::\n* unwind-protect::\n* nil::\n* not::\n* t::\n* eq::\n* eql::\n* equal::\n* equalp::\n* identity::\n* complement::\n* constantly::\n* every::\n* and::\n* cond::\n* if::\n* or::\n* when::\n* case::\n* typecase::\n* multiple-value-bind::\n* multiple-value-call::\n* multiple-value-list::\n* multiple-value-prog1::\n* multiple-value-setq::\n* values::\n* values-list::\n* multiple-values-limit::\n* nth-value::\n* prog::\n* prog1::\n* progn::\n* define-modify-macro::\n* defsetf::\n* define-setf-expander::\n* get-setf-expansion::\n* setf::\n* shiftf::\n* rotatef::\n* control-error::\n* program-error::\n* undefined-function::\n\n* Iteration:\n\n* The LOOP Facility::\n* Iteration Dictionary::\n\n* The LOOP Facility:\n\n* Overview of the Loop Facility::\n* Variable Initialization and Stepping Clauses::\n* Value Accumulation Clauses::\n* Termination Test Clauses::\n* Unconditional Execution Clauses::\n* Conditional Execution Clauses::\n* Miscellaneous Clauses::\n* Examples of Miscellaneous Loop Features::\n* Notes about Loop::\n\n* Overview of the Loop Facility:\n\n* Simple vs Extended Loop::\n* Simple Loop::\n* Extended Loop::\n* Loop Keywords::\n* Parsing Loop Clauses::\n* Expanding Loop Forms::\n* Summary of Loop Clauses::\n* Summary of Variable Initialization and Stepping Clauses::\n* Summary of Value Accumulation Clauses::\n* Summary of Termination Test Clauses::\n* Summary of Unconditional Execution Clauses::\n* Summary of Conditional Execution Clauses::\n* Summary of Miscellaneous Clauses::\n* Order of Execution::\n* Destructuring::\n* Restrictions on Side-Effects::\n\n* Variable Initialization and Stepping Clauses:\n\n* Iteration Control::\n* The for-as-arithmetic subclause::\n* Examples of for-as-arithmetic subclause::\n* The for-as-in-list subclause::\n* Examples of for-as-in-list subclause::\n* The for-as-on-list subclause::\n* Examples of for-as-on-list subclause::\n* The for-as-equals-then subclause::\n* Examples of for-as-equals-then subclause::\n* The for-as-across subclause::\n* Examples of for-as-across subclause::\n* The for-as-hash subclause::\n* The for-as-package subclause::\n* Examples of for-as-package subclause::\n* Local Variable Initializations::\n* Examples of WITH clause::\n\n* Value Accumulation Clauses:\n\n* Examples of COLLECT clause::\n* Examples of APPEND and NCONC clauses::\n* Examples of COUNT clause::\n* Examples of MAXIMIZE and MINIMIZE clauses::\n* Examples of SUM clause::\n\n* Termination Test Clauses:\n\n* Examples of REPEAT clause::\n* Examples of ALWAYS::\n* Examples of WHILE and UNTIL clauses::\n\n* Unconditional Execution Clauses:\n\n* Examples of unconditional execution::\n\n* Conditional Execution Clauses:\n\n* Examples of WHEN clause::\n\n* Miscellaneous Clauses:\n\n* Control Transfer Clauses::\n* Examples of NAMED clause::\n* Initial and Final Execution::\n\n* Examples of Miscellaneous Loop Features:\n\n* Examples of clause grouping::\n\n* Iteration Dictionary:\n\n* do::\n* dotimes::\n* dolist::\n* loop::\n* loop-finish::\n\n* Objects:\n\n* Object Creation and Initialization::\n* Changing the Class of an Instance::\n* Reinitializing an Instance::\n* Meta-Objects::\n* Slots::\n* Generic Functions and Methods::\n* Objects Dictionary::\n\n* Object Creation and Initialization:\n\n* Initialization Arguments::\n* Declaring the Validity of Initialization Arguments::\n* Defaulting of Initialization Arguments::\n* Rules for Initialization Arguments::\n* Shared-Initialize::\n* Initialize-Instance::\n* Definitions of Make-Instance and Initialize-Instance::\n\n* Changing the Class of an Instance:\n\n* Modifying the Structure of the Instance::\n* Initializing Newly Added Local Slots (Changing the Class of an Instance)::\n* Customizing the Change of Class of an Instance::\n\n* Reinitializing an Instance:\n\n* Customizing Reinitialization::\n\n* Meta-Objects:\n\n* Standard Meta-objects::\n\n* Slots:\n\n* Introduction to Slots::\n* Accessing Slots::\n* Inheritance of Slots and Slot Options::\n\n* Generic Functions and Methods:\n\n* Introduction to Generic Functions::\n* Introduction to Methods::\n* Agreement on Parameter Specializers and Qualifiers::\n* Congruent Lambda-lists for all Methods of a Generic Function::\n* Keyword Arguments in Generic Functions and Methods::\n* Method Selection and Combination::\n* Inheritance of Methods::\n\n* Keyword Arguments in Generic Functions and Methods:\n\n* Examples of Keyword Arguments in Generic Functions and Methods::\n\n* Method Selection and Combination:\n\n* Determining the Effective Method::\n* Selecting the Applicable Methods::\n* Sorting the Applicable Methods by Precedence Order::\n* Applying method combination to the sorted list of applicable methods::\n* Standard Method Combination::\n* Declarative Method Combination::\n* Built-in Method Combination Types::\n\n* Objects Dictionary:\n\n* function-keywords::\n* ensure-generic-function::\n* allocate-instance::\n* reinitialize-instance::\n* shared-initialize::\n* update-instance-for-different-class::\n* update-instance-for-redefined-class::\n* change-class::\n* slot-boundp::\n* slot-exists-p::\n* slot-makunbound::\n* slot-missing::\n* slot-unbound::\n* slot-value::\n* method-qualifiers::\n* no-applicable-method::\n* no-next-method::\n* remove-method::\n* make-instance::\n* make-instances-obsolete::\n* make-load-form::\n* make-load-form-saving-slots::\n* with-accessors::\n* with-slots::\n* defclass::\n* defgeneric::\n* defmethod::\n* find-class::\n* next-method-p::\n* call-method::\n* call-next-method::\n* compute-applicable-methods::\n* define-method-combination::\n* find-method::\n* add-method::\n* initialize-instance::\n* class-name::\n* (setf class-name)::\n* class-of::\n* unbound-slot::\n* unbound-slot-instance::\n\n* Structures:\n\n* Structures Dictionary::\n\n* Structures Dictionary:\n\n* defstruct::\n* copy-structure::\n\n* Conditions:\n\n* Condition System Concepts::\n* Conditions Dictionary::\n\n* Condition System Concepts:\n\n* Condition Types::\n* Creating Conditions::\n* Printing Conditions::\n* Signaling and Handling Conditions::\n* Assertions::\n* Notes about the Condition System's Background::\n\n* Condition Types:\n\n* Serious Conditions::\n\n* Creating Conditions:\n\n* Condition Designators::\n\n* Printing Conditions:\n\n* Recommended Style in Condition Reporting::\n* Capitalization and Punctuation in Condition Reports::\n* Leading and Trailing Newlines in Condition Reports::\n* Embedded Newlines in Condition Reports::\n* Note about Tabs in Condition Reports::\n* Mentioning Containing Function in Condition Reports::\n\n* Signaling and Handling Conditions:\n\n* Signaling::\n* Resignaling a Condition::\n* Restarts::\n* Interactive Use of Restarts::\n* Interfaces to Restarts::\n* Restart Tests::\n* Associating a Restart with a Condition::\n\n* Conditions Dictionary:\n\n* condition::\n* warning::\n* style-warning::\n* serious-condition::\n* error (Condition Type)::\n* cell-error::\n* cell-error-name::\n* parse-error::\n* storage-condition::\n* assert::\n* error::\n* cerror::\n* check-type::\n* simple-error::\n* invalid-method-error::\n* method-combination-error::\n* signal::\n* simple-condition::\n* simple-condition-format-control::\n* warn::\n* simple-warning::\n* invoke-debugger::\n* break::\n* *debugger-hook*::\n* *break-on-signals*::\n* handler-bind::\n* handler-case::\n* ignore-errors::\n* define-condition::\n* make-condition::\n* restart::\n* compute-restarts::\n* find-restart::\n* invoke-restart::\n* invoke-restart-interactively::\n* restart-bind::\n* restart-case::\n* restart-name::\n* with-condition-restarts::\n* with-simple-restart::\n* abort::\n* continue::\n* muffle-warning::\n* store-value::\n* use-value::\n* abort::\n\n* Symbols:\n\n* Symbol Concepts::\n* Symbols Dictionary::\n\n* Symbols Dictionary:\n\n* symbol::\n* keyword::\n* symbolp::\n* keywordp::\n* make-symbol::\n* copy-symbol::\n* gensym::\n* *gensym-counter*::\n* gentemp::\n* symbol-function::\n* symbol-name::\n* symbol-package::\n* symbol-plist::\n* symbol-value::\n* get::\n* remprop::\n* boundp::\n* makunbound::\n* set::\n* unbound-variable::\n\n* Packages:\n\n* Package Concepts::\n* Packages Dictionary::\n\n* Package Concepts:\n\n* Introduction to Packages::\n* Standardized Packages::\n\n* Introduction to Packages:\n\n* Package Names and Nicknames::\n* Symbols in a Package::\n* Internal and External Symbols::\n* Package Inheritance::\n* Accessibility of Symbols in a Package::\n* Locating a Symbol in a Package::\n* Prevention of Name Conflicts in Packages::\n\n* Standardized Packages:\n\n* The COMMON-LISP Package::\n* Constraints on the COMMON-LISP Package for Conforming Implementations::\n* Constraints on the COMMON-LISP Package for Conforming Programs::\n* Some Exceptions to Constraints on the COMMON-LISP Package for Conforming Programs::\n* The COMMON-LISP-USER Package::\n* The KEYWORD Package::\n* Interning a Symbol in the KEYWORD Package::\n* Notes about The KEYWORD Package::\n* Implementation-Defined Packages::\n\n* Packages Dictionary:\n\n* package::\n* export::\n* find-symbol::\n* find-package::\n* find-all-symbols::\n* import::\n* list-all-packages::\n* rename-package::\n* shadow::\n* shadowing-import::\n* delete-package::\n* make-package::\n* with-package-iterator::\n* unexport::\n* unintern::\n* in-package::\n* unuse-package::\n* use-package::\n* defpackage::\n* do-symbols::\n* intern::\n* package-name::\n* package-nicknames::\n* package-shadowing-symbols::\n* package-use-list::\n* package-used-by-list::\n* packagep::\n* *package*::\n* package-error::\n* package-error-package::\n\n* Numbers:\n\n* Number Concepts::\n* Numbers Dictionary::\n\n* Number Concepts:\n\n* Numeric Operations::\n* Implementation-Dependent Numeric Constants::\n* Rational Computations::\n* Floating-point Computations::\n* Complex Computations::\n* Interval Designators::\n* Random-State Operations::\n\n* Numeric Operations:\n\n* Associativity and Commutativity in Numeric Operations::\n* Examples of Associativity and Commutativity in Numeric Operations::\n* Contagion in Numeric Operations::\n* Viewing Integers as Bits and Bytes::\n* Logical Operations on Integers::\n* Byte Operations on Integers::\n\n* Rational Computations:\n\n* Rule of Unbounded Rational Precision::\n* Rule of Canonical Representation for Rationals::\n* Rule of Float Substitutability::\n\n* Floating-point Computations:\n\n* Rule of Float and Rational Contagion::\n* Examples of Rule of Float and Rational Contagion::\n* Rule of Float Approximation::\n* Rule of Float Underflow and Overflow::\n* Rule of Float Precision Contagion::\n\n* Complex Computations:\n\n* Rule of Complex Substitutability::\n* Rule of Complex Contagion::\n* Rule of Canonical Representation for Complex Rationals::\n* Examples of Rule of Canonical Representation for Complex Rationals::\n* Principal Values and Branch Cuts::\n\n* Numbers Dictionary:\n\n* number::\n* complex (System Class)::\n* real::\n* float (System Class)::\n* short-float::\n* rational::\n* ratio::\n* integer::\n* signed-byte::\n* unsigned-byte::\n* mod::\n* bit::\n* fixnum::\n* bignum::\n* =::\n* max::\n* minusp::\n* zerop::\n* floor::\n* sin::\n* asin::\n* pi::\n* sinh::\n* *::\n* +::\n* -::\n* /::\n* 1+::\n* abs::\n* evenp::\n* exp::\n* gcd::\n* incf::\n* lcm::\n* log::\n* mod::\n* signum::\n* sqrt::\n* random-state::\n* make-random-state::\n* random::\n* random-state-p::\n* *random-state*::\n* numberp::\n* cis::\n* complex::\n* complexp::\n* conjugate::\n* phase::\n* realpart::\n* upgraded-complex-part-type::\n* realp::\n* numerator::\n* rational::\n* rationalp::\n* ash::\n* integer-length::\n* integerp::\n* parse-integer::\n* boole::\n* boole-1::\n* logand::\n* logbitp::\n* logcount::\n* logtest::\n* byte::\n* deposit-field::\n* dpb::\n* ldb::\n* ldb-test::\n* mask-field::\n* most-positive-fixnum::\n* decode-float::\n* float::\n* floatp::\n* most-positive-short-float::\n* short-float-epsilon::\n* arithmetic-error::\n* arithmetic-error-operands::\n* division-by-zero::\n* floating-point-invalid-operation::\n* floating-point-inexact::\n* floating-point-overflow::\n* floating-point-underflow::\n\n* Characters:\n\n* Character Concepts::\n* Characters Dictionary::\n\n* Character Concepts:\n\n* Introduction to Characters::\n* Introduction to Scripts and Repertoires::\n* Character Attributes::\n* Character Categories::\n* Identity of Characters::\n* Ordering of Characters::\n* Character Names::\n* Treatment of Newline during Input and Output::\n* Character Encodings::\n* Documentation of Implementation-Defined Scripts::\n\n* Introduction to Scripts and Repertoires:\n\n* Character Scripts::\n* Character Repertoires::\n\n* Character Categories:\n\n* Graphic Characters::\n* Alphabetic Characters::\n* Characters With Case::\n* Uppercase Characters::\n* Lowercase Characters::\n* Corresponding Characters in the Other Case::\n* Case of Implementation-Defined Characters::\n* Numeric Characters::\n* Alphanumeric Characters::\n* Digits in a Radix::\n\n* Characters Dictionary:\n\n* character (System Class)::\n* base-char::\n* standard-char::\n* extended-char::\n* char=::\n* character::\n* characterp::\n* alpha-char-p::\n* alphanumericp::\n* digit-char::\n* digit-char-p::\n* graphic-char-p::\n* standard-char-p::\n* char-upcase::\n* upper-case-p::\n* char-code::\n* char-int::\n* code-char::\n* char-code-limit::\n* char-name::\n* name-char::\n\n* Conses:\n\n* Cons Concepts::\n* Conses Dictionary::\n\n* Cons Concepts:\n\n* Conses as Trees::\n* Conses as Lists::\n\n* Conses as Trees:\n\n* General Restrictions on Parameters that must be Trees::\n\n* Conses as Lists:\n\n* Lists as Association Lists::\n* Lists as Sets::\n* General Restrictions on Parameters that must be Lists::\n\n* Conses Dictionary:\n\n* list::\n* null (System Class)::\n* cons (System Class)::\n* atom (Type)::\n* cons::\n* consp::\n* atom::\n* rplaca::\n* car::\n* copy-tree::\n* sublis::\n* subst::\n* tree-equal::\n* copy-list::\n* list::\n* list-length::\n* listp::\n* make-list::\n* push::\n* pop::\n* first::\n* nth::\n* endp::\n* null::\n* nconc::\n* append::\n* revappend::\n* butlast::\n* last::\n* ldiff::\n* nthcdr::\n* rest::\n* member::\n* mapc::\n* acons::\n* assoc::\n* copy-alist::\n* pairlis::\n* rassoc::\n* get-properties::\n* getf::\n* remf::\n* intersection::\n* adjoin::\n* pushnew::\n* set-difference::\n* set-exclusive-or::\n* subsetp::\n* union::\n\n* Arrays:\n\n* Array Concepts::\n* Arrays Dictionary::\n\n* Array Concepts:\n\n* Array Elements::\n* Specialized Arrays::\n\n* Array Elements:\n\n* Array Indices::\n* Array Dimensions::\n* Implementation Limits on Individual Array Dimensions::\n* Array Rank::\n* Vectors::\n* Fill Pointers::\n* Multidimensional Arrays::\n* Storage Layout for Multidimensional Arrays::\n* Implementation Limits on Array Rank::\n\n* Specialized Arrays:\n\n* Array Upgrading::\n* Required Kinds of Specialized Arrays::\n\n* Arrays Dictionary:\n\n* array::\n* simple-array::\n* vector (System Class)::\n* simple-vector::\n* bit-vector::\n* simple-bit-vector::\n* make-array::\n* adjust-array::\n* adjustable-array-p::\n* aref::\n* array-dimension::\n* array-dimensions::\n* array-element-type::\n* array-has-fill-pointer-p::\n* array-displacement::\n* array-in-bounds-p::\n* array-rank::\n* array-row-major-index::\n* array-total-size::\n* arrayp::\n* fill-pointer::\n* row-major-aref::\n* upgraded-array-element-type::\n* array-dimension-limit::\n* array-rank-limit::\n* array-total-size-limit::\n* simple-vector-p::\n* svref::\n* vector::\n* vector-pop::\n* vector-push::\n* vectorp::\n* bit::\n* bit-and::\n* bit-vector-p::\n* simple-bit-vector-p::\n\n* Strings:\n\n* String Concepts::\n* Strings Dictionary::\n\n* String Concepts:\n\n* Implications of Strings Being Arrays::\n* Subtypes of STRING::\n\n* Strings Dictionary:\n\n* string (System Class)::\n* base-string::\n* simple-string::\n* simple-base-string::\n* simple-string-p::\n* char::\n* string::\n* string-upcase::\n* string-trim::\n* string=::\n* stringp::\n* make-string::\n\n* Sequences:\n\n* Sequence Concepts::\n* Rules about Test Functions::\n* Sequences Dictionary::\n\n* Sequence Concepts:\n\n* General Restrictions on Parameters that must be Sequences::\n\n* Rules about Test Functions:\n\n* Satisfying a Two-Argument Test::\n* Satisfying a One-Argument Test::\n\n* Satisfying a Two-Argument Test:\n\n* Examples of Satisfying a Two-Argument Test::\n\n* Satisfying a One-Argument Test:\n\n* Examples of Satisfying a One-Argument Test::\n\n* Sequences Dictionary:\n\n* sequence::\n* copy-seq::\n* elt::\n* fill::\n* make-sequence::\n* subseq::\n* map::\n* map-into::\n* reduce::\n* count::\n* length::\n* reverse::\n* sort::\n* find::\n* position::\n* search::\n* mismatch::\n* replace::\n* substitute::\n* concatenate::\n* merge::\n* remove::\n* remove-duplicates::\n\n* Hash Tables:\n\n* Hash Table Concepts::\n* Hash Tables Dictionary::\n\n* Hash Table Concepts:\n\n* Hash-Table Operations::\n* Modifying Hash Table Keys::\n\n* Modifying Hash Table Keys:\n\n* Visible Modification of Objects with respect to EQ and EQL::\n* Visible Modification of Objects with respect to EQUAL::\n* Visible Modification of Conses with respect to EQUAL::\n* Visible Modification of Bit Vectors and Strings with respect to EQUAL::\n* Visible Modification of Objects with respect to EQUALP::\n* Visible Modification of Structures with respect to EQUALP::\n* Visible Modification of Arrays with respect to EQUALP::\n* Visible Modification of Hash Tables with respect to EQUALP::\n* Visible Modifications by Language Extensions::\n\n* Hash Tables Dictionary:\n\n* hash-table::\n* make-hash-table::\n* hash-table-p::\n* hash-table-count::\n* hash-table-rehash-size::\n* hash-table-rehash-threshold::\n* hash-table-size::\n* hash-table-test::\n* gethash::\n* remhash::\n* maphash::\n* with-hash-table-iterator::\n* clrhash::\n* sxhash::\n\n* Filenames:\n\n* Overview of Filenames::\n* Pathnames::\n* Logical Pathnames::\n* Filenames Dictionary::\n\n* Overview of Filenames:\n\n* Namestrings as Filenames::\n* Pathnames as Filenames::\n* Parsing Namestrings Into Pathnames::\n\n* Pathnames:\n\n* Pathname Components::\n* Interpreting Pathname Component Values::\n* Merging Pathnames::\n\n* Pathname Components:\n\n* The Pathname Host Component::\n* The Pathname Device Component::\n* The Pathname Directory Component::\n* The Pathname Name Component::\n* The Pathname Type Component::\n* The Pathname Version Component::\n\n* Interpreting Pathname Component Values:\n\n* Strings in Component Values::\n* Special Characters in Pathname Components::\n* Case in Pathname Components::\n* Local Case in Pathname Components::\n* Common Case in Pathname Components::\n* Special Pathname Component Values::\n* NIL as a Component Value::\n* ->WILD as a Component Value::\n* ->UNSPECIFIC as a Component Value::\n* Relation between component values NIL and ->UNSPECIFIC::\n* Restrictions on Wildcard Pathnames::\n* Restrictions on Examining Pathname Components::\n* Restrictions on Examining a Pathname Host Component::\n* Restrictions on Examining a Pathname Device Component::\n* Restrictions on Examining a Pathname Directory Component::\n* Directory Components in Non-Hierarchical File Systems::\n* Restrictions on Examining a Pathname Name Component::\n* Restrictions on Examining a Pathname Type Component::\n* Restrictions on Examining a Pathname Version Component::\n* Notes about the Pathname Version Component::\n* Restrictions on Constructing Pathnames::\n\n* Merging Pathnames:\n\n* Examples of Merging Pathnames::\n\n* Logical Pathnames:\n\n* Syntax of Logical Pathname Namestrings::\n* Logical Pathname Components::\n\n* Syntax of Logical Pathname Namestrings:\n\n* Additional Information about Parsing Logical Pathname Namestrings::\n* The Host part of a Logical Pathname Namestring::\n* The Device part of a Logical Pathname Namestring::\n* The Directory part of a Logical Pathname Namestring::\n* The Type part of a Logical Pathname Namestring::\n* The Version part of a Logical Pathname Namestring::\n* Wildcard Words in a Logical Pathname Namestring::\n* Lowercase Letters in a Logical Pathname Namestring::\n* Other Syntax in a Logical Pathname Namestring::\n\n* Logical Pathname Components:\n\n* Unspecific Components of a Logical Pathname::\n* Null Strings as Components of a Logical Pathname::\n\n* Filenames Dictionary:\n\n* pathname (System Class)::\n* logical-pathname (System Class)::\n* pathname::\n* make-pathname::\n* pathnamep::\n* pathname-host::\n* load-logical-pathname-translations::\n* logical-pathname-translations::\n* logical-pathname::\n* *default-pathname-defaults*::\n* namestring::\n* parse-namestring::\n* wild-pathname-p::\n* pathname-match-p::\n* translate-logical-pathname::\n* translate-pathname::\n* merge-pathnames::\n\n* Files:\n\n* File System Concepts::\n* Files Dictionary::\n\n* File System Concepts:\n\n* Coercion of Streams to Pathnames::\n* File Operations on Open and Closed Streams::\n* Truenames::\n\n* Truenames:\n\n* Examples of Truenames::\n\n* Files Dictionary:\n\n* directory::\n* probe-file::\n* ensure-directories-exist::\n* truename::\n* file-author::\n* file-write-date::\n* rename-file::\n* delete-file::\n* file-error::\n* file-error-pathname::\n\n* Streams:\n\n* Stream Concepts::\n* Streams Dictionary::\n\n* Stream Concepts:\n\n* Introduction to Streams::\n* Stream Variables::\n* Stream Arguments to Standardized Functions::\n* Restrictions on Composite Streams::\n\n* Introduction to Streams:\n\n* Abstract Classifications of Streams (Introduction to Streams)::\n* Input::\n* Open and Closed Streams::\n* Interactive Streams::\n* Abstract Classifications of Streams::\n* File Streams::\n* Other Subclasses of Stream::\n\n* Streams Dictionary:\n\n* stream::\n* broadcast-stream::\n* concatenated-stream::\n* echo-stream::\n* file-stream::\n* string-stream::\n* synonym-stream::\n* two-way-stream::\n* input-stream-p::\n* interactive-stream-p::\n* open-stream-p::\n* stream-element-type::\n* streamp::\n* read-byte::\n* write-byte::\n* peek-char::\n* read-char::\n* read-char-no-hang::\n* terpri::\n* unread-char::\n* write-char::\n* read-line::\n* write-string::\n* read-sequence::\n* write-sequence::\n* file-length::\n* file-position::\n* file-string-length::\n* open::\n* stream-external-format::\n* with-open-file::\n* close::\n* with-open-stream::\n* listen::\n* clear-input::\n* finish-output::\n* y-or-n-p::\n* make-synonym-stream::\n* synonym-stream-symbol::\n* broadcast-stream-streams::\n* make-broadcast-stream::\n* make-two-way-stream::\n* two-way-stream-input-stream::\n* echo-stream-input-stream::\n* make-echo-stream::\n* concatenated-stream-streams::\n* make-concatenated-stream::\n* get-output-stream-string::\n* make-string-input-stream::\n* make-string-output-stream::\n* with-input-from-string::\n* with-output-to-string::\n* *debug-io*::\n* *terminal-io*::\n* stream-error::\n* stream-error-stream::\n* end-of-file::\n\n* Printer:\n\n* The Lisp Printer::\n* The Lisp Pretty Printer::\n* Formatted Output::\n* Printer Dictionary::\n\n* The Lisp Printer:\n\n* Overview of The Lisp Printer::\n* Printer Dispatching::\n* Default Print-Object Methods::\n* Examples of Printer Behavior::\n\n* Overview of The Lisp Printer:\n\n* Multiple Possible Textual Representations::\n* Printer Escaping::\n\n* Default Print-Object Methods:\n\n* Printing Numbers::\n* Printing Integers::\n* Printing Ratios::\n* Printing Floats::\n* Printing Complexes::\n* Note about Printing Numbers::\n* Printing Characters::\n* Printing Symbols::\n* Package Prefixes for Symbols::\n* Effect of Readtable Case on the Lisp Printer::\n* Examples of Effect of Readtable Case on the Lisp Printer::\n* Printing Strings::\n* Printing Lists and Conses::\n* Printing Bit Vectors::\n* Printing Other Vectors::\n* Printing Other Arrays::\n* Examples of Printing Arrays::\n* Printing Random States::\n* Printing Pathnames::\n* Printing Structures::\n* Printing Other Objects::\n\n* The Lisp Pretty Printer:\n\n* Pretty Printer Concepts::\n* Examples of using the Pretty Printer::\n* Notes about the Pretty Printer's Background::\n\n* Pretty Printer Concepts:\n\n* Dynamic Control of the Arrangement of Output::\n* Format Directive Interface::\n* Compiling Format Strings::\n* Pretty Print Dispatch Tables::\n* Pretty Printer Margins::\n\n* Formatted Output:\n\n* FORMAT Basic Output::\n* FORMAT Radix Control::\n* FORMAT Floating-Point Printers::\n* FORMAT Printer Operations::\n* FORMAT Pretty Printer Operations::\n* FORMAT Layout Control::\n* FORMAT Control-Flow Operations::\n* FORMAT Miscellaneous Operations::\n* FORMAT Miscellaneous Pseudo-Operations::\n* Additional Information about FORMAT Operations::\n* Examples of FORMAT::\n* Notes about FORMAT::\n\n* FORMAT Basic Output:\n\n* Tilde C-> Character::\n* Tilde Percent-> Newline::\n* Tilde Ampersand-> Fresh-Line::\n* Tilde Vertical-Bar-> Page::\n* Tilde Tilde-> Tilde::\n\n* FORMAT Radix Control:\n\n* Tilde R-> Radix::\n* Tilde D-> Decimal::\n* Tilde B-> Binary::\n* Tilde O-> Octal::\n* Tilde X-> Hexadecimal::\n\n* FORMAT Floating-Point Printers:\n\n* Tilde F-> Fixed-Format Floating-Point::\n* Tilde E-> Exponential Floating-Point::\n* Tilde G-> General Floating-Point::\n* Tilde Dollarsign-> Monetary Floating-Point::\n\n* FORMAT Printer Operations:\n\n* Tilde A-> Aesthetic::\n* Tilde S-> Standard::\n* Tilde W-> Write::\n\n* FORMAT Pretty Printer Operations:\n\n* Tilde Underscore-> Conditional Newline::\n* Tilde Less-Than-Sign-> Logical Block::\n* Tilde I-> Indent::\n* Tilde Slash-> Call Function::\n\n* FORMAT Layout Control:\n\n* Tilde T-> Tabulate::\n* Tilde Less-Than-Sign-> Justification::\n* Tilde Greater-Than-Sign-> End of Justification::\n\n* FORMAT Control-Flow Operations:\n\n* Tilde Asterisk-> Go-To::\n* Tilde Left-Bracket-> Conditional Expression::\n* Tilde Right-Bracket-> End of Conditional Expression::\n* Tilde Left-Brace-> Iteration::\n* Tilde Right-Brace-> End of Iteration::\n* Tilde Question-Mark-> Recursive Processing::\n\n* FORMAT Miscellaneous Operations:\n\n* Tilde Left-Paren-> Case Conversion::\n* Tilde Right-Paren-> End of Case Conversion::\n* Tilde P-> Plural::\n\n* FORMAT Miscellaneous Pseudo-Operations:\n\n* Tilde Semicolon-> Clause Separator::\n* Tilde Circumflex-> Escape Upward::\n* Tilde Newline-> Ignored Newline::\n\n* Additional Information about FORMAT Operations:\n\n* Nesting of FORMAT Operations::\n* Missing and Additional FORMAT Arguments::\n* Additional FORMAT Parameters::\n* Undefined FORMAT Modifier Combinations::\n\n* Printer Dictionary:\n\n* copy-pprint-dispatch::\n* formatter::\n* pprint-dispatch::\n* pprint-exit-if-list-exhausted::\n* pprint-fill::\n* pprint-indent::\n* pprint-logical-block::\n* pprint-newline::\n* pprint-pop::\n* pprint-tab::\n* print-object::\n* print-unreadable-object::\n* set-pprint-dispatch::\n* write::\n* write-to-string::\n* *print-array*::\n* *print-base*::\n* *print-case*::\n* *print-circle*::\n* *print-escape*::\n* *print-gensym*::\n* *print-level*::\n* *print-lines*::\n* *print-miser-width*::\n* *print-pprint-dispatch*::\n* *print-pretty*::\n* *print-readably*::\n* *print-right-margin*::\n* print-not-readable::\n* print-not-readable-object::\n* format::\n\n* Reader:\n\n* Reader Concepts::\n* Reader Dictionary::\n\n* Reader Concepts:\n\n* Dynamic Control of the Lisp Reader::\n* Effect of Readtable Case on the Lisp Reader::\n* Argument Conventions of Some Reader Functions::\n\n* Effect of Readtable Case on the Lisp Reader:\n\n* Examples of Effect of Readtable Case on the Lisp Reader::\n\n* Argument Conventions of Some Reader Functions:\n\n* The EOF-ERROR-P argument::\n* The RECURSIVE-P argument::\n\n* Reader Dictionary:\n\n* readtable::\n* copy-readtable::\n* make-dispatch-macro-character::\n* read::\n* read-delimited-list::\n* read-from-string::\n* readtable-case::\n* readtablep::\n* set-dispatch-macro-character::\n* set-macro-character::\n* set-syntax-from-char::\n* with-standard-io-syntax::\n* *read-base*::\n* *read-default-float-format*::\n* *read-eval*::\n* *read-suppress*::\n* *readtable*::\n* reader-error::\n\n* System Construction:\n\n* System Construction Concepts::\n* System Construction Dictionary::\n\n* System Construction Concepts:\n\n* Loading::\n* Features::\n\n* Features:\n\n* Feature Expressions::\n* Examples of Feature Expressions::\n\n* System Construction Dictionary:\n\n* compile-file::\n* compile-file-pathname::\n* load::\n* with-compilation-unit::\n* *features*::\n* *compile-file-pathname*::\n* *load-pathname*::\n* *compile-print*::\n* *load-print*::\n* *modules*::\n* provide::\n\n* Environment:\n\n* The External Environment::\n* Environment Dictionary::\n\n* The External Environment:\n\n* Top level loop::\n* Debugging Utilities::\n* Environment Inquiry::\n* Time::\n\n* Time:\n\n* Decoded Time::\n* Universal Time::\n* Internal Time::\n* Seconds::\n\n* Environment Dictionary:\n\n* decode-universal-time::\n* encode-universal-time::\n* get-universal-time::\n* sleep::\n* apropos::\n* describe::\n* describe-object::\n* trace::\n* step::\n* time::\n* internal-time-units-per-second::\n* get-internal-real-time::\n* get-internal-run-time::\n* disassemble::\n* documentation::\n* room::\n* ed::\n* inspect::\n* dribble::\n* -::\n* +::\n* *::\n* /::\n* lisp-implementation-type::\n* short-site-name::\n* machine-instance::\n* machine-type::\n* machine-version::\n* software-type::\n* user-homedir-pathname::\n\n* Glossary:\n\n* Glossary::\n\n* Appendix:\n\n* Removed Language Features::\n\n* Removed Language Features:\n\n* Requirements for removed and deprecated features::\n* Removed Types::\n* Removed Operators::\n* Removed Argument Conventions::\n* Removed Variables::\n* Removed Reader Syntax::\n* Packages No Longer Required::\n\n"
}