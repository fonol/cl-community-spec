{
    "name": "Notes about Backquote",
    "prev": "Backquote",
    "next": null,
    "up": "Backquote",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Notes about Backquote",
            "text": "Since the exact manner in which the Lisp reader will parse an expression\ninvolving the backquote reader macro is not specified, an implementation\nis free to choose any representation that preserves the semantics\ndescribed.\nOften an implementation will choose a representation that facilitates\npretty printing of the expression, so that (pprint `(a ,b)) will display\n`(a ,b) and not, for example, (list 'a b).  However, this is not a\nrequirement.\nImplementors who have no particular reason to make one choice or another\nmight wish to refer to IEEE Standard for the Scheme Programming Language,\nwhich identifies a popular choice of representation for such expressions\nthat might provide useful to be useful compatibility for some user\ncommunities.  There is no requirement, however, that any conforming\nimplementation use this particular representation.  This information is\nprovided merely for cross-reference purposes.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Notes about Backquote,  Prev: Backquote,  Up: Backquote\n\nNotes about Backquote\n.....................\n\nSince the exact manner in which the Lisp reader will parse an expression\ninvolving the backquote reader macro is not specified, an implementation\nis free to choose any representation that preserves the semantics\ndescribed.\n\nOften an implementation will choose a representation that facilitates\npretty printing of the expression, so that (pprint `(a ,b)) will display\n`(a ,b) and not, for example, (list 'a b).  However, this is not a\nrequirement.\n\nImplementors who have no particular reason to make one choice or another\nmight wish to refer to IEEE Standard for the Scheme Programming Language,\nwhich identifies a popular choice of representation for such expressions\nthat might provide useful to be useful compatibility for some user\ncommunities.  There is no requirement, however, that any conforming\nimplementation use this particular representation.  This information is\nprovided merely for cross-reference purposes.\n\n"
}