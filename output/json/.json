{
    "name": "=",
    "prev": "bignum",
    "next": "max",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "=, /=, <, >, <=, >="
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "=",
                    "text": " &rest numbers^+ =>  generalized-boolean\n"
                },
                {
                    "name": "/=",
                    "text": " &rest numbers^+ =>  generalized-boolean\n\n"
                },
                {
                    "name": "<",
                    "text": " &rest numbers^+ =>  generalized-boolean\n\n"
                },
                {
                    "name": ">",
                    "text": " &rest numbers^+ =>  generalized-boolean\n\n"
                },
                {
                    "name": "<=",
                    "text": " &rest numbers^+ =>  generalized-boolean\n\n"
                },
                {
                    "name": ">=",
                    "text": " &rest numbers^+ =>  generalized-boolean\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "number",
                    "desc": "for <, >, <=, >=: a real; for =, /=: a number."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "=, /=, <, >, <=, and >= perform arithmetic comparisons on their arguments\nas follows:\n=\n     The value of = is true if all numbers are the same in value;\n     otherwise it is false.  Two complexes are considered equal by = if\n     their real and imaginary parts are equal according to =.\n/=\n     The value of /= is true if no two numbers are the same in value;\n     otherwise it is false.\n<\n     The value of < is true if the numbers are in monotonically increasing\n     order; otherwise it is false.\n>\n     The value of > is true if the numbers are in monotonically decreasing\n     order; otherwise it is false.\n<=\n     The value of <= is true if the numbers are in monotonically\n     nondecreasing order; otherwise it is false.\n>=\n     The value of >= is true if the numbers are in monotonically\n     nonincreasing order; otherwise it is false.\n=, /=, <, >, <=, and >= perform necessary type conversions.\n"
        },
        {
            "type": "Examples",
            "text": "The uses of these functions are illustrated in Figure 12-12.\n  (= 3 3) is true.              (/= 3 3) is false.             \n  (= 3 5) is false.             (/= 3 5) is true.              \n  (= 3 3 3 3) is true.          (/= 3 3 3 3) is false.         \n  (= 3 3 5 3) is false.         (/= 3 3 5 3) is false.         \n  (= 3 6 5 2) is false.         (/= 3 6 5 2) is true.          \n  (= 3 2 3) is false.           (/= 3 2 3) is false.           \n  (< 3 5) is true.              (<= 3 5) is true.              \n  (< 3 -5) is false.            (<= 3 -5) is false.            \n  (< 3 3) is false.             (<= 3 3) is true.              \n  (< 0 3 4 6 7) is true.        (<= 0 3 4 6 7) is true.        \n  (< 0 3 4 4 6) is false.       (<= 0 3 4 4 6) is true.        \n  (> 4 3) is true.              (>= 4 3) is true.              \n  (> 4 3 2 1 0) is true.        (>= 4 3 2 1 0) is true.        \n  (> 4 3 3 2 0) is false.       (>= 4 3 3 2 0) is true.        \n  (> 4 3 1 2 0) is false.       (>= 4 3 1 2 0) is false.       \n  (= 3) is true.                (/= 3) is true.                \n  (< 3) is true.                (<= 3) is true.                \n  (= 3.0 #c(3.0 0.0)) is true.  (/= 3.0 #c(3.0 1.0)) is true.  \n  (= 3 3.0) is true.            (= 3.0s0 3.0d0) is true.       \n  (= 0.0 -0.0) is true.         (= 5/2 2.5) is true.           \n  (> 0.0 -0.0) is false.        (= 0 -0.0) is true.            \n  (<= 0 x 9) is true if x is between 0 and 9, inclusive\n  (< 0.0 x 1.0) is true if x is between 0.0 and 1.0, exclusive\n  (< -1 j (length v)) is true if j is a valid array index for a vector v\n         Figure 12-12: Uses of /=, =, <, >, <=, and >=        \n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Might signal type-error if some argument is not a real.  Might signal\narithmetic-error if otherwise unable to fulfill its contract.\n"
        },
        {
            "type": "Notes",
            "text": "= differs from eql in that (= 0.0 -0.0) is always true, because = compares\nthe mathematical values of its operands, whereas eql compares the\nrepresentational values, so to speak.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: =,  Next: max,  Prev: bignum,  Up: Numbers Dictionary\n\n=, /=, <, >, <=, >=                                              [Function]\n---------------------------------------------------------------------------\n\n`='  &rest numbers^+ =>  generalized-boolean\n\n`/='  &rest numbers^+ =>  generalized-boolean\n\n`<'  &rest numbers^+ =>  generalized-boolean\n\n`>'  &rest numbers^+ =>  generalized-boolean\n\n`<='  &rest numbers^+ =>  generalized-boolean\n\n`>='  &rest numbers^+ =>  generalized-boolean\n\nArguments and Values::\n......................\n\nnumber--for <, >, <=, >=: a real; for =, /=: a number.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\n=, /=, <, >, <=, and >= perform arithmetic comparisons on their arguments\nas follows:\n\n=\n     The value of = is true if all numbers are the same in value;\n     otherwise it is false.  Two complexes are considered equal by = if\n     their real and imaginary parts are equal according to =.\n\n/=\n     The value of /= is true if no two numbers are the same in value;\n     otherwise it is false.\n\n<\n     The value of < is true if the numbers are in monotonically increasing\n     order; otherwise it is false.\n\n>\n     The value of > is true if the numbers are in monotonically decreasing\n     order; otherwise it is false.\n\n<=\n     The value of <= is true if the numbers are in monotonically\n     nondecreasing order; otherwise it is false.\n\n>=\n     The value of >= is true if the numbers are in monotonically\n     nonincreasing order; otherwise it is false.\n\n=, /=, <, >, <=, and >= perform necessary type conversions.\n\nExamples::\n..........\n\nThe uses of these functions are illustrated in Figure 12-12.\n\n  (= 3 3) is true.              (/= 3 3) is false.             \n  (= 3 5) is false.             (/= 3 5) is true.              \n  (= 3 3 3 3) is true.          (/= 3 3 3 3) is false.         \n  (= 3 3 5 3) is false.         (/= 3 3 5 3) is false.         \n  (= 3 6 5 2) is false.         (/= 3 6 5 2) is true.          \n  (= 3 2 3) is false.           (/= 3 2 3) is false.           \n  (< 3 5) is true.              (<= 3 5) is true.              \n  (< 3 -5) is false.            (<= 3 -5) is false.            \n  (< 3 3) is false.             (<= 3 3) is true.              \n  (< 0 3 4 6 7) is true.        (<= 0 3 4 6 7) is true.        \n  (< 0 3 4 4 6) is false.       (<= 0 3 4 4 6) is true.        \n  (> 4 3) is true.              (>= 4 3) is true.              \n  (> 4 3 2 1 0) is true.        (>= 4 3 2 1 0) is true.        \n  (> 4 3 3 2 0) is false.       (>= 4 3 3 2 0) is true.        \n  (> 4 3 1 2 0) is false.       (>= 4 3 1 2 0) is false.       \n  (= 3) is true.                (/= 3) is true.                \n  (< 3) is true.                (<= 3) is true.                \n  (= 3.0 #c(3.0 0.0)) is true.  (/= 3.0 #c(3.0 1.0)) is true.  \n  (= 3 3.0) is true.            (= 3.0s0 3.0d0) is true.       \n  (= 0.0 -0.0) is true.         (= 5/2 2.5) is true.           \n  (> 0.0 -0.0) is false.        (= 0 -0.0) is true.            \n  (<= 0 x 9) is true if x is between 0 and 9, inclusive\n  (< 0.0 x 1.0) is true if x is between 0.0 and 1.0, exclusive\n  (< -1 j (length v)) is true if j is a valid array index for a vector v\n\n         Figure 12-12: Uses of /=, =, <, >, <=, and >=        \n\n\nExceptional Situations::\n........................\n\nMight signal type-error if some argument is not a real.  Might signal\narithmetic-error if otherwise unable to fulfill its contract.\n\nNotes::\n.......\n\n= differs from eql in that (= 0.0 -0.0) is always true, because = compares\nthe mathematical values of its operands, whereas eql compares the\nrepresentational values, so to speak.\n\n"
}