{
    "name": "Summary of Termination Test Clauses",
    "prev": "Summary of Value Accumulation Clauses",
    "next": "Summary of Unconditional Execution Clauses",
    "up": "Overview of the Loop Facility",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Summary of Termination Test Clauses",
            "text": "The for and as constructs provide a termination test that is determined by\nthe iteration control clause.\nThe repeat construct causes termination after a specified number of\niterations.  (It uses an internal variable to keep track of the number of\niterations.)\nThe while construct takes one form, a test, and terminates the iteration\nif the test evaluates to false.  A while clause is equivalent to the\nexpression (if (not test) (loop-finish)).\nThe until construct is the inverse of while; it terminates the iteration\nif the test evaluates to any non-nil value.  An until clause is equivalent\nto the expression (if test (loop-finish)).\nThe always construct takes one form and terminates the loop if the form\never evaluates to false; in this case, the loop form returns nil.\nOtherwise, it provides a default return value of t.\nThe never construct takes one form and terminates the loop if the form\never evaluates to true; in this case, the loop form returns nil.\nOtherwise, it provides a default return value of t.\nThe thereis construct takes one form and terminates the loop if the form\never evaluates to a non-nil object; in this case, the loop form returns\nthat object.\nOtherwise, it provides a default return value of nil.\nIf multiple termination test clauses are specified, the loop form\nterminates if any are satisfied.\nFor more information, see *Note Termination Test Clauses::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Summary of Termination Test Clauses,  Next: Summary of Unconditional Execution Clauses,  Prev: Summary of Value Accumulation Clauses,  Up: Overview of the Loop Facility\n\nSummary of Termination Test Clauses\n...................................\n\nThe for and as constructs provide a termination test that is determined by\nthe iteration control clause.\n\nThe repeat construct causes termination after a specified number of\niterations.  (It uses an internal variable to keep track of the number of\niterations.)\n\nThe while construct takes one form, a test, and terminates the iteration\nif the test evaluates to false.  A while clause is equivalent to the\nexpression (if (not test) (loop-finish)).\n\nThe until construct is the inverse of while; it terminates the iteration\nif the test evaluates to any non-nil value.  An until clause is equivalent\nto the expression (if test (loop-finish)).\n\nThe always construct takes one form and terminates the loop if the form\never evaluates to false; in this case, the loop form returns nil.\nOtherwise, it provides a default return value of t.\n\nThe never construct takes one form and terminates the loop if the form\never evaluates to true; in this case, the loop form returns nil.\nOtherwise, it provides a default return value of t.\n\nThe thereis construct takes one form and terminates the loop if the form\never evaluates to a non-nil object; in this case, the loop form returns\nthat object.\n\nOtherwise, it provides a default return value of nil.\n\nIf multiple termination test clauses are specified, the loop form\nterminates if any are satisfied.\n\nFor more information, see *Note Termination Test Clauses::.\n\n"
}