{
    "name": "Internal and External Symbols",
    "prev": "Symbols in a Package",
    "next": "Package Inheritance",
    "up": "Introduction to Packages",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Internal and External Symbols",
            "text": "The mappings in a package are divided into two classes, external and\ninternal.  The symbols targeted by these different mappings are called\nexternal symbols and internal symbols of the package. Within a package, a\nname refers to one symbol or to none; if it does refer to a symbol, then\nit is either external or internal in that package, but not both.  External\nsymbols\nare part of the package's public interface to other packages.  Symbols\nbecome external symbols of a given package if they have been exported from\nthat package.\nA symbol has the same name no matter what package it is present in, but it\nmight be an external symbol of some packages and an internal symbol of\nothers.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Internal and External Symbols,  Next: Package Inheritance,  Prev: Symbols in a Package,  Up: Introduction to Packages\n\nInternal and External Symbols\n.............................\n\nThe mappings in a package are divided into two classes, external and\ninternal.  The symbols targeted by these different mappings are called\nexternal symbols and internal symbols of the package. Within a package, a\nname refers to one symbol or to none; if it does refer to a symbol, then\nit is either external or internal in that package, but not both.  External\nsymbols\n\nare part of the package's public interface to other packages.  Symbols\nbecome external symbols of a given package if they have been exported from\nthat package.\n\nA symbol has the same name no matter what package it is present in, but it\nmight be an external symbol of some packages and an internal symbol of\nothers.\n\n"
}