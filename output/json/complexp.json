{
    "name": "complexp",
    "prev": "complex",
    "next": "conjugate",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "complexp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "complexp",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type complex; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (complexp 1.2d2) =>  false\n      (complexp #c(5/3 7.2)) =>  true\n"
        },
        {
            "type": "See Also",
            "text": "*Note complex:: (function and type), *Note typep::\n"
        },
        {
            "type": "Notes",
            "text": "      (complexp object) == (typep object 'complex)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: complexp,  Next: conjugate,  Prev: complex,  Up: Numbers Dictionary\n\ncomplexp                                                         [Function]\n---------------------------------------------------------------------------\n\n`complexp'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type complex; otherwise, returns false.\n\nExamples::\n..........\n\n      (complexp 1.2d2) =>  false\n      (complexp #c(5/3 7.2)) =>  true\n\nSee Also::\n..........\n\n*Note complex:: (function and type), *Note typep::\n\nNotes::\n.......\n\n      (complexp object) == (typep object 'complex)\n\n"
}