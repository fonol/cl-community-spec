{
    "name": "Loop Keywords",
    "prev": "Extended Loop",
    "next": "Parsing Loop Clauses",
    "up": "Overview of the Loop Facility",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Loop Keywords",
            "text": "Loop keywords are not true keywords_1; they are special symbols,\nrecognized by name rather than object identity, that are meaningful only\nto the loop facility.  A loop keyword is a symbol but is recognized by its\nname (not its identity), regardless of the packages in which it is\naccessible.\nIn general, loop keywords are not external symbols of the COMMON-LISP\npackage, except in the coincidental situation that a symbol with the same\nname as a loop keyword was needed for some other purpose in Common Lisp.\nFor example, there is a symbol in the COMMON-LISP package whose name is\n\"UNLESS\" but not one whose name is \"UNTIL\".\nIf no loop keywords are supplied in a loop form, the Loop Facility\nexecutes the loop body repeatedly; see *Note Simple Loop::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Loop Keywords,  Next: Parsing Loop Clauses,  Prev: Extended Loop,  Up: Overview of the Loop Facility\n\nLoop Keywords\n.............\n\nLoop keywords are not true keywords_1; they are special symbols,\nrecognized by name rather than object identity, that are meaningful only\nto the loop facility.  A loop keyword is a symbol but is recognized by its\nname (not its identity), regardless of the packages in which it is\naccessible.\n\nIn general, loop keywords are not external symbols of the COMMON-LISP\npackage, except in the coincidental situation that a symbol with the same\nname as a loop keyword was needed for some other purpose in Common Lisp.\nFor example, there is a symbol in the COMMON-LISP package whose name is\n\"UNLESS\" but not one whose name is \"UNTIL\".\n\nIf no loop keywords are supplied in a loop form, the Loop Facility\nexecutes the loop body repeatedly; see *Note Simple Loop::.\n\n"
}