{
    "name": "Examples of WHEN clause",
    "prev": "Conditional Execution Clauses",
    "next": null,
    "up": "Conditional Execution Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of WHEN clause",
            "text": "     ;; Signal an exceptional condition.\n      (loop for item in '(1 2 3 a 4 5)\n            when (not (numberp item))\n             return (cerror \"enter new value\" \"non-numeric value: ~s\" item))\n     Error: non-numeric value: A\n     ;; The previous example is equivalent to the following one.\n      (loop for item in '(1 2 3 a 4 5)\n            when (not (numberp item))\n             do (return\n                 (cerror \"Enter new value\" \"non-numeric value: ~s\" item)))\n     Error: non-numeric value: A\n     ;; This example parses a simple printed string representation from\n     ;; BUFFER (which is itself a string) and returns the index of the\n     ;; closing double-quote character.\n      (let ((buffer \"\\\"a\\\" \\\"b\\\"\"))\n        (loop initially (unless (char= (char buffer 0) #\\\")\n                          (loop-finish))\n              for i of-type fixnum from 1 below (length (the string buffer))\n              when (char= (char buffer i) #\\\")\n               return i))\n     =>  2\n     ;; The collected value is returned.\n      (loop for i from 1 to 10\n            when (> i 5)\n              collect i\n            finally (prin1 'got-here))\n      |>  GOT-HERE\n     =>  (6 7 8 9 10)\n     ;; Return both the count of collected numbers and the numbers.\n      (loop for i from 1 to 10\n            when (> i 5)\n              collect i into number-list\n              and count i into number-count\n            finally (return (values number-count number-list)))\n     =>  5, (6 7 8 9 10)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of WHEN clause,  Prev: Conditional Execution Clauses,  Up: Conditional Execution Clauses\n\nExamples of WHEN clause\n.......................\n\n     ;; Signal an exceptional condition.\n      (loop for item in '(1 2 3 a 4 5)\n            when (not (numberp item))\n             return (cerror \"enter new value\" \"non-numeric value: ~s\" item))\n     Error: non-numeric value: A\n     \n     ;; The previous example is equivalent to the following one.\n      (loop for item in '(1 2 3 a 4 5)\n            when (not (numberp item))\n             do (return\n                 (cerror \"Enter new value\" \"non-numeric value: ~s\" item)))\n     Error: non-numeric value: A\n\n     ;; This example parses a simple printed string representation from\n     ;; BUFFER (which is itself a string) and returns the index of the\n     ;; closing double-quote character.\n      (let ((buffer \"\\\"a\\\" \\\"b\\\"\"))\n        (loop initially (unless (char= (char buffer 0) #\\\")\n                          (loop-finish))\n              for i of-type fixnum from 1 below (length (the string buffer))\n              when (char= (char buffer i) #\\\")\n               return i))\n     =>  2\n     \n     ;; The collected value is returned.\n      (loop for i from 1 to 10\n            when (> i 5)\n              collect i\n            finally (prin1 'got-here))\n      |>  GOT-HERE\n     =>  (6 7 8 9 10)\n     \n     ;; Return both the count of collected numbers and the numbers.\n      (loop for i from 1 to 10\n            when (> i 5)\n              collect i into number-list\n              and count i into number-count\n            finally (return (values number-count number-list)))\n     =>  5, (6 7 8 9 10)\n\n"
}