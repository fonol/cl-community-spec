{
    "name": "satisfies",
    "prev": "t (System Class)",
    "next": "member",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "Type Specifier",
        "text": "satisfies"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Predicating.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`satisfies'{predicate-name})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "predicate-name--a symbol.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the set of all objects that satisfy the predicate\npredicate-name, which must be a symbol whose global function definition is\na one-argument predicate.  A name is required for predicate-name; lambda\nexpressions are not allowed.  For example, the type specifier (and integer\n(satisfies evenp)) denotes the set of all even integers.  The form (typep\nx '(satisfies p)) is equivalent to (if (p x) t nil).\nThe argument is required.  The symbol * can be the argument, but it\ndenotes itself (the symbol *), and does not represent an unspecified value.\nThe symbol satisfies is not valid as a type specifier.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: satisfies,  Next: member,  Prev: t (System Class),  Up: Types and Classes Dictionary\n\nsatisfies                                                  [Type Specifier]\n---------------------------------------------------------------------------\n\nCompound Type Specifier Kind::\n..............................\n\nPredicating.\n\nCompound Type Specifier Syntax::\n................................\n\n(`satisfies'{predicate-name})\n\nCompound Type Specifier Arguments::\n...................................\n\npredicate-name--a symbol.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the set of all objects that satisfy the predicate\npredicate-name, which must be a symbol whose global function definition is\na one-argument predicate.  A name is required for predicate-name; lambda\nexpressions are not allowed.  For example, the type specifier (and integer\n(satisfies evenp)) denotes the set of all even integers.  The form (typep\nx '(satisfies p)) is equivalent to (if (p x) t nil).\n\nThe argument is required.  The symbol * can be the argument, but it\ndenotes itself (the symbol *), and does not represent an unspecified value.\n\nThe symbol satisfies is not valid as a type specifier.\n\n"
}