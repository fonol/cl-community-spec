{
    "name": "Use of Implementation-Defined Language Features",
    "prev": "Conforming Programs",
    "next": "Use of Read-Time Conditionals",
    "up": "Conforming Programs",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Use of Implementation-Defined Language Features",
            "text": "Note that conforming code may rely on particular implementation-defined\nvalues or features. Also note that the requirements for conforming code\nand conforming implementations do not require that the results produced by\nconforming code always be the same when processed by a conforming\nimplementation. The results may be the same, or they may differ.\nPortable code is written using only standard characters.\nConforming code may run in all conforming implementations, but might have\nallowable implementation-defined behavior that makes it non-portable code.\nFor example, the following are examples of forms that are conforming, but\nthat might return different values in different implementations:\n      (evenp most-positive-fixnum) =>  implementation-dependent\n      (random) =>  implementation-dependent\n      (> lambda-parameters-limit 93) =>  implementation-dependent\n      (char-name #\\A) =>  implementation-dependent\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Use of Implementation-Defined Language Features,  Next: Use of Read-Time Conditionals,  Prev: Conforming Programs,  Up: Conforming Programs\n\nUse of Implementation-Defined Language Features\n...............................................\n\nNote that conforming code may rely on particular implementation-defined\nvalues or features. Also note that the requirements for conforming code\nand conforming implementations do not require that the results produced by\nconforming code always be the same when processed by a conforming\nimplementation. The results may be the same, or they may differ.\n\nPortable code is written using only standard characters.\n\nConforming code may run in all conforming implementations, but might have\nallowable implementation-defined behavior that makes it non-portable code.\nFor example, the following are examples of forms that are conforming, but\nthat might return different values in different implementations:\n\n      (evenp most-positive-fixnum) =>  implementation-dependent\n      (random) =>  implementation-dependent\n      (> lambda-parameters-limit 93) =>  implementation-dependent\n      (char-name #\\A) =>  implementation-dependent\n\n"
}