{
    "name": "Compiler Terminology",
    "prev": "Compilation",
    "next": "Compilation Semantics",
    "up": "Compilation",
    "header": {
        "type": null,
        "text": "Compiler Terminology"
    },
    "sections": [
        {
            "type": "",
            "text": "The following terminology is used in this section.\nThe compiler is a utility that translates code into an\nimplementation-dependent form that might be represented or executed\nefficiently.  The term compiler refers to both of the functions compile\nand compile-file.\nThe term compiled code refers to objects representing compiled programs,\nsuch as objects constructed by compile or by load when loading a compiled\nfile.\nThe term implicit compilation refers to compilation performed during\nevaluation.\nThe term literal object refers to a quoted object or a self-evaluating\nobject or an object that is a substructure of such an object.  A constant\nvariable is not itself a literal object.\nThe term coalesce is defined as follows.  Suppose A and B are two literal\nconstants in the source code, and that A' and B' are the corresponding\nobjects in the compiled code.  If A' and B' are eql but A and B are not\neql, then it is said that A and B have been coalesced by the compiler.\nThe term minimal compilation refers to actions the compiler must take at\ncompile time. These actions are specified in *Note Compilation Semantics::.\nThe verb process refers to performing minimal compilation, determining the\ntime of evaluation for a form, and possibly evaluating that form (if\nrequired).\nThe term further compilation refers to implementation-dependent\ncompilation beyond minimal compilation.  That is, processing does not\nimply complete compilation.  Block compilation and generation of\nmachine-specific instructions are examples of further compilation.\nFurther compilation is permitted to take place at run time.\nFour different environments relevant to compilation are distinguished: the\nstartup environment, the compilation environment, the evaluation\nenvironment, and the run-time environment.\nThe startup environment is the environment of the Lisp image from which\nthe compiler was invoked.\nThe compilation environment is maintained by the compiler and is used to\nhold definitions and declarations to be used internally by the compiler.\nOnly those parts of a definition needed for correct compilation are saved.\nThe compilation environment is used as the environment argument to macro\nexpanders called by the compiler. It is unspecified whether a definition\navailable in the compilation environment can be used in an evaluation\ninitiated in the startup environment or evaluation environment.\nThe evaluation environment is a run-time environment in which macro\nexpanders and code specified by eval-when to be evaluated are evaluated.\nAll evaluations initiated by the compiler take place in the evaluation\nenvironment.\nThe run-time environment is the environment in which the program being\ncompiled will be executed.\nThe compilation environment inherits from the evaluation environment, and\nthe compilation environment and evaluation environment might be identical.\nThe evaluation environment inherits from the startup environment, and the\nstartup environment and evaluation environment might be identical.\nThe term compile time refers to the duration of time that the compiler is\nprocessing source code.  At compile time, only the compilation environment\nand  the evaluation environment are available.\nThe term compile-time definition refers to a definition in the compilation\nenvironment.  For example, when compiling a file, the definition of a\nfunction might be retained in the compilation environment if it is\ndeclared inline.  This definition might not be available in the evaluation\nenvironment.\nThe term run time refers to the duration of time that the loader is\nloading compiled code or compiled code is being executed.  At run time,\nonly the run-time environment is available.\nThe term run-time definition refers to a definition in the run-time\nenvironment.\nThe term run-time compiler refers to the function compile or implicit\ncompilation, for which the compilation and run-time environments are\nmaintained in the same Lisp image.  Note that when the run-time compiler\nis used, the run-time environment and startup environment are the same.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Compiler Terminology,  Next: Compilation Semantics,  Prev: Compilation,  Up: Compilation\n\nCompiler Terminology\n--------------------\n\nThe following terminology is used in this section.\n\nThe compiler is a utility that translates code into an\nimplementation-dependent form that might be represented or executed\nefficiently.  The term compiler refers to both of the functions compile\nand compile-file.\n\nThe term compiled code refers to objects representing compiled programs,\nsuch as objects constructed by compile or by load when loading a compiled\nfile.\n\nThe term implicit compilation refers to compilation performed during\nevaluation.\n\nThe term literal object refers to a quoted object or a self-evaluating\nobject or an object that is a substructure of such an object.  A constant\nvariable is not itself a literal object.\n\nThe term coalesce is defined as follows.  Suppose A and B are two literal\nconstants in the source code, and that A' and B' are the corresponding\nobjects in the compiled code.  If A' and B' are eql but A and B are not\neql, then it is said that A and B have been coalesced by the compiler.\n\nThe term minimal compilation refers to actions the compiler must take at\ncompile time. These actions are specified in *Note Compilation Semantics::.\n\nThe verb process refers to performing minimal compilation, determining the\ntime of evaluation for a form, and possibly evaluating that form (if\nrequired).\n\nThe term further compilation refers to implementation-dependent\ncompilation beyond minimal compilation.  That is, processing does not\nimply complete compilation.  Block compilation and generation of\nmachine-specific instructions are examples of further compilation.\nFurther compilation is permitted to take place at run time.\n\nFour different environments relevant to compilation are distinguished: the\nstartup environment, the compilation environment, the evaluation\nenvironment, and the run-time environment.\n\nThe startup environment is the environment of the Lisp image from which\nthe compiler was invoked.\n\nThe compilation environment is maintained by the compiler and is used to\nhold definitions and declarations to be used internally by the compiler.\nOnly those parts of a definition needed for correct compilation are saved.\nThe compilation environment is used as the environment argument to macro\nexpanders called by the compiler. It is unspecified whether a definition\navailable in the compilation environment can be used in an evaluation\ninitiated in the startup environment or evaluation environment.\n\nThe evaluation environment is a run-time environment in which macro\nexpanders and code specified by eval-when to be evaluated are evaluated.\nAll evaluations initiated by the compiler take place in the evaluation\nenvironment.\n\nThe run-time environment is the environment in which the program being\ncompiled will be executed.\n\nThe compilation environment inherits from the evaluation environment, and\nthe compilation environment and evaluation environment might be identical.\nThe evaluation environment inherits from the startup environment, and the\nstartup environment and evaluation environment might be identical.\n\nThe term compile time refers to the duration of time that the compiler is\nprocessing source code.  At compile time, only the compilation environment\nand  the evaluation environment are available.\n\nThe term compile-time definition refers to a definition in the compilation\nenvironment.  For example, when compiling a file, the definition of a\nfunction might be retained in the compilation environment if it is\ndeclared inline.  This definition might not be available in the evaluation\nenvironment.\n\nThe term run time refers to the duration of time that the loader is\nloading compiled code or compiled code is being executed.  At run time,\nonly the run-time environment is available.\n\nThe term run-time definition refers to a definition in the run-time\nenvironment.\n\nThe term run-time compiler refers to the function compile or implicit\ncompilation, for which the compilation and run-time environments are\nmaintained in the same Lisp image.  Note that when the run-time compiler\nis used, the run-time environment and startup environment are the same.\n\n"
}