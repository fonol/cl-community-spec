{
    "name": "pathname-host",
    "prev": "pathnamep",
    "next": "load-logical-pathname-translations",
    "up": "Filenames Dictionary",
    "header": {
        "type": null,
        "text": "pathname-name, pathname-type,   pathname-version"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "pathname-host",
                    "text": " pathname &key case =>  host\n"
                },
                {
                    "name": "pathname-device",
                    "text": " pathname &key case =>  device\n\n"
                },
                {
                    "name": "pathname-directory",
                    "text": " pathname &key case =>  directory\n\n"
                },
                {
                    "name": "pathname-name",
                    "text": " pathname &key case =>  name\n\n"
                },
                {
                    "name": "pathname-type",
                    "text": " pathname &key case =>  type\n\n"
                },
                {
                    "name": "pathname-version",
                    "text": " pathname =>  version\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "pathname",
                    "desc": "a pathname designator."
                },
                {
                    "name": "case",
                    "desc": "one of :local or :common.  The default is :local."
                },
                {
                    "name": "host",
                    "desc": "a valid pathname host."
                },
                {
                    "name": "device",
                    "desc": "a valid pathname device."
                },
                {
                    "name": "directory",
                    "desc": "a valid pathname directory."
                },
                {
                    "name": "name",
                    "desc": "a valid pathname name."
                },
                {
                    "name": "type",
                    "desc": "a valid pathname type."
                },
                {
                    "name": "version",
                    "desc": "a valid pathname version."
                }
            ]
        },
        {
            "type": "Description",
            "text": "These functions return the components of pathname.\nIf the pathname designator is a pathname, it represents the name used to\nopen the file. This may be, but is not required to be, the actual name of\nthe file.\nIf case is supplied, it is treated as described in *Note Case in Pathname\nComponents::.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq q (make-pathname :host \"KATHY\"\n                             :directory \"CHAPMAN\"\n                             :name \"LOGIN\" :type \"COM\"))\n     =>  #P\"KATHY::[CHAPMAN]LOGIN.COM\"\n      (pathname-host q) =>  \"KATHY\"\n      (pathname-name q) =>  \"LOGIN\"\n      (pathname-type q) =>  \"COM\"\n      ;; Because namestrings are used, the results shown in the remaining\n      ;; examples are not necessarily the only possible results.  Mappings\n      ;; from namestring representation to pathname representation are\n      ;; dependent both on the file system involved and on the implementation\n      ;; (since there may be several implementations which can manipulate the\n      ;; the same file system, and those implementations are not constrained\n      ;; to agree on all details). Consult the documentation for each\n      ;; implementation for specific information on how namestrings are treated\n      ;; that implementation.\n      ;; VMS\n      (pathname-directory (parse-namestring \"[FOO.*.BAR]BAZ.LSP\"))\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n      (pathname-directory (parse-namestring \"[FOO.*.BAR]BAZ.LSP\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n      ;; Unix\n      (pathname-directory \"foo.l\") =>  NIL\n      (pathname-device \"foo.l\") =>  :UNSPECIFIC\n      (pathname-name \"foo.l\") =>  \"foo\"\n      (pathname-name \"foo.l\" :case :local) =>  \"foo\"\n      (pathname-name \"foo.l\" :case :common) =>  \"FOO\"\n      (pathname-type \"foo.l\") =>  \"l\"\n      (pathname-type \"foo.l\" :case :local) =>  \"l\"\n      (pathname-type \"foo.l\" :case :common) =>  \"L\"\n      (pathname-type \"foo\") =>  :UNSPECIFIC\n      (pathname-type \"foo\" :case :common) =>  :UNSPECIFIC\n      (pathname-type \"foo.\") =>  \"\"\n      (pathname-type \"foo.\" :case :common) =>  \"\"\n      (pathname-directory (parse-namestring \"/foo/bar/baz.lisp\") :case :local)\n     =>  (:ABSOLUTE \"foo\" \"bar\")\n      (pathname-directory (parse-namestring \"/foo/bar/baz.lisp\") :case :local)\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n      (pathname-directory (parse-namestring \"../baz.lisp\"))\n     =>  (:RELATIVE :UP)\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/BAR/../Mum/baz\"))\n     =>  (:ABSOLUTE \"foo\" \"BAR\" :UP \"Mum\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/BAR/../Mum/baz\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" \"bar\" :UP \"Mum\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/*/bar/baz.l\"))\n     =>  (:ABSOLUTE \"foo\" :WILD \"bar\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/*/bar/baz.l\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" :WILD \"BAR\")\n      ;; Symbolics LMFS\n      (pathname-directory (parse-namestring \">foo>**>bar>baz.lisp\"))\n     =>  (:ABSOLUTE \"foo\" :WILD-INFERIORS \"bar\")\n      (pathname-directory (parse-namestring \">foo>*>bar>baz.lisp\"))\n     =>  (:ABSOLUTE \"foo\" :WILD \"bar\")\n      (pathname-directory (parse-namestring \">foo>*>bar>baz.lisp\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" :WILD \"BAR\")\n      (pathname-device (parse-namestring \">foo>baz.lisp\")) =>  :UNSPECIFIC\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation and the host file system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if its first argument is not a\npathname.\n"
        },
        {
            "type": "See Also",
            "text": "pathname, logical-pathname, *Note File System Concepts::,\n*Note Pathnames as Filenames::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: pathname-host,  Next: load-logical-pathname-translations,  Prev: pathnamep,  Up: Filenames Dictionary\n\npathname-host, pathname-device, pathname-directory,\n---------------------------------------------------\n\npathname-name, pathname-type,   pathname-version\n------------------------------------------------\n\n                                                                [Function]\n\n`pathname-host'  pathname &key case =>  host\n\n`pathname-device'  pathname &key case =>  device\n\n`pathname-directory'  pathname &key case =>  directory\n\n`pathname-name'  pathname &key case =>  name\n\n`pathname-type'  pathname &key case =>  type\n\n`pathname-version'  pathname =>  version\n\nArguments and Values::\n......................\n\npathname--a pathname designator.\n\ncase--one of :local or :common.  The default is :local.\n\nhost--a valid pathname host.\n\ndevice--a valid pathname device.\n\ndirectory--a valid pathname directory.\n\nname--a valid pathname name.\n\ntype--a valid pathname type.\n\nversion--a valid pathname version.\n\nDescription::\n.............\n\nThese functions return the components of pathname.\n\nIf the pathname designator is a pathname, it represents the name used to\nopen the file. This may be, but is not required to be, the actual name of\nthe file.\n\nIf case is supplied, it is treated as described in *Note Case in Pathname\nComponents::.\n\nExamples::\n..........\n\n      (setq q (make-pathname :host \"KATHY\"\n                             :directory \"CHAPMAN\"\n                             :name \"LOGIN\" :type \"COM\"))\n     =>  #P\"KATHY::[CHAPMAN]LOGIN.COM\"\n      (pathname-host q) =>  \"KATHY\"\n      (pathname-name q) =>  \"LOGIN\"\n      (pathname-type q) =>  \"COM\"\n     \n      ;; Because namestrings are used, the results shown in the remaining\n      ;; examples are not necessarily the only possible results.  Mappings\n      ;; from namestring representation to pathname representation are\n      ;; dependent both on the file system involved and on the implementation\n      ;; (since there may be several implementations which can manipulate the\n      ;; the same file system, and those implementations are not constrained\n      ;; to agree on all details). Consult the documentation for each\n      ;; implementation for specific information on how namestrings are treated\n      ;; that implementation.\n     \n      ;; VMS\n      (pathname-directory (parse-namestring \"[FOO.*.BAR]BAZ.LSP\"))\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n      (pathname-directory (parse-namestring \"[FOO.*.BAR]BAZ.LSP\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n     \n      ;; Unix\n      (pathname-directory \"foo.l\") =>  NIL\n      (pathname-device \"foo.l\") =>  :UNSPECIFIC\n      (pathname-name \"foo.l\") =>  \"foo\"\n      (pathname-name \"foo.l\" :case :local) =>  \"foo\"\n      (pathname-name \"foo.l\" :case :common) =>  \"FOO\"\n      (pathname-type \"foo.l\") =>  \"l\"\n      (pathname-type \"foo.l\" :case :local) =>  \"l\"\n      (pathname-type \"foo.l\" :case :common) =>  \"L\"\n      (pathname-type \"foo\") =>  :UNSPECIFIC\n      (pathname-type \"foo\" :case :common) =>  :UNSPECIFIC\n      (pathname-type \"foo.\") =>  \"\"\n      (pathname-type \"foo.\" :case :common) =>  \"\"\n      (pathname-directory (parse-namestring \"/foo/bar/baz.lisp\") :case :local)\n     =>  (:ABSOLUTE \"foo\" \"bar\")\n      (pathname-directory (parse-namestring \"/foo/bar/baz.lisp\") :case :local)\n     =>  (:ABSOLUTE \"FOO\" \"BAR\")\n      (pathname-directory (parse-namestring \"../baz.lisp\"))\n     =>  (:RELATIVE :UP)\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/BAR/../Mum/baz\"))\n     =>  (:ABSOLUTE \"foo\" \"BAR\" :UP \"Mum\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/BAR/../Mum/baz\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" \"bar\" :UP \"Mum\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/*/bar/baz.l\"))\n     =>  (:ABSOLUTE \"foo\" :WILD \"bar\")\n      (PATHNAME-DIRECTORY (PARSE-NAMESTRING \"/foo/*/bar/baz.l\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" :WILD \"BAR\")\n     \n      ;; Symbolics LMFS\n      (pathname-directory (parse-namestring \">foo>**>bar>baz.lisp\"))\n     =>  (:ABSOLUTE \"foo\" :WILD-INFERIORS \"bar\")\n      (pathname-directory (parse-namestring \">foo>*>bar>baz.lisp\"))\n     =>  (:ABSOLUTE \"foo\" :WILD \"bar\")\n      (pathname-directory (parse-namestring \">foo>*>bar>baz.lisp\") :case :common)\n     =>  (:ABSOLUTE \"FOO\" :WILD \"BAR\")\n      (pathname-device (parse-namestring \">foo>baz.lisp\")) =>  :UNSPECIFIC\n\nAffected By::\n.............\n\nThe implementation and the host file system.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if its first argument is not a\npathname.\n\nSee Also::\n..........\n\npathname, logical-pathname, *Note File System Concepts::,\n\n*Note Pathnames as Filenames::\n\n"
}