{
    "name": "position",
    "prev": "find",
    "next": "search",
    "up": "Sequences Dictionary",
    "header": {
        "type": "Function",
        "text": "position, position-if, position-if-not"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "position",
                    "text": " item sequence &key from-end test test-not start end key =>position\n\n"
                },
                {
                    "name": "position-if",
                    "text": " predicate sequence &key from-end start end key =>  position\n\n"
                },
                {
                    "name": "position-if-not",
                    "text": " predicate sequence &key from-end start end key =>\nposition\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "item",
                    "desc": "an object."
                },
                {
                    "name": "sequence",
                    "desc": "a proper sequence."
                },
                {
                    "name": "predicate",
                    "desc": "a designator for a function of one argument that returns a"
                },
                {
                    "name": "predicate",
                    "desc": "a designator for a function of one argument that returns ageneralized boolean.\n"
                },
                {
                    "name": "from-end",
                    "desc": "a generalized boolean.  The default is false."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "start, end",
                    "desc": "bounding index designators of sequence.  The defaults for"
                },
                {
                    "name": "start, end",
                    "desc": "bounding index designators of sequence.  The defaults forstart and end are 0 and nil, respectively.\n"
                },
                {
                    "name": "key",
                    "desc": "a designator for a function of one argument, or nil."
                },
                {
                    "name": "position",
                    "desc": "a bounding index of sequence, or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "position, position-if, and position-if-not each search sequence for an\nelement that satisfies the test.\nThe position returned is the index within sequence of the leftmost  (if\nfrom-end is true) or of the rightmost (if from-end is false) element that\nsatisfies the test; otherwise nil is returned.  The index returned is\nrelative to the left-hand end of the entire sequence, regardless of the\nvalue of start, end, or from-end.\n"
        },
        {
            "type": "Examples",
            "text": "      (position #\\a \"baobab\" :from-end t) =>  4\n      (position-if #'oddp '((1) (2) (3) (4)) :start 1 :key #'car) =>  2\n      (position 595 '()) =>  NIL\n      (position-if-not #'integerp '(1 2 3 4 5.0)) =>  4\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n"
        },
        {
            "type": "See Also",
            "text": "*Note find; find-if; find-if-not:: ,\n*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not argument is deprecated.\nThe function position-if-not is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: position,  Next: search,  Prev: find,  Up: Sequences Dictionary\n\nposition, position-if, position-if-not                           [Function]\n---------------------------------------------------------------------------\n\n`position'  item sequence &key from-end test test-not start end key =>\nposition\n\n`position-if'  predicate sequence &key from-end start end key =>  position\n\n`position-if-not'  predicate sequence &key from-end start end key =>\nposition\n\nArguments and Values::\n......................\n\nitem--an object.\n\nsequence--a proper sequence.\n\npredicate--a designator for a function of one argument that returns a\ngeneralized boolean.\n\nfrom-end--a generalized boolean.  The default is false.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\nstart, end--bounding index designators of sequence.  The defaults for\nstart and end are 0 and nil, respectively.\n\nkey--a designator for a function of one argument, or nil.\n\nposition--a bounding index of sequence, or nil.\n\nDescription::\n.............\n\nposition, position-if, and position-if-not each search sequence for an\nelement that satisfies the test.\n\nThe position returned is the index within sequence of the leftmost  (if\nfrom-end is true) or of the rightmost (if from-end is false) element that\nsatisfies the test; otherwise nil is returned.  The index returned is\nrelative to the left-hand end of the entire sequence, regardless of the\nvalue of start, end, or from-end.\n\nExamples::\n..........\n\n      (position #\\a \"baobab\" :from-end t) =>  4\n      (position-if #'oddp '((1) (2) (3) (4)) :start 1 :key #'car) =>  2\n      (position 595 '()) =>  NIL\n      (position-if-not #'integerp '(1 2 3 4 5.0)) =>  4\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if sequence is\nnot a proper sequence.\n\nSee Also::\n..........\n\n*Note find; find-if; find-if-not:: ,\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not argument is deprecated.\n\nThe function position-if-not is deprecated.\n\n"
}