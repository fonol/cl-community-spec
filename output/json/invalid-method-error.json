{
    "name": "invalid-method-error",
    "prev": "simple-error",
    "next": "method-combination-error",
    "up": "Conditions Dictionary",
    "header": {
        "type": "Function",
        "text": "invalid-method-error"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "invalid-method-error",
                    "text": " method format-control &rest args =>implementation-dependent\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "method",
                    "desc": "a method."
                },
                {
                    "name": "format-control",
                    "desc": "a format control."
                },
                {
                    "name": "args",
                    "desc": "format arguments for the format-control."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The function invalid-method-error is used to signal an error of type error\nwhen there is an applicable method whose qualifiers are not valid for the\nmethod combination type.  The error message is constructed by using the\nformat-control suitable for format and any args to it.  Because an\nimplementation may need to add additional contextual information to the\nerror message, invalid-method-error should be called only within the\ndynamic extent of a method combination function.\nThe function invalid-method-error is called automatically when a method\nfails to satisfy every qualifier pattern and predicate in a\ndefine-method-combination form.  A method combination function that\nimposes additional restrictions should call invalid-method-error\nexplicitly if it encounters a method it cannot accept.\nWhether invalid-method-error returns to its caller or exits via throw is\nimplementation-dependent.\n"
        },
        {
            "type": "Side Effects",
            "text": "The debugger might be entered.\n"
        },
        {
            "type": "Affected By",
            "text": "*break-on-signals*\n"
        },
        {
            "type": "See Also",
            "text": "*Note define-method-combination::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: invalid-method-error,  Next: method-combination-error,  Prev: simple-error,  Up: Conditions Dictionary\n\ninvalid-method-error                                             [Function]\n---------------------------------------------------------------------------\n\n`invalid-method-error'  method format-control &rest args =>\nimplementation-dependent\n\nArguments and Values::\n......................\n\nmethod--a method.\n\nformat-control--a format control.\n\nargs--format arguments for the format-control.\n\nDescription::\n.............\n\nThe function invalid-method-error is used to signal an error of type error\nwhen there is an applicable method whose qualifiers are not valid for the\nmethod combination type.  The error message is constructed by using the\nformat-control suitable for format and any args to it.  Because an\nimplementation may need to add additional contextual information to the\nerror message, invalid-method-error should be called only within the\ndynamic extent of a method combination function.\n\nThe function invalid-method-error is called automatically when a method\nfails to satisfy every qualifier pattern and predicate in a\ndefine-method-combination form.  A method combination function that\nimposes additional restrictions should call invalid-method-error\nexplicitly if it encounters a method it cannot accept.\n\nWhether invalid-method-error returns to its caller or exits via throw is\nimplementation-dependent.\n\nSide Effects::\n..............\n\nThe debugger might be entered.\n\nAffected By::\n.............\n\n*break-on-signals*\n\nSee Also::\n..........\n\n*Note define-method-combination::\n\n"
}