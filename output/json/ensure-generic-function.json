{
    "name": "ensure-generic-function",
    "prev": "function-keywords",
    "next": "allocate-instance",
    "up": "Objects Dictionary",
    "header": {
        "type": "Function",
        "text": "ensure-generic-function"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "ensure-generic-function",
                    "text": " function-name &key argument-precedence-orderdeclare documentation environment generic-function-class lambda-list\nmethod-class method-combination\n=>  generic-function\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "function-name",
                    "desc": "a function name.The keyword arguments correspond to the option arguments of defgeneric,\nexcept that the :method-class and :generic-function-class arguments can be\nclass objects as well as names.\nMethod-combination - method combination object.\nEnvironment - the same as the &environment argument to macro expansion\nfunctions and is used to distinguish between compile-time and run-time\nenvironments.\n[Editorial Note by KMP: What about documentation. Missing from this\narguments enumeration, and confusing in description below.]\n"
                },
                {
                    "name": "generic-function",
                    "desc": "a generic function object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The function ensure-generic-function is used to define a globally named\ngeneric function with no methods or to specify or modify options and\ndeclarations that pertain to a globally named generic function as a whole.\nIf function-name is not fbound in the global environment, a new generic\nfunction is created.  If\n(fdefinition function-name)\nis an ordinary function, a macro, or a special operator, an error is\nsignaled.\nIf function-name is a list, it must be of the form (setf symbol).  If\nfunction-name specifies a generic function that has a different value for\nany of the following arguments, the generic function is modified to have\nthe new value: :argument-precedence-order, :declare, :documentation,\n:method-combination.\nIf function-name specifies a generic function that has a different value\nfor the :lambda-list argument, and the new value is congruent with the\nlambda lists of all existing methods or there are no methods, the value is\nchanged; otherwise an error is signaled.\nIf function-name specifies a generic function that has a different value\nfor the :generic-function-class argument and if the new generic function\nclass is compatible with the old, change-class is called to change the\nclass of the generic function; otherwise an error is signaled.\nIf function-name specifies a generic function that has a different value\nfor the :method-class argument, the value is changed, but any existing\nmethods are not changed.\n"
        },
        {
            "type": "Affected By",
            "text": "Existing function binding of function-name.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If\n(fdefinition function-name)\nis an ordinary function, a macro, or a special operator, an error of type\nerror is signaled.\nIf function-name specifies a generic function that has a different value\nfor the :lambda-list argument, and the new value is not congruent with the\nlambda list of any existing method, an error of type error is signaled.\nIf function-name specifies a generic function that has a different value\nfor the :generic-function-class argument and if the new generic function\nclass not is compatible with the old, an error of type error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note defgeneric::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ensure-generic-function,  Next: allocate-instance,  Prev: function-keywords,  Up: Objects Dictionary\n\nensure-generic-function                                          [Function]\n---------------------------------------------------------------------------\n\n`ensure-generic-function'  function-name &key argument-precedence-order\ndeclare documentation environment generic-function-class lambda-list\nmethod-class method-combination\n=>  generic-function\n\nArguments and Values::\n......................\n\nfunction-name--a function name.\n\nThe keyword arguments correspond to the option arguments of defgeneric,\nexcept that the :method-class and :generic-function-class arguments can be\nclass objects as well as names.\n\nMethod-combination - method combination object.\n\nEnvironment - the same as the &environment argument to macro expansion\nfunctions and is used to distinguish between compile-time and run-time\nenvironments.\n\n[Editorial Note by KMP: What about documentation. Missing from this\narguments enumeration, and confusing in description below.]\n\ngeneric-function--a generic function object.\n\nDescription::\n.............\n\nThe function ensure-generic-function is used to define a globally named\ngeneric function with no methods or to specify or modify options and\ndeclarations that pertain to a globally named generic function as a whole.\n\nIf function-name is not fbound in the global environment, a new generic\nfunction is created.  If\n\n(fdefinition function-name)\n\nis an ordinary function, a macro, or a special operator, an error is\nsignaled.\n\nIf function-name is a list, it must be of the form (setf symbol).  If\nfunction-name specifies a generic function that has a different value for\nany of the following arguments, the generic function is modified to have\nthe new value: :argument-precedence-order, :declare, :documentation,\n:method-combination.\n\nIf function-name specifies a generic function that has a different value\nfor the :lambda-list argument, and the new value is congruent with the\nlambda lists of all existing methods or there are no methods, the value is\nchanged; otherwise an error is signaled.\n\nIf function-name specifies a generic function that has a different value\nfor the :generic-function-class argument and if the new generic function\nclass is compatible with the old, change-class is called to change the\nclass of the generic function; otherwise an error is signaled.\n\nIf function-name specifies a generic function that has a different value\nfor the :method-class argument, the value is changed, but any existing\nmethods are not changed.\n\nAffected By::\n.............\n\nExisting function binding of function-name.\n\nExceptional Situations::\n........................\n\nIf\n\n(fdefinition function-name)\n\nis an ordinary function, a macro, or a special operator, an error of type\nerror is signaled.\n\nIf function-name specifies a generic function that has a different value\nfor the :lambda-list argument, and the new value is not congruent with the\nlambda list of any existing method, an error of type error is signaled.\n\nIf function-name specifies a generic function that has a different value\nfor the :generic-function-class argument and if the new generic function\nclass not is compatible with the old, an error of type error is signaled.\n\nSee Also::\n..........\n\n*Note defgeneric::\n\n"
}