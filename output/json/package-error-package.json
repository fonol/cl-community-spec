{
    "name": "package-error-package",
    "prev": "package-error",
    "next": null,
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "package-error-package"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "package-error-package",
                    "text": " condition =>  package\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "condition",
                    "desc": "a condition of type package-error."
                },
                {
                    "name": "package",
                    "desc": "a package designator."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a designator for the offending package in the situation\nrepresented by the condition.\n"
        },
        {
            "type": "Examples",
            "text": "      (package-error-package\n        (make-condition 'package-error\n          :package (find-package \"COMMON-LISP\")))\n     =>  #<Package \"COMMON-LISP\">\n"
        },
        {
            "type": "See Also",
            "text": "package-error\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: package-error-package,  Prev: package-error,  Up: Packages Dictionary\n\npackage-error-package                                            [Function]\n---------------------------------------------------------------------------\n\n`package-error-package'  condition =>  package\n\nArguments and Values::\n......................\n\ncondition--a condition of type package-error.\n\npackage--a package designator.\n\nDescription::\n.............\n\nReturns a designator for the offending package in the situation\nrepresented by the condition.\n\nExamples::\n..........\n\n      (package-error-package\n        (make-condition 'package-error\n          :package (find-package \"COMMON-LISP\")))\n     =>  #<Package \"COMMON-LISP\">\n\nSee Also::\n..........\n\npackage-error\n\n"
}