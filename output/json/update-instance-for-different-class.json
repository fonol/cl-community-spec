{
    "name": "update-instance-for-different-class",
    "prev": "shared-initialize",
    "next": "update-instance-for-redefined-class",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "update-instance-for-different-class"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "update-instance-for-different-class",
                    "text": " previous current &rest initargs&key &allow-other-keys =>  implementation-dependent\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "update-instance-for-different-class",
                    "text": " (previous standard-object) (currentstandard-object) &rest initargs\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "previous",
                    "desc": "a copy of the original instance."
                },
                {
                    "name": "current",
                    "desc": "the original instance (altered)."
                },
                {
                    "name": "initargs",
                    "desc": "an initialization argument list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function update-instance-for-different-class is not intended\nto be called by programmers.  Programmers may write methods for it.  The\nfunction update-instance-for-different-class is called only by the\nfunction change-class.\nThe system-supplied primary method on update-instance-for-different-class\nchecks the validity of initargs and signals an error if an initarg is\nsupplied that is not declared as valid.  This method then initializes\nslots with values according to the initargs, and initializes the newly\nadded slots with values according to their :initform forms.  It does this\nby calling the generic function shared-initialize with the following\narguments: the instance (current), a list of names of the newly added\nslots, and the initargs it received.  Newly added slots are those local\nslots for which no slot of the same name exists in the previous class.\nMethods for update-instance-for-different-class can be defined to specify\nactions to be taken when an instance is updated.  If only after methods\nfor update-instance-for-different-class are defined, they will be run\nafter the system-supplied primary method for initialization and therefore\nwill not interfere with the default behavior of\nupdate-instance-for-different-class.\nMethods on update-instance-for-different-class can be defined to\ninitialize slots differently from change-class.  The default behavior of\nchange-class is described in *Note Changing the Class of an Instance::.\nThe arguments to update-instance-for-different-class are computed by\nchange-class.  When change-class is invoked on an instance, a copy of that\ninstance is made; change-class then destructively alters the original\ninstance. The first argument to update-instance-for-different-class,\nprevious, is that copy; it holds the old slot values temporarily.  This\nargument has dynamic extent within change-class; if it is referenced in any\nway once update-instance-for-different-class returns, the results are\nundefined.  The second argument to update-instance-for-different-class,\ncurrent, is the altered original instance.  The intended use of previous\nis to extract old slot values by using slot-value or with-slots or by\ninvoking a reader generic function, or to run other methods that were\napplicable to instances of the original class.\n"
        },
        {
            "type": "Examples",
            "text": "See the example for the function change-class.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The system-supplied primary method on update-instance-for-different-class\nsignals an error if an initialization argument is supplied that is not\ndeclared as valid.\n"
        },
        {
            "type": "See Also",
            "text": "*Note change-class:: , *Note Shared-Initialize:: , *Note Changing the\nClass of an Instance::, *Note Rules for Initialization Arguments::, *Note\nDeclaring the Validity of Initialization Arguments::\n"
        },
        {
            "type": "Notes",
            "text": "Initargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for update-instance-for-different-class or\nshared-initialize.  The keyword name of each keyword parameter specifier\nin the lambda list of any method defined on\nupdate-instance-for-different-class or shared-initialize is declared as a\nvalid initarg name for all classes for which that method is applicable.\nThe value returned by update-instance-for-different-class is ignored by\nchange-class.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: update-instance-for-different-class,  Next: update-instance-for-redefined-class,  Prev: shared-initialize,  Up: Objects Dictionary\n\nupdate-instance-for-different-class             [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`update-instance-for-different-class'  previous current &rest initargs\n&key &allow-other-keys =>  implementation-dependent\n\nMethod Signatures::\n...................\n\n`update-instance-for-different-class'  (previous standard-object) (current\nstandard-object) &rest initargs\n\nArguments and Values::\n......................\n\nprevious--a copy of the original instance.\n\ncurrent--the original instance (altered).\n\ninitargs--an initialization argument list.\n\nDescription::\n.............\n\nThe generic function update-instance-for-different-class is not intended\nto be called by programmers.  Programmers may write methods for it.  The\nfunction update-instance-for-different-class is called only by the\nfunction change-class.\n\nThe system-supplied primary method on update-instance-for-different-class\nchecks the validity of initargs and signals an error if an initarg is\nsupplied that is not declared as valid.  This method then initializes\nslots with values according to the initargs, and initializes the newly\nadded slots with values according to their :initform forms.  It does this\nby calling the generic function shared-initialize with the following\narguments: the instance (current), a list of names of the newly added\nslots, and the initargs it received.  Newly added slots are those local\nslots for which no slot of the same name exists in the previous class.\n\nMethods for update-instance-for-different-class can be defined to specify\nactions to be taken when an instance is updated.  If only after methods\nfor update-instance-for-different-class are defined, they will be run\nafter the system-supplied primary method for initialization and therefore\nwill not interfere with the default behavior of\nupdate-instance-for-different-class.\n\nMethods on update-instance-for-different-class can be defined to\ninitialize slots differently from change-class.  The default behavior of\nchange-class is described in *Note Changing the Class of an Instance::.\n\nThe arguments to update-instance-for-different-class are computed by\nchange-class.  When change-class is invoked on an instance, a copy of that\ninstance is made; change-class then destructively alters the original\ninstance. The first argument to update-instance-for-different-class,\nprevious, is that copy; it holds the old slot values temporarily.  This\nargument has dynamic extent within change-class; if it is referenced in any\nway once update-instance-for-different-class returns, the results are\nundefined.  The second argument to update-instance-for-different-class,\ncurrent, is the altered original instance.  The intended use of previous\nis to extract old slot values by using slot-value or with-slots or by\ninvoking a reader generic function, or to run other methods that were\napplicable to instances of the original class.\n\nExamples::\n..........\n\nSee the example for the function change-class.\n\nExceptional Situations::\n........................\n\nThe system-supplied primary method on update-instance-for-different-class\nsignals an error if an initialization argument is supplied that is not\ndeclared as valid.\n\nSee Also::\n..........\n\n*Note change-class:: , *Note Shared-Initialize:: , *Note Changing the\nClass of an Instance::, *Note Rules for Initialization Arguments::, *Note\nDeclaring the Validity of Initialization Arguments::\n\nNotes::\n.......\n\nInitargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for update-instance-for-different-class or\nshared-initialize.  The keyword name of each keyword parameter specifier\nin the lambda list of any method defined on\nupdate-instance-for-different-class or shared-initialize is declared as a\nvalid initarg name for all classes for which that method is applicable.\n\nThe value returned by update-instance-for-different-class is ignored by\nchange-class.\n\n"
}