{
    "name": "symbol-plist",
    "prev": "symbol-package",
    "next": "symbol-value",
    "up": "Symbols Dictionary",
    "header": {
        "type": "Accessor",
        "text": "symbol-plist"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "symbol-plist",
                    "text": " symbol =>  plist\n(setf (`         symbol-plist' symbol) new-plist)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbol",
                    "desc": "a symbol."
                },
                {
                    "name": "plist, new-plist",
                    "desc": "a property list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Accesses the property list of symbol.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq sym (gensym)) =>  #:G9723\n      (symbol-plist sym) =>  ()\n      (setf (get sym 'prop1) 'val1) =>  VAL1\n      (symbol-plist sym) =>  (PROP1 VAL1)\n      (setf (get sym 'prop2) 'val2) =>  VAL2\n      (symbol-plist sym) =>  (PROP2 VAL2 PROP1 VAL1)\n      (setf (symbol-plist sym) (list 'prop3 'val3)) =>  (PROP3 VAL3)\n      (symbol-plist sym) =>  (PROP3 VAL3)\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if symbol is not a symbol.\n"
        },
        {
            "type": "See Also",
            "text": "*Note get:: , *Note remprop::\n"
        },
        {
            "type": "Notes",
            "text": "The use of setf should be avoided, since a symbol's property list is a\nglobal resource that can contain information established and depended upon\nby unrelated programs in the same Lisp image.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: symbol-plist,  Next: symbol-value,  Prev: symbol-package,  Up: Symbols Dictionary\n\nsymbol-plist                                                     [Accessor]\n---------------------------------------------------------------------------\n\n`symbol-plist'  symbol =>  plist\n\n(setf (`         symbol-plist' symbol) new-plist)\nArguments and Values::\n......................\n\nsymbol--a symbol.\n\nplist, new-plist--a property list.\n\nDescription::\n.............\n\nAccesses the property list of symbol.\n\nExamples::\n..........\n\n      (setq sym (gensym)) =>  #:G9723\n      (symbol-plist sym) =>  ()\n      (setf (get sym 'prop1) 'val1) =>  VAL1\n      (symbol-plist sym) =>  (PROP1 VAL1)\n      (setf (get sym 'prop2) 'val2) =>  VAL2\n      (symbol-plist sym) =>  (PROP2 VAL2 PROP1 VAL1)\n      (setf (symbol-plist sym) (list 'prop3 'val3)) =>  (PROP3 VAL3)\n      (symbol-plist sym) =>  (PROP3 VAL3)\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if symbol is not a symbol.\n\nSee Also::\n..........\n\n*Note get:: , *Note remprop::\n\nNotes::\n.......\n\nThe use of setf should be avoided, since a symbol's property list is a\nglobal resource that can contain information established and depended upon\nby unrelated programs in the same Lisp image.\n\n"
}