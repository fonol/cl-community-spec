{
    "name": "compile-file",
    "prev": "System Construction Dictionary",
    "next": "compile-file-pathname",
    "up": "System Construction Dictionary",
    "header": {
        "type": "Function",
        "text": "compile-file"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "compile-file",
                    "text": " input-file &key output-file verbose print external-format=>  output-truename, warnings-p, failure-p\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "input-file",
                    "desc": "a pathname designator.  (Default fillers for unspecified"
                },
                {
                    "name": "input-file",
                    "desc": "a pathname designator.  (Default fillers for unspecifiedcomponents are taken from *default-pathname-defaults*.)\n"
                },
                {
                    "name": "output-file",
                    "desc": "a pathname designator.  The default is implementation-defined."
                },
                {
                    "name": "verbose",
                    "desc": "a generalized boolean.  The default is the value of"
                },
                {
                    "name": "verbose",
                    "desc": "a generalized boolean.  The default is the value of*compile-verbose*.\n"
                },
                {
                    "name": "print",
                    "desc": "a generalized boolean.  The default is the value of *compile-print*."
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is"
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is:default.\n"
                },
                {
                    "name": "output-truename",
                    "desc": "a pathname (the truename of the output file), or nil."
                },
                {
                    "name": "warnings-p",
                    "desc": "a generalized boolean."
                },
                {
                    "name": "failure-p",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "compile-file transforms the contents of the file specified by input-file\ninto implementation-dependent binary data which are placed in the file\nspecified by output-file.\nThe file to which input-file refers should be a source file.  output-file\ncan be used to specify an output pathname;\nthe actual pathname of the compiled file to which compiled code will be\noutput is computed as if by calling compile-file-pathname.\nIf input-file or output-file is a logical pathname, it is translated into\na physical pathname as if by calling translate-logical-pathname.\nIf verbose is true, compile-file prints a message in the form of a comment\n(i.e., with a leading semicolon) to standard output indicating what file\nis being compiled and other useful information.  If verbose is false,\ncompile-file does not print this information.\nIf print is true, information about top level forms in the file being\ncompiled is printed to standard output.  Exactly what is printed is\nimplementation-dependent, but nevertheless some information is printed.\nIf print is nil, no information is printed.\nThe external-format specifies the external file format to be used when\nopening the file; see the function open.  compile-file and load must\ncooperate in such a way that the resulting compiled file can be loaded\nwithout specifying an external file format anew; see the function load.\ncompile-file binds *readtable* and *package* to the values they held\nbefore processing the file.\n*compile-file-truename* is bound by compile-file to hold the truename of\nthe pathname of the file being compiled.\n*compile-file-pathname* is bound by compile-file to hold a pathname\ndenoted by the first argument to compile-file, merged against the defaults;\nthat is, (pathname (merge-pathnames input-file)).\nThe compiled functions contained in the compiled file become available for\nuse when the compiled file is loaded into Lisp.\nAny function definition that is processed by the compiler, including\n#'(lambda ...) forms and local function definitions made by flet, labels\nand defun forms, result in an object of type compiled-function.\nThe primary value returned by compile-file, output-truename, is the\ntruename of the output file, or nil if the file could not be created.\nThe secondary value, warnings-p, is false if no conditions of type error\nor warning were detected by the compiler, and true otherwise.\nThe tertiary value, failure-p, is false if no conditions of type error or\nwarning (other than style-warning) were detected by the compiler, and true\notherwise.\nFor general information about how files are processed by the file compiler,\nsee *Note File Compilation::.\nPrograms to be compiled by the file compiler must only contain\nexternalizable objects; for details on such objects, see *Note Literal\nObjects in Compiled Files::.  For information on how to extend the set of\nexternalizable objects, see the function make-load-form and *Note\nAdditional Constraints on Externalizable Objects::.\n"
        },
        {
            "type": "Affected By",
            "text": "*error-output*,\n*standard-output*, *compile-verbose*, *compile-print*\nThe computer's file system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "For information about errors detected during the compilation process, see\n*Note Exceptional Situations in the Compiler::.\nAn error of type file-error might be signaled if (wild-pathname-p\ninput-file)\\/ returns true.\nIf either the attempt to open the source file for input or the attempt to\nopen the compiled file for output fails, an error of type file-error is\nsignaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note compile:: , declare, *Note eval-when:: , pathname, logical-pathname,\n*Note File System Concepts::,\n*Note Pathnames as Filenames::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: compile-file,  Next: compile-file-pathname,  Prev: System Construction Dictionary,  Up: System Construction Dictionary\n\ncompile-file                                                     [Function]\n---------------------------------------------------------------------------\n\n`compile-file'  input-file &key output-file verbose print external-format\n=>  output-truename, warnings-p, failure-p\n\nArguments and Values::\n......................\n\ninput-file--a pathname designator.  (Default fillers for unspecified\ncomponents are taken from *default-pathname-defaults*.)\n\noutput-file--a pathname designator.  The default is implementation-defined.\n\nverbose--a generalized boolean.  The default is the value of\n*compile-verbose*.\n\nprint--a generalized boolean.  The default is the value of *compile-print*.\n\nexternal-format--an external file format designator.  The default is\n:default.\n\noutput-truename--a pathname (the truename of the output file), or nil.\n\nwarnings-p--a generalized boolean.\n\nfailure-p--a generalized boolean.\n\nDescription::\n.............\n\ncompile-file transforms the contents of the file specified by input-file\ninto implementation-dependent binary data which are placed in the file\nspecified by output-file.\n\nThe file to which input-file refers should be a source file.  output-file\ncan be used to specify an output pathname;\n\nthe actual pathname of the compiled file to which compiled code will be\noutput is computed as if by calling compile-file-pathname.\n\nIf input-file or output-file is a logical pathname, it is translated into\na physical pathname as if by calling translate-logical-pathname.\n\nIf verbose is true, compile-file prints a message in the form of a comment\n(i.e., with a leading semicolon) to standard output indicating what file\nis being compiled and other useful information.  If verbose is false,\ncompile-file does not print this information.\n\nIf print is true, information about top level forms in the file being\ncompiled is printed to standard output.  Exactly what is printed is\nimplementation-dependent, but nevertheless some information is printed.\nIf print is nil, no information is printed.\n\nThe external-format specifies the external file format to be used when\nopening the file; see the function open.  compile-file and load must\ncooperate in such a way that the resulting compiled file can be loaded\nwithout specifying an external file format anew; see the function load.\n\ncompile-file binds *readtable* and *package* to the values they held\nbefore processing the file.\n\n*compile-file-truename* is bound by compile-file to hold the truename of\nthe pathname of the file being compiled.\n\n*compile-file-pathname* is bound by compile-file to hold a pathname\ndenoted by the first argument to compile-file, merged against the defaults;\nthat is, (pathname (merge-pathnames input-file)).\n\nThe compiled functions contained in the compiled file become available for\nuse when the compiled file is loaded into Lisp.\n\nAny function definition that is processed by the compiler, including\n#'(lambda ...) forms and local function definitions made by flet, labels\nand defun forms, result in an object of type compiled-function.\n\nThe primary value returned by compile-file, output-truename, is the\ntruename of the output file, or nil if the file could not be created.\n\nThe secondary value, warnings-p, is false if no conditions of type error\nor warning were detected by the compiler, and true otherwise.\n\nThe tertiary value, failure-p, is false if no conditions of type error or\nwarning (other than style-warning) were detected by the compiler, and true\notherwise.\n\nFor general information about how files are processed by the file compiler,\nsee *Note File Compilation::.\n\nPrograms to be compiled by the file compiler must only contain\nexternalizable objects; for details on such objects, see *Note Literal\nObjects in Compiled Files::.  For information on how to extend the set of\nexternalizable objects, see the function make-load-form and *Note\nAdditional Constraints on Externalizable Objects::.\n\nAffected By::\n.............\n\n*error-output*,\n\n*standard-output*, *compile-verbose*, *compile-print*\n\nThe computer's file system.\n\nExceptional Situations::\n........................\n\nFor information about errors detected during the compilation process, see\n*Note Exceptional Situations in the Compiler::.\n\nAn error of type file-error might be signaled if (wild-pathname-p\ninput-file)\\/ returns true.\n\nIf either the attempt to open the source file for input or the attempt to\nopen the compiled file for output fails, an error of type file-error is\nsignaled.\n\nSee Also::\n..........\n\n*Note compile:: , declare, *Note eval-when:: , pathname, logical-pathname,\n*Note File System Concepts::,\n\n*Note Pathnames as Filenames::\n\n"
}