{
    "name": "Sequence Concepts",
    "prev": "Sequences",
    "next": "Rules about Test Functions",
    "up": "Sequences",
    "header": {
        "type": null,
        "text": "Sequence Concepts"
    },
    "sections": [
        {
            "type": "",
            "text": "A sequence is an ordered collection of elements, implemented as either a\nvector or a list.\nSequences can be created by the function make-sequence, as well as other\nfunctions that create objects of types that are subtypes of sequence\n(e.g., list, make-list, mapcar, and vector).\nA sequence function is a function defined by this specification or added\nas an extension by the implementation that operates on one or more\nsequences.  Whenever a sequence function must construct and return a new\nvector, it always returns a simple vector.  Similarly, any strings\nconstructed will be simple strings.\n  concatenate        length              remove             \n  copy-seq           map                 remove-duplicates  \n  count              map-into            remove-if          \n  count-if           merge               remove-if-not      \n  count-if-not       mismatch            replace            \n  delete             notany              reverse            \n  delete-duplicates  notevery            search             \n  delete-if          nreverse            some               \n  delete-if-not      nsubstitute         sort               \n  elt                nsubstitute-if      stable-sort        \n  every              nsubstitute-if-not  subseq             \n  fill               position            substitute         \n  find               position-if         substitute-if      \n  find-if            position-if-not     substitute-if-not  \n  find-if-not        reduce                                 \n        Figure 17-1: Standardized Sequence Functions       \n* Menu:\n* General Restrictions on Parameters that must be Sequences::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sequence Concepts,  Next: Rules about Test Functions,  Prev: Sequences,  Up: Sequences\n\nSequence Concepts\n=================\n\nA sequence is an ordered collection of elements, implemented as either a\nvector or a list.\n\nSequences can be created by the function make-sequence, as well as other\nfunctions that create objects of types that are subtypes of sequence\n(e.g., list, make-list, mapcar, and vector).\n\nA sequence function is a function defined by this specification or added\nas an extension by the implementation that operates on one or more\nsequences.  Whenever a sequence function must construct and return a new\nvector, it always returns a simple vector.  Similarly, any strings\nconstructed will be simple strings.\n\n  concatenate        length              remove             \n  copy-seq           map                 remove-duplicates  \n  count              map-into            remove-if          \n  count-if           merge               remove-if-not      \n  count-if-not       mismatch            replace            \n  delete             notany              reverse            \n  delete-duplicates  notevery            search             \n  delete-if          nreverse            some               \n  delete-if-not      nsubstitute         sort               \n  elt                nsubstitute-if      stable-sort        \n  every              nsubstitute-if-not  subseq             \n  fill               position            substitute         \n  find               position-if         substitute-if      \n  find-if            position-if-not     substitute-if-not  \n  find-if-not        reduce                                 \n\n        Figure 17-1: Standardized Sequence Functions       \n\n\n* Menu:\n\n* General Restrictions on Parameters that must be Sequences::\n\n"
}