{
    "name": "Examples of Satisfying a Two-Argument Test",
    "prev": "Satisfying a Two-Argument Test",
    "next": null,
    "up": "Satisfying a Two-Argument Test",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Satisfying a Two-Argument Test",
            "text": "      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'equal)\n     =>  (foo bar \"BAR\" \"foo\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'equalp)\n     =>  (foo bar \"BAR\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'string-equal)\n     =>  (bar \"BAR\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'string=)\n     =>  (BAR \"BAR\" \"foo\" \"bar\")\n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'eql)\n     =>  (1)\n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'=)\n     =>  (1 1.0 #C(1.0 0.0))\n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test (complement #'=))\n     =>  (1 1.0 #C(1.0 0.0))\n      (count 1 '((one 1) (uno 1) (two 2) (dos 2)) :key #'cadr) =>  2\n      (count 2.0 '(1 2 3) :test #'eql :key #'float) =>  1\n      (count \"FOO\" (list (make-pathname :name \"FOO\" :type \"X\")\n                         (make-pathname :name \"FOO\" :type \"Y\"))\n             :key #'pathname-name\n             :test #'equal)\n     =>  2\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Satisfying a Two-Argument Test,  Prev: Satisfying a Two-Argument Test,  Up: Satisfying a Two-Argument Test\n\nExamples of Satisfying a Two-Argument Test\n..........................................\n\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'equal)\n     =>  (foo bar \"BAR\" \"foo\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'equalp)\n     =>  (foo bar \"BAR\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'string-equal)\n     =>  (bar \"BAR\" \"bar\")\n      (remove \"FOO\" '(foo bar \"FOO\" \"BAR\" \"foo\" \"bar\") :test #'string=)\n     =>  (BAR \"BAR\" \"foo\" \"bar\")\n     \n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'eql)\n     =>  (1)\n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'=)\n     =>  (1 1.0 #C(1.0 0.0))\n      (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test (complement #'=))\n     =>  (1 1.0 #C(1.0 0.0))\n     \n      (count 1 '((one 1) (uno 1) (two 2) (dos 2)) :key #'cadr) =>  2\n     \n      (count 2.0 '(1 2 3) :test #'eql :key #'float) =>  1\n     \n      (count \"FOO\" (list (make-pathname :name \"FOO\" :type \"X\")\n                         (make-pathname :name \"FOO\" :type \"Y\"))\n             :key #'pathname-name\n             :test #'equal)\n     =>  2\n\n"
}