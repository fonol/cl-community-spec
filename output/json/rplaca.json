{
    "name": "rplaca",
    "prev": "atom",
    "next": "car",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "rplaca, rplacd"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "rplaca",
                    "text": " cons object =>  cons\n"
                },
                {
                    "name": "rplacd",
                    "text": " cons object =>  cons\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Pronunciation",
            "text": "rplaca: pronounced ,r\\=e 'plak e or pronounced ,re 'plak e\nrplacd: pronounced ,r\\=e 'plak de or pronounced ,re 'plak de or pronounced\n,r\\=e 'plak d\\=e or pronounced ,re 'plak d\\=e\n"
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "cons",
                    "desc": "a cons."
                },
                {
                    "name": "object",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "rplaca replaces the car of the cons with object.\nrplacd replaces the cdr of the cons with object.\n"
        },
        {
            "type": "Examples",
            "text": "      (defparameter *some-list* (list* 'one 'two 'three 'four)) =>  *some-list*\n      *some-list* =>  (ONE TWO THREE . FOUR)\n      (rplaca *some-list* 'uno) =>  (UNO TWO THREE . FOUR)\n      *some-list* =>  (UNO TWO THREE . FOUR)\n      (rplacd (last *some-list*) (list 'IV)) =>  (THREE IV)\n      *some-list* =>  (UNO TWO THREE IV)\n"
        },
        {
            "type": "Side Effects",
            "text": "The cons is modified.\nShould signal an error of type type-error if cons is not a cons.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: rplaca,  Next: car,  Prev: atom,  Up: Conses Dictionary\n\nrplaca, rplacd                                                   [Function]\n---------------------------------------------------------------------------\n\n`rplaca'  cons object =>  cons\n\n`rplacd'  cons object =>  cons\n\nPronunciation::\n...............\n\nrplaca: pronounced ,r\\=e 'plak e or pronounced ,re 'plak e\n\nrplacd: pronounced ,r\\=e 'plak de or pronounced ,re 'plak de or pronounced\n,r\\=e 'plak d\\=e or pronounced ,re 'plak d\\=e\n\nArguments and Values::\n......................\n\ncons--a cons.\n\nobject--an object.\n\nDescription::\n.............\n\nrplaca replaces the car of the cons with object.\n\nrplacd replaces the cdr of the cons with object.\n\nExamples::\n..........\n\n      (defparameter *some-list* (list* 'one 'two 'three 'four)) =>  *some-list*\n      *some-list* =>  (ONE TWO THREE . FOUR)\n      (rplaca *some-list* 'uno) =>  (UNO TWO THREE . FOUR)\n      *some-list* =>  (UNO TWO THREE . FOUR)\n      (rplacd (last *some-list*) (list 'IV)) =>  (THREE IV)\n      *some-list* =>  (UNO TWO THREE IV)\n\nSide Effects::\n..............\n\nThe cons is modified.\n\nShould signal an error of type type-error if cons is not a cons.\n\n"
}