{
    "name": "Examples of Feature Expressions",
    "prev": "Feature Expressions",
    "next": null,
    "up": "Features",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of Feature Expressions",
            "text": "For example, suppose that in implementation A, the features spice and perq\nare present, but the feature lispm is not present; in implementation B,\nthe feature lispm is present, but the features spice and perq are not\npresent; and in implementation C, none of the features spice, lispm, or\nperq are present.  Figure 24-1 shows some sample expressions, and how they\nwould be read_2 in these implementations.\n  (cons #+spice \"Spice\" #-spice \"Lispm\" x) \n  in implementation A ...    (CONS \"Spice\" X)             \n    in implementation B ...  (CONS \"Lispm\" X)             \n    in implementation C ...  (CONS \"Lispm\" X)             \n  (cons #+spice \"Spice\" #+LispM \"Lispm\" x) \n  in implementation A ...    (CONS \"Spice\" X)             \n    in implementation B ...  (CONS \"Lispm\" X)             \n    in implementation C ...  (CONS X)                     \n  (setq a '(1 2 #+perq 43 #+(not perq) 27)) \n  in implementation A ...    (SETQ A '(1 2 43))           \n    in implementation B ...  (SETQ A '(1 2 27))           \n    in implementation C ...  (SETQ A '(1 2 27))           \n  (let ((a 3) #+(or spice lispm) (b 3)) (foo a)) \n  in implementation A ...    (LET ((A 3) (B 3)) (FOO A))  \n    in implementation B ...  (LET ((A 3) (B 3)) (FOO A))  \n    in implementation C ...  (LET ((A 3)) (FOO A))        \n  (cons #+Lispm \"#+Spice\" #+Spice \"foo\" #-(or Lispm Spice) 7 x) \n  in implementation A ...    (CONS \"foo\" X)               \n    in implementation B ...  (CONS \"#+Spice\" X)           \n    in implementation C ...  (CONS 7 X)                   \n              Figure 24-1: Features examples             \n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of Feature Expressions,  Prev: Feature Expressions,  Up: Features\n\nExamples of Feature Expressions\n...............................\n\nFor example, suppose that in implementation A, the features spice and perq\nare present, but the feature lispm is not present; in implementation B,\nthe feature lispm is present, but the features spice and perq are not\npresent; and in implementation C, none of the features spice, lispm, or\nperq are present.  Figure 24-1 shows some sample expressions, and how they\nwould be read_2 in these implementations.\n\n  (cons #+spice \"Spice\" #-spice \"Lispm\" x) \n  in implementation A ...    (CONS \"Spice\" X)             \n    in implementation B ...  (CONS \"Lispm\" X)             \n    in implementation C ...  (CONS \"Lispm\" X)             \n  (cons #+spice \"Spice\" #+LispM \"Lispm\" x) \n  in implementation A ...    (CONS \"Spice\" X)             \n    in implementation B ...  (CONS \"Lispm\" X)             \n    in implementation C ...  (CONS X)                     \n  (setq a '(1 2 #+perq 43 #+(not perq) 27)) \n  in implementation A ...    (SETQ A '(1 2 43))           \n    in implementation B ...  (SETQ A '(1 2 27))           \n    in implementation C ...  (SETQ A '(1 2 27))           \n  (let ((a 3) #+(or spice lispm) (b 3)) (foo a)) \n  in implementation A ...    (LET ((A 3) (B 3)) (FOO A))  \n    in implementation B ...  (LET ((A 3) (B 3)) (FOO A))  \n    in implementation C ...  (LET ((A 3)) (FOO A))        \n  (cons #+Lispm \"#+Spice\" #+Spice \"foo\" #-(or Lispm Spice) 7 x) \n  in implementation A ...    (CONS \"foo\" X)               \n    in implementation B ...  (CONS \"#+Spice\" X)           \n    in implementation C ...  (CONS 7 X)                   \n\n              Figure 24-1: Features examples             \n\n\n"
}