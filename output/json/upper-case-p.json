{
    "name": "upper-case-p",
    "prev": "char-upcase",
    "next": "char-code",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "upper-case-p, lower-case-p, both-case-p"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "upper-case-p",
                    "text": " character =>  generalized-boolean\n"
                },
                {
                    "name": "lower-case-p",
                    "text": " character =>  generalized-boolean\n\n"
                },
                {
                    "name": "both-case-p",
                    "text": " character =>  generalized-boolean\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character",
                    "desc": "a character."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "These functions test the case of a given character.\nupper-case-p returns true if character is an uppercase character;\notherwise, returns false.\nlower-case-p returns true if character is a lowercase character;\notherwise, returns false.\nboth-case-p returns true if character is a character with case; otherwise,\nreturns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (upper-case-p #\\A) =>  true\n      (upper-case-p #\\a) =>  false\n      (both-case-p #\\a) =>  true\n      (both-case-p #\\5) =>  false\n      (lower-case-p #\\5) =>  false\n      (upper-case-p #\\5) =>  false\n      ;; This next example presupposes an implementation\n      ;; in which #\\Bell is an implementation-defined character.\n      (lower-case-p #\\Bell) =>  false\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if character is not a character.\n"
        },
        {
            "type": "See Also",
            "text": "*Note char-upcase; char-downcase:: , char-downcase, *Note Characters With\nCase::, *Note Documentation of Implementation-Defined Scripts::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: upper-case-p,  Next: char-code,  Prev: char-upcase,  Up: Characters Dictionary\n\nupper-case-p, lower-case-p, both-case-p                          [Function]\n---------------------------------------------------------------------------\n\n`upper-case-p'  character =>  generalized-boolean\n\n`lower-case-p'  character =>  generalized-boolean\n\n`both-case-p'  character =>  generalized-boolean\n\nArguments and Values::\n......................\n\ncharacter--a character.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nThese functions test the case of a given character.\n\nupper-case-p returns true if character is an uppercase character;\notherwise, returns false.\n\nlower-case-p returns true if character is a lowercase character;\notherwise, returns false.\n\nboth-case-p returns true if character is a character with case; otherwise,\nreturns false.\n\nExamples::\n..........\n\n      (upper-case-p #\\A) =>  true\n      (upper-case-p #\\a) =>  false\n      (both-case-p #\\a) =>  true\n      (both-case-p #\\5) =>  false\n      (lower-case-p #\\5) =>  false\n      (upper-case-p #\\5) =>  false\n      ;; This next example presupposes an implementation\n      ;; in which #\\Bell is an implementation-defined character.\n      (lower-case-p #\\Bell) =>  false\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if character is not a character.\n\nSee Also::\n..........\n\n*Note char-upcase; char-downcase:: , char-downcase, *Note Characters With\nCase::, *Note Documentation of Implementation-Defined Scripts::\n\n"
}