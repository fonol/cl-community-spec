{
    "name": "ignore",
    "prev": "declare",
    "next": "dynamic-extent",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Declaration",
        "text": "ignore, ignorable"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "text": "(ignore {var | (function fn)}*)\n(ignorable {var | (function fn)}*)\n"
        },
        {
            "type": "Arguments",
            "text": "var--a variable name.\nfn--a function name.\n"
        },
        {
            "type": "Valid Context",
            "text": "declaration\n"
        },
        {
            "type": "Binding Types Affected",
            "text": "variable, function\n"
        },
        {
            "type": "Description",
            "text": "The ignore and ignorable declarations refer to for-value references to\nvariable bindings for the vars and to function bindings for the fns.\nAn ignore declaration specifies that for-value references to the indicated\nbindings will not occur within the scope of the declaration.  Within the\nscope of such a declaration, it is desirable for a compiler to issue a\nwarning about the presence of either a for-value reference to any var or\nfn, or a special declaration for any var.\nAn ignorable declaration specifies that for-value references to the\nindicated bindings might or might not occur within the scope of the\ndeclaration.  Within the scope of such a declaration, it is not desirable\nfor a compiler to issue a warning about the presence or absence of either\na for-value reference to any var or fn, or a special declaration for any\nvar.\nWhen not within the scope of a ignore or ignorable declaration, it is\ndesirable for a compiler to issue a warning about any var for which there\nis neither a for-value reference nor a special declaration, or about any\nfn for which there is no for-value reference.\nAny warning about a \"used\" or \"unused\" binding must be of type\nstyle-warning, and may not affect program semantics.\nThe stream variables established by with-open-file, with-open-stream,\nwith-input-from-string, and with-output-to-string, and all iteration\nvariables are, by definition, always \"used\".  Using (declare (ignore v)),\nfor such a variable v has unspecified consequences.\n"
        },
        {
            "type": "See Also",
            "text": "declare\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ignore,  Next: dynamic-extent,  Prev: declare,  Up: Evaluation and Compilation Dictionary\n\nignore, ignorable                                             [Declaration]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n(ignore {var | (function fn)}*)\n\n(ignorable {var | (function fn)}*)\n\nArguments::\n...........\n\nvar--a variable name.\n\nfn--a function name.\n\nValid Context::\n...............\n\ndeclaration\n\nBinding Types Affected::\n........................\n\nvariable, function\n\nDescription::\n.............\n\nThe ignore and ignorable declarations refer to for-value references to\nvariable bindings for the vars and to function bindings for the fns.\n\nAn ignore declaration specifies that for-value references to the indicated\nbindings will not occur within the scope of the declaration.  Within the\nscope of such a declaration, it is desirable for a compiler to issue a\nwarning about the presence of either a for-value reference to any var or\nfn, or a special declaration for any var.\n\nAn ignorable declaration specifies that for-value references to the\nindicated bindings might or might not occur within the scope of the\ndeclaration.  Within the scope of such a declaration, it is not desirable\nfor a compiler to issue a warning about the presence or absence of either\na for-value reference to any var or fn, or a special declaration for any\nvar.\n\nWhen not within the scope of a ignore or ignorable declaration, it is\ndesirable for a compiler to issue a warning about any var for which there\nis neither a for-value reference nor a special declaration, or about any\nfn for which there is no for-value reference.\n\nAny warning about a \"used\" or \"unused\" binding must be of type\nstyle-warning, and may not affect program semantics.\n\nThe stream variables established by with-open-file, with-open-stream,\nwith-input-from-string, and with-output-to-string, and all iteration\nvariables are, by definition, always \"used\".  Using (declare (ignore v)),\nfor such a variable v has unspecified consequences.\n\nSee Also::\n..........\n\ndeclare\n\n"
}