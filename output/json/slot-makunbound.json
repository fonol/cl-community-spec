{
    "name": "slot-makunbound",
    "prev": "slot-exists-p",
    "next": "slot-missing",
    "up": "Objects Dictionary",
    "header": {
        "type": "Function",
        "text": "slot-makunbound"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "slot-makunbound",
                    "text": " instance slot-name =>  instance\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "Slot-name",
                    "desc": "a symbol."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The function slot-makunbound restores a slot of the name slot-name in an\ninstance to the unbound state.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If no slot of the name slot-name exists in the instance, slot-missing is\ncalled as follows:\n     (slot-missing (class-of instance)\n                   instance\n                   slot-name\n                   'slot-makunbound)\n(Any values returned by slot-missing in this case are ignored by\nslot-makunbound.)\nThe specific behavior depends on instance's metaclass.  An error is never\nsignaled if instance has metaclass standard-class.  An error is always\nsignaled if instance has metaclass built-in-class.  The consequences are\nundefined if instance has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note slot-boundp:: , *Note slot-missing::\n"
        },
        {
            "type": "Notes",
            "text": "Although no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-makunbound using the function\nslot-makunbound-using-class described in the Metaobject Protocol.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: slot-makunbound,  Next: slot-missing,  Prev: slot-exists-p,  Up: Objects Dictionary\n\nslot-makunbound                                                  [Function]\n---------------------------------------------------------------------------\n\n`slot-makunbound'  instance slot-name =>  instance\n\nArguments and Values::\n......................\n\ninstance - instance.\n\nSlot-name--a symbol.\n\nDescription::\n.............\n\nThe function slot-makunbound restores a slot of the name slot-name in an\ninstance to the unbound state.\n\nExceptional Situations::\n........................\n\nIf no slot of the name slot-name exists in the instance, slot-missing is\ncalled as follows:\n\n     (slot-missing (class-of instance)\n                   instance\n                   slot-name\n                   'slot-makunbound)\n\n(Any values returned by slot-missing in this case are ignored by\nslot-makunbound.)\n\nThe specific behavior depends on instance's metaclass.  An error is never\nsignaled if instance has metaclass standard-class.  An error is always\nsignaled if instance has metaclass built-in-class.  The consequences are\nundefined if instance has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n\nSee Also::\n..........\n\n*Note slot-boundp:: , *Note slot-missing::\n\nNotes::\n.......\n\nAlthough no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-makunbound using the function\nslot-makunbound-using-class described in the Metaobject Protocol.\n\n"
}