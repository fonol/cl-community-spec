{
    "name": "Glossary",
    "prev": "Glossary (Glossary)",
    "next": null,
    "up": "Glossary (Glossary)",
    "header": {
        "type": null,
        "text": "Non-alphabetic"
    },
    "sections": [
        {
            "type": "",
            "text": "Each entry in this glossary has the following parts:\n*\n     the term being defined, set in boldface.\n*\n     optional pronunciation, enclosed in square brackets and set in\n     boldface, as in the following example: pronounced 'a ,list .  The\n     pronunciation key follows Webster's Third New International Dictionary\n     the English Language, Unabridged, except that \"e\" is used to notate\n     the schwa (upside-down \"e\") character.\n*\n     the part or parts of speech, set in italics.  If a term can be used\n     as several parts of speech, there is a separate definition for each\n     part of speech.\n*\n     one or more definitions, organized as follows:\n    -\n          an optional number, present if there are several definitions.\n          Lowercase letters might also be used in cases where\n          subdefinitions of a numbered definition are necessary.\n    -\n          an optional part of speech, set in italics, present if the term\n          is one of several parts of speech.\n    -\n          an optional discipline, set in italics, present if the term has\n          a standard definition being repeated. For example, \"Math.\"\n    -\n          an optional context, present if this definition is meaningful\n          only in that context. For example, \"(of a symbol)\".\n    -\n          the definition.\n    -\n          an optional example sentence. For example, \"This is an example\n          of an example.\"\n    -\n          optional cross references.\nIn addition, some terms have idiomatic usage in the Common Lisp community\nwhich is not shared by other communities, or which is not technically\ncorrect.  Definitions labeled \"Idiom.\" represent such idiomatic usage;\nthese definitions are sometimes followed by an explanatory note.\nWords in this font are words with entries in the glossary.  Words in\nexample sentences do not follow this convention.\nWhen an ambiguity arises, the longest matching substring has precedence.\nFor example, \"complex float\" refers to a single glossary entry for\n\"complex float\" rather than the combined meaning of the glossary terms\n\"complex\" and \"float.\"\nSubscript notation, as in \"something_n\" means that the nth definition of\n\"something\" is intended.  This notation is used only in situations where\nthe context might be insufficient to disambiguate.\nThe following are abbreviations used in the glossary:\nAbbreviation       Meaning\nadj.\n     adjective\nadv.\n     adverb\nANSI\n     compatible with one or more ANSI standards\nComp.\n     computers\nIdiom.\n     idiomatic\nIEEE\n     compatible with one or more IEEE standards\nISO\n     compatible with one or more ISO standards\nMath.\n     mathematics\nTrad.\n     traditional\nn.\n     noun\nv.\n     verb\nv.t.\n     transitive verb\n    ()\n          pronounced 'nil , n.  an alternative notation for writing the\n          symbol~nil, used to emphasize the use of nil as an empty list.\nA\n-\n    absolute\n          adj.  1. (of a time) representing a specific point in time.  2.\n          (of a pathname) representing a specific position in a directory\n          hierarchy.  See relative.\n    access\n          n., v.t.  1. v.t. (a place, or array) to read_1 or write_1 the\n          value of the place or an element of the array.  2. n. (of a\n          place) an attempt to access_1 the value of the place.\n    accessibility\n          n.  the state of being accessible.\n    accessible\n          adj.  1. (of an object) capable of being referenced.  2. (of\n          shared slots or local slots in an instance of a class) having\n          been defined by the class of the instance or inherited from a\n          superclass of that class.  3. (of a symbol in a package) capable\n          of being referenced without a package prefix when that package\n          is current, regardless of whether the symbol is present in that\n          package or is inherited.\n    accessor\n          n.  an operator that performs an access.  See reader and writer.\n    active\n          adj.  1. (of a handler, a restart, or a catch tag) having been\n          established but not yet disestablished.  2. (of an element of an\n          array) having an index that is greater than or equal to zero,\n          but less than the fill pointer (if any).  For an array that has\n          no fill pointer, all elements are considered active.\n    actual adjustability\n          n. (of an array) a generalized boolean that is associated with\n          the array, representing whether the array is actually adjustable.\n          See also expressed adjustability and adjustable-array-p.\n    actual argument\n          n. Trad.  an argument.\n    actual array element type\n          n. (of an array) the type for which the array is actually\n          specialized, which is the upgraded array element type of the\n          expressed array element type of the array.  See the function\n          array-element-type.\n    actual complex part type\n          n. (of a complex) the type in which the real and imaginary parts\n          of the complex are actually represented, which is the upgraded\n          complex part type of the expressed complex part type of the\n          complex.\n    actual parameter\n          n. Trad.  an argument.\n    actually adjustable\n          adj. (of an array) such that adjust-array can adjust its\n          characteristics by direct modification.  A conforming program\n          may depend on an array being actually adjustable only if either\n          that array is known to have been expressly adjustable or if that\n          array has been explicitly tested by adjustable-array-p.\n    adjustability\n          n. (of an array) 1. expressed adjustability.  2. actual\n          adjustability.\n    adjustable\n          adj. (of an array) 1. expressly adjustable.  2. actually\n          adjustable.\n    after method\n          n.  a method having the qualifier :after.\n    alist\n          pronounced '\\=a ,list , n.  an association list.\n    alphabetic\n          n., adj.  1. adj. (of a character) being one of the standard\n          characters A through Z or a through z, or being any\n          implementation-defined character that has case, or being some\n          other graphic character defined by the implementation to be\n          alphabetic_1.  2. a. n.  one of several possible constituent\n          traits of a character.  For details, see *Note Constituent\n          Characters:: and *Note Reader Algorithm::.  b. adj. (of a\n          character) being a character that has syntax type constituent in\n          the current readtable and that has the constituent trait\n          alphabetic_{2a}.  See Figure~2-8.\n    alphanumeric\n          adj. (of a character) being either an alphabetic_1 character or\n          a numeric character.\n    ampersand\n          n.  the standard character that is called \"ampersand\" (&).  See\n          Figure~2-5.\n    anonymous\n          adj.  1. (of a class or function) having no name 2. (of a\n          restart) having a name of nil.\n    apparently uninterned\n          adj.  having a home package of nil.  (An apparently uninterned\n          symbol might or might not be an uninterned symbol.  Uninterned\n          symbols have a home package of nil, but symbols which have been\n          uninterned from their home package also have a home package of\n          nil, even though they might still be interned in some other\n          package.)\n    applicable\n          adj.  1. (of a handler) being an applicable handler.  2. (of a\n          method) being an applicable method.  3. (of a restart) being an\n          applicable restart.\n    applicable handler\n          n. (for a condition being signaled) an active handler for which\n          the associated type contains the condition.\n    applicable method\n          n. (of a generic function called with arguments) a method of the\n          generic function for which the arguments satisfy the parameter\n          specializers of that method.  See *Note Selecting the Applicable\n          Methods::.\n    applicable restart\n          n.  1. (for a condition) an active handler for which the\n          associated test returns true when given the condition as an\n          argument.  2. (for no particular condition) an active handler\n          for which the associated test returns true when given nil as an\n          argument.\n    apply\n          v.t. (a function to a list) to call the function with arguments\n          that are the elements of the list.  \"Applying the function + to\n          a list of integers returns the sum of the elements of that list.\"\n    argument\n          n.  1. (of a function) an object which is offered as data to the\n          function when it is called.\n          2. (of a format control) a format argument.\n    argument evaluation order\n          n.  the order in which arguments are evaluated in a function\n          call.  \"The argument evaluation order for Common Lisp is left to\n          right.\" See *Note Evaluation::.\n    argument precedence order\n          n.  the order in which the arguments to a generic function are\n          considered when sorting the applicable methods into precedence\n          order.\n    around method\n          n.  a method having the qualifier :around.\n    array\n          n.  an object of type array, which serves as a container for\n          other objects arranged in a Cartesian coordinate system.\n    array element type\n          n. (of an array) 1. a type associated with the array, and of\n          which all elements of the array are constrained to be members.\n          2. the actual array element type of the array.  3. the expressed\n          array element type of the array.\n    array total size\n          n.  the total number of elements in an array, computed by taking\n          the product of the dimensions of the array.  (The size of a\n          zero-dimensional array is therefore one.)\n    assign\n          v.t. (a variable) to change the value of the variable in a\n          binding that has already been established.  See the special\n          operator setq.\n    association list\n          n.  a list of conses representing an association of keys with\n          values, where the car of each cons is the key and the cdr is the\n          value associated with that key.\n    asterisk\n          n.  the standard character that is variously called ``asterisk\"\n          or \"star\" (*).  See Figure~2-5.\n    at-sign\n          n.  the standard character that is variously called ``commercial\n          at\" or \"at sign\" (@).  See Figure~2-5.\n    atom\n          n.  any object that is not a cons.  \"A vector is an atom.\"\n    atomic\n          adj.  being an atom.  \"The number 3, the symbol foo, and nil are\n          atomic.\"\n    atomic type specifier\n          n.  a type specifier that is atomic.  For every atomic type\n          specifier, x, there is an equivalent compound type specifier\n          with no arguments supplied, (x).\n    attribute\n          n. (of a character) a program-visible aspect of the character.\n          The only standardized attribute of a character is its code_2,\n          but implementations are permitted to have additional\n          implementation-defined attributes.  See *Note Character\n          Attributes::.  \"An implementation that support fonts might make\n          font information an attribute of a character, while others might\n          represent font information separately from characters.\"\n    aux variable\n          n.  a variable that occurs in the part of a lambda list that was\n          introduced by &aux.  Unlike all other variables introduced by a\n          lambda-list, aux variables are not parameters.\n    auxiliary method\n          n.  a member of one of two sets of methods (the set of primary\n          methods is the other) that form an exhaustive partition of the\n          set of methods on the method's generic function.  How these sets\n          are determined is dependent on the method combination type; see\n          *Note Introduction to Methods::.\nB\n-\n    backquote\n          n.  the standard character that is variously called ``grave\n          accent\" or \"backquote\" (`).  See Figure~2-5.\n    backslash\n          n.  the standard character that is variously called ``reverse\n          solidus\" or \"backslash\" (\\).  See Figure~2-5.\n    base character\n          n.  a character\n          of type base-char.\n    base string\n          n.  a string of type base-string.\n    before method\n          n.  a method having the qualifier :before.\n    bidirectional\n          adj. (of a stream) being both an input stream and an output\n          stream.\n    binary\n          adj.  1. (of a stream) being a stream that has an element type\n          that is a subtype of type integer.  The most fundamental\n          operation on a binary input stream is read-byte and on a binary\n          output stream is write-byte.  See character.  2. (of a file)\n          having been created by opening a binary stream.  (It is\n          implementation-dependent whether this is an detectable aspect of\n          the file, or whether any given character file can be treated as\n          a binary file.)\n    bind\n          v.t. (a variable) to establish a binding for the variable.\n    binding\n          n.  an association between a name and that which the name\n          denotes.  \"A lexical binding is a lexical association between a\n          name and its value.\"\n    bit\n          n.  an object of type bit; that is, the integer 0 or the integer\n          1.\n    bit array\n          n.  a specialized array that is of type (array bit), and whose\n          elements are of type bit.\n    bit vector\n          n.  a specialized vector that is of type bit-vector, and whose\n          elements are of type bit.\n    bit-wise logical operation specifier\n          n.  an object which names one of the sixteen possible bit-wise\n          logical operations that can be performed by the boole function,\n          and which is the value of exactly one of the constant variables\n          boole-clr,     boole-set, boole-1,       boole-2, boole-c1,\n          boole-c2, boole-and,     boole-ior, boole-xor,     boole-eqv,\n          boole-nand,    boole-nor, boole-andc1,   boole-andc2,\n          boole-orc1, or boole-orc2.\n    block\n          n.  a named lexical exit point, established explicitly by block\n          or implicitly by operators such as loop, do and prog, to which\n          control and values may be transfered by using a return-from form\n          with the name of the block.\n    block tag\n          n.  the symbol that, within the lexical scope of a block form,\n          names the block established by that block form.  See return or\n          return-from.\n    boa lambda list\n          n.  a lambda list that is syntactically like an ordinary lambda\n          list, but that is processed in \"by order of argument\" style.\n          See *Note Boa Lambda Lists::.\n    body parameter\n          n.  a parameter available in certain lambda lists which from the\n          point of view of conforming programs is like a rest parameter in\n          every way except that it is introduced by &body instead of\n          &rest.  (Implementations are permitted to provide extensions\n          which distinguish body parameters and rest parameters--e.g., the\n          forms for operators which were defined using a body parameter\n          might be pretty printed slightly differently than forms for\n          operators which were defined using rest parameters.)\n    boolean\n          n.  an object of type boolean; that is, one of the following\n          objects: the symbol~t   (representing true), or the symbol~nil\n          (representing false).  See generalized boolean.\n    boolean equivalent\n          n. (of an object O_1) any object O_2 that has the same truth\n          value as O_1 when both O_1 and O_2 are viewed as generalized\n          booleans.\n    bound\n          adj., v.t.  1. adj. having an associated denotation in a binding.\n          \"The variables named by a let are bound within its body.\" See\n          unbound.  2. adj. having a local binding which shadows_2 another.\n          \"The variable *print-escape* is bound while in the princ\n          function.\" 3. v.t. the past tense of bind.\n    bound declaration\n          n.  a declaration that refers to or is associated with a variable\n          or function and that appears within the special form that\n          establishes the variable or function, but before the body of\n          that special form (specifically, at the head of that form's\n          body).  (If a bound declaration refers to a function binding or\n          a lexical variable binding, the scope of the declaration is\n          exactly the scope of that binding.  If the declaration refers to\n          a dynamic variable binding, the scope of the declaration is what\n          the scope of the binding would have been if it were lexical\n          rather than dynamic.)\n    bounded\n          adj. (of a sequence S, by an ordered pair of bounding indices\n          i_{start} and i_{end}) restricted to a subrange of the elements\n          of S that includes each element beginning with (and including)\n          the one indexed by i_{start} and continuing up to (but not\n          including) the one indexed by i_{end}.\n    bounding index\n          n. (of a sequence with length n) either of a conceptual pair of\n          integers, i_{start} and i_{end}, respectively called the \"lower\n          bounding index\" and \"upper bounding index\", such that 0 <=\n          i_{start} <= i_{end} <= n, and which therefore delimit a\n          subrange of the sequence bounded by i_{start} and i_{end}.\n    bounding index designator\n          (for a sequence) one of two objects that, taken together as an\n          ordered pair, behave as a designator for bounding indices of the\n          sequence; that is, they denote bounding indices of the sequence,\n          and are either: an integer (denoting itself) and nil (denoting\n          the length of the sequence), or two integers (each denoting\n          themselves).\n    break loop\n          n.  A variant of the normal Lisp read-eval-print loop that is\n          recursively entered, usually because the ongoing evaluation of\n          some other form has been suspended for the purpose of debugging.\n          Often, a break loop provides the ability to exit in such a way\n          as to continue the suspended computation.  See the function\n          break.\n    broadcast stream\n          n.  an output stream of type broadcast-stream.\n    built-in class\n          n.  a class that is a generalized instance of class\n          built-in-class.\n    built-in type\n          n.  one of the types in Figure~4-2.\n    byte\n          n.  1. adjacent bits within an integer.  (The specific number of\n          bits can vary from point to point in the program; see the\n          function byte.) 2. an integer in a specified range.  (The\n          specific range can vary from point to point in the program; see\n          the functions open and write-byte.)\n    byte specifier\n          n.  An object of implementation-dependent nature that is\n          returned by the function byte and that specifies the range of\n          bits in an integer to be used as a byte by functions such as ldb.\nC\n-\n    cadr\n          pronounced 'ka ,de r , n. (of an object) the car of the cdr of\n          that object.\n    call\n          v.t., n.  1. v.t. (a function with arguments) to cause the code\n          represented by that function to be executed in an environment\n          where bindings for the values of its parameters have been\n          established based on the arguments.  \"Calling the function +\n          with the arguments 5 and 1 yields a value of 6.\" 2. n. a\n          situation in which a function is called.\n    captured initialization form\n          n.  an initialization form along with the lexical environment in\n          which the form that defined the initialization form was\n          evaluated.  \"Each newly added shared slot is set to the result\n          of evaluating the captured initialization form for the slot that\n          was specified in the defclass form for the new class.\"\n    car\n          n.  1. a. (of a cons) the component of a cons corresponding to\n          the first argument to cons; the other component is the cdr.\n          \"The function rplaca modifies the car of a cons.\" b. (of a list)\n          the first element of the list, or nil if the list is the empty\n          list.  2. the object that is held in the car_1.  \"The function\n          car returns the car of a cons.\"\n    case\n          n. (of a character) the property of being either uppercase or\n          lowercase.  Not all characters have case.  \"The characters #\\A\n          and #\\a have case, but the character #\\$ has no case.\" See *Note\n          Characters With Case:: and the function both-case-p.\n    case sensitivity mode\n          n.  one of the symbols :upcase, :downcase, :preserve, or :invert.\n    catch\n          n.  an exit point which is established by a catch form within\n          the dynamic scope of its body, which is named by a catch tag,\n          and to which control and values may be thrown.\n    catch tag\n          n.  an object which names an active catch.  (If more than one\n          catch is active with the same catch tag, it is only possible to\n          throw to the innermost such catch because the outer one is\n          shadowed_2.)\n    cddr\n          pronounced 'kud e ,de r  or pronounced 'ke ,dude r , n.  (of an\n          object) the cdr of the cdr of that object.\n    cdr\n          pronounced 'ku ,de r , n.  1. a. (of a cons) the component of a\n          cons corresponding to the second argument to cons; the other\n          component is the car.  \"The function rplacd modifies the cdr of\n          a cons.\" b. (of a list L_1) either the list L_2 that contains\n          the elements of L_1 that follow after the first, or else nil if\n          L_1 is the empty list.  2. the object that is held in the cdr_1.\n          \"The function cdr returns the cdr of a cons.\"\n    cell\n          n. Trad. (of an object) a conceptual slot of that object.  The\n          dynamic variable and global function bindings of a symbol are\n          sometimes referred to as its value cell and function cell,\n          respectively.\n    character\n          n., adj.  1. n. an object of type character; that is, an object\n          that represents a unitary token in an aggregate quantity of text;\n          see *Note Character Concepts::.  2. adj.  a. (of a stream)\n          having an element type that is a subtype of type character.  The\n          most fundamental operation on a character input stream is\n          read-char and on a character output stream is write-char. See\n          binary.  b. (of a file) having been created by opening a\n          character stream.  (It is implementation-dependent whether this\n          is an inspectable aspect of the file, or whether any given\n          binary file can be treated as a character file.)\n    character code\n          n.  1. one of possibly several attributes of a character.  2. a\n          non-negative integer less than the value of char-code-limit that\n          is suitable for use as a character code_1.\n    character designator\n          n.  a designator for a character; that is, an object that\n          denotes a character and that is one of: a designator for a\n          string of length one (denoting the character that is its only\n          element),\n          or a character (denoting itself).\n    circular\n          adj.  1. (of a list) a circular list.  2. (of an arbitrary\n          object) having a component, element, constituent_2, or\n          subexpression (as appropriate to the context) that is the object\n          itself.\n    circular list\n          n.  a chain of conses that has no termination because some cons\n          in the chain is the cdr of a later cons.\n    class\n          n.  1. an object that uniquely determines the structure and\n          behavior of a set of other objects called its direct instances,\n          that contributes structure and behavior to a set of other\n          objects called its indirect instances, and that acts as a type\n          specifier for a set of objects called its generalized instances.\n          \"The class integer is a subclass of the class number.\" (Note\n          that the phrase \"the class foo\" is often substituted for the\n          more precise phrase \"the class named foo\"--in both cases, a\n          class object (not a symbol) is denoted.) 2. (of an object) the\n          uniquely determined class of which the object is a direct\n          instance.  See the function class-of.  \"The class of the object\n          returned by gensym is symbol.\" (Note that with this usage a\n          phrase such as \"its class is foo\" is often substituted for the\n          more precise phrase ``its class is the class named foo\"--in both\n          cases, a class object (not a symbol) is denoted.)\n    class designator\n          n.  a designator for a class; that is, an object that denotes a\n          class and that is one of: a symbol (denoting the class named by\n          that symbol; see the function find-class) or a class (denoting\n          itself).\n    class precedence list\n          n.  a unique total ordering on a class and its superclasses that\n          is consistent with the local precedence orders for the class and\n          its superclasses.  For detailed information, see *Note\n          Determining the Class Precedence List::.\n    close\n          v.t. (a stream) to terminate usage of the stream as a source or\n          sink of data, permitting the implementation to reclaim its\n          internal data structures, and to free any external resources\n          which might have been locked by the stream when it was opened.\n    closed\n          adj. (of a stream) having been closed (see close).  Some (but\n          not all) operations that are valid on open streams are not valid\n          on closed streams.  See *Note File Operations on Open and Closed\n          Streams::.\n    closure\n          n.  a lexical closure.\n    coalesce\n          v.t. (literal objects that are similar) to consolidate the\n          identity of those objects, such that they become the same object.\n          See *Note Compiler Terminology::.\n    code\n          n.  1. Trad.  any representation of actions to be performed,\n          whether conceptual or as an actual object, such as forms, lambda\n          expressions, objects of type function, text in a source file, or\n          instruction sequences in a compiled file.  This is a generic\n          term; the specific nature of the representation depends on its\n          context.  2. (of a character) a character code.\n    coerce\n          v.t. (an object to a type) to produce an object from the given\n          object, without modifying that object, by following some set of\n          coercion rules that must be specifically stated for any context\n          in which this term is used.  The resulting object is necessarily\n          of the indicated type, except when that type is a subtype of\n          type complex; in that case, if a complex rational with an\n          imaginary part of zero would result, the result is a rational\n          rather than a complex--see *Note Rule of Canonical\n          Representation for Complex Rationals::.\n    colon\n          n.  the standard character that is called \"colon\" (:).  See\n          Figure~2-5.\n    comma\n          n.  the standard character that is called \"comma\" (,).  See\n          Figure~2-5.\n    compilation\n          n.  the process of compiling code by the compiler.\n    compilation environment\n          n.  1. An environment that represents information known by the\n          compiler about a form that is being compiled.  See *Note\n          Compiler Terminology::.  2. An object that represents the\n          compilation environment_1 and that is used as a second argument\n          to a macro function (which supplies a value for any &environment\n          parameter in the macro function's definition).\n    compilation unit\n          n.  an interval during which a single unit of compilation is\n          occurring.  See the macro with-compilation-unit.\n    compile\n          v.t.  1. (code) to perform semantic preprocessing of the code,\n          usually optimizing one or more qualities of the code, such as\n          run-time speed of execution or run-time storage usage.  The\n          minimum semantic requirements of compilation are that it must\n          remove all macro calls and arrange for all load time values to\n          be resolved prior to run time.  2. (a function) to produce a new\n          object of type compiled-function which represents the result of\n          compiling the code represented by the function.  See the\n          function compile.  3. (a source file) to produce a compiled file\n          from a source file.  See the function compile-file.\n    compile time\n          n.  the duration of time that the compiler is processing source\n          code.\n    compile-time definition\n          n.  a definition in the compilation environment.\n    compiled code\n          n.  1. compiled functions.  2. code that represents compiled\n          functions, such as the contents of a compiled file.\n    compiled file\n          n.  a file which represents the results of compiling the forms\n          which appeared in a corresponding source file, and which can be\n          loaded.  See the function compile-file.\n    compiled function\n          n.  an object of type compiled-function, which is a function\n          that has been compiled, which contains no references to macros\n          that must be expanded at run time, and which contains no\n          unresolved references to load time values.\n    compiler\n          n.  a facility that is part of Lisp and that translates code\n          into an implementation-dependent form that might be represented\n          or executed efficiently.  The functions compile and compile-file\n          permit programs to invoke the compiler.\n    compiler macro\n          n.  an auxiliary macro definition for a globally defined function\n          or macro which might or might not be called by any given\n          conforming implementation and which must preserve the semantics\n          of the globally defined function or macro but which might\n          perform some additional optimizations.  (Unlike a macro, a\n          compiler macro does not extend the syntax of Common Lisp;\n          rather, it provides an alternate implementation strategy for\n          some existing syntax or functionality.)\n    compiler macro expansion\n          n.  1. the process of translating a form into another form by a\n          compiler macro.  2. the form resulting from this process.\n    compiler macro form\n          n.  a function form or macro form whose operator has a\n          definition as a compiler macro, or a funcall form whose first\n          argument is a function form whose argument is the name of a\n          function that has a definition as a compiler macro.\n    compiler macro function\n          n.  a function of two arguments, a form and an environment, that\n          implements compiler macro expansion by producing either a form\n          to be used in place of the original argument form or else nil,\n          indicating that the original form should not be replaced.  See\n          *Note Compiler Macros::.\n    complex\n          n.  an object of type complex.\n    complex float\n          n.  an object of type complex which has a complex part type that\n          is a subtype of float.  A complex float is a complex, but it is\n          not a float.\n    complex part type\n          n. (of a complex) 1. the type which is used to represent both\n          the real part and the imaginary part of the complex.  2. the\n          actual complex part type of the complex.  3. the expressed\n          complex part type of the complex.\n    complex rational\n          n.  an object of type complex which has a complex part type that\n          is a subtype of rational.  A complex rational is a complex, but\n          it is not a rational.  No complex rational has an imaginary part\n          of zero because such a number is always represented by Common\n          Lisp as an object of type rational; see *Note Rule of Canonical\n          Representation for Complex Rationals::.\n    complex single float\n          n.  an object of type complex which has a complex part type that\n          is a subtype of single-float.  A complex single float is a\n          complex, but it is not a single float.\n    composite stream\n          n.  a stream that is composed of one or more other streams.\n          \"make-synonym-stream creates a composite stream.\"\n    compound form\n          n.  a non-empty list which is a form: a special form, a lambda\n          form, a macro form, or a function form.\n    compound type specifier\n          n.  a type specifier that is a cons; i.e., a type specifier that\n          is not an atomic type specifier.  \"(vector single-float) is a\n          compound type specifier.\"\n    concatenated stream\n          n.  an input stream of type concatenated-stream.\n    condition\n          n.  1. an object which represents a situation--usually, but not\n          necessarily, during signaling.  2. an object of type condition.\n    condition designator\n          n.  one or more objects that, taken together, denote either an\n          existing condition object or a condition object to be implicitly\n          created.  For details, see *Note Condition Designators::.\n    condition handler\n          n.  a function that might be invoked by the act of signaling,\n          that receives the condition being signaled as its only argument,\n          and that is permitted to handle the condition or to decline.\n          See *Note Signaling::.\n    condition reporter\n          n.  a function that describes how a condition is to be printed\n          when the Lisp printer is invoked while *print-escape* is false.\n          See *Note Printing Conditions::.\n    conditional newline\n          n.  a point in output where a newline might be inserted at the\n          discretion of the pretty printer.  There are four kinds of\n          conditional newlines, called \"linear-style,\" ``fill-style,\"\n          ``miser-style,\" and \"mandatory-style.\" See the function\n          pprint-newline and *Note Dynamic Control of the Arrangement of\n          Output::.\n    conformance\n          n.  a state achieved by proper and complete adherence to the\n          requirements of this specification.  See *Note Conformance::.\n    conforming code\n          n.  code that is all of part of a conforming program.\n    conforming implementation\n          n.  an implementation, used to emphasize complete and correct\n          adherance to all conformance criteria.  A conforming\n          implementation is capable of accepting a conforming program as\n          input, preparing that program for execution, and executing the\n          prepared program in accordance with this specification.  An\n          implementation which has been extended may still be a conforming\n          implementation provided that no extension interferes with the\n          correct function of any conforming program.\n    conforming processor\n          n. ANSI a conforming implementation.\n    conforming program\n          n.  a program, used to emphasize the fact that the program\n          depends for its correctness only upon documented aspects of\n          Common Lisp, and can therefore be expected to run correctly in\n          any conforming implementation.\n    congruent\n          n.  conforming to the rules of lambda list congruency, as\n          detailed in *Note Congruent Lambda-lists for all Methods of a\n          Generic Function::.\n    cons\n          n.v.  1. n. a compound data object having two components called\n          the car and the cdr.  2. v. to create such an object.  3. v.\n          Idiom. to create any object, or to allocate storage.\n    constant\n          n.  1. a constant form.  2. a constant variable.  3. a constant\n          object.  4. a self-evaluating object.\n    constant form\n          n.  any form for which evaluation always yields the same value,\n          that neither affects nor is affected by the environment in which\n          it is evaluated (except that it is permitted to refer to the\n          names of constant variables defined in the environment), and\n          that neither affects nor is affected by the state of any object\n          except those objects that are otherwise inaccessible parts of\n          objects created by the form itself.  \"A car form in which the\n          argument is a quote form is a constant form.\"\n    constant object\n          n.  an object that is constrained (e.g., by its context in a\n          program or by the source from which it was obtained) to be\n          immutable.  \"A literal object that has been processed by\n          compile-file is a constant object.\"\n    constant variable\n          n.  a variable, the value of which can never change; that is, a\n          keyword_1 or a named constant.  \"The symbols t, nil, :direction,\n          and most-positive-fixnum are constant variables.\"\n    constituent\n          n., adj.  1. a. n. the syntax type of a character that is part\n          of a token.  For details, see *Note Constituent Characters::.\n          b. adj. (of a character) having the constituent_{1a} syntax\n          type_2.  c. n. a constituent_{1b} character.  2. n. (of a\n          composite stream) one of possibly several objects that\n          collectively comprise the source or sink of that stream.\n    constituent trait\n          n. (of a character) one of several classifications of a\n          constituent character in a readtable.  See *Note Constituent\n          Characters::.\n    constructed stream\n          n.  a stream whose source or sink is a Lisp object.  Note that\n          since a stream is another Lisp object, composite streams are\n          considered constructed streams.  \"A string stream is a\n          constructed stream.\"\n    contagion\n          n.  a process whereby operations on objects of differing types\n          (e.g., arithmetic on mixed types of numbers) produce a result\n          whose type is controlled by the dominance of one argument's type\n          over the types of the other arguments.  See *Note Contagion in\n          Numeric Operations::.\n    continuable\n          n. (of an error) an error that is correctable by the continue\n          restart.\n    control form\n          n.  1. a form that establishes one or more places to which\n          control can be transferred.  2. a form that transfers control.\n    copy\n          n.  1. (of a cons C) a fresh cons with the same car and cdr as C.\n          2. (of a list L) a fresh list with the same elements as L.\n          (Only the list structure is fresh; the elements are the same.)\n          See the function copy-list.  3. (of an association list A with\n          elements A_i) a fresh list B with elements B_i, each of which is\n          nil if A_i is nil, or else a copy of the cons A_i.  See the\n          function copy-alist.  4. (of a tree T) a fresh tree with the\n          same leaves as T.  See the function copy-tree.  5. (of a random\n          state R) a fresh random state that, if used as an argument to to\n          the function random would produce the same series of \"random\"\n          values as R would produce.\n          6. (of a structure S) a fresh structure that has the same type\n          as S, and that has slot values, each of which is the same as the\n          corresponding slot value of S.\n          (Note that since the difference between a cons, a list, and a\n          tree is a matter of \"view\" or \"intention,\"  there can be no\n          general-purpose function which, based solely on the type of an\n          object, can determine which of these distinct meanings is\n          intended.  The distinction rests solely on the basis of the text\n          description within this document.  For example, phrases like \"a\n          copy of the given list\" or \"copy of the list x\" imply the second\n          definition.)\n    correctable\n          adj. (of an error) 1. (by a restart other than abort that has\n          been associated with the error) capable of being corrected by\n          invoking that restart.  \"The function cerror signals an error\n          that is correctable by the continue restart.\"\n          (Note that correctability is not a property of an error object,\n          but rather a property of the dynamic environment that is in\n          effect when the error is signaled.  Specifically, the restart is\n          \"associated with\" the error condition object.  See *Note\n          Associating a Restart with a Condition::.)\n          2. (when no specific restart is mentioned) correctable_1 by at\n          least one restart.  \"import signals a correctable error of type\n          package-error if any of the imported symbols has the same name as\n          some distinct symbol already accessible in the package.\"\n    current input base\n          n. (in a dynamic environment) the radix that is the value of\n          *read-base* in that environment, and that is the default radix\n          employed by the Lisp reader and its related functions.\n    current logical block\n          n.  the context of the innermost lexically enclosing use of\n          pprint-logical-block.\n    current output base\n          n. (in a dynamic environment) the radix that is the value of\n          *print-base* in that environment, and that is the default radix\n          employed by the Lisp printer and its related functions.\n    current package\n          n. (in a dynamic environment) the package that is the value of\n          *package* in that environment, and that is the default package\n          employed by the Lisp reader and Lisp printer, and their related\n          functions.\n    current pprint dispatch table\n          n. (in a dynamic environment) the pprint dispatch table that is\n          the value of *print-pprint-dispatch* in that environment, and\n          that is the default pprint dispatch table employed by the pretty\n          printer.\n    current random state\n          n. (in a dynamic environment) the random state that is the value\n          of *random-state* in that environment, and that is the default\n          random state employed by random.\n    current readtable\n          n. (in a dynamic environment) the readtable that is the value of\n          *readtable* in that environment, and that affects the way in\n          which expressions_2 are parsed into objects by the Lisp reader.\nD\n-\n    data type\n          n. Trad.  a type.\n    debug I/O\n          n.  the bidirectional stream that is the value of the variable\n          *debug-io*.\n    debugger\n          n.  a facility that allows the user to handle a condition\n          interactively.  For example, the debugger might permit\n          interactive selection of a restart from among the active\n          restarts, and it might perform additional implementation-defined\n          services for the purposes of debugging.\n    declaration\n          n.  a global declaration or local declaration.\n    declaration identifier\n          n.  one of the symbols declaration, dynamic-extent, ftype,\n          function, ignore, inline, notinline, optimize, special, or type;\n          or a symbol which is the name of a type; or a symbol which has\n          been declared to be a declaration identifier by using a\n          declaration declaration.\n    declaration specifier\n          n.  an expression that can appear at top level of a declare\n          expression or a declaim form, or as the argument to proclaim,\n          and which has a car which is a declaration identifier, and which\n          has a cdr that is data interpreted according to rules specific\n          to the declaration identifier.\n    declare\n          v.  to establish a declaration.  See declare, declaim, or\n          proclaim.\n    decline\n          v. (of a handler) to return normally without having handled the\n          condition being signaled, permitting the signaling process to\n          continue as if the handler had not been present.\n    decoded time\n          n.  absolute time, represented as an ordered series of nine\n          objects which, taken together, form a description of a point in\n          calendar time, accurate to the nearest second (except that leap\n          seconds are ignored).  See *Note Decoded Time::.\n    default method\n          n.  a method having no parameter specializers other than the\n          class t.  Such a method is always an applicable method but might\n          be shadowed_2 by a more specific method.\n    defaulted initialization argument list\n          n.  a list of alternating initialization argument names and\n          values in which unsupplied initialization arguments are\n          defaulted, used in the protocol for initializing and\n          reinitializing instances of classes.\n    define-method-combination arguments lambda list\n          n.  a lambda list used by the :arguments option to\n          define-method-combination.  See *Note Define-method-combination\n          Arguments Lambda Lists::.\n    define-modify-macro lambda list\n          n.  a lambda list used by define-modify-macro.  See *Note\n          Define-modify-macro Lambda Lists::.\n    defined name\n          n.  a symbol the meaning of which is defined by Common Lisp.\n    defining form\n          n.  a form that has the side-effect of establishing a definition.\n          \"defun and defparameter are defining forms.\"\n    defsetf lambda list\n          n.  a lambda list that is like an ordinary lambda list except\n          that it does not permit &aux and that it permits use of\n          &environment.  See *Note Defsetf Lambda Lists::.\n    deftype lambda list\n          n.  a lambda list that is like a macro lambda list except that\n          the default value for unsupplied optional parameters and keyword\n          parameters is the symbol * (rather than nil).  See *Note Deftype\n          Lambda Lists::.\n    denormalized\n          adj., ANSI, IEEE (of a float) conforming to the description of\n          \"denormalized\" as described by IEEE Standard for Binary\n          Floating-Point Arithmetic.  For example, in an implementation\n          where the minimum possible exponent was -7 but where 0.001 was a\n          valid mantissa, the number 1.0e-10 might be representable as\n          0.001e-7 internally even if the normalized representation would\n          call for it to be represented instead as 1.0e-10 or 0.1e-9.  By\n          their nature, denormalized floats generally have less precision\n          than normalized floats.\n    derived type\n          n.  a type specifier which is defined in terms of an expansion\n          into another type specifier.  deftype defines derived types, and\n          there may be other implementation-defined operators which do so\n          as well.\n    derived type specifier\n          n.  a type specifier for a derived type.\n    designator\n          n.  an object that denotes another object.  In the dictionary\n          entry for an operator if a parameter is described as a\n          designator for a type, the description of the operator is\n          written in a way that assumes that appropriate coercion to that\n          type has already occurred; that is, that the parameter is\n          already of the denoted type.  For more detailed information, see\n          *Note Designators::.\n    destructive\n          adj. (of an operator) capable of modifying some program-visible\n          aspect of one or more objects that are either explicit arguments\n          to the operator or that can be obtained directly or indirectly\n          from the global environment by the operator.\n    destructuring lambda list\n          n.  an extended lambda list used in destructuring-bind and\n          nested within macro lambda lists.  See *Note Destructuring\n          Lambda Lists::.\n    different\n          adj.  not the same \"The strings \"FOO\" and \"foo\" are different\n          under equal but not under equalp.\"\n    digit\n          n. (in a radix) a character that is among the possible digits (0\n          to 9, A to Z, and a to z) and that is defined to have an\n          associated numeric weight as a digit in that radix.  See *Note\n          Digits in a Radix::.\n    dimension\n          n.  1. a non-negative integer indicating the number of objects\n          an array can hold along one axis.  If the array is a vector with\n          a fill pointer, the fill pointer is ignored.  \"The second\n          dimension of that array is 7.\" 2. an axis of an array.  \"This\n          array has six dimensions.\"\n    direct instance\n          n. (of a class C) an object whose class is C itself, rather than\n          some subclass of C.  \"The function make-instance always returns a\n          direct instance of the class which is (or is named by) its first\n          argument.\"\n    direct subclass\n          n. (of a class C_1) a class C_2, such that C_1 is a direct\n          superclass of C_2.\n    direct superclass\n          n. (of a class C_1) a class C_2 which was explicitly designated\n          as a superclass of C_1 in the definition of C_1.\n    disestablish\n          v.t.  to withdraw the establishment of an object, a  binding, an\n          exit point, a  tag, a  handler, a  restart, or an environment.\n    disjoint\n          n. (of types) having no elements in common.\n    dispatching macro character\n          n.  a macro character that has an associated table that specifies\n          the function to be called for each character that is seen\n          following the dispatching macro character.  See the function\n          make-dispatch-macro-character.\n    displaced array\n          n.  an array which has no storage of its own, but which is\n          instead indirected to the storage of another array, called its\n          target, at a specified offset, in such a way that any attempt to\n          access the displaced array implicitly references the target\n          array.\n    distinct\n          adj.  not identical.\n    documentation string\n          n. (in a defining form) A literal string which because of the\n          context in which it appears (rather than because of some\n          intrinsically observable aspect of the string) is taken as\n          documentation.  In some cases, the documentation string is saved\n          in such a way that it can later be obtained by supplying either\n          an object, or by supplying a name and a \"kind\" to the function\n          documentation.  \"The body of code in a defmacro form can be\n          preceded by a documentation string of kind function.\"\n    dot\n          n.  the standard character that is variously called ``full stop,\"\n          ``period,\" or \"dot\" (.).  See Figure~2-5.\n    dotted list\n          n.  a list which has a terminating atom that is not nil.  (An\n          atom by itself is not a dotted list, however.)\n    dotted pair\n          n.  1. a cons whose cdr is a non-list.  2. any cons, used to\n          emphasize the use of the cons as a symmetric data pair.\n    double float\n          n.  an object of type double-float.\n    double-quote\n          n.  the standard character that is variously called ``quotation\n          mark\" or \"double quote\" (\").  See Figure~2-5.\n    dynamic binding\n          n.  a binding in a dynamic environment.\n    dynamic environment\n          n.  that part of an environment that contains bindings with\n          dynamic extent.  A dynamic environment contains, among other\n          things: exit points established by unwind-protect, and bindings\n          of dynamic variables, exit points established by catch,\n          condition handlers, and restarts.\n    dynamic extent\n          n.  an extent whose duration is bounded by points of\n          establishment and disestablishment within the execution of a\n          particular form.  See indefinite extent.  \"Dynamic variable\n          bindings have dynamic extent.\"\n    dynamic scope\n          n.  indefinite scope along with dynamic extent.\n    dynamic variable\n          n.  a variable the binding for which is in the dynamic\n          environment.  See special.\nE\n-\n    echo stream\n          n.  a stream of type echo-stream.\n    effective method\n          n.  the combination of applicable methods that are executed when\n          a generic function is invoked with a particular sequence of\n          arguments.\n    element\n          n.  1. (of a list) an object that is the car of one of the conses\n          that comprise the list.  2. (of an array) an object that is\n          stored in the array.  3. (of a sequence) an object that is an\n          element of the list or array that is the sequence.  4. (of a\n          type) an object that is a member of the set of objects\n          designated by the type.  5. (of an input stream) a character or\n          number (as appropriate to the element type of the stream) that\n          is among the ordered series of objects that can be read from the\n          stream (using read-char or read-byte, as appropriate to the\n          stream).  6. (of an output stream) a character or number (as\n          appropriate to the element type of the stream) that is among the\n          ordered series of objects that has been or will be written to\n          the stream (using write-char or write-byte, as appropriate to\n          the stream).  7. (of a class) a generalized instance of the\n          class.\n    element type\n          n.  1. (of an array) the array element type of the array.  2.\n          (of a stream) the stream element type of the stream.\n    em\n          n. Trad.  a context-dependent unit of measure commonly used in\n          typesetting, equal to the displayed width of of a letter \"M\" in\n          the current font.  (The letter \"M\" is traditionally chosen\n          because it is typically represented by the widest glyph in the\n          font, and other characters' widths are typically fractions of an\n          em.  In implementations providing non-Roman characters with\n          wider characters than \"M,\" it is permissible for another\n          character to be the implementation-defined reference character\n          for this measure, and for \"M\" to be only a fraction of an em\n          wide.) In a fixed width font, a line with n characters is n ems\n          wide; in a variable width font, n ems is the expected upper\n          bound on the width of such a line.\n    empty list\n          n.  the list containing no elements. See ().\n    empty type\n          n.  the type that contains no elements, and that is a subtype of\n          all types (including itself).  See nil.\n    end of file\n          n.  1. the point in an input stream beyond which there is no\n          further data.  Whether or not there is such a point on an\n          interactive stream is implementation-defined.  2. a situation\n          that occurs upon an attempt to obtain data from an input stream\n          that is at the end of file_1.\n    environment\n          n.  1. a set of bindings. See *Note Introduction to\n          Environments::.  2. an environment object.  \"macroexpand takes\n          an optional environment argument.\"\n    environment object\n          n.  an object representing a set of lexical bindings, used in\n          the processing of a form to provide meanings for names within\n          that form.  \"macroexpand takes an optional environment argument.\"\n          (The object nil when used as an environment object denotes the\n          null lexical environment; the values of environment parameters\n          to macro functions are objects of implementation-dependent\n          nature which represent the environment_1 in which the\n          corresponding macro form is to be expanded.) See *Note\n          Environment Objects::.\n    environment parameter\n          n.  A parameter in a defining form f for which there is no\n          corresponding argument; instead, this parameter receives as its\n          value an environment object which corresponds to the lexical\n          environment in which the defining form f appeared.\n    error\n          n.  1. (only in the phrase \"is an error\") a situation in which\n          the semantics of a program are not specified, and in which the\n          consequences are undefined.  2. a condition which represents an\n          error situation.  See *Note Error Terminology::.  3. an object\n          of type error.\n    error output\n          n.  the output stream which is the value of the dynamic variable\n          *error-output*.\n    escape\n          n., adj.  1. n. a single escape or a multiple escape.  2. adj.\n          single escape or multiple escape.\n    establish\n          v.t.  to build or bring into being a  binding, a  declaration,\n          an exit point, a  tag, a  handler, a restart, or an environment.\n          \"let establishes lexical bindings.\"\n    evaluate\n          v.t. (a form or an implicit progn) to execute the code\n          represented by the form (or the series of forms making up the\n          implicit progn) by applying the rules of evaluation, returning\n          zero or more values.\n    evaluation\n          n.  a model whereby forms are executed, returning zero or more\n          values.  Such execution might be implemented directly in one\n          step by an interpreter or in two steps by first compiling the\n          form and then executing the compiled code; this choice is\n          dependent both on context and the nature of the implementation,\n          but in any case is not in general detectable by any program.\n          The evaluation model is designed in such a way that a conforming\n          implementation might legitimately have only a compiler and no\n          interpreter, or vice versa.  See *Note The Evaluation Model::.\n    evaluation environment\n          n.  a run-time environment in which macro expanders and code\n          specified by eval-when to be evaluated are evaluated.  All\n          evaluations initiated by the compiler take place in the\n          evaluation environment.\n    execute\n          v.t. Trad. (code) to perform the imperative actions represented\n          by the code.\n    execution time\n          n.  the duration of time that compiled code is being executed.\n    exhaustive partition\n          n. (of a type) a set of pairwise disjoint types that form an\n          exhaustive union.\n    exhaustive union\n          n. (of a type) a set of subtypes of the type, whose union\n          contains all elements of that type.\n    exit point\n          n.  a point in a control form from which (e.g., block), through\n          which (e.g., unwind-protect), or to which (e.g., tagbody)\n          control and possibly values can be transferred both actively by\n          using another control form and passively through the normal\n          control and data flow of evaluation.  \"catch and block establish\n          bindings for exit points to which throw and return-from,\n          respectively, can transfer control and values; tagbody\n          establishes a binding for an exit point with lexical extent to\n          which go can transfer control; and unwind-protect establishes an\n          exit point through which control might be transferred by\n          operators such as throw, return-from, and go.\"\n    explicit return\n          n.  the act of transferring control (and possibly values) to a\n          block by using return-from (or return).\n    explicit use\n          n. (of a variable V in a form F) a reference to V that is\n          directly apparent in the normal semantics of F; i.e., that does\n          not expose any undocumented details of the macro expansion of\n          the form itself.  References to V exposed by expanding subforms\n          of F are, however, considered to be explicit uses of V.\n    exponent marker\n          n.  a character that is used in the textual notation for a float\n          to separate the mantissa from the exponent.  The characters\n          defined as exponent markers in the standard readtable are shown\n          in Figure 26-1.  For more information, see *Note Character\n          Syntax::.  \"The exponent marker `d' in `3.0d7' indicates that\n          this number is to be represented as a double float.\"\n            Marker  Meaning                                  \n            D or d  double-float                             \n            E or e  float (see *read-default-float-format*)  \n            F or f  single-float                             \n            L or l  long-float                               \n            S or s  short-float                              \n                     Figure 26-1: Exponent Markers          \n    export\n          v.t. (a symbol in a package) to add the symbol to the list of\n          external symbols of the package.\n    exported\n          adj. (of a symbol in a package) being an external symbol of the\n          package.\n    expressed adjustability\n          n. (of an array) a generalized boolean that is conceptually (but\n          not necessarily actually) associated with the array,\n          representing whether the array is expressly adjustable.  See\n          also actual adjustability.\n    expressed array element type\n          n. (of an array) the type which is the array element type\n          implied by a type declaration for the array, or which is the\n          requested array element type at its time of creation, prior to\n          any selection of an upgraded array element type.  (Common Lisp\n          does not provide a way of detecting this type directly at run\n          time, but an implementation is permitted to make assumptions\n          about the array's contents and the operations which may be\n          performed on the array when this type is noted during code\n          analysis, even if those assumptions would not be valid in\n          general for the upgraded array element type of the expressed\n          array element type.)\n    expressed complex part type\n          n. (of a complex) the type which is implied as the complex part\n          type by a type declaration for the complex, or which is the\n          requested complex part type at its time of creation, prior to\n          any selection of an upgraded complex part type.  (Common Lisp\n          does not provide a way of detecting this type directly at run\n          time, but an implementation is permitted to make assumptions\n          about the operations which may be performed on the complex when\n          this type is noted during code analysis, even if those\n          assumptions would not be valid in general for the upgraded\n          complex part type of the expressed complex part type.)\n    expression\n          n.  1. an object, often used to emphasize the use of the object\n          to encode or represent information in a specialized format, such\n          as program text.  \"The second expression in a let form is a list\n          of bindings.\" 2. the textual notation used to notate an object\n          in a source file.  \"The expression 'sample is equivalent to\n          (quote sample).\"\n    expressly adjustable\n          adj. (of an array) being actually adjustable by virtue of an\n          explicit request for this characteristic having been made at the\n          time of its creation.  All arrays that are expressly adjustable\n          are actually adjustable, but not necessarily vice versa.\n    extended character\n          n.  a character\n          of type extended-char:\n          a character that is not a base character.\n    extended function designator\n          n.  a designator for a function; that is, an object that denotes\n          a function and that is one of: a function name (denoting the\n          function it names in the global environment), or a function\n          (denoting itself).  The consequences are undefined if a function\n          name is used as an extended function designator but it does not\n          have a global definition as a function, or if it is a symbol\n          that has a global definition as a macro or a special form.  See\n          also function designator.\n    extended lambda list\n          n.  a list resembling an ordinary lambda list in form and\n          purpose, but offering additional syntax or functionality not\n          available in an ordinary lambda list.  \"defmacro uses extended\n          lambda lists.\"\n    extension\n          n.  a facility in an implementation of Common Lisp that is not\n          specified by this standard.\n    extent\n          n.  the interval of time during which a reference to an object,\n          a  binding, an exit point, a  tag, a  handler, a  restart, or an\n          environment is defined.\n    external file format\n          n.  an object of implementation-dependent nature which determines\n          one of possibly several implementation-dependent ways in which\n          characters are encoded externally in a character file.\n    external file format designator\n          n.  a designator for an external file format; that is, an object\n          that denotes an external file format and that is one of: the\n          symbol :default (denoting an implementation-dependent default\n          external file format that can accomodate at least the base\n          characters), some other object defined by the implementation to\n          be an external file format designator (denoting an\n          implementation-defined external file format), or some other\n          object defined by the implementation to be an external file\n          format (denoting itself).\n    external symbol\n          n. (of a package) a symbol that is part of the `external\n          interface' to the package and that are inherited_3 by any other\n          package that uses the package.  When using the Lisp reader, if a\n          package prefix is used, the name of an external symbol is\n          separated from the package name by a single package marker while\n          the name of an internal symbol is separated from the package\n          name by a double package marker; see *Note Symbols as Tokens::.\n    externalizable object\n          n.  an object that can be used as a literal object in code to be\n          processed by the file compiler.\nF\n-\n    false\n          n.  the symbol nil, used to represent the failure of a predicate\n          test.\n    fbound\n          pronounced 'ef ,baund  adj.  (of a function name) bound in the\n          function namespace.  (The names of macros and special operators\n          are fbound, but the nature and type of the object which is their\n          value is implementation-dependent.\n          Further, defining a setf expander F does not cause the setf\n          function (setf F) to become defined; as such, if there is a such\n          a definition of a setf expander F, the function (setf F) can be\n          fbound if and only if, by design or coincidence, a function\n          binding for (setf F) has been independently established.)\n          See the functions fboundp and symbol-function.\n    feature\n          n.  1. an aspect or attribute of Common Lisp, of the\n          implementation, or of the environment.  2. a symbol that names a\n          feature_1.  See *Note Features::.  \"The :ansi-cl feature is\n          present in all conforming implementations.\"\n    feature expression\n          n.  A boolean combination of features used by the #+ and #-\n          reader macros in order to direct conditional reading of\n          expressions by the Lisp reader.  See *Note Feature Expressions::.\n    features list\n          n.  the list that is the value of *features*.\n    file\n          n.  a named entry in a file system, having an\n          implementation-defined nature.\n    file compiler\n          n.  any compiler which compiles source code contained in a file,\n          producing a compiled file as output.  The compile-file function\n          is the only interface to such a compiler provided by Common Lisp,\n          but there might be other, implementation-defined mechanisms for\n          invoking the file compiler.\n    file position\n          n. (in a stream) a non-negative integer that represents a\n          position in the stream.  Not all streams are able to represent\n          the notion of file position; in the description of any operator\n          which manipulates file positions, the behavior for streams that\n          don't have this notion must be explicitly stated.  For binary\n          streams, the file position represents the number of preceding\n          bytes in the stream.  For character streams, the constraint is\n          more relaxed: file positions must increase monotonically, the\n          amount of the increase between file positions corresponding to\n          any two successive characters in the stream is\n          implementation-dependent.\n    file position designator\n          n. (in a stream) a designator for a file position in that\n          stream; that is, the symbol :start (denoting 0, the first file\n          position in that stream), the symbol :end (denoting the last\n          file position in that stream; i.e., the position following the\n          last element of the stream), or a file position (denoting\n          itself).\n    file stream\n          n.  an object of type file-stream.\n    file system\n          n.  a facility which permits aggregations of data to be stored\n          in named files on some medium that is external to the Lisp image\n          and that therefore persists from session to session.\n    filename\n          n.  a handle, not necessarily ever directly represented as an\n          object, that can be used to refer to a file in a file system.\n          Pathnames and namestrings are two kinds of objects that\n          substitute for filenames in Common Lisp.\n    fill pointer\n          n. (of a vector) an integer associated with a vector that\n          represents the index above which no elements are active.  (A\n          fill pointer is a non-negative integer no larger than the total\n          number of elements in the vector.  Not all vectors have fill\n          pointers.)\n    finite\n          adj. (of a type) having a finite number of elements.  \"The type\n          specifier (integer 0 5) denotes a finite type, but the type\n          specifiers integer and (integer 0) do not.\"\n    fixnum\n          n.  an integer of type fixnum.\n    float\n          n.  an object of type float.\n    for-value\n          adj. (of a reference to a binding) being a reference that reads_1\n          the value of the binding.\n    form\n          n.  1. any object meant to be evaluated.  2.    a symbol, a\n          compound form, or a self-evaluating object.  3. (for an\n          operator, as in \"<<operator>> form\") a compound form having that\n          operator as its first element.  \"A quote form is a constant\n          form.\"\n    formal argument\n          n. Trad.  a parameter.\n    formal parameter\n          n. Trad.  a parameter.\n    format\n          v.t. (a format control and format arguments) to perform output\n          as if by format, using the format string and format arguments.\n    format argument\n          n.  an object which is used as data by functions such as format\n          which interpret format controls.\n    format control\n          n.  a format string, or a function that obeys the argument\n          conventions for a function returned by the formatter macro.  See\n          *Note Compiling Format Strings::.\n    format directive\n          n.  1. a sequence of characters in a format string which is\n          introduced by a tilde, and which is specially interpreted by\n          code which processes format strings to mean that some special\n          operation should be performed, possibly involving data supplied\n          by the format arguments that accompanied the format string.  See\n          the function format.  \"In \"~D base 10 = ~8R\", the character\n          sequences `~D' and `~8R' are format directives.\" 2. the\n          conceptual category of all format directives_1 which use the\n          same dispatch character.  \"Both \"~3d\" and \"~3,'0D\" are valid\n          uses of the `~D' format directive.\"\n    format string\n          n.  a string which can contain both ordinary text and format\n          directives, and which is used in conjunction with format\n          arguments to describe how text output should be formatted by\n          certain functions, such as format.\n    free declaration\n          n.  a declaration that is not a bound declaration.  See declare.\n    fresh\n          adj.  1. (of an object yielded by a function) having been\n          newly-allocated by that function.  (The caller of a function\n          that returns a fresh object may freely modify the object without\n          fear that such modification will compromise the future correct\n          behavior of that function.) 2. (of a binding for a name)\n          newly-allocated; not shared with other bindings for that name.\n    freshline\n          n.  a conceptual operation on a stream, implemented by the\n          function fresh-line and by the format directive ~&, which\n          advances the display position to the beginning of the next line\n          (as if a newline had been typed, or the function terpri had been\n          called) unless the stream is already known to be positioned at\n          the beginning of a line.  Unlike newline, freshline is not a\n          character.\n    funbound\n          pronounced 'ef unbaund n. (of a function name) not fbound.\n    function\n          n.\n          1. an object representing code, which can be called with zero or\n          more arguments, and which produces zero or more values.  2. an\n          object of type function.\n    function block name\n          n. (of a function name) The symbol that would be used as the\n          name of an implicit block which surrounds the body of a function\n          having that function name.  If the function name is a symbol,\n          its function block name is the function name itself.  If the\n          function name is a list whose car is setf and whose cadr is a\n          symbol, its function block name is the symbol that is the cadr\n          of the function name.  An implementation which supports\n          additional kinds of function names must specify for each how the\n          corresponding function block name is computed.\n    function cell\n          n. Trad. (of a symbol) The place which holds the definition of\n          the global function binding, if any, named by that symbol, and\n          which is accessed by symbol-function.  See cell.\n    function designator\n          n.  a designator for a function; that is, an object that denotes\n          a function and that is one of: a symbol (denoting the function\n          named by that symbol in the global environment), or a function\n          (denoting itself).  The consequences are undefined if a symbol\n          is used as a function designator but it does not have a global\n          definition as a function, or it has a global definition as a\n          macro or a special form.  See also extended function designator.\n    function form\n          n.  a form that is a list and that has a first element which is\n          the name of a function to be called on arguments which are the\n          result of evaluating subsequent elements of the function form.\n    function name\n          n. (in an environment) A symbol or a list (setf symbol) that is\n          the name of a function in that environment.\n    functional evaluation\n          n.  the process of extracting a functional value from a function\n          name or a lambda expression.  The evaluator performs functional\n          evaluation implicitly when it encounters a function name or a\n          lambda expression in the car of a compound form, or explicitly\n          when it encounters a function special form.  Neither a use of a\n          symbol as a function designator nor a use of the function\n          symbol-function to extract the functional value of a symbol is\n          considered a functional evaluation.\n    functional value\n          n.  1. (of a function name N in an environment E) The value of\n          the binding named N in the function namespace for environment E;\n          that is, the contents of the function cell named N in\n          environment E.  2. (of an fbound symbol S) the contents of the\n          symbol's function cell; that is, the value of the binding named S\n          in the function namespace of the global environment.  (A name\n          that is a macro name in the global environment or is a special\n          operator might or might not be fbound.  But if S is such a name\n          and is fbound, the specific nature of its functional value is\n          implementation-dependent; in particular, it might or might not\n          be a function.)\n    further compilation\n          n.  implementation-dependent compilation beyond minimal\n          compilation.  Further compilation is permitted to take place at\n          run time.  \"Block compilation and generation of machine-specific\n          instructions are examples of further compilation.\"\nG\n-\n    general\n          adj. (of an array) having element type t, and consequently able\n          to have any object as an element.\n    generalized boolean\n          n.  an object used as a truth value, where the symbol~nil\n          represents false and all other objects represent true.  See\n          boolean.\n    generalized instance\n          n. (of a class) an object the class of which is either that\n          class itself, or some subclass of that class.  (Because of the\n          correspondence between types and classes, the term \"generalized\n          instance of X\" implies \"object of type X\" and in cases where X\n          is a class (or class name) the reverse is also true.  The former\n          terminology emphasizes the view of X as a class while the latter\n          emphasizes the view of X as a type specifier.)\n    generalized reference\n          n.  a reference to a location storing an object as if to a\n          variable.  (Such a reference can be either to read or write the\n          location.) See *Note Generalized Reference::.  See also place.\n    generalized synonym stream\n          n. (with a synonym stream symbol) 1. (to a stream) a synonym\n          stream to the stream, or a composite stream which has as a target\n          a generalized synonym stream to the stream.  2. (to a symbol) a\n          synonym stream to the symbol, or a composite stream which has as\n          a target a generalized synonym stream to the symbol.\n    generic function\n          n.  a function whose behavior depends on the classes or\n          identities of the arguments supplied to it and whose parts\n          include, among other things, a set of methods, a lambda list,\n          and a method combination type.\n    generic function lambda list\n          n.  A lambda list that is used to describe data flow into a\n          generic function.  See *Note Generic Function Lambda Lists::.\n    gensym\n          n. Trad.  an uninterned symbol.  See the function gensym.\n    global declaration\n          n.  a form that makes certain kinds of information about code\n          globally available; that is, a proclaim form or a declaim form.\n    global environment\n          n.  that part of an environment that contains bindings with\n          indefinite scope and indefinite extent.\n    global variable\n          n.  a dynamic variable or a constant variable.\n    glyph\n          n.  a visual representation.  \"Graphic characters have\n          associated glyphs.\"\n    go\n          v.  to transfer control to a go point.  See the special operator\n          go.\n    go point\n          one of possibly several exit points that are established by\n          tagbody (or other abstractions, such as prog, which are built\n          from tagbody).\n    go tag\n          n.  the symbol or integer that, within the lexical scope of a\n          tagbody form, names an exit point established by that tagbody\n          form.\n    graphic\n          adj. (of a character) being a \"printing\" or \"displayable\"\n          character that has a standard visual representation as a single\n          glyph, such as A or * or =.  Space is defined to be graphic.  Of\n          the standard characters, all but newline are graphic.  See\n          non-graphic.\nH\n-\n    handle\n          v. (of a condition being signaled) to perform a non-local\n          transfer of control, terminating the ongoing signaling of the\n          condition.\n    handler\n          n.\n          a condition handler.\n    hash table\n          n.  an object of type hash-table, which provides a mapping from\n          keys to values.\n    home package\n          n. (of a symbol) the package, if any, which is contents of the\n          package cell of the symbol, and which dictates how the Lisp\n          printer prints the symbol when it is not accessible in the\n          current package. (Symbols which have nil in their package cell\n          are said to have no home package, and also to be apparently\n          uninterned.)\nI\n-\n    I/O customization variable\n          n.  one of the stream variables in Figure 26-2, or some other\n          (implementation-defined) stream variable that is defined by the\n          implementation to be an I/O customization variable.\n            *debug-io*        *error-io*         query-io*       \n            *standard-input*  *standard-output*  *trace-output*  \n            Figure 26-2: Standardized I/O Customization Variables\n    identical\n          adj.  the same under eq.\n    identifier\n          n.  1. a symbol used to identify or to distinguish names.  2. a\n          string used the same way.\n    immutable\n          adj.  not subject to change, either because no operator is\n          provided which is capable of effecting such change or because\n          some constraint exists which prohibits the use of an operator\n          that might otherwise be capable of effecting such a change.\n          Except as explicitly indicated otherwise, implementations are\n          not required to detect attempts to modify immutable objects or\n          cells; the consequences of attempting to make such modification\n          are undefined.  \"Numbers are immutable.\"\n    implementation\n          n.  a system, mechanism, or body of code that implements the\n          semantics of Common Lisp.\n    implementation limit\n          n.  a restriction imposed by an implementation.\n    implementation-defined\n          adj.  implementation-dependent, but required by this\n          specification to be defined by each conforming implementation\n          and to be documented by the corresponding implementor.\n    implementation-dependent\n          adj.  describing a behavior or aspect of Common Lisp which has\n          been deliberately left unspecified, that might be defined in\n          some conforming implementations but not in others, and whose\n          details may differ between implementations.  A conforming\n          implementation is encouraged (but not required) to document its\n          treatment of each item in this specification which is marked\n          implementation-dependent, although in some cases such\n          documentation might simply identify the item as \"undefined.\"\n    implementation-independent\n          adj.  used to identify or emphasize a behavior or aspect of\n          Common Lisp which does not vary between conforming\n          implementations.\n    implicit block\n          n.  a block introduced by a macro form rather than by an\n          explicit block form.\n    implicit compilation\n          n.  compilation performed during evaluation.\n    implicit progn\n          n.  an ordered set of adjacent forms appearing in another form,\n          and defined by their context in that form to be executed as if\n          within a progn.\n    implicit tagbody\n          n.  an ordered set of adjacent forms and/or tags appearing in\n          another form, and defined by their context in that form to be\n          executed as if within a tagbody.\n    import\n          v.t. (a symbol into a package) to make the symbol be present in\n          the package.\n    improper list\n          n.  a list which is not a proper list: a circular list or a\n          dotted list.\n    inaccessible\n          adj.  not accessible.\n    indefinite extent\n          n.  an extent whose duration is unlimited.  \"Most Common Lisp\n          objects have indefinite extent.\"\n    indefinite scope\n          n.  scope that is unlimited.\n    indicator\n          n.  a property indicator.\n    indirect instance\n          n. (of a class C_1) an object of class C_2, where C_2 is a\n          subclass of C_1.  \"An integer is an indirect instance of the\n          class number.\"\n    inherit\n          v.t.  1. to receive or acquire a quality, trait, or\n          characteristic; to gain access to a feature defined elsewhere.\n          2. (a class) to acquire the structure and behavior defined by a\n          superclass.  3. (a package) to make symbols exported by another\n          package accessible by using use-package.\n    initial pprint dispatch table\n          n.  the value of *print-pprint-dispatch* at the time the Lisp\n          image is started.\n    initial readtable\n          n.  the value of *readtable* at the time the Lisp image is\n          started.\n    initialization argument list\n          n.  a property list of initialization argument names and values\n          used in the protocol for initializing and reinitializing\n          instances of classes.  See *Note Object Creation and\n          Initialization::.\n    initialization form\n          n.  a form used to supply the initial value for a slot or\n          variable.  \"The initialization form for a slot in a defclass form\n          is introduced by the keyword :initform.\"\n    input\n          adj. (of a stream) supporting input operations (i.e., being a\n          \"data source\").  An input stream might also be an output stream,\n          in which case it is sometimes called a bidirectional stream.\n          See the function input-stream-p.\n    instance\n          n.  1. a direct instance.  2. a generalized instance.  3. an\n          indirect instance.\n    integer\n          n.  an object of type integer, which represents a mathematical\n          integer.\n    interactive stream\n          n.  a stream on which it makes sense to perform interactive\n          querying.  See *Note Interactive Streams::.\n    intern\n          v.t.  1. (a string in a package) to look up the string in the\n          package, returning either a symbol with that name which was\n          already accessible in the package or a newly created internal\n          symbol of the package with that name.  2. Idiom. generally, to\n          observe a protocol whereby objects which are equivalent or have\n          equivalent names under some predicate defined by the protocol\n          are mapped to a single canonical object.\n    internal symbol\n          n. (of a package) a symbol which is accessible in the package,\n          but which is not an external symbol of the package.\n    internal time\n          n.  time, represented as an integer number of internal time\n          units.  Absolute internal time is measured as an offset from an\n          arbitrarily chosen, implementation-dependent base.  See *Note\n          Internal Time::.\n    internal time unit\n          n.  a unit of time equal to 1/n of a second, for some\n          implementation-defined integer value of n.  See the variable\n          internal-time-units-per-second.\n    interned\n          adj. Trad.  1. (of a symbol) accessible_3 in any package.  2.\n          (of a symbol in a specific package) present in that package.\n    interpreted function\n          n.  a function that is not a compiled function.  (It is possible\n          for there to be a conforming implementation which has no\n          interpreted functions, but a conforming program must not assume\n          that all functions are compiled functions.)\n    interpreted implementation\n          n.  an implementation that uses an execution strategy for\n          interpreted functions that does not involve a one-time semantic\n          analysis pre-pass, and instead uses \"lazy\" (and sometimes\n          repetitious) semantic analysis of forms as they are encountered\n          during execution.\n    interval designator\n          n. (of type T) an ordered pair of objects that describe a\n          subtype of T by delimiting an interval on the real number line.\n          See *Note Interval Designators::.\n    invalid\n          n., adj.  1. n.  a possible constituent trait of a character\n          which if present signifies that the character cannot ever appear\n          in a token except under the control of a single escape character.\n          For details, see *Note Constituent Characters::.  2. adj. (of a\n          character) being a character that has syntax type constituent in\n          the current readtable and that has the constituent trait\n          invalid_1.  See Figure~2-8.\n    iteration form\n          n.  a compound form whose operator is named in Figure 26-3, or a\n          compound form that has an implementation-defined operator and\n          that is defined by the implementation to be an iteration form.\n            do              do-external-symbols  dotimes  \n            do*             do-symbols           loop     \n            do-all-symbols  dolist                        \n              Figure 26-3: Standardized Iteration Forms  \n    iteration variable\n          n.  a variable V, the binding for which was created by an\n          explicit use of V in an iteration form.\nK\n-\n    key\n          n.  an object used for selection during retrieval.  See\n          association list, property list, and hash table.  Also, see\n          *Note Sequence Concepts::.\n    keyword\n          n.  1. a symbol the home package of which is the KEYWORD package.\n          2. any symbol, usually but not necessarily in the KEYWORD\n          package, that is used as an identifying marker in keyword-style\n          argument passing.  See lambda.  3. Idiom. a lambda list keyword.\n    keyword parameter\n          n.  A parameter for which a corresponding keyword argument is\n          optional.  (There is no such thing as a required keyword\n          argument.) If the argument is not supplied, a default value is\n          used.  See also supplied-p parameter.\n    keyword/value pair\n          n.  two successive elements (a keyword and a value,\n          respectively) of a property list.\nL\n-\n    lambda combination\n          n. Trad.  a lambda form.\n    lambda expression\n          n.  a list which can be used in place of a function name in\n          certain contexts to denote a function by directly describing its\n          behavior rather than indirectly by referring to the name of an\n          established function; its name derives from the fact that its\n          first element is the symbol lambda.  See lambda.\n    lambda form\n          n.  a form that is a list and that has a first element which is\n          a lambda expression representing a function to be called on\n          arguments which are the result of evaluating subsequent elements\n          of the lambda form.\n    lambda list\n          n.  a list that specifies a set of parameters (sometimes called\n          lambda variables) and a protocol for receiving values for those\n          parameters; that is, an ordinary lambda list, an extended lambda\n          list, or a modified lambda list.\n    lambda list keyword\n          n.  a symbol whose name begins with ampersand and that is\n          specially recognized in a lambda list.  Note that no\n          standardized lambda list keyword is in the KEYWORD package.\n    lambda variable\n          n.  a formal parameter, used to emphasize the variable's\n          relation to the lambda list that established it.\n    leaf\n          n.  1. an atom in a tree_1.  2. a terminal node of a tree_2.\n    leap seconds\n          n.  additional one-second intervals of time that are\n          occasionally inserted into the true calendar by official\n          timekeepers as a correction similar to \"leap years.\"  All Common\n          Lisp time representations ignore leap seconds; every day is\n          assumed to be exactly 86400 seconds long.\n    left-parenthesis\n          n.  the standard character \"(\", that is variously called ``left\n          parenthesis\" or \"open parenthesis\" See Figure~2-5.\n    length\n          n. (of a sequence) the number of elements in the sequence.\n          (Note that if the sequence is a vector with a fill pointer, its\n          length is the same as the fill pointer even though the total\n          allocated size of the vector might be larger.)\n    lexical binding\n          n.  a binding in a lexical environment.\n    lexical closure\n          n.  a function that, when invoked on arguments, executes the\n          body of a lambda expression in the lexical environment that was\n          captured at the time of the creation of the lexical closure,\n          augmented by bindings of the function's parameters to the\n          corresponding arguments.\n    lexical environment\n          n.  that part of the environment that contains bindings whose\n          names have lexical scope. A lexical environment contains, among\n          other things: ordinary bindings of variable names to values,\n          lexically established bindings of function names to functions,\n          macros, symbol macros, blocks, tags, and local declarations (see\n          declare).\n    lexical scope\n          n.  scope that is limited to a spatial or textual region within\n          the establishing form.  \"The names of parameters to a function\n          normally are lexically scoped.\"\n    lexical variable\n          n.  a variable the binding for which is in the lexical\n          environment.\n    Lisp image\n          n.  a running instantiation of a Common Lisp implementation.  A\n          Lisp image is characterized by a single address space in which\n          any object can directly refer to any another in conformance with\n          this specification, and by a single, common, global environment.\n          (External operating systems sometimes call this a ``core image,\"\n          ``fork,\" ``incarnation,\" ``job,\" or \"process.\"  Note however,\n          that the issue of a \"process\" in such an operating system is\n          technically orthogonal to the issue of a Lisp image being\n          defined here.  Depending on the operating system, a single\n          \"process\" might have multiple Lisp images, and multiple\n          \"processes\" might reside in a single Lisp image.  Hence, it is\n          the idea of a fully shared address space for direct reference\n          among all objects which is the defining characteristic.  Note,\n          too, that two \"processes\" which have a communication area that\n          permits the sharing of some but not all objects are considered\n          to be distinct Lisp images.)\n    Lisp printer\n          n. Trad.  the procedure that prints the character representation\n          of an object onto a stream. (This procedure is implemented by\n          the function write.)\n    Lisp read-eval-print loop\n          n. Trad.  an endless loop that reads_2 a form, evaluates it, and\n          prints (i.e., writes_2) the results.  In many implementations,\n          the default mode of interaction with Common Lisp during program\n          development is through such a loop.\n    Lisp reader\n          n. Trad.  the procedure that parses character representations of\n          objects from a stream, producing objects.  (This procedure is\n          implemented by the function read.)\n    list\n          n.  1. a chain of conses in which the car of each cons is an\n          element of the list, and the cdr of each cons is either the next\n          link in the chain or a terminating atom.  See also proper list,\n          dotted list, or circular list.  2. the type that is the union of\n          null and cons.\n    list designator\n          n.  a designator for a list of objects; that is, an object that\n          denotes a list and that is one of: a non-nil atom (denoting a\n          singleton list whose element is that non-nil atom) or a proper\n          list (denoting itself).\n    list structure\n          n. (of a list) the set of conses that make up the list.  Note\n          that while the car_{1b} component of each such cons is part of\n          the list structure, the objects that are elements of the list\n          (i.e., the objects that are the cars_2 of each cons in the list)\n          are not themselves part of its list structure, even if they are\n          conses, except in the (circular_2) case where the list actually\n          contains one of its tails as an element.  (The list structure of\n          a list is sometimes redundantly referred to as its \"top-level\n          list structure\" in order to emphasize that any conses that are\n          elements of the list are not involved.)\n    literal\n          adj. (of an object) referenced directly in a program rather than\n          being computed by the program; that is, appearing as data in a\n          quote form, or, if the object is a self-evaluating object,\n          appearing as unquoted data.  \"In the form (cons \"one\" '(\"two\")),\n          the expressions \"one\", (\"two\"), and \"two\" are literal objects.\"\n    load\n          v.t. (a file) to cause the code contained in the file to be\n          executed.  See the function load.\n    load time\n          n.  the duration of time that the loader is loading compiled\n          code.\n    load time value\n          n.  an object referred to in code by a load-time-value form.\n          The value of such a form is some specific object which can only\n          be computed in the run-time environment.  In the case of file\n          compilation, the value is computed once as part of the process\n          of loading the compiled file, and not again.  See the special\n          operator load-time-value.\n    loader\n          n.  a facility that is part of Lisp and that loads a file.  See\n          the function load.\n    local declaration\n          n.  an expression which may appear only in specially designated\n          positions of certain forms, and which provides information about\n          the code contained within the containing form; that is, a\n          declare expression.\n    local precedence order\n          n. (of a class) a list consisting of the class followed by its\n          direct superclasses in the order mentioned in the defining form\n          for the class.\n    local slot\n          n. (of a class) a slot accessible in only one instance, namely\n          the instance in which the slot is allocated.\n    logical block\n          n.  a conceptual grouping of related output used by the pretty\n          printer.  See the macro pprint-logical-block and *Note Dynamic\n          Control of the Arrangement of Output::.\n    logical host\n          n.  an object of implementation-dependent nature that is used as\n          the representation of a \"host\" in a logical pathname, and that\n          has an associated set of translation rules for converting\n          logical pathnames belonging to that host into physical pathnames.\n          See *Note Logical Pathnames::.\n    logical host designator\n          n.  a designator for a logical host; that is, an object that\n          denotes a logical host and that is one of: a string (denoting\n          the logical host that it names), or a logical host (denoting\n          itself).  (Note that because the representation of a logical host\n          is implementation-dependent, it is possible that an\n          implementation might represent a logical host as the string that\n          names it.)\n    logical pathname\n          n.  an object of type logical-pathname.\n    long float\n          n.  an object of type long-float.\n    loop keyword\n          n. Trad.  a symbol that is a specially recognized part of the\n          syntax of an extended loop form.  Such symbols are recognized by\n          their name (using string=), not by their identity; as such, they\n          may be in any package.  A loop keyword is not a keyword.\n    lowercase\n          adj. (of a character) being among standard characters\n          corresponding to the small letters a through z, or being some\n          other implementation-defined character that is defined by the\n          implementation to be lowercase.  See *Note Characters With\n          Case::.\nM\n-\n    macro\n          n.  1. a macro form 2. a macro function.  3. a macro name.\n    macro character\n          n.  a character which, when encountered by the Lisp reader in\n          its main dispatch loop, introduces a reader macro_1.  (Macro\n          characters have nothing to do with macros.)\n    macro expansion\n          n.  1. the process of translating a macro form into another form.\n          2. the form resulting from this process.\n    macro form\n          n.  a form that stands for another form (e.g., for the purposes\n          of abstraction, information hiding, or syntactic convenience);\n          that is, either a compound form whose first element is a macro\n          name, or     a form that is a symbol that names a symbol macro.\n    macro function\n          n.  a function of two arguments, a form and an environment, that\n          implements macro expansion by producing a form to be evaluated\n          in place of the original argument form.\n    macro lambda list\n          n.  an extended lambda list used in forms that establish macro\n          definitions, such as defmacro and macrolet.  See *Note Macro\n          Lambda Lists::.\n    macro name\n          n.  a name for which macro-function returns true and which when\n          used as the first element of a compound form identifies that\n          form as a macro form.\n    macroexpand hook\n          n.  the function that is the value of *macroexpand-hook*.\n    mapping\n          n.  1. a type of iteration in which a function is successively\n          applied to objects taken from corresponding entries in\n          collections such as sequences or hash tables.  2. Math. a\n          relation between two sets in which each element of the first set\n          (the \"domain\") is assigned one element of the second set (the\n          \"range\").\n    metaclass\n          n.  1. a class whose instances are classes.  2. (of an object)\n          the class of the class of the object.\n    Metaobject Protocol\n          n.  one of many possible descriptions of how a conforming\n          implementation might implement various aspects of the object\n          system.  This description is beyond the scope of this document,\n          and no conforming implementation is required to adhere to it\n          except as noted explicitly in this specification.  Nevertheless,\n          its existence helps to establish normative practice, and\n          implementors with no reason to diverge from it are encouraged to\n          consider making their implementation adhere to it where possible.\n          It is described in detail in The Art of the Metaobject Protocol.\n    method\n          n.  an object that is part of a generic function and which\n          provides information about how that generic function should\n          behave when its arguments are objects of certain classes or with\n          certain identities.\n    method combination\n          n.  1. generally, the composition of a set of methods to produce\n          an effective method for a generic function.  2. an object of\n          type method-combination, which represents the details of how the\n          method combination_1 for one or more specific generic functions\n          is to be performed.\n    method-defining form\n          n.  a form that defines a method for a generic function, whether\n          explicitly or implicitly.  See *Note Introduction to Generic\n          Functions::.\n    method-defining operator\n          n.  an operator corresponding to a method-defining form.  See\n          Figure~7-1.\n    minimal compilation\n          n.  actions the compiler must take at compile time.  See *Note\n          Compilation Semantics::.\n    modified lambda list\n          n.  a list resembling an ordinary lambda list in form and\n          purpose, but which deviates in syntax or functionality from the\n          definition of an ordinary lambda list.  See ordinary lambda list.\n          \"deftype uses a modified lambda list.\"\n    most recent\n          adj.  innermost; that is, having been established (and not yet\n          disestablished) more recently than any other of its kind.\n    multiple escape\n          n., adj.  1. n. the syntax type of a character that is used in\n          pairs  to indicate that the enclosed characters are to be\n          treated as alphabetic_2 characters with their case preserved.\n          For details, see *Note Multiple Escape Characters::.  2. adj.\n          (of a character) having the multiple escape syntax type.  3. n.\n          a multiple escape_2 character.  (In the standard readtable,\n          vertical-bar is a multiple escape character.)\n    multiple values\n          n.  1. more than one value.  \"The function truncate returns\n          multiple values.\" 2. a variable number of values, possibly\n          including zero or one.  \"The function values returns multiple\n          values.\" 3. a fixed number of values other than one.  \"The macro\n          multiple-value-bind is among the few operators in Common Lisp\n          which can detect and manipulate multiple values.\"\nN\n-\n    name\n          n., v.t.  1. n. an identifier by which an object, a binding, or\n          an exit point is referred to by association using a binding.  2.\n          v.t. to give a name to.  3. n. (of an object having a name\n          component) the object which is that component.  \"The string\n          which is a symbol's name is returned by symbol-name.\" 4. n. (of\n          a pathname) a. the name component, returned by pathname-name.\n          b. the entire namestring, returned by namestring.  5. n. (of a\n          character) a string that names the character and that has length\n          greater than one.  (All non-graphic characters are required to\n          have names unless they have some implementation-defined attribute\n          which is not null.  Whether or not other characters have names\n          is implementation-dependent.)\n    named constant\n          n.  a variable that is defined by Common Lisp, by the\n          implementation, or by user code (see the macro defconstant) to\n          always yield the same value when evaluated.  \"The value of a\n          named constant may not be changed by assignment or by binding.\"\n    namespace\n          n.  1. bindings whose denotations are restricted to a particular\n          kind.  \"The bindings of names to tags is the tag namespace.\" 2.\n          any mapping whose domain is a set of names.  \"A package defines\n          a namespace.\"\n    namestring\n          n.  a string that represents a filename using either the\n          standardized notation for naming logical pathnames described in\n          *Note Syntax of Logical Pathname Namestrings::, or some\n          implementation-defined notation for naming a physical pathname.\n    newline\n          n.  the standard character <Newline>, notated for the Lisp\n          reader as #\\Newline.\n    next method\n          n.  the next method to be invoked with respect to a given method\n          for a particular set of arguments or argument classes.  See\n          *Note Applying method combination to the sorted list of\n          applicable methods::.\n    nickname\n          n. (of a package) one of possibly several names that can be used\n          to refer to the package but that is not the primary name of the\n          package.\n    nil\n          n.  the object that is at once the symbol named \"NIL\" in the\n          COMMON-LISP package, the empty list, the boolean (or generalized\n          boolean) representing false, and the name of the empty type.\n    non-atomic\n          adj.  being other than an atom; i.e., being a cons.\n    non-constant variable\n          n.  a variable that is not a constant variable.\n    non-correctable\n          adj. (of an error) not intentionally correctable.  (Because of\n          the dynamic nature of restarts, it is neither possible nor\n          generally useful to completely prohibit an error from being\n          correctable.  This term is used in order to express an intent\n          that no special effort should be made by code signaling an error\n          to make that error correctable; however, there is no actual\n          requirement on conforming programs or conforming implementations\n          imposed by this term.)\n    non-empty\n          adj.  having at least one element.\n    non-generic function\n          n.  a function that is not a generic function.\n    non-graphic\n          adj. (of a character) not graphic.  See *Note Graphic\n          Characters::.\n    non-list\n          n., adj.  other than a list; i.e., a non-nil atom.\n    non-local exit\n          n.  a transfer of control (and sometimes values) to an exit\n          point for reasons other than a normal return.  \"The operators\n          go, throw, and return-from cause a non-local exit.\"\n    non-nil\n          n., adj.  not nil.  Technically, any object which is not nil can\n          be referred to as true, but that would tend to imply a unique\n          view of the object as a generalized boolean.  Referring to such\n          an object as non-nil avoids this implication.\n    non-null lexical environment\n          n.  a lexical environment that has additional information not\n          present in the global environment, such as one or more bindings.\n    non-simple\n          adj.  not simple.\n    non-terminating\n          adj. (of a macro character) being such that it is treated as a\n          constituent character when it appears in the middle of an\n          extended token.  See *Note Reader Algorithm::.\n    non-top-level form\n          n.  a form that, by virtue of its position as a subform of\n          another form, is not a top level form.  See *Note Processing of\n          Top Level Forms::.\n    normal return\n          n.  the natural transfer of control and values which occurs after\n          the complete execution of a form.\n    normalized\n          adj., ANSI, IEEE (of a float) conforming to the description of\n          \"normalized\" as described by IEEE Standard for Binary\n          Floating-Point Arithmetic.  See denormalized.\n    null\n          adj., n.  1. adj.  a. (of a list) having no elements: empty.\n          See empty list.  b. (of a string) having a length of zero.  (It\n          is common, both within this document and in observed spoken\n          behavior, to refer to an empty string by an apparent definite\n          reference, as in \"the null string\" even though no attempt is\n          made to intern_2 null strings.  The phrase ``a null string\" is\n          technically more correct, but is generally considered awkward by\n          most Lisp programmers.  As such, the phrase \"the null string\"\n          should be treated as an indefinite reference in all cases except\n          for anaphoric references.) c. (of an implementation-defined\n          attribute of a character) An object to which the value of that\n          attribute defaults if no specific value was requested.  2. n. an\n          object of type null (the only such object being nil).\n    null lexical environment\n          n.  the lexical environment which has no bindings.\n    number\n          n.  an object of type number.\n    numeric\n          adj. (of a character) being one of the standard characters 0\n          through 9, or being some other graphic character defined by the\n          implementation to be numeric.\nO\n-\n    object\n          n.  1. any Lisp datum.  \"The function cons creates an object\n          which refers to two other objects.\" 2. (immediately following\n          the name of a type) an object which is of that type, used to\n          emphasize that the object is not just a name for an object of\n          that type but really an element of the type in cases where\n          objects of that type (such as function or class) are commonly\n          referred to by name.  \"The function symbol-function takes a\n          function name and returns a function object.\"\n    object-traversing\n          adj.  operating in succession on components of an object.  \"The\n          operators mapcar, maphash, with-package-iterator and count\n          perform object-traversing operations.\"\n    open\n          adj., v.t. (a file) 1. v.t. to create and return a stream to the\n          file.  2. adj. (of a stream) having been opened_1, but not yet\n          closed.\n    operator\n          n.  1. a function, macro, or special operator.  2. a symbol that\n          names such a function, macro, or special operator.  3. (in a\n          function special form) the cadr of the function special form,\n          which might be either an operator_2 or a lambda expression.  4.\n          (of a compound form) the car of the compound form, which might be\n          either an operator_2 or a lambda expression, and which is never\n          (setf symbol).\n    optimize quality\n          n.  one of several aspects of a program that might be\n          optimizable by certain compilers.  Since optimizing one such\n          quality might conflict with optimizing another, relative\n          priorities for qualities can be established in an optimize\n          declaration.  The standardized optimize qualities are\n          compilation-speed (speed of the compilation process),\n          debug (ease of debugging),\n          safety (run-time error checking), space (both code size and\n          run-time space), and speed (of the object code).\n          Implementations may define additional optimize qualities.\n    optional parameter\n          n.  A parameter for which a corresponding positional argument is\n          optional.  If the argument is not supplied, a default value is\n          used.  See also supplied-p parameter.\n    ordinary function\n          n.  a function that is not a generic function.\n    ordinary lambda list\n          n.  the kind of lambda list used by lambda.  See modified lambda\n          list and extended lambda list.  \"defun uses an ordinary lambda\n          list.\"\n    otherwise inaccessible part\n          n. (of an object, O_1) an object, O_2, which would be made\n          inaccessible if O_1 were made inaccessible.  (Every object is an\n          otherwise inaccessible part of itself.)\n    output\n          adj. (of a stream) supporting output operations (i.e., being a\n          \"data sink\").  An output stream might also be an input stream,\n          in which case it is sometimes called a bidirectional stream.\n          See the function output-stream-p.\nP\n-\n    package\n          n.  an object of type package.\n    package cell\n          n. Trad. (of a symbol) The place in a symbol that holds one of\n          possibly several packages in which the symbol is interned,\n          called the home package, or which holds nil if no such package\n          exists or is known.  See the function symbol-package.\n    package designator\n          n.  a designator for a package; that is, an object that denotes\n          a package and that is one of: a string designator (denoting the\n          package that has the string that it designates as its name or as\n          one of its nicknames), or a package (denoting itself).\n    package marker\n          n.  a character which is used in the textual notation for a\n          symbol to separate the package name from the symbol name, and\n          which is colon in the standard readtable.  See *Note Character\n          Syntax::.\n    package prefix\n          n.  a notation preceding the name of a symbol in text that is\n          processed by the Lisp reader, which uses a package name followed\n          by one or more package markers, and which indicates that the\n          symbol is looked up in the indicated package.\n    package registry\n          n.  A mapping of names to package objects.  It is possible for\n          there to be a package object which is not in this mapping; such\n          a package is called an unregistered package.  Operators such as\n          find-package consult this mapping in order to find a package\n          from its name.  Operators such as do-all-symbols,\n          find-all-symbols, and list-all-packages operate only on packages\n          that exist in the package registry.\n    pairwise\n          adv. (of an adjective on a set) applying individually to all\n          possible pairings of elements of the set.  \"The types A, B, and\n          C are pairwise disjoint if A and B are disjoint, B and C are\n          disjoint, and A and C are disjoint.\"\n    parallel\n          adj. Trad. (of binding or assignment) done in the style of\n          psetq, let, or do; that is, first evaluating all of the forms\n          that produce values, and only then assigning or binding the\n          variables (or places).  Note that this does not imply\n          traditional computational \"parallelism\" since the forms that\n          produce values are evaluated sequentially.  See sequential.\n    parameter\n          n.  1. (of a function) a variable in the definition of a function\n          which takes on the value of a corresponding argument (or of a\n          list of corresponding arguments) to that function when it is\n          called, or which in some cases is given a default value because\n          there is no corresponding argument.  2. (of a format directive)\n          an object received as data flow by a format directive due to a\n          prefix notation within the format string at the format\n          directive's point of use.  See *Note Formatted Output::.  \"In\n          \"~3,'0D\", the number 3 and the character #\\0 are parameters to\n          the ~D format directive.\"\n    parameter specializer\n          n.  1. (of a method) an expression which constrains the method\n          to be applicable only to argument sequences in which the\n          corresponding argument matches the parameter specializer.  2. a\n          class, or a list (eql object).\n    parameter specializer name\n          n.  1. (of a method definition) an expression used in code to\n          name a parameter specializer.  See *Note Introduction to\n          Methods::.  2. a class,\n          a symbol naming a class,\n          or a list (eql form).\n    pathname\n          n.  an object of type pathname, which is a structured\n          representation of the name of a file.  A pathname has six\n          components: a \"host,\" a \"device,\" a \"directory,\" a \"name,\" a\n          \"type,\" and a \"version.\"\n    pathname designator\n          n.  a designator for a pathname; that is, an object that denotes\n          a pathname and that is one of:\n          a pathname namestring\n          (denoting the corresponding pathname),\n          a stream associated with a file (denoting the pathname used to\n          open the file; this may be, but is not required to be, the\n          actual name of the file), or a pathname (denoting itself).  See\n          *Note File Operations on Open and Closed Streams::.\n    physical pathname\n          n.  a pathname that is not a logical pathname.\n          [Editorial Note by KMP: Still need to reconcile some confusion\n          in the uses of \"generalized reference\" and \"place.\" I think one\n          was supposed to refer to the abstract concept, and the other to\n          an object (a form), but the usages have become blurred.]\n    place\n          n.  1. a form which is suitable for use as a generalized\n          reference.  2. the conceptual location referred to by such a\n          place_1.\n    plist\n          pronounced 'p\\=e ,list  n.  a property list.\n    portable\n          adj. (of code) required to produce equivalent results and\n          observable side effects in all conforming implementations.\n    potential copy\n          n. (of an object O_1 subject to constriants) an object O_2 that\n          if the specified constraints are satisfied by O_1 without any\n          modification might or might not be identical to O_1, or else\n          that must be a fresh object that resembles a copy of O_1 except\n          that it has been modified as necessary to satisfy the\n          constraints.\n    potential number\n          n.  A textual notation that might be parsed by the Lisp reader\n          in some conforming implementation as a number but is not\n          required to be parsed as a number.  No object is a potential\n          number--either an object is a number or it is not.  See *Note\n          Potential Numbers as Tokens::.\n    pprint dispatch table\n          n.  an object that can be the value of *print-pprint-dispatch*\n          and hence can control how objects are printed when\n          *print-pretty* is true.  See *Note Pretty Print Dispatch\n          Tables::.\n    predicate\n          n.  a function that returns a generalized boolean as its first\n          value.\n    present\n          n.  1. (of a feature in a Lisp image) a state of being that is\n          in effect if and only if the symbol naming the feature is an\n          element of the features list.  2. (of a symbol in a package)\n          being accessible in that package directly, rather than being\n          inherited from another package.\n    pretty print\n          v.t. (an object) to invoke the pretty printer on the object.\n    pretty printer\n          n.  the procedure that prints the character representation of an\n          object onto a stream when the value of *print-pretty* is true,\n          and that uses layout techniques (e.g., indentation) that tend to\n          highlight the structure of the object in a way that makes it\n          easier for human readers to parse visually.  See the variable\n          *print-pprint-dispatch* and *Note The Lisp Pretty Printer::.\n    pretty printing stream\n          n.  a stream that does pretty printing.  Such streams are\n          created by the function pprint-logical-block as a link between\n          the output stream and the logical block.\n    primary method\n          n.  a member of one of two sets of methods (the set of auxiliary\n          methods is the other) that form an exhaustive partition of the\n          set of methods on the method's generic function.  How these sets\n          are determined is dependent on the method combination type; see\n          *Note Introduction to Methods::.\n    primary value\n          n. (of values resulting from the evaluation of a form) the first\n          value, if any, or else nil if there are no values.  \"The primary\n          value returned by truncate is an integer quotient, truncated\n          toward zero.\"\n    principal\n          adj. (of a value returned by a Common Lisp function that\n          implements a mathematically irrational or transcendental\n          function defined in the complex domain) of possibly many\n          (sometimes an infinite number of) correct values for the\n          mathematical function, being the particular value which the\n          corresponding Common Lisp function has been defined to return.\n    print name\n          n. Trad. (usually of a symbol) a name_3.\n    printer control variable\n          n.  a variable whose specific purpose is to control some action\n          of the Lisp printer; that is, one of the variables in\n          Figure~22-1, or else some implementation-defined variable which\n          is defined by the implementation to be a printer control\n          variable.\n    printer escaping\n          n.  The combined state of the printer control variables\n          *print-escape* and *print-readably*.  If the value of either\n          *print-readably* or *print-escape* is true, then printer escaping\n          is \"enabled\"; otherwise (if the values of both *print-readably*\n          and *print-escape* are false), then printer escaping is\n          \"disabled\".\n    printing\n          adj. (of a character) being a graphic character other than space.\n    process\n          v.t. (a form by the compiler) to perform minimal compilation,\n          determining the time of evaluation for a form, and possibly\n          evaluating that form (if required).\n    processor\n          n., ANSI an implementation.\n    proclaim\n          v.t. (a proclamation) to establish that proclamation.\n    proclamation\n          n.  a global declaration.\n    prog tag\n          n. Trad.  a go tag.\n    program\n          n. Trad.  Common Lisp code.\n    programmer\n          n.  an active entity, typically a human, that writes a program,\n          and that might or might not also be a user of the program.\n    programmer code\n          n.  code that is supplied by the programmer; that is, code that\n          is not system code.\n    proper list\n          n.  A list terminated by the empty list.  (The empty list is a\n          proper list.) See improper list.\n    proper name\n          n. (of a class) a symbol that names the class whose name is that\n          symbol.  See the functions class-name and find-class.\n    proper sequence\n          n.  a sequence which is not an improper list; that is, a vector\n          or a proper list.\n    proper subtype\n          n. (of a type) a subtype of the type which is not the same type\n          as the type (i.e., its elements are a \"proper subset\" of the\n          type).\n    property\n          n. (of a property list) 1. a conceptual pairing of a property\n          indicator and its associated property value on a property list.\n          2. a property value.\n    property indicator\n          n. (of a property list) the name part of a property, used as a\n          key when looking up a property value on a property list.\n    property list\n          n.\n          1.  a list containing an even number of elements that are\n          alternating names  (sometimes called indicators or keys) and\n          values (sometimes called properties).  When there is more than\n          one name and value pair with the identical name in a property\n          list, the first such pair determines the property.\n          2. (of a symbol) the component of the symbol containing a\n          property list.\n    property value\n          n. (of a property indicator on a property list) the object\n          associated with the property indicator on the property list.\n    purports to conform\n          v.  makes a good-faith claim of conformance.  This term\n          expresses intention to conform, regardless of whether the goal\n          of that intention is realized in practice.  For example,\n          language implementations have been known to have bugs, and while\n          an implementation of this specification with bugs might not be a\n          conforming implementation, it can still purport to conform.\n          This is an important distinction in certain specific cases;\n          e.g., see the variable *features*.\nQ\n-\n    qualified method\n          n.  a method that has one or more qualifiers.\n    qualifier\n          n. (of a method for a generic function) one of possibly several\n          objects used to annotate the method in a way that identifies its\n          role in the method combination.  The method combination type\n          determines how many qualifiers are permitted for each method,\n          which qualifiers are permitted, and the semantics of those\n          qualifiers.\n    query I/O\n          n.  the bidirectional stream that is the value of the variable\n          *query-io*.\n    quoted object\n          n.  an object which is the second element of a quote form.\nR\n-\n    radix\n          n.  an integer between 2 and 36, inclusive, which can be used to\n          designate a base with respect to which certain kinds of numeric\n          input or output are performed.  (There are n valid digit\n          characters for any given radix n, and those digits are the first\n          n digits in the sequence 0, 1, ..., 9, A, B, ..., Z, which have\n          the weights 0, 1, ..., 9, 10, 11, ..., 35, respectively.  Case\n          is not significant in parsing numbers of radix greater than 10,\n          so \"9b8a\" and \"9B8A\" denote the same radix 16 number.)\n    random state\n          n.  an object of type random-state.\n    rank\n          n.  a non-negative integer indicating the number of dimensions\n          of an array.\n    ratio\n          n.  an object of type ratio.\n    ratio marker\n          n.  a character which is used in the textual notation for a ratio\n          to separate the numerator from the denominator, and which is\n          slash in the standard readtable.  See *Note Character Syntax::.\n    rational\n          n.  an object of type rational.\n    read\n          v.t.\n          1. (a binding or slot or component) to obtain the value of the\n          binding or slot.\n          2. (an object from a stream) to parse an object from its\n          representation on the stream.\n    readably\n          adv. (of a manner of printing an object O_1) in such a way as to\n          permit the Lisp Reader to later parse the printed output into an\n          object O_2 that is similar to O_1.\n    reader\n          n.  1. a function that reads_1 a variable or slot.  2. the Lisp\n          reader.\n    reader macro\n          n.  1. a textual notation introduced by dispatch on one or two\n          characters that defines special-purpose syntax for use by the\n          Lisp reader, and that is implemented by a reader macro function.\n          See *Note Reader Algorithm::.  2. the character or characters\n          that introduce a reader macro_1; that is, a macro character or\n          the conceptual pairing of a dispatching macro character and the\n          character that follows it.  (A reader macro is not a kind of\n          macro.)\n    reader macro function\n          n.  a function designator that denotes a function that\n          implements a reader macro_2.  See the functions\n          set-macro-character and set-dispatch-macro-character.\n    readtable\n          n.  an object of type readtable.\n    readtable case\n          n.  an attribute of a readtable whose value is a case\n          sensitivity mode, and that selects the manner in which characters\n          in a symbol's name are to be treated by the Lisp reader and the\n          Lisp printer.  See *Note Effect of Readtable Case on the Lisp\n          Reader:: and *Note Effect of Readtable Case on the Lisp\n          Printer::.\n    readtable designator\n          n.  a designator for a readtable; that is, an object that\n          denotes a readtable and that is one of: nil (denoting the\n          standard readtable), or a readtable (denoting itself).\n    recognizable subtype\n          n. (of a type) a subtype of the type which can be reliably\n          detected to be such by the implementation.  See the function\n          subtypep.\n    reference\n          n., v.t.  1. n. an act or occurrence of referring to an object,\n          a binding, an exit point, a tag, or an environment.  2. v.t. to\n          refer to an object, a binding, an exit point, a tag, or an\n          environment, usually by name.\n    registered package\n          n.  a package object that is installed in the package registry.\n          (Every registered package has a name that is a string, as well\n          as zero or more string nicknames.  All packages that are\n          initially specified by Common Lisp or created by make-package or\n          defpackage are registered packages.  Registered packages can be\n          turned into unregistered packages by delete-package.)\n    relative\n          adj.  1. (of a time) representing an offset from an absolute time\n          in the units appropriate to that time.  For example, a relative\n          internal time is the difference between two absolute internal\n          times, and is measured in internal time units.  2. (of a\n          pathname) representing a position in a directory hierarchy by\n          motion from a position other than the root, which might\n          therefore vary.  \"The notation #P\"../foo.text\" denotes a relative\n          pathname if the host file system is Unix.\" See absolute.\n    repertoire\n          n., ISO a subtype of character.  See *Note Character\n          Repertoires::.\n    report\n          n. (of a condition) to call the function print-object on the\n          condition in an environment where the value of *print-escape* is\n          false.\n    report message\n          n.  the text that is output by a condition reporter.\n    required parameter\n          n.  A parameter for which a corresponding positional argument\n          must be supplied when calling the function.\n    rest list\n          n. (of a function having a rest parameter) The list to which the\n          rest parameter is bound on some particular call to the function.\n    rest parameter\n          n.  A parameter which was introduced by &rest.\n    restart\n          n.  an object of type restart.\n    restart designator\n          n.  a designator for a restart; that is, an object that denotes\n          a restart and that is one of: a non-nil symbol (denoting the\n          most recently established active restart whose name is that\n          symbol), or a restart (denoting itself).\n    restart function\n          n.  a function that invokes a restart, as if by invoke-restart.\n          The primary purpose of a restart function is to provide an\n          alternate interface. By convention, a restart function usually\n          has the same name as the restart which it invokes. Figure 26-4\n          shows a list of the standardized restart functions.\n            abort     muffle-warning  use-value  \n            continue  store-value                \n            Figure 26-4: Standardized Restart Functions\n    return\n          v.t. (of values) 1. (from a block) to transfer control and\n          values from the block; that is, to cause the block to yield the\n          values immediately without doing any further evaluation of the\n          forms in its body.  2. (from a form) to yield the values.\n    return value\n          n. Trad.  a value_1\n    right-parenthesis\n          n.  the standard character \")\", that is variously called ``right\n          parenthesis\" or \"close parenthesis\" See Figure~2-5.\n    run time\n          n.  1. load time 2. execution time\n    run-time compiler\n          n.  refers to the compile function or to implicit compilation,\n          for which the compilation and run-time environments are\n          maintained in the same Lisp image.\n    run-time definition\n          n.  a definition in the run-time environment.\n    run-time environment\n          n.  the environment in which a program is executed.\nS\n-\n    safe\n          adj.  1. (of code) processed in a lexical environment where the\n          the highest safety level (3) was in effect.  See optimize.  2.\n          (of a call) a safe call.\n    safe call\n          n.  a call in which the call, the function being called, and the\n          point of functional evaluation are all safe_1 code.  For more\n          detailed information, see *Note Safe and Unsafe Calls::.\n    same\n          adj.  1. (of objects under a specified predicate)\n          indistinguishable by that predicate.  \"The symbol car, the\n          string \"car\", and the string \"CAR\" are the same under\n          string-equal\".  2. (of objects if no predicate is implied by\n          context) indistinguishable by eql.  Note that eq might be\n          capable of distinguishing some numbers and characters which eql\n          cannot distinguish, but the nature of such, if any, is\n          implementation-dependent.  Since eq is used only rarely in this\n          specification, eql is the default predicate when none is\n          mentioned explicitly.  \"The conses returned by two successive\n          calls to cons are never the same.\" 3. (of types) having the same\n          set of elements; that is, each type is a subtype of the others.\n          \"The types specified by (integer 0 1), (unsigned-byte 1), and\n          bit are the same.\"\n    satisfy the test\n          v.  (of an object being considered by a sequence function) 1.\n          (for a one argument test) to be in a state such that the\n          function which is the predicate argument to the sequence function\n          returns true when given a single argument that is the result of\n          calling the sequence function's key argument on the object being\n          considered.  See *Note Satisfying a One-Argument Test::.  2.\n          (for a two argument test) to be in a state such that the\n          two-place predicate which is the sequence function's test\n          argument returns true when given a first argument that is the\n          object being considered, and when given a second argument that\n          is the result of calling the sequence function's key argument on\n          an element of the sequence function's sequence argument which is\n          being tested for equality; or to be in a state such that the\n          test-not function returns false given the same arguments.  See\n          *Note Satisfying a Two-Argument Test::.\n    scope\n          n.  the structural or textual region of code in which references\n          to an object, a binding, an exit point, a tag, or an environment\n          (usually by name) can occur.\n    script\n          n. ISO one of possibly several sets that form an exhaustive\n          partition of the type character.  See *Note Character Scripts::.\n    secondary value\n          n. (of values resulting from the evaluation of a form) the\n          second value, if any, or else nil if there are fewer than two\n          values.  \"The secondary value returned by truncate is a\n          remainder.\"\n    section\n          n.  a partitioning of output by a conditional newline on a\n          pretty printing stream.  See *Note Dynamic Control of the\n          Arrangement of Output::.\n    self-evaluating object\n          n.  an object that is neither a symbol nor a cons.  If a\n          self-evaluating object is evaluated, it yields itself as its\n          only value.  \"Strings are self-evaluating objects.\"\n    semi-standard\n          adj. (of a language feature) not required to be implemented by\n          any conforming implementation, but nevertheless recommended as\n          the canonical approach in situations where an implementation\n          does plan to support such a feature.  The presence of\n          semi-standard aspects in the language is intended to lessen\n          portability problems and reduce the risk of gratuitous divergence\n          among implementations that might stand in the way of future\n          standardization.\n    semicolon\n          n.  the standard character that is called \"semicolon\" (;).  See\n          Figure~2-5.\n    sequence\n          n.  1. an ordered collection of elements 2. a vector or a list.\n    sequence function\n          n.  one of the functions in Figure~17-1, or an\n          implementation-defined function that operates on one or more\n          sequences.  and that is defined by the implementation to be a\n          sequence function.\n    sequential\n          adj. Trad. (of binding or assignment) done in the style of setq,\n          let*, or do*; that is, interleaving the evaluation of the forms\n          that produce values with the assignments or bindings of the\n          variables (or places).  See parallel.\n    sequentially\n          adv.  in a sequential way.\n    serious condition\n          n.  a condition of type serious-condition, which represents a\n          situation that is generally sufficiently severe that entry into\n          the debugger should be expected if the condition is signaled but\n          not handled.\n    session\n          n.  the conceptual aggregation of events in a Lisp image from\n          the time it is started to the time it is terminated.\n    set\n          v.t. Trad. (any variable or a symbol that is the name of a\n          dynamic variable) to assign the variable.\n    setf expander\n          n.  a function used by setf to compute the setf expansion of a\n          place.\n    setf expansion\n          n.  a set of five expressions_1 that, taken together, describe\n          how to store into a place and which subforms of the macro call\n          associated with the place are evaluated.  See *Note Setf\n          Expansions::.\n    setf function\n          n.  a function whose name is (setf symbol).\n    setf function name\n          n. (of a symbol S) the list (setf S).\n    shadow\n          v.t.  1. to override the meaning of.  \"That binding of X shadows\n          an outer one.\" 2. to hide the presence of.  \"That macrolet of F\n          shadows the outer flet of F.\" 3. to replace.  \"That package\n          shadows the symbol cl:car with its own symbol car.\"\n    shadowing symbol\n          n. (in a package) an element of the package's shadowing symbols\n          list.\n    shadowing symbols list\n          n. (of a package) a list, associated with the package, of\n          symbols that are to be exempted from `symbol conflict errors'\n          detected when packages are used.  See the function\n          package-shadowing-symbols.\n    shared slot\n          n. (of a class) a slot accessible in more than one instance of a\n          class; specifically, such a slot is accessible in all direct\n          instances of the class and in those indirect instances whose\n          class does not shadow_1 the slot.\n    sharpsign\n          n.  the standard character that is variously called \"number\n          sign,\" \"sharp,\" or \"sharp sign\" (#).  See Figure~2-5.\n    short float\n          n.  an object of type short-float.\n    sign\n          n.  one of the standard characters \"+\" or \"-\".\n    signal\n          v.  to announce, using a standard protocol, that a particular\n          situation, represented by a condition, has been detected.  See\n          *Note Condition System Concepts::.\n    signature\n          n. (of a method) a description of the parameters and parameter\n          specializers for the method which determines the method's\n          applicability for a given set of required arguments, and which\n          also describes the argument conventions for its other,\n          non-required arguments.\n    similar\n          adj. (of two objects) defined to be equivalent under the\n          similarity relationship.\n    similarity\n          n.  a two-place conceptual equivalence predicate, which is\n          independent of the Lisp image so that two objects in different\n          Lisp images can be understood to be equivalent under this\n          predicate.  See *Note Literal Objects in Compiled Files::.\n    simple\n          adj.  1. (of an array) being of type simple-array.  2. (of a\n          character) having no implementation-defined attributes, or else\n          having implementation-defined attributes each of which has the\n          null value for that attribute.\n    simple array\n          n.  an array of type simple-array.\n    simple bit array\n          n.  a bit array that is a simple array; that is, an object of\n          type (simple-array bit).\n    simple bit vector\n          n.  a bit vector of type simple-bit-vector.\n    simple condition\n          n.  a condition of type simple-condition.\n    simple general vector\n          n.  a simple vector.\n    simple string\n          n.  a string of type simple-string.\n    simple vector\n          n.  a vector of type simple-vector, sometimes called a \"simple\n          general vector.\" Not all vectors that are simple are simple\n          vectors--only those that have element type t.\n    single escape\n          n., adj.  1. n. the syntax type of a character that indicates\n          that the next character is to be treated as an alphabetic_2\n          character with its case preserved.  For details, see *Note\n          Single Escape Character::.  2. adj. (of a character) having the\n          single escape syntax type.  3. n. a single escape_2 character.\n          (In the standard readtable, slash is the only single escape.)\n    single float\n          n.  an object of type single-float.\n    single-quote\n          n.  the standard character that is variously called\n          ``apostrophe,\" ``acute accent,\" ``quote,\" or \"single quote\" (').\n          See Figure~2-5.\n    singleton\n          adj. (of a sequence) having only one element.  \"(list 'hello)\n          returns a singleton list.\"\n    situation\n          n.  the evaluation of a form in a specific environment.\n    slash\n          n.  the standard character that is variously called ``solidus\"\n          or \"slash\" (/).  See Figure~2-5.\n    slot\n          n.  a component of an object that can store a value.\n    slot specifier\n          n.  a representation of a slot that includes the name of the\n          slot and zero or more slot options.  A slot option pertains only\n          to a single slot.\n    source code\n          n.  code representing objects suitable for evaluation (e.g.,\n          objects created by read, by macro expansion,\n          or by compiler macro expansion).\n    source file\n          n.  a file which contains a textual representation of source\n          code, that can be edited, loaded, or compiled.\n    space\n          n.  the standard character <Space>, notated for the Lisp reader\n          as #\\Space.\n    special form\n          n.  a list, other than a macro form, which is a form with\n          special syntax or special evaluation rules or both, possibly\n          manipulating the evaluation environment or control flow or both.\n          The first element of a special form is a special operator.\n    special operator\n          n.  one of a fixed set of symbols, enumerated in Figure~3-2,\n          that may appear in the car of a form in order to identify the\n          form as a special form.\n    special variable\n          n. Trad.  a dynamic variable.\n    specialize\n          v.t. (a generic function) to define a method for the generic\n          function, or in other words, to refine the behavior of the\n          generic function by giving it a specific meaning for a\n          particular set of classes or arguments.\n    specialized\n          adj.  1. (of a generic function) having methods which specialize\n          the generic function.  2. (of an array) having an actual array\n          element type that is a proper subtype of the type t; see *Note\n          Array Elements::.  \"(make-array 5 :element-type 'bit) makes an\n          array of length five that is specialized for bits.\"\n    specialized lambda list\n          n.  an extended lambda list used in forms that establish method\n          definitions, such as defmethod.  See *Note Specialized Lambda\n          Lists::.\n    spreadable argument list designator\n          n.  a designator for a list of objects; that is, an object that\n          denotes a list and that is a non-null list L1 of length n, whose\n          last element is a list L2 of length m (denoting a list L3 of\n          length m+n-1 whose elements are L1_i for i < n-1 followed by\n          L2_j for j < m).  \"The list (1 2 (3 4 5)) is a spreadable\n          argument list designator for the list (1 2 3 4 5).\"\n    stack allocate\n          v.t. Trad.  to allocate in a non-permanent way, such as on a\n          stack.  Stack-allocation is an optimization technique used in\n          some implementations for allocating certain kinds of objects\n          that have dynamic extent.  Such objects are allocated on the\n          stack rather than in the heap so that their storage can be freed\n          as part of unwinding the stack rather than taking up space in\n          the heap until the next garbage collection.  What types (if any)\n          can have dynamic extent can vary from implementation to\n          implementation.  No implementation is ever required to perform\n          stack-allocation.\n    stack-allocated\n          adj. Trad.  having been stack allocated.\n    standard character\n          n.  a character of type standard-char, which is one of a fixed\n          set of 96 such characters required to be present in all\n          conforming implementations.  See *Note Standard Characters::.\n    standard class\n          n.  a class that is a generalized instance of class\n          standard-class.\n    standard generic function\n          a function of type standard-generic-function.\n    standard input\n          n.  the input stream which is the value of the dynamic variable\n          *standard-input*.\n    standard method combination\n          n.  the method combination named standard.\n    standard object\n          n.  an object that is a generalized instance of class\n          standard-object.\n    standard output\n          n.  the output stream which is the value of the dynamic variable\n          *standard-output*.\n    standard pprint dispatch table\n          n.  A pprint dispatch table that is different from the initial\n          pprint dispatch table, that implements pretty printing as\n          described in this specification, and that, unlike other pprint\n          dispatch tables, must never be modified by any program.\n          (Although the definite reference \"the standard pprint dispatch\n          table\" is generally used within this document, it is actually\n          implementation-dependent whether a single object fills the role\n          of the standard pprint dispatch table, or whether there might be\n          multiple such objects, any one of which could be used on any\n          given occasion where \"the standard pprint dispatch table\" is\n          called for.  As such, this phrase should be seen as an\n          indefinite reference in all cases except for anaphoric\n          references.)\n    standard readtable\n          n.  A readtable that is different from the initial readtable,\n          that implements the expression syntax defined in this\n          specification, and that, unlike other readtables, must never be\n          modified by any program.  (Although the definite reference \"the\n          standard readtable\" is generally used within this document, it\n          is actually implementation-dependent whether a single object\n          fills the role of the standard readtable, or whether there might\n          be multiple such objects, any one of which could be used on any\n          given occasion where \"the standard readtable\" is called for.  As\n          such, this phrase should be seen as an indefinite reference in\n          all cases except for anaphoric references.)\n    standard syntax\n          n.  the syntax represented by the standard readtable and used as\n          a reference syntax throughout this document.  See *Note\n          Character Syntax::.\n    standardized\n          adj. (of a name, object, or definition) having been defined by\n          Common Lisp.  \"All standardized variables that are required to\n          hold bidirectional streams have \"-io*\" in their name.\"\n    startup environment\n          n.  the global environment of the running Lisp image from which\n          the compiler was invoked.\n    step\n          v.t., n.  1. v.t. (an iteration variable) to assign the variable\n          a new value at the end of an iteration, in preparation for a new\n          iteration.  2. n. the code that identifies how the next value in\n          an iteration is to be computed.  3. v.t. (code) to specially\n          execute the code, pausing at intervals to allow user\n          confirmation or intervention, usually for debugging.\n    stream\n          n.  an object that can be used with an input or output function\n          to identify an appropriate source or sink of characters or bytes\n          for that operation.\n    stream associated with a file\n          n.  a file stream, or a synonym stream the target of which is a\n          stream associated with a file.  Such a stream cannot be created\n          with make-two-way-stream, make-echo-stream,\n          make-broadcast-stream, make-concatenated-stream,\n          make-string-input-stream, or make-string-output-stream.\n    stream designator\n          n.  a designator for a stream; that is, an object that denotes a\n          stream and that is one of: t (denoting the value of\n          *terminal-io*), nil (denoting the value of *standard-input* for\n          input stream designators or denoting the value of\n          *standard-output* for output stream designators), or a stream\n          (denoting itself).\n    stream element type\n          n. (of a stream) the type of data for which the stream is\n          specialized.\n    stream variable\n          n.  a variable whose value must be a stream.\n    stream variable designator\n          n.  a designator for a stream variable; that is, a symbol that\n          denotes a stream variable and that is one of: t (denoting\n          *terminal-io*), nil (denoting *standard-input* for input stream\n          variable designators or denoting *standard-output* for output\n          stream variable designators), or some other symbol (denoting\n          itself).\n    string\n          n.  a specialized vector that is of type string, and whose\n          elements are of type character or a subtype of type character.\n    string designator\n          n.  a designator for a string; that is, an object that denotes a\n          string and that is one of: a character (denoting a singleton\n          string that has the character as its only element), a symbol\n          (denoting the string that is its name), or a string (denoting\n          itself).\n          The intent is that this term be consistent with the behavior of\n          string; implementations that extend string must extend the\n          meaning of this term in a compatible way.\n    string equal\n          adj.  the same under string-equal.\n    string stream\n          n.  a stream of type string-stream.\n    structure\n          n.  an object of type structure-object.\n    structure class\n          n.  a class that is a generalized instance of class\n          structure-class.\n    structure name\n          n.  a name defined with defstruct.  Usually, such a type is also\n          a structure class, but there may be implementation-dependent\n          situations in which this is not so, if the :type option to\n          defstruct is used.\n    style warning\n          n.  a condition of type style-warning.\n    subclass\n          n.  a class that inherits from another class, called a\n          superclass.  (No class is a subclass of itself.)\n    subexpression\n          n. (of an expression) an expression that is contained within the\n          expression.  (In fact, the state of being a subexpression is not\n          an attribute of the subexpression, but really an attribute of\n          the containing expression since the same object can at once be a\n          subexpression in one context, and not in another.)\n    subform\n          n. (of a form) an expression that is a subexpression of the form,\n          and which by virtue of its position in that form is also a form.\n          \"(f x) and x, but not exit, are subforms of (return-from exit (f\n          x)).\"\n    subrepertoire\n          n.  a subset of a repertoire.\n    subtype\n          n.  a type whose membership is the same as or a proper subset of\n          the membership of another type, called a supertype.  (Every type\n          is a subtype of itself.)\n    superclass\n          n.  a class from which another class (called a subclass)\n          inherits.  (No class is a superclass of itself.) See subclass.\n    supertype\n          n.  a type whose membership is the same as or a proper superset\n          of the membership of another type, called a subtype.  (Every\n          type is a supertype of itself.) See subtype.\n    supplied-p parameter\n          n.  a parameter which recieves its generalized boolean value\n          implicitly due to the presence or absence of an argument\n          corresponding to another parameter (such as an optional\n          parameter or a rest parameter).  See *Note Ordinary Lambda\n          Lists::.\n    symbol\n          n.  an object of type symbol.\n    symbol macro\n          n.  a symbol that stands for another form.  See the macro\n          symbol-macrolet.\n    synonym stream\n          n.  1. a stream of type synonym-stream, which is consequently a\n          stream that is an alias for another stream, which is the value\n          of a dynamic variable whose name is the synonym stream symbol of\n          the synonym stream.  See the function make-synonym-stream.  2.\n          (to a stream) a synonym stream which has the stream as the value\n          of its synonym stream symbol.  3. (to a symbol) a synonym stream\n          which has the symbol as its synonym stream symbol.\n    synonym stream symbol\n          n. (of a synonym stream) the symbol which names the dynamic\n          variable which has as its value another stream for which the\n          synonym stream is an alias.\n    syntax type\n          n. (of a character) one of several classifications, enumerated\n          in Figure~2-6, that are used for dispatch during parsing by the\n          Lisp reader.  See *Note Character Syntax Types::.\n    system class\n          n.  a class that may be of type built-in-class in a conforming\n          implementation and hence cannot be inherited by classes defined\n          by conforming programs.\n    system code\n          n.  code supplied by the implementation to implement this\n          specification (e.g., the definition of mapcar) or generated\n          automatically in support of this specification (e.g., during\n          method combination); that is, code that is not programmer code.\nT\n-\n    t\n          n.  1. a. the boolean representing true.  b. the canonical\n          generalized boolean representing true.  (Although any object\n          other than nil is considered true as a generalized boolean, t is\n          generally used when there is no special reason to prefer one\n          such object over another.) 2. the name of the type to which all\n          objects belong--the supertype of all types (including itself).\n          3. the name of the superclass of all classes except itself.\n    tag\n          n.  1. a catch tag.  2. a go tag.\n    tail\n          n. (of a list) an object that is the same as either some cons\n          which makes up that list or the atom (if any) which terminates\n          the list.  \"The empty list is a tail of every proper list.\"\n    target\n          n.  1. (of a constructed stream) a constituent of the\n          constructed stream.  \"The target of a synonym stream is the\n          value of its synonym stream symbol.\" 2. (of a displaced array)\n          the array to which the displaced array is displaced.  (In the\n          case of a chain of constructed streams or displaced arrays, the\n          unqualified term \"target\" always refers to the immediate target\n          of the first item in the chain, not the immediate target of the\n          last item.)\n    terminal I/O\n          n.  the bidirectional stream that is the value of the variable\n          *terminal-io*.\n    terminating\n          n. (of a macro character) being such that, if it appears while\n          parsing a token, it terminates that token.  See *Note Reader\n          Algorithm::.\n    tertiary value\n          n. (of values resulting from the evaluation of a form) the third\n          value, if any, or else nil if there are fewer than three values.\n    throw\n          v.  to transfer control and values to a catch.  See the special\n          operator throw.\n    tilde\n          n.  the standard character that is called \"tilde\" (~).  See\n          Figure~2-5.\n    time\n          a representation of a point (absolute time) or an interval\n          (relative time) on a time line.  See decoded time, internal\n          time, and universal time.\n    time zone\n          n.  a rational multiple of 1/3600 between -24 (inclusive) and 24\n          (inclusive) that represents a time zone as a number of hours\n          offset from Greenwich Mean Time.  Time zone values increase with\n          motion to the west, so   Massachusetts, U.S.A. is in time zone 5,\n          California, U.S.A. is time zone 8, and Moscow, Russia is time\n          zone -3.  (When \"daylight savings time\" is separately represented\n          as an argument or return value, the time zone that accompanies\n          it does not depend on whether daylight savings time is in\n          effect.)\n    token\n          n.  a textual representation for a number or a symbol.  See\n          *Note Interpretation of Tokens::.\n    top level form\n          n.  a form which is processed specially by compile-file for the\n          purposes of enabling compile time evaluation of that form.  Top\n          level forms include those forms which are not subforms of any\n          other form, and certain other cases.  See *Note Processing of\n          Top Level Forms::.\n    trace output\n          n.  the output stream which is the value of the dynamic variable\n          *trace-output*.\n    tree\n          n.  1. a binary recursive data structure made up of conses and\n          atoms:  the conses are themselves also trees (sometimes called\n          \"subtrees\" or \"branches\"), and the atoms are terminal nodes\n          (sometimes called leaves). Typically, the leaves represent data\n          while the branches establish some relationship among that data.\n          2. in general, any recursive data structure that has some notion\n          of ``branches\" and leaves.\n    tree structure\n          n. (of a tree_1) the set of conses that make up the tree.  Note\n          that while the car_{1b} component of each such cons is part of\n          the tree structure, the objects that are the cars_2 of each cons\n          in the tree are not themselves part of its tree structure unless\n          they are also conses.\n    true\n          n.  any object that is not false and that is used to represent\n          the success of a predicate test.  See t_1.\n    truename\n          n.  1. the canonical filename of a file in the file system.  See\n          *Note Truenames::.  2. a pathname representing a truename_1.\n    two-way stream\n          n.  a stream of type two-way-stream, which is a bidirectional\n          composite stream that receives its input  from an associated\n          input  stream and sends    its output to   an associated output\n          stream.\n    type\n          n.  1. a set of objects, usually with common structure,\n          behavior, or purpose.  (Note that the expression \"X is of type\n          S_a\" naturally implies that \"X is of type S_b\" if S_a is a\n          subtype of S_b.) 2. (immediately following the name of a type) a\n          subtype of that type.  \"The type vector is an array type.\"\n    type declaration\n          n.  a declaration that asserts that every reference to a\n          specified binding within the scope of the declaration results in\n          some object of the specified type.\n    type equivalent\n          adj. (of two types X and Y) having the same elements; that is, X\n          is a subtype of Y and Y is a subtype of X.\n    type expand\n          n.  to fully expand a type specifier, removing any references to\n          derived types.  (Common Lisp provides no program interface to\n          cause this to occur, but the semantics of Common Lisp are such\n          that every implementation must be able to do this internally,\n          and some situations involving type specifiers are most easily\n          described in terms of a fully expanded type specifier.)\n    type specifier\n          n.  an expression that denotes a type.  \"The symbol\n          random-state, the list (integer 3 5), the list (and list (not\n          null)), and the class named standard-class are type specifiers.\"\nU\n-\n    unbound\n          adj.  not having an associated denotation in a binding.  See\n          bound.\n    unbound variable\n          n.  a name that is syntactically plausible as the name of a\n          variable but which is not bound in the variable namespace.\n    undefined function\n          n.  a name that is syntactically plausible as the name of a\n          function but which is not bound in the function namespace.\n    unintern\n          v.t. (a symbol in a package) to make the symbol not be present\n          in that package.  (The symbol might continue to be accessible by\n          inheritance.)\n    uninterned\n          adj. (of a symbol) not accessible in any package; i.e., not\n          interned_1.\n    universal time\n          n.  time, represented as a non-negative integer number of\n          seconds.  Absolute universal time is measured as an offset from\n          the beginning of the year 1900 (ignoring leap seconds).  See\n          *Note Universal Time::.\n    unqualified method\n          n.  a method with no qualifiers.\n    unregistered package\n          n.  a package object that is not present in the package registry.\n          An unregistered package has no name; i.e., its name is nil.  See\n          the function delete-package.\n    unsafe\n          adj. (of code) not safe.  (Note that, unless explicitly\n          specified otherwise, if a particular kind of error checking is\n          guaranteed only in a safe context, the same checking might or\n          might not occur in that context if it were unsafe; describing a\n          context as unsafe means that certain kinds of error checking are\n          not reliably enabled but does not guarantee that error checking\n          is definitely disabled.)\n    unsafe call\n          n.  a call that is not a safe call.  For more detailed\n          information, see *Note Safe and Unsafe Calls::.\n    upgrade\n          v.t. (a declared type to an actual type) 1. (when creating an\n          array) to substitute an actual array element type for an\n          expressed array element type when choosing an appropriately\n          specialized array representation.  See the function\n          upgraded-array-element-type.  2. (when creating a complex) to\n          substitute an actual complex part type for an expressed complex\n          part type when choosing an appropriately specialized complex\n          representation.  See the function upgraded-complex-part-type.\n    upgraded array element type\n          n. (of a type) a type that is a supertype of the type and that\n          is used instead of the type whenever the type is used as an\n          array element type for object creation or type discrimination.\n          See *Note Array Upgrading::.\n    upgraded complex part type\n          n. (of a type) a type that is a supertype of the type and that\n          is used instead of the type whenever the type is used as a\n          complex part type for object creation or type discrimination.\n          See the function upgraded-complex-part-type.\n    uppercase\n          adj. (of a character) being among standard characters\n          corresponding to the capital letters A through Z, or being some\n          other implementation-defined character that is defined by the\n          implementation to be uppercase.  See *Note Characters With\n          Case::.\n    use\n          v.t. (a package P_1) to inherit the external symbols of P_1.\n          (If a package P_2 uses P_1, the external symbols of P_1 become\n          internal symbols of P_2 unless they are explicitly exported.)\n          \"The package CL-USER uses the package CL.\"\n    use list\n          n. (of a package) a (possibly empty) list associated with each\n          package which determines what other packages are currently being\n          used by that package.\n    user\n          n.  an active entity, typically a human, that invokes or\n          interacts with a program at run time, but that is not\n          necessarily a programmer.\nV\n-\n    valid array dimension\n          n.  a fixnum suitable for use as an array dimension.  Such a\n          fixnum must be greater than or equal to zero, and less than the\n          value of array-dimension-limit.  When multiple array dimensions\n          are to be used together to specify a multi-dimensional array,\n          there is also an implied constraint that the product of all of\n          the dimensions be less than the value of array-total-size-limit.\n    valid array index\n          n. (of an array) a fixnum suitable for use as one of possibly\n          several indices needed to name an element of the array according\n          to a multi-dimensional Cartesian coordinate system. Such a\n          fixnum must be greater than or equal to zero, and must be less\n          than the corresponding dimension_1 of the array.  (Unless\n          otherwise explicitly specified, the phrase \"a list of valid\n          array indices\" further implies that the length of the list must\n          be the same as the rank of the array.) \"For a 2 by~3 array,\n          valid array indices for the first  dimension are 0 and~1, and\n          valid array indices for the second dimension are 0, 1 and~2.\"\n    valid array row-major index\n          n. (of an array, which might have any number of dimensions_2) a\n          single fixnum suitable for use in naming any element of the\n          array, by viewing the array's storage as a linear series of\n          elements in row-major order.  Such a fixnum must be greater than\n          or equal to zero, and less than the array total size of the\n          array.\n    valid fill pointer\n          n. (of an array) a fixnum suitable for use as a fill pointer for\n          the array.  Such a fixnum must be greater than or equal to zero,\n          and less than or equal to the array total size of the array.\n          [Editorial Note by KMP: The \"valid pathname xxx\" definitions\n          were taken from text found in make-pathname, but look wrong to\n          me.  I'll fix them later.]\n    valid logical pathname host\n          n.  a string that has been defined as the name of a logical host.\n          See the function load-logical-pathname-translations.\n    valid pathname device\n          n.  a string, nil, :unspecific, or some other object defined by\n          the implementation to be a valid pathname device.\n    valid pathname directory\n          n.  a string, a list of strings, nil,\n          :wild,\n          :unspecific, or some other object defined by the implementation\n          to be a valid directory component.\n    valid pathname host\n          n.  a valid physical pathname host or a valid logical pathname\n          host.\n    valid pathname name\n          n.  a string, nil, :wild, :unspecific, or some other object\n          defined by the implementation to be a valid pathname name.\n    valid pathname type\n          n.  a string, nil, :wild, :unspecific.\n    valid pathname version\n          n.  a non-negative integer, or one of :wild, :newest,\n          :unspecific, or nil.  The symbols :oldest, :previous, and\n          :installed are semi-standard special version symbols.\n    valid physical pathname host\n          n.  any of a string, a list of strings, or the symbol\n          :unspecific, that is recognized by the implementation as the\n          name of a host.\n    valid sequence index\n          n. (of a sequence) an integer suitable for use to name an element\n          of the sequence.  Such an integer must be greater than or equal\n          to zero, and must be less than the length of the sequence.\n          (If the sequence is an array, the valid sequence index is\n          further constrained to be a fixnum.)\n    value\n          n.  1. a. one of possibly several objects that are the result of\n          an evaluation.  b. (in a situation where exactly one value is\n          expected from the evaluation of a form) the primary value\n          returned by the form.  c. (of forms in an implicit progn) one of\n          possibly several objects that result from the evaluation of the\n          last form, or nil if there are no forms.  2. an object\n          associated with a name in a binding.  3. (of a symbol) the value\n          of the dynamic variable named by that symbol.  4. an object\n          associated with a key in an association list, a  property list,\n          or a  hash table.\n    value cell\n          n. Trad. (of a symbol) The place which holds the value, if any,\n          of the dynamic variable named by that symbol, and which is\n          accessed by symbol-value.  See cell.\n    variable\n          n.  a binding in which a symbol is the name used to refer to an\n          object.\n    vector\n          n.  a one-dimensional array.\n    vertical-bar\n          n.  the standard character that is called \"vertical bar\" (|).\n          See Figure~2-5.\nW\n-\n    whitespace\n          n.  1. one or more characters that are either the graphic\n          character #\\Space or else non-graphic characters such as\n          #\\Newline that only move the print position.  2. a. n. the\n          syntax type of a character that is a token separator.  For\n          details, see *Note Whitespace Characters::.  b. adj. (of a\n          character) having the whitespace_{2a} syntax type_2.  c. n. a\n          whitespace_{2b} character.\n    wild\n          adj.  1. (of a namestring) using an implementation-defined\n          syntax for naming files, which might \"match\" any of possibly\n          several possible filenames, and which can therefore be used to\n          refer to the aggregate of the files named by those filenames.\n          2. (of a pathname) a structured representation of a name which\n          might \"match\" any of possibly several pathnames, and which can\n          therefore be used to refer to the aggregate of the files named\n          by those pathnames.  The set of wild pathnames includes, but is\n          not restricted to, pathnames which have a component which is\n          :wild, or which have a directory component which contains :wild\n          or :wild-inferors.  See the function wild-pathname-p.\n    write\n          v.t.\n          1. (a binding or slot or component) to change the value of the\n          binding or slot.\n          2. (an object to a stream) to output a representation of the\n          object to the stream.\n    writer\n          n.  a function that writes_1 a variable or slot.\nY\n-\n    yield\n          v.t. (values) to produce the values as the result of evaluation.\n          \"The form (+ 2 3) yields 5.\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Glossary,  Prev: Glossary (Glossary),  Up: Glossary (Glossary)\n\nGlossary\n========\n\nEach entry in this glossary has the following parts:\n\n*\n     the term being defined, set in boldface.\n\n*\n     optional pronunciation, enclosed in square brackets and set in\n     boldface, as in the following example: pronounced 'a ,list .  The\n     pronunciation key follows Webster's Third New International Dictionary\n     the English Language, Unabridged, except that \"e\" is used to notate\n     the schwa (upside-down \"e\") character.\n\n*\n     the part or parts of speech, set in italics.  If a term can be used\n     as several parts of speech, there is a separate definition for each\n     part of speech.\n\n*\n     one or more definitions, organized as follows:\n\n    -\n          an optional number, present if there are several definitions.\n          Lowercase letters might also be used in cases where\n          subdefinitions of a numbered definition are necessary.\n\n    -\n          an optional part of speech, set in italics, present if the term\n          is one of several parts of speech.\n\n    -\n          an optional discipline, set in italics, present if the term has\n          a standard definition being repeated. For example, \"Math.\"\n\n    -\n          an optional context, present if this definition is meaningful\n          only in that context. For example, \"(of a symbol)\".\n\n    -\n          the definition.\n\n    -\n          an optional example sentence. For example, \"This is an example\n          of an example.\"\n\n    -\n          optional cross references.\n\nIn addition, some terms have idiomatic usage in the Common Lisp community\nwhich is not shared by other communities, or which is not technically\ncorrect.  Definitions labeled \"Idiom.\" represent such idiomatic usage;\nthese definitions are sometimes followed by an explanatory note.\n\nWords in this font are words with entries in the glossary.  Words in\nexample sentences do not follow this convention.\n\nWhen an ambiguity arises, the longest matching substring has precedence.\nFor example, \"complex float\" refers to a single glossary entry for\n\"complex float\" rather than the combined meaning of the glossary terms\n\"complex\" and \"float.\"\n\nSubscript notation, as in \"something_n\" means that the nth definition of\n\"something\" is intended.  This notation is used only in situations where\nthe context might be insufficient to disambiguate.\n\nThe following are abbreviations used in the glossary:\n\nAbbreviation       Meaning\nadj.\n     adjective\n\nadv.\n     adverb\n\nANSI\n     compatible with one or more ANSI standards\n\nComp.\n     computers\n\nIdiom.\n     idiomatic\n\nIEEE\n     compatible with one or more IEEE standards\n\nISO\n     compatible with one or more ISO standards\n\nMath.\n     mathematics\n\nTrad.\n     traditional\n\nn.\n     noun\n\nv.\n     verb\n\nv.t.\n     transitive verb\n\nNon-alphabetic\n--------------\n\n    ()\n          pronounced 'nil , n.  an alternative notation for writing the\n          symbol~nil, used to emphasize the use of nil as an empty list.\n\nA\n-\n\n    absolute\n          adj.  1. (of a time) representing a specific point in time.  2.\n          (of a pathname) representing a specific position in a directory\n          hierarchy.  See relative.\n\n    access\n          n., v.t.  1. v.t. (a place, or array) to read_1 or write_1 the\n          value of the place or an element of the array.  2. n. (of a\n          place) an attempt to access_1 the value of the place.\n\n    accessibility\n          n.  the state of being accessible.\n\n    accessible\n          adj.  1. (of an object) capable of being referenced.  2. (of\n          shared slots or local slots in an instance of a class) having\n          been defined by the class of the instance or inherited from a\n          superclass of that class.  3. (of a symbol in a package) capable\n          of being referenced without a package prefix when that package\n          is current, regardless of whether the symbol is present in that\n          package or is inherited.\n\n    accessor\n          n.  an operator that performs an access.  See reader and writer.\n\n    active\n          adj.  1. (of a handler, a restart, or a catch tag) having been\n          established but not yet disestablished.  2. (of an element of an\n          array) having an index that is greater than or equal to zero,\n          but less than the fill pointer (if any).  For an array that has\n          no fill pointer, all elements are considered active.\n\n    actual adjustability\n          n. (of an array) a generalized boolean that is associated with\n          the array, representing whether the array is actually adjustable.\n          See also expressed adjustability and adjustable-array-p.\n\n    actual argument\n          n. Trad.  an argument.\n\n    actual array element type\n          n. (of an array) the type for which the array is actually\n          specialized, which is the upgraded array element type of the\n          expressed array element type of the array.  See the function\n          array-element-type.\n\n    actual complex part type\n          n. (of a complex) the type in which the real and imaginary parts\n          of the complex are actually represented, which is the upgraded\n          complex part type of the expressed complex part type of the\n          complex.\n\n    actual parameter\n          n. Trad.  an argument.\n\n    actually adjustable\n          adj. (of an array) such that adjust-array can adjust its\n          characteristics by direct modification.  A conforming program\n          may depend on an array being actually adjustable only if either\n          that array is known to have been expressly adjustable or if that\n          array has been explicitly tested by adjustable-array-p.\n\n    adjustability\n          n. (of an array) 1. expressed adjustability.  2. actual\n          adjustability.\n\n    adjustable\n          adj. (of an array) 1. expressly adjustable.  2. actually\n          adjustable.\n\n    after method\n          n.  a method having the qualifier :after.\n\n    alist\n          pronounced '\\=a ,list , n.  an association list.\n\n    alphabetic\n          n., adj.  1. adj. (of a character) being one of the standard\n          characters A through Z or a through z, or being any\n          implementation-defined character that has case, or being some\n          other graphic character defined by the implementation to be\n          alphabetic_1.  2. a. n.  one of several possible constituent\n          traits of a character.  For details, see *Note Constituent\n          Characters:: and *Note Reader Algorithm::.  b. adj. (of a\n          character) being a character that has syntax type constituent in\n          the current readtable and that has the constituent trait\n          alphabetic_{2a}.  See Figure~2-8.\n\n    alphanumeric\n          adj. (of a character) being either an alphabetic_1 character or\n          a numeric character.\n\n    ampersand\n          n.  the standard character that is called \"ampersand\" (&).  See\n          Figure~2-5.\n\n    anonymous\n          adj.  1. (of a class or function) having no name 2. (of a\n          restart) having a name of nil.\n\n    apparently uninterned\n          adj.  having a home package of nil.  (An apparently uninterned\n          symbol might or might not be an uninterned symbol.  Uninterned\n          symbols have a home package of nil, but symbols which have been\n          uninterned from their home package also have a home package of\n          nil, even though they might still be interned in some other\n          package.)\n\n    applicable\n          adj.  1. (of a handler) being an applicable handler.  2. (of a\n          method) being an applicable method.  3. (of a restart) being an\n          applicable restart.\n\n    applicable handler\n          n. (for a condition being signaled) an active handler for which\n          the associated type contains the condition.\n\n    applicable method\n          n. (of a generic function called with arguments) a method of the\n          generic function for which the arguments satisfy the parameter\n          specializers of that method.  See *Note Selecting the Applicable\n          Methods::.\n\n    applicable restart\n          n.  1. (for a condition) an active handler for which the\n          associated test returns true when given the condition as an\n          argument.  2. (for no particular condition) an active handler\n          for which the associated test returns true when given nil as an\n          argument.\n\n    apply\n          v.t. (a function to a list) to call the function with arguments\n          that are the elements of the list.  \"Applying the function + to\n          a list of integers returns the sum of the elements of that list.\"\n\n    argument\n          n.  1. (of a function) an object which is offered as data to the\n          function when it is called.\n\n          2. (of a format control) a format argument.\n\n    argument evaluation order\n          n.  the order in which arguments are evaluated in a function\n          call.  \"The argument evaluation order for Common Lisp is left to\n          right.\" See *Note Evaluation::.\n\n    argument precedence order\n          n.  the order in which the arguments to a generic function are\n          considered when sorting the applicable methods into precedence\n          order.\n\n    around method\n          n.  a method having the qualifier :around.\n\n    array\n          n.  an object of type array, which serves as a container for\n          other objects arranged in a Cartesian coordinate system.\n\n    array element type\n          n. (of an array) 1. a type associated with the array, and of\n          which all elements of the array are constrained to be members.\n          2. the actual array element type of the array.  3. the expressed\n          array element type of the array.\n\n    array total size\n          n.  the total number of elements in an array, computed by taking\n          the product of the dimensions of the array.  (The size of a\n          zero-dimensional array is therefore one.)\n\n    assign\n          v.t. (a variable) to change the value of the variable in a\n          binding that has already been established.  See the special\n          operator setq.\n\n    association list\n          n.  a list of conses representing an association of keys with\n          values, where the car of each cons is the key and the cdr is the\n          value associated with that key.\n\n    asterisk\n          n.  the standard character that is variously called ``asterisk\"\n          or \"star\" (*).  See Figure~2-5.\n\n    at-sign\n          n.  the standard character that is variously called ``commercial\n          at\" or \"at sign\" (@).  See Figure~2-5.\n\n    atom\n          n.  any object that is not a cons.  \"A vector is an atom.\"\n\n    atomic\n          adj.  being an atom.  \"The number 3, the symbol foo, and nil are\n          atomic.\"\n\n    atomic type specifier\n          n.  a type specifier that is atomic.  For every atomic type\n          specifier, x, there is an equivalent compound type specifier\n          with no arguments supplied, (x).\n\n    attribute\n          n. (of a character) a program-visible aspect of the character.\n          The only standardized attribute of a character is its code_2,\n          but implementations are permitted to have additional\n          implementation-defined attributes.  See *Note Character\n          Attributes::.  \"An implementation that support fonts might make\n          font information an attribute of a character, while others might\n          represent font information separately from characters.\"\n\n    aux variable\n          n.  a variable that occurs in the part of a lambda list that was\n          introduced by &aux.  Unlike all other variables introduced by a\n          lambda-list, aux variables are not parameters.\n\n    auxiliary method\n          n.  a member of one of two sets of methods (the set of primary\n          methods is the other) that form an exhaustive partition of the\n          set of methods on the method's generic function.  How these sets\n          are determined is dependent on the method combination type; see\n          *Note Introduction to Methods::.\n\nB\n-\n\n    backquote\n          n.  the standard character that is variously called ``grave\n          accent\" or \"backquote\" (`).  See Figure~2-5.\n\n    backslash\n          n.  the standard character that is variously called ``reverse\n          solidus\" or \"backslash\" (\\).  See Figure~2-5.\n\n    base character\n          n.  a character\n\n          of type base-char.\n\n    base string\n          n.  a string of type base-string.\n\n    before method\n          n.  a method having the qualifier :before.\n\n    bidirectional\n          adj. (of a stream) being both an input stream and an output\n          stream.\n\n    binary\n          adj.  1. (of a stream) being a stream that has an element type\n          that is a subtype of type integer.  The most fundamental\n          operation on a binary input stream is read-byte and on a binary\n          output stream is write-byte.  See character.  2. (of a file)\n          having been created by opening a binary stream.  (It is\n          implementation-dependent whether this is an detectable aspect of\n          the file, or whether any given character file can be treated as\n          a binary file.)\n\n    bind\n          v.t. (a variable) to establish a binding for the variable.\n\n    binding\n          n.  an association between a name and that which the name\n          denotes.  \"A lexical binding is a lexical association between a\n          name and its value.\"\n\n    bit\n          n.  an object of type bit; that is, the integer 0 or the integer\n          1.\n\n    bit array\n          n.  a specialized array that is of type (array bit), and whose\n          elements are of type bit.\n\n    bit vector\n          n.  a specialized vector that is of type bit-vector, and whose\n          elements are of type bit.\n\n    bit-wise logical operation specifier\n          n.  an object which names one of the sixteen possible bit-wise\n          logical operations that can be performed by the boole function,\n          and which is the value of exactly one of the constant variables\n          boole-clr,     boole-set, boole-1,       boole-2, boole-c1,\n          boole-c2, boole-and,     boole-ior, boole-xor,     boole-eqv,\n          boole-nand,    boole-nor, boole-andc1,   boole-andc2,\n          boole-orc1, or boole-orc2.\n\n    block\n          n.  a named lexical exit point, established explicitly by block\n          or implicitly by operators such as loop, do and prog, to which\n          control and values may be transfered by using a return-from form\n          with the name of the block.\n\n    block tag\n          n.  the symbol that, within the lexical scope of a block form,\n          names the block established by that block form.  See return or\n          return-from.\n\n    boa lambda list\n          n.  a lambda list that is syntactically like an ordinary lambda\n          list, but that is processed in \"by order of argument\" style.\n          See *Note Boa Lambda Lists::.\n\n    body parameter\n          n.  a parameter available in certain lambda lists which from the\n          point of view of conforming programs is like a rest parameter in\n          every way except that it is introduced by &body instead of\n          &rest.  (Implementations are permitted to provide extensions\n          which distinguish body parameters and rest parameters--e.g., the\n          forms for operators which were defined using a body parameter\n          might be pretty printed slightly differently than forms for\n          operators which were defined using rest parameters.)\n\n    boolean\n          n.  an object of type boolean; that is, one of the following\n          objects: the symbol~t   (representing true), or the symbol~nil\n          (representing false).  See generalized boolean.\n\n    boolean equivalent\n          n. (of an object O_1) any object O_2 that has the same truth\n          value as O_1 when both O_1 and O_2 are viewed as generalized\n          booleans.\n\n    bound\n          adj., v.t.  1. adj. having an associated denotation in a binding.\n          \"The variables named by a let are bound within its body.\" See\n          unbound.  2. adj. having a local binding which shadows_2 another.\n          \"The variable *print-escape* is bound while in the princ\n          function.\" 3. v.t. the past tense of bind.\n\n    bound declaration\n          n.  a declaration that refers to or is associated with a variable\n          or function and that appears within the special form that\n          establishes the variable or function, but before the body of\n          that special form (specifically, at the head of that form's\n          body).  (If a bound declaration refers to a function binding or\n          a lexical variable binding, the scope of the declaration is\n          exactly the scope of that binding.  If the declaration refers to\n          a dynamic variable binding, the scope of the declaration is what\n          the scope of the binding would have been if it were lexical\n          rather than dynamic.)\n\n    bounded\n          adj. (of a sequence S, by an ordered pair of bounding indices\n          i_{start} and i_{end}) restricted to a subrange of the elements\n          of S that includes each element beginning with (and including)\n          the one indexed by i_{start} and continuing up to (but not\n          including) the one indexed by i_{end}.\n\n    bounding index\n          n. (of a sequence with length n) either of a conceptual pair of\n          integers, i_{start} and i_{end}, respectively called the \"lower\n          bounding index\" and \"upper bounding index\", such that 0 <=\n          i_{start} <= i_{end} <= n, and which therefore delimit a\n          subrange of the sequence bounded by i_{start} and i_{end}.\n\n    bounding index designator\n          (for a sequence) one of two objects that, taken together as an\n          ordered pair, behave as a designator for bounding indices of the\n          sequence; that is, they denote bounding indices of the sequence,\n          and are either: an integer (denoting itself) and nil (denoting\n          the length of the sequence), or two integers (each denoting\n          themselves).\n\n    break loop\n          n.  A variant of the normal Lisp read-eval-print loop that is\n          recursively entered, usually because the ongoing evaluation of\n          some other form has been suspended for the purpose of debugging.\n          Often, a break loop provides the ability to exit in such a way\n          as to continue the suspended computation.  See the function\n          break.\n\n    broadcast stream\n          n.  an output stream of type broadcast-stream.\n\n    built-in class\n          n.  a class that is a generalized instance of class\n          built-in-class.\n\n    built-in type\n          n.  one of the types in Figure~4-2.\n\n    byte\n          n.  1. adjacent bits within an integer.  (The specific number of\n          bits can vary from point to point in the program; see the\n          function byte.) 2. an integer in a specified range.  (The\n          specific range can vary from point to point in the program; see\n          the functions open and write-byte.)\n\n    byte specifier\n          n.  An object of implementation-dependent nature that is\n          returned by the function byte and that specifies the range of\n          bits in an integer to be used as a byte by functions such as ldb.\n\nC\n-\n\n    cadr\n          pronounced 'ka ,de r , n. (of an object) the car of the cdr of\n          that object.\n\n    call\n          v.t., n.  1. v.t. (a function with arguments) to cause the code\n          represented by that function to be executed in an environment\n          where bindings for the values of its parameters have been\n          established based on the arguments.  \"Calling the function +\n          with the arguments 5 and 1 yields a value of 6.\" 2. n. a\n          situation in which a function is called.\n\n    captured initialization form\n          n.  an initialization form along with the lexical environment in\n          which the form that defined the initialization form was\n          evaluated.  \"Each newly added shared slot is set to the result\n          of evaluating the captured initialization form for the slot that\n          was specified in the defclass form for the new class.\"\n\n    car\n          n.  1. a. (of a cons) the component of a cons corresponding to\n          the first argument to cons; the other component is the cdr.\n          \"The function rplaca modifies the car of a cons.\" b. (of a list)\n          the first element of the list, or nil if the list is the empty\n          list.  2. the object that is held in the car_1.  \"The function\n          car returns the car of a cons.\"\n\n    case\n          n. (of a character) the property of being either uppercase or\n          lowercase.  Not all characters have case.  \"The characters #\\A\n          and #\\a have case, but the character #\\$ has no case.\" See *Note\n          Characters With Case:: and the function both-case-p.\n\n    case sensitivity mode\n          n.  one of the symbols :upcase, :downcase, :preserve, or :invert.\n\n    catch\n          n.  an exit point which is established by a catch form within\n          the dynamic scope of its body, which is named by a catch tag,\n          and to which control and values may be thrown.\n\n    catch tag\n          n.  an object which names an active catch.  (If more than one\n          catch is active with the same catch tag, it is only possible to\n          throw to the innermost such catch because the outer one is\n          shadowed_2.)\n\n    cddr\n          pronounced 'kud e ,de r  or pronounced 'ke ,dude r , n.  (of an\n          object) the cdr of the cdr of that object.\n\n    cdr\n          pronounced 'ku ,de r , n.  1. a. (of a cons) the component of a\n          cons corresponding to the second argument to cons; the other\n          component is the car.  \"The function rplacd modifies the cdr of\n          a cons.\" b. (of a list L_1) either the list L_2 that contains\n          the elements of L_1 that follow after the first, or else nil if\n          L_1 is the empty list.  2. the object that is held in the cdr_1.\n          \"The function cdr returns the cdr of a cons.\"\n\n    cell\n          n. Trad. (of an object) a conceptual slot of that object.  The\n          dynamic variable and global function bindings of a symbol are\n          sometimes referred to as its value cell and function cell,\n          respectively.\n\n    character\n          n., adj.  1. n. an object of type character; that is, an object\n          that represents a unitary token in an aggregate quantity of text;\n          see *Note Character Concepts::.  2. adj.  a. (of a stream)\n          having an element type that is a subtype of type character.  The\n          most fundamental operation on a character input stream is\n          read-char and on a character output stream is write-char. See\n          binary.  b. (of a file) having been created by opening a\n          character stream.  (It is implementation-dependent whether this\n          is an inspectable aspect of the file, or whether any given\n          binary file can be treated as a character file.)\n\n    character code\n          n.  1. one of possibly several attributes of a character.  2. a\n          non-negative integer less than the value of char-code-limit that\n          is suitable for use as a character code_1.\n\n    character designator\n          n.  a designator for a character; that is, an object that\n          denotes a character and that is one of: a designator for a\n          string of length one (denoting the character that is its only\n          element),\n\n          or a character (denoting itself).\n\n    circular\n          adj.  1. (of a list) a circular list.  2. (of an arbitrary\n          object) having a component, element, constituent_2, or\n          subexpression (as appropriate to the context) that is the object\n          itself.\n\n    circular list\n          n.  a chain of conses that has no termination because some cons\n          in the chain is the cdr of a later cons.\n\n    class\n          n.  1. an object that uniquely determines the structure and\n          behavior of a set of other objects called its direct instances,\n          that contributes structure and behavior to a set of other\n          objects called its indirect instances, and that acts as a type\n          specifier for a set of objects called its generalized instances.\n          \"The class integer is a subclass of the class number.\" (Note\n          that the phrase \"the class foo\" is often substituted for the\n          more precise phrase \"the class named foo\"--in both cases, a\n          class object (not a symbol) is denoted.) 2. (of an object) the\n          uniquely determined class of which the object is a direct\n          instance.  See the function class-of.  \"The class of the object\n          returned by gensym is symbol.\" (Note that with this usage a\n          phrase such as \"its class is foo\" is often substituted for the\n          more precise phrase ``its class is the class named foo\"--in both\n          cases, a class object (not a symbol) is denoted.)\n\n    class designator\n          n.  a designator for a class; that is, an object that denotes a\n          class and that is one of: a symbol (denoting the class named by\n          that symbol; see the function find-class) or a class (denoting\n          itself).\n\n    class precedence list\n          n.  a unique total ordering on a class and its superclasses that\n          is consistent with the local precedence orders for the class and\n          its superclasses.  For detailed information, see *Note\n          Determining the Class Precedence List::.\n\n    close\n          v.t. (a stream) to terminate usage of the stream as a source or\n          sink of data, permitting the implementation to reclaim its\n          internal data structures, and to free any external resources\n          which might have been locked by the stream when it was opened.\n\n    closed\n          adj. (of a stream) having been closed (see close).  Some (but\n          not all) operations that are valid on open streams are not valid\n          on closed streams.  See *Note File Operations on Open and Closed\n          Streams::.\n\n    closure\n          n.  a lexical closure.\n\n    coalesce\n          v.t. (literal objects that are similar) to consolidate the\n          identity of those objects, such that they become the same object.\n          See *Note Compiler Terminology::.\n\n    code\n          n.  1. Trad.  any representation of actions to be performed,\n          whether conceptual or as an actual object, such as forms, lambda\n          expressions, objects of type function, text in a source file, or\n          instruction sequences in a compiled file.  This is a generic\n          term; the specific nature of the representation depends on its\n          context.  2. (of a character) a character code.\n\n    coerce\n          v.t. (an object to a type) to produce an object from the given\n          object, without modifying that object, by following some set of\n          coercion rules that must be specifically stated for any context\n          in which this term is used.  The resulting object is necessarily\n          of the indicated type, except when that type is a subtype of\n          type complex; in that case, if a complex rational with an\n          imaginary part of zero would result, the result is a rational\n          rather than a complex--see *Note Rule of Canonical\n          Representation for Complex Rationals::.\n\n    colon\n          n.  the standard character that is called \"colon\" (:).  See\n          Figure~2-5.\n\n    comma\n          n.  the standard character that is called \"comma\" (,).  See\n          Figure~2-5.\n\n    compilation\n          n.  the process of compiling code by the compiler.\n\n    compilation environment\n          n.  1. An environment that represents information known by the\n          compiler about a form that is being compiled.  See *Note\n          Compiler Terminology::.  2. An object that represents the\n          compilation environment_1 and that is used as a second argument\n          to a macro function (which supplies a value for any &environment\n          parameter in the macro function's definition).\n\n    compilation unit\n          n.  an interval during which a single unit of compilation is\n          occurring.  See the macro with-compilation-unit.\n\n    compile\n          v.t.  1. (code) to perform semantic preprocessing of the code,\n          usually optimizing one or more qualities of the code, such as\n          run-time speed of execution or run-time storage usage.  The\n          minimum semantic requirements of compilation are that it must\n          remove all macro calls and arrange for all load time values to\n          be resolved prior to run time.  2. (a function) to produce a new\n          object of type compiled-function which represents the result of\n          compiling the code represented by the function.  See the\n          function compile.  3. (a source file) to produce a compiled file\n          from a source file.  See the function compile-file.\n\n    compile time\n          n.  the duration of time that the compiler is processing source\n          code.\n\n    compile-time definition\n          n.  a definition in the compilation environment.\n\n    compiled code\n          n.  1. compiled functions.  2. code that represents compiled\n          functions, such as the contents of a compiled file.\n\n    compiled file\n          n.  a file which represents the results of compiling the forms\n          which appeared in a corresponding source file, and which can be\n          loaded.  See the function compile-file.\n\n    compiled function\n          n.  an object of type compiled-function, which is a function\n          that has been compiled, which contains no references to macros\n          that must be expanded at run time, and which contains no\n          unresolved references to load time values.\n\n    compiler\n          n.  a facility that is part of Lisp and that translates code\n          into an implementation-dependent form that might be represented\n          or executed efficiently.  The functions compile and compile-file\n          permit programs to invoke the compiler.\n\n    compiler macro\n          n.  an auxiliary macro definition for a globally defined function\n          or macro which might or might not be called by any given\n          conforming implementation and which must preserve the semantics\n          of the globally defined function or macro but which might\n          perform some additional optimizations.  (Unlike a macro, a\n          compiler macro does not extend the syntax of Common Lisp;\n          rather, it provides an alternate implementation strategy for\n          some existing syntax or functionality.)\n\n    compiler macro expansion\n          n.  1. the process of translating a form into another form by a\n          compiler macro.  2. the form resulting from this process.\n\n    compiler macro form\n          n.  a function form or macro form whose operator has a\n          definition as a compiler macro, or a funcall form whose first\n          argument is a function form whose argument is the name of a\n          function that has a definition as a compiler macro.\n\n    compiler macro function\n          n.  a function of two arguments, a form and an environment, that\n          implements compiler macro expansion by producing either a form\n          to be used in place of the original argument form or else nil,\n          indicating that the original form should not be replaced.  See\n          *Note Compiler Macros::.\n\n    complex\n          n.  an object of type complex.\n\n    complex float\n          n.  an object of type complex which has a complex part type that\n          is a subtype of float.  A complex float is a complex, but it is\n          not a float.\n\n    complex part type\n          n. (of a complex) 1. the type which is used to represent both\n          the real part and the imaginary part of the complex.  2. the\n          actual complex part type of the complex.  3. the expressed\n          complex part type of the complex.\n\n    complex rational\n          n.  an object of type complex which has a complex part type that\n          is a subtype of rational.  A complex rational is a complex, but\n          it is not a rational.  No complex rational has an imaginary part\n          of zero because such a number is always represented by Common\n          Lisp as an object of type rational; see *Note Rule of Canonical\n          Representation for Complex Rationals::.\n\n    complex single float\n          n.  an object of type complex which has a complex part type that\n          is a subtype of single-float.  A complex single float is a\n          complex, but it is not a single float.\n\n    composite stream\n          n.  a stream that is composed of one or more other streams.\n          \"make-synonym-stream creates a composite stream.\"\n\n    compound form\n          n.  a non-empty list which is a form: a special form, a lambda\n          form, a macro form, or a function form.\n\n    compound type specifier\n          n.  a type specifier that is a cons; i.e., a type specifier that\n          is not an atomic type specifier.  \"(vector single-float) is a\n          compound type specifier.\"\n\n    concatenated stream\n          n.  an input stream of type concatenated-stream.\n\n    condition\n          n.  1. an object which represents a situation--usually, but not\n          necessarily, during signaling.  2. an object of type condition.\n\n    condition designator\n          n.  one or more objects that, taken together, denote either an\n          existing condition object or a condition object to be implicitly\n          created.  For details, see *Note Condition Designators::.\n\n    condition handler\n          n.  a function that might be invoked by the act of signaling,\n          that receives the condition being signaled as its only argument,\n          and that is permitted to handle the condition or to decline.\n          See *Note Signaling::.\n\n    condition reporter\n          n.  a function that describes how a condition is to be printed\n          when the Lisp printer is invoked while *print-escape* is false.\n          See *Note Printing Conditions::.\n\n    conditional newline\n          n.  a point in output where a newline might be inserted at the\n          discretion of the pretty printer.  There are four kinds of\n          conditional newlines, called \"linear-style,\" ``fill-style,\"\n          ``miser-style,\" and \"mandatory-style.\" See the function\n          pprint-newline and *Note Dynamic Control of the Arrangement of\n          Output::.\n\n    conformance\n          n.  a state achieved by proper and complete adherence to the\n          requirements of this specification.  See *Note Conformance::.\n\n    conforming code\n          n.  code that is all of part of a conforming program.\n\n    conforming implementation\n          n.  an implementation, used to emphasize complete and correct\n          adherance to all conformance criteria.  A conforming\n          implementation is capable of accepting a conforming program as\n          input, preparing that program for execution, and executing the\n          prepared program in accordance with this specification.  An\n          implementation which has been extended may still be a conforming\n          implementation provided that no extension interferes with the\n          correct function of any conforming program.\n\n    conforming processor\n          n. ANSI a conforming implementation.\n\n    conforming program\n          n.  a program, used to emphasize the fact that the program\n          depends for its correctness only upon documented aspects of\n          Common Lisp, and can therefore be expected to run correctly in\n          any conforming implementation.\n\n    congruent\n          n.  conforming to the rules of lambda list congruency, as\n          detailed in *Note Congruent Lambda-lists for all Methods of a\n          Generic Function::.\n\n    cons\n          n.v.  1. n. a compound data object having two components called\n          the car and the cdr.  2. v. to create such an object.  3. v.\n          Idiom. to create any object, or to allocate storage.\n\n    constant\n          n.  1. a constant form.  2. a constant variable.  3. a constant\n          object.  4. a self-evaluating object.\n\n    constant form\n          n.  any form for which evaluation always yields the same value,\n          that neither affects nor is affected by the environment in which\n          it is evaluated (except that it is permitted to refer to the\n          names of constant variables defined in the environment), and\n          that neither affects nor is affected by the state of any object\n          except those objects that are otherwise inaccessible parts of\n          objects created by the form itself.  \"A car form in which the\n          argument is a quote form is a constant form.\"\n\n    constant object\n          n.  an object that is constrained (e.g., by its context in a\n          program or by the source from which it was obtained) to be\n          immutable.  \"A literal object that has been processed by\n          compile-file is a constant object.\"\n\n    constant variable\n          n.  a variable, the value of which can never change; that is, a\n          keyword_1 or a named constant.  \"The symbols t, nil, :direction,\n          and most-positive-fixnum are constant variables.\"\n\n    constituent\n          n., adj.  1. a. n. the syntax type of a character that is part\n          of a token.  For details, see *Note Constituent Characters::.\n          b. adj. (of a character) having the constituent_{1a} syntax\n          type_2.  c. n. a constituent_{1b} character.  2. n. (of a\n          composite stream) one of possibly several objects that\n          collectively comprise the source or sink of that stream.\n\n    constituent trait\n          n. (of a character) one of several classifications of a\n          constituent character in a readtable.  See *Note Constituent\n          Characters::.\n\n    constructed stream\n          n.  a stream whose source or sink is a Lisp object.  Note that\n          since a stream is another Lisp object, composite streams are\n          considered constructed streams.  \"A string stream is a\n          constructed stream.\"\n\n    contagion\n          n.  a process whereby operations on objects of differing types\n          (e.g., arithmetic on mixed types of numbers) produce a result\n          whose type is controlled by the dominance of one argument's type\n          over the types of the other arguments.  See *Note Contagion in\n          Numeric Operations::.\n\n    continuable\n          n. (of an error) an error that is correctable by the continue\n          restart.\n\n    control form\n          n.  1. a form that establishes one or more places to which\n          control can be transferred.  2. a form that transfers control.\n\n    copy\n          n.  1. (of a cons C) a fresh cons with the same car and cdr as C.\n          2. (of a list L) a fresh list with the same elements as L.\n          (Only the list structure is fresh; the elements are the same.)\n          See the function copy-list.  3. (of an association list A with\n          elements A_i) a fresh list B with elements B_i, each of which is\n          nil if A_i is nil, or else a copy of the cons A_i.  See the\n          function copy-alist.  4. (of a tree T) a fresh tree with the\n          same leaves as T.  See the function copy-tree.  5. (of a random\n          state R) a fresh random state that, if used as an argument to to\n          the function random would produce the same series of \"random\"\n          values as R would produce.\n\n          6. (of a structure S) a fresh structure that has the same type\n          as S, and that has slot values, each of which is the same as the\n          corresponding slot value of S.\n\n          (Note that since the difference between a cons, a list, and a\n          tree is a matter of \"view\" or \"intention,\"  there can be no\n          general-purpose function which, based solely on the type of an\n          object, can determine which of these distinct meanings is\n          intended.  The distinction rests solely on the basis of the text\n          description within this document.  For example, phrases like \"a\n          copy of the given list\" or \"copy of the list x\" imply the second\n          definition.)\n\n    correctable\n          adj. (of an error) 1. (by a restart other than abort that has\n          been associated with the error) capable of being corrected by\n          invoking that restart.  \"The function cerror signals an error\n          that is correctable by the continue restart.\"\n\n          (Note that correctability is not a property of an error object,\n          but rather a property of the dynamic environment that is in\n          effect when the error is signaled.  Specifically, the restart is\n          \"associated with\" the error condition object.  See *Note\n          Associating a Restart with a Condition::.)\n\n          2. (when no specific restart is mentioned) correctable_1 by at\n          least one restart.  \"import signals a correctable error of type\n          package-error if any of the imported symbols has the same name as\n          some distinct symbol already accessible in the package.\"\n\n    current input base\n          n. (in a dynamic environment) the radix that is the value of\n          *read-base* in that environment, and that is the default radix\n          employed by the Lisp reader and its related functions.\n\n    current logical block\n          n.  the context of the innermost lexically enclosing use of\n          pprint-logical-block.\n\n    current output base\n          n. (in a dynamic environment) the radix that is the value of\n          *print-base* in that environment, and that is the default radix\n          employed by the Lisp printer and its related functions.\n\n    current package\n          n. (in a dynamic environment) the package that is the value of\n          *package* in that environment, and that is the default package\n          employed by the Lisp reader and Lisp printer, and their related\n          functions.\n\n    current pprint dispatch table\n          n. (in a dynamic environment) the pprint dispatch table that is\n          the value of *print-pprint-dispatch* in that environment, and\n          that is the default pprint dispatch table employed by the pretty\n          printer.\n\n    current random state\n          n. (in a dynamic environment) the random state that is the value\n          of *random-state* in that environment, and that is the default\n          random state employed by random.\n\n    current readtable\n          n. (in a dynamic environment) the readtable that is the value of\n          *readtable* in that environment, and that affects the way in\n          which expressions_2 are parsed into objects by the Lisp reader.\n\nD\n-\n\n    data type\n          n. Trad.  a type.\n\n    debug I/O\n          n.  the bidirectional stream that is the value of the variable\n          *debug-io*.\n\n    debugger\n          n.  a facility that allows the user to handle a condition\n          interactively.  For example, the debugger might permit\n          interactive selection of a restart from among the active\n          restarts, and it might perform additional implementation-defined\n          services for the purposes of debugging.\n\n    declaration\n          n.  a global declaration or local declaration.\n\n    declaration identifier\n          n.  one of the symbols declaration, dynamic-extent, ftype,\n          function, ignore, inline, notinline, optimize, special, or type;\n          or a symbol which is the name of a type; or a symbol which has\n          been declared to be a declaration identifier by using a\n          declaration declaration.\n\n    declaration specifier\n          n.  an expression that can appear at top level of a declare\n          expression or a declaim form, or as the argument to proclaim,\n          and which has a car which is a declaration identifier, and which\n          has a cdr that is data interpreted according to rules specific\n          to the declaration identifier.\n\n    declare\n          v.  to establish a declaration.  See declare, declaim, or\n          proclaim.\n\n    decline\n          v. (of a handler) to return normally without having handled the\n          condition being signaled, permitting the signaling process to\n          continue as if the handler had not been present.\n\n    decoded time\n          n.  absolute time, represented as an ordered series of nine\n          objects which, taken together, form a description of a point in\n          calendar time, accurate to the nearest second (except that leap\n          seconds are ignored).  See *Note Decoded Time::.\n\n    default method\n          n.  a method having no parameter specializers other than the\n          class t.  Such a method is always an applicable method but might\n          be shadowed_2 by a more specific method.\n\n    defaulted initialization argument list\n          n.  a list of alternating initialization argument names and\n          values in which unsupplied initialization arguments are\n          defaulted, used in the protocol for initializing and\n          reinitializing instances of classes.\n\n    define-method-combination arguments lambda list\n          n.  a lambda list used by the :arguments option to\n          define-method-combination.  See *Note Define-method-combination\n          Arguments Lambda Lists::.\n\n    define-modify-macro lambda list\n          n.  a lambda list used by define-modify-macro.  See *Note\n          Define-modify-macro Lambda Lists::.\n\n    defined name\n          n.  a symbol the meaning of which is defined by Common Lisp.\n\n    defining form\n          n.  a form that has the side-effect of establishing a definition.\n          \"defun and defparameter are defining forms.\"\n\n    defsetf lambda list\n          n.  a lambda list that is like an ordinary lambda list except\n          that it does not permit &aux and that it permits use of\n          &environment.  See *Note Defsetf Lambda Lists::.\n\n    deftype lambda list\n          n.  a lambda list that is like a macro lambda list except that\n          the default value for unsupplied optional parameters and keyword\n          parameters is the symbol * (rather than nil).  See *Note Deftype\n          Lambda Lists::.\n\n    denormalized\n          adj., ANSI, IEEE (of a float) conforming to the description of\n          \"denormalized\" as described by IEEE Standard for Binary\n          Floating-Point Arithmetic.  For example, in an implementation\n          where the minimum possible exponent was -7 but where 0.001 was a\n          valid mantissa, the number 1.0e-10 might be representable as\n          0.001e-7 internally even if the normalized representation would\n          call for it to be represented instead as 1.0e-10 or 0.1e-9.  By\n          their nature, denormalized floats generally have less precision\n          than normalized floats.\n\n    derived type\n          n.  a type specifier which is defined in terms of an expansion\n          into another type specifier.  deftype defines derived types, and\n          there may be other implementation-defined operators which do so\n          as well.\n\n    derived type specifier\n          n.  a type specifier for a derived type.\n\n    designator\n          n.  an object that denotes another object.  In the dictionary\n          entry for an operator if a parameter is described as a\n          designator for a type, the description of the operator is\n          written in a way that assumes that appropriate coercion to that\n          type has already occurred; that is, that the parameter is\n          already of the denoted type.  For more detailed information, see\n          *Note Designators::.\n\n    destructive\n          adj. (of an operator) capable of modifying some program-visible\n          aspect of one or more objects that are either explicit arguments\n          to the operator or that can be obtained directly or indirectly\n          from the global environment by the operator.\n\n    destructuring lambda list\n          n.  an extended lambda list used in destructuring-bind and\n          nested within macro lambda lists.  See *Note Destructuring\n          Lambda Lists::.\n\n    different\n          adj.  not the same \"The strings \"FOO\" and \"foo\" are different\n          under equal but not under equalp.\"\n\n    digit\n          n. (in a radix) a character that is among the possible digits (0\n          to 9, A to Z, and a to z) and that is defined to have an\n          associated numeric weight as a digit in that radix.  See *Note\n          Digits in a Radix::.\n\n    dimension\n          n.  1. a non-negative integer indicating the number of objects\n          an array can hold along one axis.  If the array is a vector with\n          a fill pointer, the fill pointer is ignored.  \"The second\n          dimension of that array is 7.\" 2. an axis of an array.  \"This\n          array has six dimensions.\"\n\n    direct instance\n          n. (of a class C) an object whose class is C itself, rather than\n          some subclass of C.  \"The function make-instance always returns a\n          direct instance of the class which is (or is named by) its first\n          argument.\"\n\n    direct subclass\n          n. (of a class C_1) a class C_2, such that C_1 is a direct\n          superclass of C_2.\n\n    direct superclass\n          n. (of a class C_1) a class C_2 which was explicitly designated\n          as a superclass of C_1 in the definition of C_1.\n\n    disestablish\n          v.t.  to withdraw the establishment of an object, a  binding, an\n          exit point, a  tag, a  handler, a  restart, or an environment.\n\n    disjoint\n          n. (of types) having no elements in common.\n\n    dispatching macro character\n          n.  a macro character that has an associated table that specifies\n          the function to be called for each character that is seen\n          following the dispatching macro character.  See the function\n          make-dispatch-macro-character.\n\n    displaced array\n          n.  an array which has no storage of its own, but which is\n          instead indirected to the storage of another array, called its\n          target, at a specified offset, in such a way that any attempt to\n          access the displaced array implicitly references the target\n          array.\n\n    distinct\n          adj.  not identical.\n\n    documentation string\n          n. (in a defining form) A literal string which because of the\n          context in which it appears (rather than because of some\n          intrinsically observable aspect of the string) is taken as\n          documentation.  In some cases, the documentation string is saved\n          in such a way that it can later be obtained by supplying either\n          an object, or by supplying a name and a \"kind\" to the function\n          documentation.  \"The body of code in a defmacro form can be\n          preceded by a documentation string of kind function.\"\n\n    dot\n          n.  the standard character that is variously called ``full stop,\"\n          ``period,\" or \"dot\" (.).  See Figure~2-5.\n\n    dotted list\n          n.  a list which has a terminating atom that is not nil.  (An\n          atom by itself is not a dotted list, however.)\n\n    dotted pair\n          n.  1. a cons whose cdr is a non-list.  2. any cons, used to\n          emphasize the use of the cons as a symmetric data pair.\n\n    double float\n          n.  an object of type double-float.\n\n    double-quote\n          n.  the standard character that is variously called ``quotation\n          mark\" or \"double quote\" (\").  See Figure~2-5.\n\n    dynamic binding\n          n.  a binding in a dynamic environment.\n\n    dynamic environment\n          n.  that part of an environment that contains bindings with\n          dynamic extent.  A dynamic environment contains, among other\n          things: exit points established by unwind-protect, and bindings\n          of dynamic variables, exit points established by catch,\n          condition handlers, and restarts.\n\n    dynamic extent\n          n.  an extent whose duration is bounded by points of\n          establishment and disestablishment within the execution of a\n          particular form.  See indefinite extent.  \"Dynamic variable\n          bindings have dynamic extent.\"\n\n    dynamic scope\n          n.  indefinite scope along with dynamic extent.\n\n    dynamic variable\n          n.  a variable the binding for which is in the dynamic\n          environment.  See special.\n\nE\n-\n\n    echo stream\n          n.  a stream of type echo-stream.\n\n    effective method\n          n.  the combination of applicable methods that are executed when\n          a generic function is invoked with a particular sequence of\n          arguments.\n\n    element\n          n.  1. (of a list) an object that is the car of one of the conses\n          that comprise the list.  2. (of an array) an object that is\n          stored in the array.  3. (of a sequence) an object that is an\n          element of the list or array that is the sequence.  4. (of a\n          type) an object that is a member of the set of objects\n          designated by the type.  5. (of an input stream) a character or\n          number (as appropriate to the element type of the stream) that\n          is among the ordered series of objects that can be read from the\n          stream (using read-char or read-byte, as appropriate to the\n          stream).  6. (of an output stream) a character or number (as\n          appropriate to the element type of the stream) that is among the\n          ordered series of objects that has been or will be written to\n          the stream (using write-char or write-byte, as appropriate to\n          the stream).  7. (of a class) a generalized instance of the\n          class.\n\n    element type\n          n.  1. (of an array) the array element type of the array.  2.\n          (of a stream) the stream element type of the stream.\n\n    em\n          n. Trad.  a context-dependent unit of measure commonly used in\n          typesetting, equal to the displayed width of of a letter \"M\" in\n          the current font.  (The letter \"M\" is traditionally chosen\n          because it is typically represented by the widest glyph in the\n          font, and other characters' widths are typically fractions of an\n          em.  In implementations providing non-Roman characters with\n          wider characters than \"M,\" it is permissible for another\n          character to be the implementation-defined reference character\n          for this measure, and for \"M\" to be only a fraction of an em\n          wide.) In a fixed width font, a line with n characters is n ems\n          wide; in a variable width font, n ems is the expected upper\n          bound on the width of such a line.\n\n    empty list\n          n.  the list containing no elements. See ().\n\n    empty type\n          n.  the type that contains no elements, and that is a subtype of\n          all types (including itself).  See nil.\n\n    end of file\n          n.  1. the point in an input stream beyond which there is no\n          further data.  Whether or not there is such a point on an\n          interactive stream is implementation-defined.  2. a situation\n          that occurs upon an attempt to obtain data from an input stream\n          that is at the end of file_1.\n\n    environment\n          n.  1. a set of bindings. See *Note Introduction to\n          Environments::.  2. an environment object.  \"macroexpand takes\n          an optional environment argument.\"\n\n    environment object\n          n.  an object representing a set of lexical bindings, used in\n          the processing of a form to provide meanings for names within\n          that form.  \"macroexpand takes an optional environment argument.\"\n          (The object nil when used as an environment object denotes the\n          null lexical environment; the values of environment parameters\n          to macro functions are objects of implementation-dependent\n          nature which represent the environment_1 in which the\n          corresponding macro form is to be expanded.) See *Note\n          Environment Objects::.\n\n    environment parameter\n          n.  A parameter in a defining form f for which there is no\n          corresponding argument; instead, this parameter receives as its\n          value an environment object which corresponds to the lexical\n          environment in which the defining form f appeared.\n\n    error\n          n.  1. (only in the phrase \"is an error\") a situation in which\n          the semantics of a program are not specified, and in which the\n          consequences are undefined.  2. a condition which represents an\n          error situation.  See *Note Error Terminology::.  3. an object\n          of type error.\n\n    error output\n          n.  the output stream which is the value of the dynamic variable\n          *error-output*.\n\n    escape\n          n., adj.  1. n. a single escape or a multiple escape.  2. adj.\n          single escape or multiple escape.\n\n    establish\n          v.t.  to build or bring into being a  binding, a  declaration,\n          an exit point, a  tag, a  handler, a restart, or an environment.\n          \"let establishes lexical bindings.\"\n\n    evaluate\n          v.t. (a form or an implicit progn) to execute the code\n          represented by the form (or the series of forms making up the\n          implicit progn) by applying the rules of evaluation, returning\n          zero or more values.\n\n    evaluation\n          n.  a model whereby forms are executed, returning zero or more\n          values.  Such execution might be implemented directly in one\n          step by an interpreter or in two steps by first compiling the\n          form and then executing the compiled code; this choice is\n          dependent both on context and the nature of the implementation,\n          but in any case is not in general detectable by any program.\n          The evaluation model is designed in such a way that a conforming\n          implementation might legitimately have only a compiler and no\n          interpreter, or vice versa.  See *Note The Evaluation Model::.\n\n    evaluation environment\n          n.  a run-time environment in which macro expanders and code\n          specified by eval-when to be evaluated are evaluated.  All\n          evaluations initiated by the compiler take place in the\n          evaluation environment.\n\n    execute\n          v.t. Trad. (code) to perform the imperative actions represented\n          by the code.\n\n    execution time\n          n.  the duration of time that compiled code is being executed.\n\n    exhaustive partition\n          n. (of a type) a set of pairwise disjoint types that form an\n          exhaustive union.\n\n    exhaustive union\n          n. (of a type) a set of subtypes of the type, whose union\n          contains all elements of that type.\n\n    exit point\n          n.  a point in a control form from which (e.g., block), through\n          which (e.g., unwind-protect), or to which (e.g., tagbody)\n          control and possibly values can be transferred both actively by\n          using another control form and passively through the normal\n          control and data flow of evaluation.  \"catch and block establish\n          bindings for exit points to which throw and return-from,\n          respectively, can transfer control and values; tagbody\n          establishes a binding for an exit point with lexical extent to\n          which go can transfer control; and unwind-protect establishes an\n          exit point through which control might be transferred by\n          operators such as throw, return-from, and go.\"\n\n    explicit return\n          n.  the act of transferring control (and possibly values) to a\n          block by using return-from (or return).\n\n    explicit use\n          n. (of a variable V in a form F) a reference to V that is\n          directly apparent in the normal semantics of F; i.e., that does\n          not expose any undocumented details of the macro expansion of\n          the form itself.  References to V exposed by expanding subforms\n          of F are, however, considered to be explicit uses of V.\n\n    exponent marker\n          n.  a character that is used in the textual notation for a float\n          to separate the mantissa from the exponent.  The characters\n          defined as exponent markers in the standard readtable are shown\n          in Figure 26-1.  For more information, see *Note Character\n          Syntax::.  \"The exponent marker `d' in `3.0d7' indicates that\n          this number is to be represented as a double float.\"\n\n            Marker  Meaning                                  \n            D or d  double-float                             \n            E or e  float (see *read-default-float-format*)  \n            F or f  single-float                             \n            L or l  long-float                               \n            S or s  short-float                              \n\n                     Figure 26-1: Exponent Markers          \n\n\n    export\n          v.t. (a symbol in a package) to add the symbol to the list of\n          external symbols of the package.\n\n    exported\n          adj. (of a symbol in a package) being an external symbol of the\n          package.\n\n    expressed adjustability\n          n. (of an array) a generalized boolean that is conceptually (but\n          not necessarily actually) associated with the array,\n          representing whether the array is expressly adjustable.  See\n          also actual adjustability.\n\n    expressed array element type\n          n. (of an array) the type which is the array element type\n          implied by a type declaration for the array, or which is the\n          requested array element type at its time of creation, prior to\n          any selection of an upgraded array element type.  (Common Lisp\n          does not provide a way of detecting this type directly at run\n          time, but an implementation is permitted to make assumptions\n          about the array's contents and the operations which may be\n          performed on the array when this type is noted during code\n          analysis, even if those assumptions would not be valid in\n          general for the upgraded array element type of the expressed\n          array element type.)\n\n    expressed complex part type\n          n. (of a complex) the type which is implied as the complex part\n          type by a type declaration for the complex, or which is the\n          requested complex part type at its time of creation, prior to\n          any selection of an upgraded complex part type.  (Common Lisp\n          does not provide a way of detecting this type directly at run\n          time, but an implementation is permitted to make assumptions\n          about the operations which may be performed on the complex when\n          this type is noted during code analysis, even if those\n          assumptions would not be valid in general for the upgraded\n          complex part type of the expressed complex part type.)\n\n    expression\n          n.  1. an object, often used to emphasize the use of the object\n          to encode or represent information in a specialized format, such\n          as program text.  \"The second expression in a let form is a list\n          of bindings.\" 2. the textual notation used to notate an object\n          in a source file.  \"The expression 'sample is equivalent to\n          (quote sample).\"\n\n    expressly adjustable\n          adj. (of an array) being actually adjustable by virtue of an\n          explicit request for this characteristic having been made at the\n          time of its creation.  All arrays that are expressly adjustable\n          are actually adjustable, but not necessarily vice versa.\n\n    extended character\n          n.  a character\n\n          of type extended-char:\n\n          a character that is not a base character.\n\n    extended function designator\n          n.  a designator for a function; that is, an object that denotes\n          a function and that is one of: a function name (denoting the\n          function it names in the global environment), or a function\n          (denoting itself).  The consequences are undefined if a function\n          name is used as an extended function designator but it does not\n          have a global definition as a function, or if it is a symbol\n          that has a global definition as a macro or a special form.  See\n          also function designator.\n\n    extended lambda list\n          n.  a list resembling an ordinary lambda list in form and\n          purpose, but offering additional syntax or functionality not\n          available in an ordinary lambda list.  \"defmacro uses extended\n          lambda lists.\"\n\n    extension\n          n.  a facility in an implementation of Common Lisp that is not\n          specified by this standard.\n\n    extent\n          n.  the interval of time during which a reference to an object,\n          a  binding, an exit point, a  tag, a  handler, a  restart, or an\n          environment is defined.\n\n    external file format\n          n.  an object of implementation-dependent nature which determines\n          one of possibly several implementation-dependent ways in which\n          characters are encoded externally in a character file.\n\n    external file format designator\n          n.  a designator for an external file format; that is, an object\n          that denotes an external file format and that is one of: the\n          symbol :default (denoting an implementation-dependent default\n          external file format that can accomodate at least the base\n          characters), some other object defined by the implementation to\n          be an external file format designator (denoting an\n          implementation-defined external file format), or some other\n          object defined by the implementation to be an external file\n          format (denoting itself).\n\n    external symbol\n          n. (of a package) a symbol that is part of the `external\n          interface' to the package and that are inherited_3 by any other\n          package that uses the package.  When using the Lisp reader, if a\n          package prefix is used, the name of an external symbol is\n          separated from the package name by a single package marker while\n          the name of an internal symbol is separated from the package\n          name by a double package marker; see *Note Symbols as Tokens::.\n\n    externalizable object\n          n.  an object that can be used as a literal object in code to be\n          processed by the file compiler.\n\nF\n-\n\n    false\n          n.  the symbol nil, used to represent the failure of a predicate\n          test.\n\n    fbound\n          pronounced 'ef ,baund  adj.  (of a function name) bound in the\n          function namespace.  (The names of macros and special operators\n          are fbound, but the nature and type of the object which is their\n          value is implementation-dependent.\n\n          Further, defining a setf expander F does not cause the setf\n          function (setf F) to become defined; as such, if there is a such\n          a definition of a setf expander F, the function (setf F) can be\n          fbound if and only if, by design or coincidence, a function\n          binding for (setf F) has been independently established.)\n\n          See the functions fboundp and symbol-function.\n\n    feature\n          n.  1. an aspect or attribute of Common Lisp, of the\n          implementation, or of the environment.  2. a symbol that names a\n          feature_1.  See *Note Features::.  \"The :ansi-cl feature is\n          present in all conforming implementations.\"\n\n    feature expression\n          n.  A boolean combination of features used by the #+ and #-\n          reader macros in order to direct conditional reading of\n          expressions by the Lisp reader.  See *Note Feature Expressions::.\n\n    features list\n          n.  the list that is the value of *features*.\n\n    file\n          n.  a named entry in a file system, having an\n          implementation-defined nature.\n\n    file compiler\n          n.  any compiler which compiles source code contained in a file,\n          producing a compiled file as output.  The compile-file function\n          is the only interface to such a compiler provided by Common Lisp,\n          but there might be other, implementation-defined mechanisms for\n          invoking the file compiler.\n\n    file position\n          n. (in a stream) a non-negative integer that represents a\n          position in the stream.  Not all streams are able to represent\n          the notion of file position; in the description of any operator\n          which manipulates file positions, the behavior for streams that\n          don't have this notion must be explicitly stated.  For binary\n          streams, the file position represents the number of preceding\n          bytes in the stream.  For character streams, the constraint is\n          more relaxed: file positions must increase monotonically, the\n          amount of the increase between file positions corresponding to\n          any two successive characters in the stream is\n          implementation-dependent.\n\n    file position designator\n          n. (in a stream) a designator for a file position in that\n          stream; that is, the symbol :start (denoting 0, the first file\n          position in that stream), the symbol :end (denoting the last\n          file position in that stream; i.e., the position following the\n          last element of the stream), or a file position (denoting\n          itself).\n\n    file stream\n          n.  an object of type file-stream.\n\n    file system\n          n.  a facility which permits aggregations of data to be stored\n          in named files on some medium that is external to the Lisp image\n          and that therefore persists from session to session.\n\n    filename\n          n.  a handle, not necessarily ever directly represented as an\n          object, that can be used to refer to a file in a file system.\n          Pathnames and namestrings are two kinds of objects that\n          substitute for filenames in Common Lisp.\n\n    fill pointer\n          n. (of a vector) an integer associated with a vector that\n          represents the index above which no elements are active.  (A\n          fill pointer is a non-negative integer no larger than the total\n          number of elements in the vector.  Not all vectors have fill\n          pointers.)\n\n    finite\n          adj. (of a type) having a finite number of elements.  \"The type\n          specifier (integer 0 5) denotes a finite type, but the type\n          specifiers integer and (integer 0) do not.\"\n\n    fixnum\n          n.  an integer of type fixnum.\n\n    float\n          n.  an object of type float.\n\n    for-value\n          adj. (of a reference to a binding) being a reference that reads_1\n          the value of the binding.\n\n    form\n          n.  1. any object meant to be evaluated.  2.    a symbol, a\n          compound form, or a self-evaluating object.  3. (for an\n          operator, as in \"<<operator>> form\") a compound form having that\n          operator as its first element.  \"A quote form is a constant\n          form.\"\n\n    formal argument\n          n. Trad.  a parameter.\n\n    formal parameter\n          n. Trad.  a parameter.\n\n    format\n          v.t. (a format control and format arguments) to perform output\n          as if by format, using the format string and format arguments.\n\n    format argument\n          n.  an object which is used as data by functions such as format\n          which interpret format controls.\n\n    format control\n          n.  a format string, or a function that obeys the argument\n          conventions for a function returned by the formatter macro.  See\n          *Note Compiling Format Strings::.\n\n    format directive\n          n.  1. a sequence of characters in a format string which is\n          introduced by a tilde, and which is specially interpreted by\n          code which processes format strings to mean that some special\n          operation should be performed, possibly involving data supplied\n          by the format arguments that accompanied the format string.  See\n          the function format.  \"In \"~D base 10 = ~8R\", the character\n          sequences `~D' and `~8R' are format directives.\" 2. the\n          conceptual category of all format directives_1 which use the\n          same dispatch character.  \"Both \"~3d\" and \"~3,'0D\" are valid\n          uses of the `~D' format directive.\"\n\n    format string\n          n.  a string which can contain both ordinary text and format\n          directives, and which is used in conjunction with format\n          arguments to describe how text output should be formatted by\n          certain functions, such as format.\n\n    free declaration\n          n.  a declaration that is not a bound declaration.  See declare.\n\n    fresh\n          adj.  1. (of an object yielded by a function) having been\n          newly-allocated by that function.  (The caller of a function\n          that returns a fresh object may freely modify the object without\n          fear that such modification will compromise the future correct\n          behavior of that function.) 2. (of a binding for a name)\n          newly-allocated; not shared with other bindings for that name.\n\n    freshline\n          n.  a conceptual operation on a stream, implemented by the\n          function fresh-line and by the format directive ~&, which\n          advances the display position to the beginning of the next line\n          (as if a newline had been typed, or the function terpri had been\n          called) unless the stream is already known to be positioned at\n          the beginning of a line.  Unlike newline, freshline is not a\n          character.\n\n    funbound\n          pronounced 'ef unbaund n. (of a function name) not fbound.\n\n    function\n          n.\n\n          1. an object representing code, which can be called with zero or\n          more arguments, and which produces zero or more values.  2. an\n          object of type function.\n\n    function block name\n          n. (of a function name) The symbol that would be used as the\n          name of an implicit block which surrounds the body of a function\n          having that function name.  If the function name is a symbol,\n          its function block name is the function name itself.  If the\n          function name is a list whose car is setf and whose cadr is a\n          symbol, its function block name is the symbol that is the cadr\n          of the function name.  An implementation which supports\n          additional kinds of function names must specify for each how the\n          corresponding function block name is computed.\n\n    function cell\n          n. Trad. (of a symbol) The place which holds the definition of\n          the global function binding, if any, named by that symbol, and\n          which is accessed by symbol-function.  See cell.\n\n    function designator\n          n.  a designator for a function; that is, an object that denotes\n          a function and that is one of: a symbol (denoting the function\n          named by that symbol in the global environment), or a function\n          (denoting itself).  The consequences are undefined if a symbol\n          is used as a function designator but it does not have a global\n          definition as a function, or it has a global definition as a\n          macro or a special form.  See also extended function designator.\n\n    function form\n          n.  a form that is a list and that has a first element which is\n          the name of a function to be called on arguments which are the\n          result of evaluating subsequent elements of the function form.\n\n    function name\n          n. (in an environment) A symbol or a list (setf symbol) that is\n          the name of a function in that environment.\n\n    functional evaluation\n          n.  the process of extracting a functional value from a function\n          name or a lambda expression.  The evaluator performs functional\n          evaluation implicitly when it encounters a function name or a\n          lambda expression in the car of a compound form, or explicitly\n          when it encounters a function special form.  Neither a use of a\n          symbol as a function designator nor a use of the function\n          symbol-function to extract the functional value of a symbol is\n          considered a functional evaluation.\n\n    functional value\n          n.  1. (of a function name N in an environment E) The value of\n          the binding named N in the function namespace for environment E;\n          that is, the contents of the function cell named N in\n          environment E.  2. (of an fbound symbol S) the contents of the\n          symbol's function cell; that is, the value of the binding named S\n          in the function namespace of the global environment.  (A name\n          that is a macro name in the global environment or is a special\n          operator might or might not be fbound.  But if S is such a name\n          and is fbound, the specific nature of its functional value is\n          implementation-dependent; in particular, it might or might not\n          be a function.)\n\n    further compilation\n          n.  implementation-dependent compilation beyond minimal\n          compilation.  Further compilation is permitted to take place at\n          run time.  \"Block compilation and generation of machine-specific\n          instructions are examples of further compilation.\"\n\nG\n-\n\n    general\n          adj. (of an array) having element type t, and consequently able\n          to have any object as an element.\n\n    generalized boolean\n          n.  an object used as a truth value, where the symbol~nil\n          represents false and all other objects represent true.  See\n          boolean.\n\n    generalized instance\n          n. (of a class) an object the class of which is either that\n          class itself, or some subclass of that class.  (Because of the\n          correspondence between types and classes, the term \"generalized\n          instance of X\" implies \"object of type X\" and in cases where X\n          is a class (or class name) the reverse is also true.  The former\n          terminology emphasizes the view of X as a class while the latter\n          emphasizes the view of X as a type specifier.)\n\n    generalized reference\n          n.  a reference to a location storing an object as if to a\n          variable.  (Such a reference can be either to read or write the\n          location.) See *Note Generalized Reference::.  See also place.\n\n    generalized synonym stream\n          n. (with a synonym stream symbol) 1. (to a stream) a synonym\n          stream to the stream, or a composite stream which has as a target\n          a generalized synonym stream to the stream.  2. (to a symbol) a\n          synonym stream to the symbol, or a composite stream which has as\n          a target a generalized synonym stream to the symbol.\n\n    generic function\n          n.  a function whose behavior depends on the classes or\n          identities of the arguments supplied to it and whose parts\n          include, among other things, a set of methods, a lambda list,\n          and a method combination type.\n\n    generic function lambda list\n          n.  A lambda list that is used to describe data flow into a\n          generic function.  See *Note Generic Function Lambda Lists::.\n\n    gensym\n          n. Trad.  an uninterned symbol.  See the function gensym.\n\n    global declaration\n          n.  a form that makes certain kinds of information about code\n          globally available; that is, a proclaim form or a declaim form.\n\n    global environment\n          n.  that part of an environment that contains bindings with\n          indefinite scope and indefinite extent.\n\n    global variable\n          n.  a dynamic variable or a constant variable.\n\n    glyph\n          n.  a visual representation.  \"Graphic characters have\n          associated glyphs.\"\n\n    go\n          v.  to transfer control to a go point.  See the special operator\n          go.\n\n    go point\n          one of possibly several exit points that are established by\n          tagbody (or other abstractions, such as prog, which are built\n          from tagbody).\n\n    go tag\n          n.  the symbol or integer that, within the lexical scope of a\n          tagbody form, names an exit point established by that tagbody\n          form.\n\n    graphic\n          adj. (of a character) being a \"printing\" or \"displayable\"\n          character that has a standard visual representation as a single\n          glyph, such as A or * or =.  Space is defined to be graphic.  Of\n          the standard characters, all but newline are graphic.  See\n          non-graphic.\n\nH\n-\n\n    handle\n          v. (of a condition being signaled) to perform a non-local\n          transfer of control, terminating the ongoing signaling of the\n          condition.\n\n    handler\n          n.\n\n          a condition handler.\n\n    hash table\n          n.  an object of type hash-table, which provides a mapping from\n          keys to values.\n\n    home package\n          n. (of a symbol) the package, if any, which is contents of the\n          package cell of the symbol, and which dictates how the Lisp\n          printer prints the symbol when it is not accessible in the\n          current package. (Symbols which have nil in their package cell\n          are said to have no home package, and also to be apparently\n          uninterned.)\n\nI\n-\n\n    I/O customization variable\n          n.  one of the stream variables in Figure 26-2, or some other\n          (implementation-defined) stream variable that is defined by the\n          implementation to be an I/O customization variable.\n\n            *debug-io*        *error-io*         query-io*       \n            *standard-input*  *standard-output*  *trace-output*  \n\n            Figure 26-2: Standardized I/O Customization Variables\n\n\n    identical\n          adj.  the same under eq.\n\n    identifier\n          n.  1. a symbol used to identify or to distinguish names.  2. a\n          string used the same way.\n\n    immutable\n          adj.  not subject to change, either because no operator is\n          provided which is capable of effecting such change or because\n          some constraint exists which prohibits the use of an operator\n          that might otherwise be capable of effecting such a change.\n          Except as explicitly indicated otherwise, implementations are\n          not required to detect attempts to modify immutable objects or\n          cells; the consequences of attempting to make such modification\n          are undefined.  \"Numbers are immutable.\"\n\n    implementation\n          n.  a system, mechanism, or body of code that implements the\n          semantics of Common Lisp.\n\n    implementation limit\n          n.  a restriction imposed by an implementation.\n\n    implementation-defined\n          adj.  implementation-dependent, but required by this\n          specification to be defined by each conforming implementation\n          and to be documented by the corresponding implementor.\n\n    implementation-dependent\n          adj.  describing a behavior or aspect of Common Lisp which has\n          been deliberately left unspecified, that might be defined in\n          some conforming implementations but not in others, and whose\n          details may differ between implementations.  A conforming\n          implementation is encouraged (but not required) to document its\n          treatment of each item in this specification which is marked\n          implementation-dependent, although in some cases such\n          documentation might simply identify the item as \"undefined.\"\n\n    implementation-independent\n          adj.  used to identify or emphasize a behavior or aspect of\n          Common Lisp which does not vary between conforming\n          implementations.\n\n    implicit block\n          n.  a block introduced by a macro form rather than by an\n          explicit block form.\n\n    implicit compilation\n          n.  compilation performed during evaluation.\n\n    implicit progn\n          n.  an ordered set of adjacent forms appearing in another form,\n          and defined by their context in that form to be executed as if\n          within a progn.\n\n    implicit tagbody\n          n.  an ordered set of adjacent forms and/or tags appearing in\n          another form, and defined by their context in that form to be\n          executed as if within a tagbody.\n\n    import\n          v.t. (a symbol into a package) to make the symbol be present in\n          the package.\n\n    improper list\n          n.  a list which is not a proper list: a circular list or a\n          dotted list.\n\n    inaccessible\n          adj.  not accessible.\n\n    indefinite extent\n          n.  an extent whose duration is unlimited.  \"Most Common Lisp\n          objects have indefinite extent.\"\n\n    indefinite scope\n          n.  scope that is unlimited.\n\n    indicator\n          n.  a property indicator.\n\n    indirect instance\n          n. (of a class C_1) an object of class C_2, where C_2 is a\n          subclass of C_1.  \"An integer is an indirect instance of the\n          class number.\"\n\n    inherit\n          v.t.  1. to receive or acquire a quality, trait, or\n          characteristic; to gain access to a feature defined elsewhere.\n          2. (a class) to acquire the structure and behavior defined by a\n          superclass.  3. (a package) to make symbols exported by another\n          package accessible by using use-package.\n\n    initial pprint dispatch table\n          n.  the value of *print-pprint-dispatch* at the time the Lisp\n          image is started.\n\n    initial readtable\n          n.  the value of *readtable* at the time the Lisp image is\n          started.\n\n    initialization argument list\n          n.  a property list of initialization argument names and values\n          used in the protocol for initializing and reinitializing\n          instances of classes.  See *Note Object Creation and\n          Initialization::.\n\n    initialization form\n          n.  a form used to supply the initial value for a slot or\n          variable.  \"The initialization form for a slot in a defclass form\n          is introduced by the keyword :initform.\"\n\n    input\n          adj. (of a stream) supporting input operations (i.e., being a\n          \"data source\").  An input stream might also be an output stream,\n          in which case it is sometimes called a bidirectional stream.\n          See the function input-stream-p.\n\n    instance\n          n.  1. a direct instance.  2. a generalized instance.  3. an\n          indirect instance.\n\n    integer\n          n.  an object of type integer, which represents a mathematical\n          integer.\n\n    interactive stream\n          n.  a stream on which it makes sense to perform interactive\n          querying.  See *Note Interactive Streams::.\n\n    intern\n          v.t.  1. (a string in a package) to look up the string in the\n          package, returning either a symbol with that name which was\n          already accessible in the package or a newly created internal\n          symbol of the package with that name.  2. Idiom. generally, to\n          observe a protocol whereby objects which are equivalent or have\n          equivalent names under some predicate defined by the protocol\n          are mapped to a single canonical object.\n\n    internal symbol\n          n. (of a package) a symbol which is accessible in the package,\n          but which is not an external symbol of the package.\n\n    internal time\n          n.  time, represented as an integer number of internal time\n          units.  Absolute internal time is measured as an offset from an\n          arbitrarily chosen, implementation-dependent base.  See *Note\n          Internal Time::.\n\n    internal time unit\n          n.  a unit of time equal to 1/n of a second, for some\n          implementation-defined integer value of n.  See the variable\n          internal-time-units-per-second.\n\n    interned\n          adj. Trad.  1. (of a symbol) accessible_3 in any package.  2.\n          (of a symbol in a specific package) present in that package.\n\n    interpreted function\n          n.  a function that is not a compiled function.  (It is possible\n          for there to be a conforming implementation which has no\n          interpreted functions, but a conforming program must not assume\n          that all functions are compiled functions.)\n\n    interpreted implementation\n          n.  an implementation that uses an execution strategy for\n          interpreted functions that does not involve a one-time semantic\n          analysis pre-pass, and instead uses \"lazy\" (and sometimes\n          repetitious) semantic analysis of forms as they are encountered\n          during execution.\n\n    interval designator\n          n. (of type T) an ordered pair of objects that describe a\n          subtype of T by delimiting an interval on the real number line.\n          See *Note Interval Designators::.\n\n    invalid\n          n., adj.  1. n.  a possible constituent trait of a character\n          which if present signifies that the character cannot ever appear\n          in a token except under the control of a single escape character.\n          For details, see *Note Constituent Characters::.  2. adj. (of a\n          character) being a character that has syntax type constituent in\n          the current readtable and that has the constituent trait\n          invalid_1.  See Figure~2-8.\n\n    iteration form\n          n.  a compound form whose operator is named in Figure 26-3, or a\n          compound form that has an implementation-defined operator and\n          that is defined by the implementation to be an iteration form.\n\n            do              do-external-symbols  dotimes  \n            do*             do-symbols           loop     \n            do-all-symbols  dolist                        \n\n              Figure 26-3: Standardized Iteration Forms  \n\n\n    iteration variable\n          n.  a variable V, the binding for which was created by an\n          explicit use of V in an iteration form.\n\nK\n-\n\n    key\n          n.  an object used for selection during retrieval.  See\n          association list, property list, and hash table.  Also, see\n          *Note Sequence Concepts::.\n\n    keyword\n          n.  1. a symbol the home package of which is the KEYWORD package.\n          2. any symbol, usually but not necessarily in the KEYWORD\n          package, that is used as an identifying marker in keyword-style\n          argument passing.  See lambda.  3. Idiom. a lambda list keyword.\n\n    keyword parameter\n          n.  A parameter for which a corresponding keyword argument is\n          optional.  (There is no such thing as a required keyword\n          argument.) If the argument is not supplied, a default value is\n          used.  See also supplied-p parameter.\n\n    keyword/value pair\n          n.  two successive elements (a keyword and a value,\n          respectively) of a property list.\n\nL\n-\n\n    lambda combination\n          n. Trad.  a lambda form.\n\n    lambda expression\n          n.  a list which can be used in place of a function name in\n          certain contexts to denote a function by directly describing its\n          behavior rather than indirectly by referring to the name of an\n          established function; its name derives from the fact that its\n          first element is the symbol lambda.  See lambda.\n\n    lambda form\n          n.  a form that is a list and that has a first element which is\n          a lambda expression representing a function to be called on\n          arguments which are the result of evaluating subsequent elements\n          of the lambda form.\n\n    lambda list\n          n.  a list that specifies a set of parameters (sometimes called\n          lambda variables) and a protocol for receiving values for those\n          parameters; that is, an ordinary lambda list, an extended lambda\n          list, or a modified lambda list.\n\n    lambda list keyword\n          n.  a symbol whose name begins with ampersand and that is\n          specially recognized in a lambda list.  Note that no\n          standardized lambda list keyword is in the KEYWORD package.\n\n    lambda variable\n          n.  a formal parameter, used to emphasize the variable's\n          relation to the lambda list that established it.\n\n    leaf\n          n.  1. an atom in a tree_1.  2. a terminal node of a tree_2.\n\n    leap seconds\n          n.  additional one-second intervals of time that are\n          occasionally inserted into the true calendar by official\n          timekeepers as a correction similar to \"leap years.\"  All Common\n          Lisp time representations ignore leap seconds; every day is\n          assumed to be exactly 86400 seconds long.\n\n    left-parenthesis\n          n.  the standard character \"(\", that is variously called ``left\n          parenthesis\" or \"open parenthesis\" See Figure~2-5.\n\n    length\n          n. (of a sequence) the number of elements in the sequence.\n          (Note that if the sequence is a vector with a fill pointer, its\n          length is the same as the fill pointer even though the total\n          allocated size of the vector might be larger.)\n\n    lexical binding\n          n.  a binding in a lexical environment.\n\n    lexical closure\n          n.  a function that, when invoked on arguments, executes the\n          body of a lambda expression in the lexical environment that was\n          captured at the time of the creation of the lexical closure,\n          augmented by bindings of the function's parameters to the\n          corresponding arguments.\n\n    lexical environment\n          n.  that part of the environment that contains bindings whose\n          names have lexical scope. A lexical environment contains, among\n          other things: ordinary bindings of variable names to values,\n          lexically established bindings of function names to functions,\n          macros, symbol macros, blocks, tags, and local declarations (see\n          declare).\n\n    lexical scope\n          n.  scope that is limited to a spatial or textual region within\n          the establishing form.  \"The names of parameters to a function\n          normally are lexically scoped.\"\n\n    lexical variable\n          n.  a variable the binding for which is in the lexical\n          environment.\n\n    Lisp image\n          n.  a running instantiation of a Common Lisp implementation.  A\n          Lisp image is characterized by a single address space in which\n          any object can directly refer to any another in conformance with\n          this specification, and by a single, common, global environment.\n          (External operating systems sometimes call this a ``core image,\"\n          ``fork,\" ``incarnation,\" ``job,\" or \"process.\"  Note however,\n          that the issue of a \"process\" in such an operating system is\n          technically orthogonal to the issue of a Lisp image being\n          defined here.  Depending on the operating system, a single\n          \"process\" might have multiple Lisp images, and multiple\n          \"processes\" might reside in a single Lisp image.  Hence, it is\n          the idea of a fully shared address space for direct reference\n          among all objects which is the defining characteristic.  Note,\n          too, that two \"processes\" which have a communication area that\n          permits the sharing of some but not all objects are considered\n          to be distinct Lisp images.)\n\n    Lisp printer\n          n. Trad.  the procedure that prints the character representation\n          of an object onto a stream. (This procedure is implemented by\n          the function write.)\n\n    Lisp read-eval-print loop\n          n. Trad.  an endless loop that reads_2 a form, evaluates it, and\n          prints (i.e., writes_2) the results.  In many implementations,\n          the default mode of interaction with Common Lisp during program\n          development is through such a loop.\n\n    Lisp reader\n          n. Trad.  the procedure that parses character representations of\n          objects from a stream, producing objects.  (This procedure is\n          implemented by the function read.)\n\n    list\n          n.  1. a chain of conses in which the car of each cons is an\n          element of the list, and the cdr of each cons is either the next\n          link in the chain or a terminating atom.  See also proper list,\n          dotted list, or circular list.  2. the type that is the union of\n          null and cons.\n\n    list designator\n          n.  a designator for a list of objects; that is, an object that\n          denotes a list and that is one of: a non-nil atom (denoting a\n          singleton list whose element is that non-nil atom) or a proper\n          list (denoting itself).\n\n    list structure\n          n. (of a list) the set of conses that make up the list.  Note\n          that while the car_{1b} component of each such cons is part of\n          the list structure, the objects that are elements of the list\n          (i.e., the objects that are the cars_2 of each cons in the list)\n          are not themselves part of its list structure, even if they are\n          conses, except in the (circular_2) case where the list actually\n          contains one of its tails as an element.  (The list structure of\n          a list is sometimes redundantly referred to as its \"top-level\n          list structure\" in order to emphasize that any conses that are\n          elements of the list are not involved.)\n\n    literal\n          adj. (of an object) referenced directly in a program rather than\n          being computed by the program; that is, appearing as data in a\n          quote form, or, if the object is a self-evaluating object,\n          appearing as unquoted data.  \"In the form (cons \"one\" '(\"two\")),\n          the expressions \"one\", (\"two\"), and \"two\" are literal objects.\"\n\n    load\n          v.t. (a file) to cause the code contained in the file to be\n          executed.  See the function load.\n\n    load time\n          n.  the duration of time that the loader is loading compiled\n          code.\n\n    load time value\n          n.  an object referred to in code by a load-time-value form.\n          The value of such a form is some specific object which can only\n          be computed in the run-time environment.  In the case of file\n          compilation, the value is computed once as part of the process\n          of loading the compiled file, and not again.  See the special\n          operator load-time-value.\n\n    loader\n          n.  a facility that is part of Lisp and that loads a file.  See\n          the function load.\n\n    local declaration\n          n.  an expression which may appear only in specially designated\n          positions of certain forms, and which provides information about\n          the code contained within the containing form; that is, a\n          declare expression.\n\n    local precedence order\n          n. (of a class) a list consisting of the class followed by its\n          direct superclasses in the order mentioned in the defining form\n          for the class.\n\n    local slot\n          n. (of a class) a slot accessible in only one instance, namely\n          the instance in which the slot is allocated.\n\n    logical block\n          n.  a conceptual grouping of related output used by the pretty\n          printer.  See the macro pprint-logical-block and *Note Dynamic\n          Control of the Arrangement of Output::.\n\n    logical host\n          n.  an object of implementation-dependent nature that is used as\n          the representation of a \"host\" in a logical pathname, and that\n          has an associated set of translation rules for converting\n          logical pathnames belonging to that host into physical pathnames.\n          See *Note Logical Pathnames::.\n\n    logical host designator\n          n.  a designator for a logical host; that is, an object that\n          denotes a logical host and that is one of: a string (denoting\n          the logical host that it names), or a logical host (denoting\n          itself).  (Note that because the representation of a logical host\n          is implementation-dependent, it is possible that an\n          implementation might represent a logical host as the string that\n          names it.)\n\n    logical pathname\n          n.  an object of type logical-pathname.\n\n    long float\n          n.  an object of type long-float.\n\n    loop keyword\n          n. Trad.  a symbol that is a specially recognized part of the\n          syntax of an extended loop form.  Such symbols are recognized by\n          their name (using string=), not by their identity; as such, they\n          may be in any package.  A loop keyword is not a keyword.\n\n    lowercase\n          adj. (of a character) being among standard characters\n          corresponding to the small letters a through z, or being some\n          other implementation-defined character that is defined by the\n          implementation to be lowercase.  See *Note Characters With\n          Case::.\n\nM\n-\n\n    macro\n          n.  1. a macro form 2. a macro function.  3. a macro name.\n\n    macro character\n          n.  a character which, when encountered by the Lisp reader in\n          its main dispatch loop, introduces a reader macro_1.  (Macro\n          characters have nothing to do with macros.)\n\n    macro expansion\n          n.  1. the process of translating a macro form into another form.\n          2. the form resulting from this process.\n\n    macro form\n          n.  a form that stands for another form (e.g., for the purposes\n          of abstraction, information hiding, or syntactic convenience);\n          that is, either a compound form whose first element is a macro\n          name, or     a form that is a symbol that names a symbol macro.\n\n    macro function\n          n.  a function of two arguments, a form and an environment, that\n          implements macro expansion by producing a form to be evaluated\n          in place of the original argument form.\n\n    macro lambda list\n          n.  an extended lambda list used in forms that establish macro\n          definitions, such as defmacro and macrolet.  See *Note Macro\n          Lambda Lists::.\n\n    macro name\n          n.  a name for which macro-function returns true and which when\n          used as the first element of a compound form identifies that\n          form as a macro form.\n\n    macroexpand hook\n          n.  the function that is the value of *macroexpand-hook*.\n\n    mapping\n          n.  1. a type of iteration in which a function is successively\n          applied to objects taken from corresponding entries in\n          collections such as sequences or hash tables.  2. Math. a\n          relation between two sets in which each element of the first set\n          (the \"domain\") is assigned one element of the second set (the\n          \"range\").\n\n    metaclass\n          n.  1. a class whose instances are classes.  2. (of an object)\n          the class of the class of the object.\n\n    Metaobject Protocol\n          n.  one of many possible descriptions of how a conforming\n          implementation might implement various aspects of the object\n          system.  This description is beyond the scope of this document,\n          and no conforming implementation is required to adhere to it\n          except as noted explicitly in this specification.  Nevertheless,\n          its existence helps to establish normative practice, and\n          implementors with no reason to diverge from it are encouraged to\n          consider making their implementation adhere to it where possible.\n          It is described in detail in The Art of the Metaobject Protocol.\n\n    method\n          n.  an object that is part of a generic function and which\n          provides information about how that generic function should\n          behave when its arguments are objects of certain classes or with\n          certain identities.\n\n    method combination\n          n.  1. generally, the composition of a set of methods to produce\n          an effective method for a generic function.  2. an object of\n          type method-combination, which represents the details of how the\n          method combination_1 for one or more specific generic functions\n          is to be performed.\n\n    method-defining form\n          n.  a form that defines a method for a generic function, whether\n          explicitly or implicitly.  See *Note Introduction to Generic\n          Functions::.\n\n    method-defining operator\n          n.  an operator corresponding to a method-defining form.  See\n          Figure~7-1.\n\n    minimal compilation\n          n.  actions the compiler must take at compile time.  See *Note\n          Compilation Semantics::.\n\n    modified lambda list\n          n.  a list resembling an ordinary lambda list in form and\n          purpose, but which deviates in syntax or functionality from the\n          definition of an ordinary lambda list.  See ordinary lambda list.\n          \"deftype uses a modified lambda list.\"\n\n    most recent\n          adj.  innermost; that is, having been established (and not yet\n          disestablished) more recently than any other of its kind.\n\n    multiple escape\n          n., adj.  1. n. the syntax type of a character that is used in\n          pairs  to indicate that the enclosed characters are to be\n          treated as alphabetic_2 characters with their case preserved.\n          For details, see *Note Multiple Escape Characters::.  2. adj.\n          (of a character) having the multiple escape syntax type.  3. n.\n          a multiple escape_2 character.  (In the standard readtable,\n          vertical-bar is a multiple escape character.)\n\n    multiple values\n          n.  1. more than one value.  \"The function truncate returns\n          multiple values.\" 2. a variable number of values, possibly\n          including zero or one.  \"The function values returns multiple\n          values.\" 3. a fixed number of values other than one.  \"The macro\n          multiple-value-bind is among the few operators in Common Lisp\n          which can detect and manipulate multiple values.\"\n\nN\n-\n\n    name\n          n., v.t.  1. n. an identifier by which an object, a binding, or\n          an exit point is referred to by association using a binding.  2.\n          v.t. to give a name to.  3. n. (of an object having a name\n          component) the object which is that component.  \"The string\n          which is a symbol's name is returned by symbol-name.\" 4. n. (of\n          a pathname) a. the name component, returned by pathname-name.\n          b. the entire namestring, returned by namestring.  5. n. (of a\n          character) a string that names the character and that has length\n          greater than one.  (All non-graphic characters are required to\n          have names unless they have some implementation-defined attribute\n          which is not null.  Whether or not other characters have names\n          is implementation-dependent.)\n\n    named constant\n          n.  a variable that is defined by Common Lisp, by the\n          implementation, or by user code (see the macro defconstant) to\n          always yield the same value when evaluated.  \"The value of a\n          named constant may not be changed by assignment or by binding.\"\n\n    namespace\n          n.  1. bindings whose denotations are restricted to a particular\n          kind.  \"The bindings of names to tags is the tag namespace.\" 2.\n          any mapping whose domain is a set of names.  \"A package defines\n          a namespace.\"\n\n    namestring\n          n.  a string that represents a filename using either the\n          standardized notation for naming logical pathnames described in\n          *Note Syntax of Logical Pathname Namestrings::, or some\n          implementation-defined notation for naming a physical pathname.\n\n    newline\n          n.  the standard character <Newline>, notated for the Lisp\n          reader as #\\Newline.\n\n    next method\n          n.  the next method to be invoked with respect to a given method\n          for a particular set of arguments or argument classes.  See\n          *Note Applying method combination to the sorted list of\n          applicable methods::.\n\n    nickname\n          n. (of a package) one of possibly several names that can be used\n          to refer to the package but that is not the primary name of the\n          package.\n\n    nil\n          n.  the object that is at once the symbol named \"NIL\" in the\n          COMMON-LISP package, the empty list, the boolean (or generalized\n          boolean) representing false, and the name of the empty type.\n\n    non-atomic\n          adj.  being other than an atom; i.e., being a cons.\n\n    non-constant variable\n          n.  a variable that is not a constant variable.\n\n    non-correctable\n          adj. (of an error) not intentionally correctable.  (Because of\n          the dynamic nature of restarts, it is neither possible nor\n          generally useful to completely prohibit an error from being\n          correctable.  This term is used in order to express an intent\n          that no special effort should be made by code signaling an error\n          to make that error correctable; however, there is no actual\n          requirement on conforming programs or conforming implementations\n          imposed by this term.)\n\n    non-empty\n          adj.  having at least one element.\n\n    non-generic function\n          n.  a function that is not a generic function.\n\n    non-graphic\n          adj. (of a character) not graphic.  See *Note Graphic\n          Characters::.\n\n    non-list\n          n., adj.  other than a list; i.e., a non-nil atom.\n\n    non-local exit\n          n.  a transfer of control (and sometimes values) to an exit\n          point for reasons other than a normal return.  \"The operators\n          go, throw, and return-from cause a non-local exit.\"\n\n    non-nil\n          n., adj.  not nil.  Technically, any object which is not nil can\n          be referred to as true, but that would tend to imply a unique\n          view of the object as a generalized boolean.  Referring to such\n          an object as non-nil avoids this implication.\n\n    non-null lexical environment\n          n.  a lexical environment that has additional information not\n          present in the global environment, such as one or more bindings.\n\n    non-simple\n          adj.  not simple.\n\n    non-terminating\n          adj. (of a macro character) being such that it is treated as a\n          constituent character when it appears in the middle of an\n          extended token.  See *Note Reader Algorithm::.\n\n    non-top-level form\n          n.  a form that, by virtue of its position as a subform of\n          another form, is not a top level form.  See *Note Processing of\n          Top Level Forms::.\n\n    normal return\n          n.  the natural transfer of control and values which occurs after\n          the complete execution of a form.\n\n    normalized\n          adj., ANSI, IEEE (of a float) conforming to the description of\n          \"normalized\" as described by IEEE Standard for Binary\n          Floating-Point Arithmetic.  See denormalized.\n\n    null\n          adj., n.  1. adj.  a. (of a list) having no elements: empty.\n          See empty list.  b. (of a string) having a length of zero.  (It\n          is common, both within this document and in observed spoken\n          behavior, to refer to an empty string by an apparent definite\n          reference, as in \"the null string\" even though no attempt is\n          made to intern_2 null strings.  The phrase ``a null string\" is\n          technically more correct, but is generally considered awkward by\n          most Lisp programmers.  As such, the phrase \"the null string\"\n          should be treated as an indefinite reference in all cases except\n          for anaphoric references.) c. (of an implementation-defined\n          attribute of a character) An object to which the value of that\n          attribute defaults if no specific value was requested.  2. n. an\n          object of type null (the only such object being nil).\n\n    null lexical environment\n          n.  the lexical environment which has no bindings.\n\n    number\n          n.  an object of type number.\n\n    numeric\n          adj. (of a character) being one of the standard characters 0\n          through 9, or being some other graphic character defined by the\n          implementation to be numeric.\n\nO\n-\n\n    object\n          n.  1. any Lisp datum.  \"The function cons creates an object\n          which refers to two other objects.\" 2. (immediately following\n          the name of a type) an object which is of that type, used to\n          emphasize that the object is not just a name for an object of\n          that type but really an element of the type in cases where\n          objects of that type (such as function or class) are commonly\n          referred to by name.  \"The function symbol-function takes a\n          function name and returns a function object.\"\n\n    object-traversing\n          adj.  operating in succession on components of an object.  \"The\n          operators mapcar, maphash, with-package-iterator and count\n          perform object-traversing operations.\"\n\n    open\n          adj., v.t. (a file) 1. v.t. to create and return a stream to the\n          file.  2. adj. (of a stream) having been opened_1, but not yet\n          closed.\n\n    operator\n          n.  1. a function, macro, or special operator.  2. a symbol that\n          names such a function, macro, or special operator.  3. (in a\n          function special form) the cadr of the function special form,\n          which might be either an operator_2 or a lambda expression.  4.\n          (of a compound form) the car of the compound form, which might be\n          either an operator_2 or a lambda expression, and which is never\n          (setf symbol).\n\n    optimize quality\n          n.  one of several aspects of a program that might be\n          optimizable by certain compilers.  Since optimizing one such\n          quality might conflict with optimizing another, relative\n          priorities for qualities can be established in an optimize\n          declaration.  The standardized optimize qualities are\n          compilation-speed (speed of the compilation process),\n\n          debug (ease of debugging),\n\n          safety (run-time error checking), space (both code size and\n          run-time space), and speed (of the object code).\n          Implementations may define additional optimize qualities.\n\n    optional parameter\n          n.  A parameter for which a corresponding positional argument is\n          optional.  If the argument is not supplied, a default value is\n          used.  See also supplied-p parameter.\n\n    ordinary function\n          n.  a function that is not a generic function.\n\n    ordinary lambda list\n          n.  the kind of lambda list used by lambda.  See modified lambda\n          list and extended lambda list.  \"defun uses an ordinary lambda\n          list.\"\n\n    otherwise inaccessible part\n          n. (of an object, O_1) an object, O_2, which would be made\n          inaccessible if O_1 were made inaccessible.  (Every object is an\n          otherwise inaccessible part of itself.)\n\n    output\n          adj. (of a stream) supporting output operations (i.e., being a\n          \"data sink\").  An output stream might also be an input stream,\n          in which case it is sometimes called a bidirectional stream.\n          See the function output-stream-p.\n\nP\n-\n\n    package\n          n.  an object of type package.\n\n    package cell\n          n. Trad. (of a symbol) The place in a symbol that holds one of\n          possibly several packages in which the symbol is interned,\n          called the home package, or which holds nil if no such package\n          exists or is known.  See the function symbol-package.\n\n    package designator\n          n.  a designator for a package; that is, an object that denotes\n          a package and that is one of: a string designator (denoting the\n          package that has the string that it designates as its name or as\n          one of its nicknames), or a package (denoting itself).\n\n    package marker\n          n.  a character which is used in the textual notation for a\n          symbol to separate the package name from the symbol name, and\n          which is colon in the standard readtable.  See *Note Character\n          Syntax::.\n\n    package prefix\n          n.  a notation preceding the name of a symbol in text that is\n          processed by the Lisp reader, which uses a package name followed\n          by one or more package markers, and which indicates that the\n          symbol is looked up in the indicated package.\n\n    package registry\n          n.  A mapping of names to package objects.  It is possible for\n          there to be a package object which is not in this mapping; such\n          a package is called an unregistered package.  Operators such as\n          find-package consult this mapping in order to find a package\n          from its name.  Operators such as do-all-symbols,\n          find-all-symbols, and list-all-packages operate only on packages\n          that exist in the package registry.\n\n    pairwise\n          adv. (of an adjective on a set) applying individually to all\n          possible pairings of elements of the set.  \"The types A, B, and\n          C are pairwise disjoint if A and B are disjoint, B and C are\n          disjoint, and A and C are disjoint.\"\n\n    parallel\n          adj. Trad. (of binding or assignment) done in the style of\n          psetq, let, or do; that is, first evaluating all of the forms\n          that produce values, and only then assigning or binding the\n          variables (or places).  Note that this does not imply\n          traditional computational \"parallelism\" since the forms that\n          produce values are evaluated sequentially.  See sequential.\n\n    parameter\n          n.  1. (of a function) a variable in the definition of a function\n          which takes on the value of a corresponding argument (or of a\n          list of corresponding arguments) to that function when it is\n          called, or which in some cases is given a default value because\n          there is no corresponding argument.  2. (of a format directive)\n          an object received as data flow by a format directive due to a\n          prefix notation within the format string at the format\n          directive's point of use.  See *Note Formatted Output::.  \"In\n          \"~3,'0D\", the number 3 and the character #\\0 are parameters to\n          the ~D format directive.\"\n\n    parameter specializer\n          n.  1. (of a method) an expression which constrains the method\n          to be applicable only to argument sequences in which the\n          corresponding argument matches the parameter specializer.  2. a\n          class, or a list (eql object).\n\n    parameter specializer name\n          n.  1. (of a method definition) an expression used in code to\n          name a parameter specializer.  See *Note Introduction to\n          Methods::.  2. a class,\n\n          a symbol naming a class,\n\n          or a list (eql form).\n\n    pathname\n          n.  an object of type pathname, which is a structured\n          representation of the name of a file.  A pathname has six\n          components: a \"host,\" a \"device,\" a \"directory,\" a \"name,\" a\n          \"type,\" and a \"version.\"\n\n    pathname designator\n          n.  a designator for a pathname; that is, an object that denotes\n          a pathname and that is one of:\n\n          a pathname namestring\n\n          (denoting the corresponding pathname),\n\n          a stream associated with a file (denoting the pathname used to\n          open the file; this may be, but is not required to be, the\n          actual name of the file), or a pathname (denoting itself).  See\n          *Note File Operations on Open and Closed Streams::.\n\n    physical pathname\n          n.  a pathname that is not a logical pathname.\n\n          [Editorial Note by KMP: Still need to reconcile some confusion\n          in the uses of \"generalized reference\" and \"place.\" I think one\n          was supposed to refer to the abstract concept, and the other to\n          an object (a form), but the usages have become blurred.]\n\n    place\n          n.  1. a form which is suitable for use as a generalized\n          reference.  2. the conceptual location referred to by such a\n          place_1.\n\n    plist\n          pronounced 'p\\=e ,list  n.  a property list.\n\n    portable\n          adj. (of code) required to produce equivalent results and\n          observable side effects in all conforming implementations.\n\n    potential copy\n          n. (of an object O_1 subject to constriants) an object O_2 that\n          if the specified constraints are satisfied by O_1 without any\n          modification might or might not be identical to O_1, or else\n          that must be a fresh object that resembles a copy of O_1 except\n          that it has been modified as necessary to satisfy the\n          constraints.\n\n    potential number\n          n.  A textual notation that might be parsed by the Lisp reader\n          in some conforming implementation as a number but is not\n          required to be parsed as a number.  No object is a potential\n          number--either an object is a number or it is not.  See *Note\n          Potential Numbers as Tokens::.\n\n    pprint dispatch table\n          n.  an object that can be the value of *print-pprint-dispatch*\n          and hence can control how objects are printed when\n          *print-pretty* is true.  See *Note Pretty Print Dispatch\n          Tables::.\n\n    predicate\n          n.  a function that returns a generalized boolean as its first\n          value.\n\n    present\n          n.  1. (of a feature in a Lisp image) a state of being that is\n          in effect if and only if the symbol naming the feature is an\n          element of the features list.  2. (of a symbol in a package)\n          being accessible in that package directly, rather than being\n          inherited from another package.\n\n    pretty print\n          v.t. (an object) to invoke the pretty printer on the object.\n\n    pretty printer\n          n.  the procedure that prints the character representation of an\n          object onto a stream when the value of *print-pretty* is true,\n          and that uses layout techniques (e.g., indentation) that tend to\n          highlight the structure of the object in a way that makes it\n          easier for human readers to parse visually.  See the variable\n          *print-pprint-dispatch* and *Note The Lisp Pretty Printer::.\n\n    pretty printing stream\n          n.  a stream that does pretty printing.  Such streams are\n          created by the function pprint-logical-block as a link between\n          the output stream and the logical block.\n\n    primary method\n          n.  a member of one of two sets of methods (the set of auxiliary\n          methods is the other) that form an exhaustive partition of the\n          set of methods on the method's generic function.  How these sets\n          are determined is dependent on the method combination type; see\n          *Note Introduction to Methods::.\n\n    primary value\n          n. (of values resulting from the evaluation of a form) the first\n          value, if any, or else nil if there are no values.  \"The primary\n          value returned by truncate is an integer quotient, truncated\n          toward zero.\"\n\n    principal\n          adj. (of a value returned by a Common Lisp function that\n          implements a mathematically irrational or transcendental\n          function defined in the complex domain) of possibly many\n          (sometimes an infinite number of) correct values for the\n          mathematical function, being the particular value which the\n          corresponding Common Lisp function has been defined to return.\n\n    print name\n          n. Trad. (usually of a symbol) a name_3.\n\n    printer control variable\n          n.  a variable whose specific purpose is to control some action\n          of the Lisp printer; that is, one of the variables in\n          Figure~22-1, or else some implementation-defined variable which\n          is defined by the implementation to be a printer control\n          variable.\n\n    printer escaping\n          n.  The combined state of the printer control variables\n          *print-escape* and *print-readably*.  If the value of either\n          *print-readably* or *print-escape* is true, then printer escaping\n          is \"enabled\"; otherwise (if the values of both *print-readably*\n          and *print-escape* are false), then printer escaping is\n          \"disabled\".\n\n    printing\n          adj. (of a character) being a graphic character other than space.\n\n    process\n          v.t. (a form by the compiler) to perform minimal compilation,\n          determining the time of evaluation for a form, and possibly\n          evaluating that form (if required).\n\n    processor\n          n., ANSI an implementation.\n\n    proclaim\n          v.t. (a proclamation) to establish that proclamation.\n\n    proclamation\n          n.  a global declaration.\n\n    prog tag\n          n. Trad.  a go tag.\n\n    program\n          n. Trad.  Common Lisp code.\n\n    programmer\n          n.  an active entity, typically a human, that writes a program,\n          and that might or might not also be a user of the program.\n\n    programmer code\n          n.  code that is supplied by the programmer; that is, code that\n          is not system code.\n\n    proper list\n          n.  A list terminated by the empty list.  (The empty list is a\n          proper list.) See improper list.\n\n    proper name\n          n. (of a class) a symbol that names the class whose name is that\n          symbol.  See the functions class-name and find-class.\n\n    proper sequence\n          n.  a sequence which is not an improper list; that is, a vector\n          or a proper list.\n\n    proper subtype\n          n. (of a type) a subtype of the type which is not the same type\n          as the type (i.e., its elements are a \"proper subset\" of the\n          type).\n\n    property\n          n. (of a property list) 1. a conceptual pairing of a property\n          indicator and its associated property value on a property list.\n          2. a property value.\n\n    property indicator\n          n. (of a property list) the name part of a property, used as a\n          key when looking up a property value on a property list.\n\n    property list\n          n.\n\n          1.  a list containing an even number of elements that are\n          alternating names  (sometimes called indicators or keys) and\n          values (sometimes called properties).  When there is more than\n          one name and value pair with the identical name in a property\n          list, the first such pair determines the property.\n\n          2. (of a symbol) the component of the symbol containing a\n          property list.\n\n    property value\n          n. (of a property indicator on a property list) the object\n          associated with the property indicator on the property list.\n\n    purports to conform\n          v.  makes a good-faith claim of conformance.  This term\n          expresses intention to conform, regardless of whether the goal\n          of that intention is realized in practice.  For example,\n          language implementations have been known to have bugs, and while\n          an implementation of this specification with bugs might not be a\n          conforming implementation, it can still purport to conform.\n          This is an important distinction in certain specific cases;\n          e.g., see the variable *features*.\n\nQ\n-\n\n    qualified method\n          n.  a method that has one or more qualifiers.\n\n    qualifier\n          n. (of a method for a generic function) one of possibly several\n          objects used to annotate the method in a way that identifies its\n          role in the method combination.  The method combination type\n          determines how many qualifiers are permitted for each method,\n          which qualifiers are permitted, and the semantics of those\n          qualifiers.\n\n    query I/O\n          n.  the bidirectional stream that is the value of the variable\n          *query-io*.\n\n    quoted object\n          n.  an object which is the second element of a quote form.\n\nR\n-\n\n    radix\n          n.  an integer between 2 and 36, inclusive, which can be used to\n          designate a base with respect to which certain kinds of numeric\n          input or output are performed.  (There are n valid digit\n          characters for any given radix n, and those digits are the first\n          n digits in the sequence 0, 1, ..., 9, A, B, ..., Z, which have\n          the weights 0, 1, ..., 9, 10, 11, ..., 35, respectively.  Case\n          is not significant in parsing numbers of radix greater than 10,\n          so \"9b8a\" and \"9B8A\" denote the same radix 16 number.)\n\n    random state\n          n.  an object of type random-state.\n\n    rank\n          n.  a non-negative integer indicating the number of dimensions\n          of an array.\n\n    ratio\n          n.  an object of type ratio.\n\n    ratio marker\n          n.  a character which is used in the textual notation for a ratio\n          to separate the numerator from the denominator, and which is\n          slash in the standard readtable.  See *Note Character Syntax::.\n\n    rational\n          n.  an object of type rational.\n\n    read\n          v.t.\n\n          1. (a binding or slot or component) to obtain the value of the\n          binding or slot.\n\n          2. (an object from a stream) to parse an object from its\n          representation on the stream.\n\n    readably\n          adv. (of a manner of printing an object O_1) in such a way as to\n          permit the Lisp Reader to later parse the printed output into an\n          object O_2 that is similar to O_1.\n\n    reader\n          n.  1. a function that reads_1 a variable or slot.  2. the Lisp\n          reader.\n\n    reader macro\n          n.  1. a textual notation introduced by dispatch on one or two\n          characters that defines special-purpose syntax for use by the\n          Lisp reader, and that is implemented by a reader macro function.\n          See *Note Reader Algorithm::.  2. the character or characters\n          that introduce a reader macro_1; that is, a macro character or\n          the conceptual pairing of a dispatching macro character and the\n          character that follows it.  (A reader macro is not a kind of\n          macro.)\n\n    reader macro function\n          n.  a function designator that denotes a function that\n          implements a reader macro_2.  See the functions\n          set-macro-character and set-dispatch-macro-character.\n\n    readtable\n          n.  an object of type readtable.\n\n    readtable case\n          n.  an attribute of a readtable whose value is a case\n          sensitivity mode, and that selects the manner in which characters\n          in a symbol's name are to be treated by the Lisp reader and the\n          Lisp printer.  See *Note Effect of Readtable Case on the Lisp\n          Reader:: and *Note Effect of Readtable Case on the Lisp\n          Printer::.\n\n    readtable designator\n          n.  a designator for a readtable; that is, an object that\n          denotes a readtable and that is one of: nil (denoting the\n          standard readtable), or a readtable (denoting itself).\n\n    recognizable subtype\n          n. (of a type) a subtype of the type which can be reliably\n          detected to be such by the implementation.  See the function\n          subtypep.\n\n    reference\n          n., v.t.  1. n. an act or occurrence of referring to an object,\n          a binding, an exit point, a tag, or an environment.  2. v.t. to\n          refer to an object, a binding, an exit point, a tag, or an\n          environment, usually by name.\n\n    registered package\n          n.  a package object that is installed in the package registry.\n          (Every registered package has a name that is a string, as well\n          as zero or more string nicknames.  All packages that are\n          initially specified by Common Lisp or created by make-package or\n          defpackage are registered packages.  Registered packages can be\n          turned into unregistered packages by delete-package.)\n\n    relative\n          adj.  1. (of a time) representing an offset from an absolute time\n          in the units appropriate to that time.  For example, a relative\n          internal time is the difference between two absolute internal\n          times, and is measured in internal time units.  2. (of a\n          pathname) representing a position in a directory hierarchy by\n          motion from a position other than the root, which might\n          therefore vary.  \"The notation #P\"../foo.text\" denotes a relative\n          pathname if the host file system is Unix.\" See absolute.\n\n    repertoire\n          n., ISO a subtype of character.  See *Note Character\n          Repertoires::.\n\n    report\n          n. (of a condition) to call the function print-object on the\n          condition in an environment where the value of *print-escape* is\n          false.\n\n    report message\n          n.  the text that is output by a condition reporter.\n\n    required parameter\n          n.  A parameter for which a corresponding positional argument\n          must be supplied when calling the function.\n\n    rest list\n          n. (of a function having a rest parameter) The list to which the\n          rest parameter is bound on some particular call to the function.\n\n    rest parameter\n          n.  A parameter which was introduced by &rest.\n\n    restart\n          n.  an object of type restart.\n\n    restart designator\n          n.  a designator for a restart; that is, an object that denotes\n          a restart and that is one of: a non-nil symbol (denoting the\n          most recently established active restart whose name is that\n          symbol), or a restart (denoting itself).\n\n    restart function\n          n.  a function that invokes a restart, as if by invoke-restart.\n          The primary purpose of a restart function is to provide an\n          alternate interface. By convention, a restart function usually\n          has the same name as the restart which it invokes. Figure 26-4\n          shows a list of the standardized restart functions.\n\n            abort     muffle-warning  use-value  \n            continue  store-value                \n\n            Figure 26-4: Standardized Restart Functions\n\n\n    return\n          v.t. (of values) 1. (from a block) to transfer control and\n          values from the block; that is, to cause the block to yield the\n          values immediately without doing any further evaluation of the\n          forms in its body.  2. (from a form) to yield the values.\n\n    return value\n          n. Trad.  a value_1\n\n    right-parenthesis\n          n.  the standard character \")\", that is variously called ``right\n          parenthesis\" or \"close parenthesis\" See Figure~2-5.\n\n    run time\n          n.  1. load time 2. execution time\n\n    run-time compiler\n          n.  refers to the compile function or to implicit compilation,\n          for which the compilation and run-time environments are\n          maintained in the same Lisp image.\n\n    run-time definition\n          n.  a definition in the run-time environment.\n\n    run-time environment\n          n.  the environment in which a program is executed.\n\nS\n-\n\n    safe\n          adj.  1. (of code) processed in a lexical environment where the\n          the highest safety level (3) was in effect.  See optimize.  2.\n          (of a call) a safe call.\n\n    safe call\n          n.  a call in which the call, the function being called, and the\n          point of functional evaluation are all safe_1 code.  For more\n          detailed information, see *Note Safe and Unsafe Calls::.\n\n    same\n          adj.  1. (of objects under a specified predicate)\n          indistinguishable by that predicate.  \"The symbol car, the\n          string \"car\", and the string \"CAR\" are the same under\n          string-equal\".  2. (of objects if no predicate is implied by\n          context) indistinguishable by eql.  Note that eq might be\n          capable of distinguishing some numbers and characters which eql\n          cannot distinguish, but the nature of such, if any, is\n          implementation-dependent.  Since eq is used only rarely in this\n          specification, eql is the default predicate when none is\n          mentioned explicitly.  \"The conses returned by two successive\n          calls to cons are never the same.\" 3. (of types) having the same\n          set of elements; that is, each type is a subtype of the others.\n          \"The types specified by (integer 0 1), (unsigned-byte 1), and\n          bit are the same.\"\n\n    satisfy the test\n          v.  (of an object being considered by a sequence function) 1.\n          (for a one argument test) to be in a state such that the\n          function which is the predicate argument to the sequence function\n          returns true when given a single argument that is the result of\n          calling the sequence function's key argument on the object being\n          considered.  See *Note Satisfying a One-Argument Test::.  2.\n          (for a two argument test) to be in a state such that the\n          two-place predicate which is the sequence function's test\n          argument returns true when given a first argument that is the\n          object being considered, and when given a second argument that\n          is the result of calling the sequence function's key argument on\n          an element of the sequence function's sequence argument which is\n          being tested for equality; or to be in a state such that the\n          test-not function returns false given the same arguments.  See\n          *Note Satisfying a Two-Argument Test::.\n\n    scope\n          n.  the structural or textual region of code in which references\n          to an object, a binding, an exit point, a tag, or an environment\n          (usually by name) can occur.\n\n    script\n          n. ISO one of possibly several sets that form an exhaustive\n          partition of the type character.  See *Note Character Scripts::.\n\n    secondary value\n          n. (of values resulting from the evaluation of a form) the\n          second value, if any, or else nil if there are fewer than two\n          values.  \"The secondary value returned by truncate is a\n          remainder.\"\n\n    section\n          n.  a partitioning of output by a conditional newline on a\n          pretty printing stream.  See *Note Dynamic Control of the\n          Arrangement of Output::.\n\n    self-evaluating object\n          n.  an object that is neither a symbol nor a cons.  If a\n          self-evaluating object is evaluated, it yields itself as its\n          only value.  \"Strings are self-evaluating objects.\"\n\n    semi-standard\n          adj. (of a language feature) not required to be implemented by\n          any conforming implementation, but nevertheless recommended as\n          the canonical approach in situations where an implementation\n          does plan to support such a feature.  The presence of\n          semi-standard aspects in the language is intended to lessen\n          portability problems and reduce the risk of gratuitous divergence\n          among implementations that might stand in the way of future\n          standardization.\n\n    semicolon\n          n.  the standard character that is called \"semicolon\" (;).  See\n          Figure~2-5.\n\n    sequence\n          n.  1. an ordered collection of elements 2. a vector or a list.\n\n    sequence function\n          n.  one of the functions in Figure~17-1, or an\n          implementation-defined function that operates on one or more\n          sequences.  and that is defined by the implementation to be a\n          sequence function.\n\n    sequential\n          adj. Trad. (of binding or assignment) done in the style of setq,\n          let*, or do*; that is, interleaving the evaluation of the forms\n          that produce values with the assignments or bindings of the\n          variables (or places).  See parallel.\n\n    sequentially\n          adv.  in a sequential way.\n\n    serious condition\n          n.  a condition of type serious-condition, which represents a\n          situation that is generally sufficiently severe that entry into\n          the debugger should be expected if the condition is signaled but\n          not handled.\n\n    session\n          n.  the conceptual aggregation of events in a Lisp image from\n          the time it is started to the time it is terminated.\n\n    set\n          v.t. Trad. (any variable or a symbol that is the name of a\n          dynamic variable) to assign the variable.\n\n    setf expander\n          n.  a function used by setf to compute the setf expansion of a\n          place.\n\n    setf expansion\n          n.  a set of five expressions_1 that, taken together, describe\n          how to store into a place and which subforms of the macro call\n          associated with the place are evaluated.  See *Note Setf\n          Expansions::.\n\n    setf function\n          n.  a function whose name is (setf symbol).\n\n    setf function name\n          n. (of a symbol S) the list (setf S).\n\n    shadow\n          v.t.  1. to override the meaning of.  \"That binding of X shadows\n          an outer one.\" 2. to hide the presence of.  \"That macrolet of F\n          shadows the outer flet of F.\" 3. to replace.  \"That package\n          shadows the symbol cl:car with its own symbol car.\"\n\n    shadowing symbol\n          n. (in a package) an element of the package's shadowing symbols\n          list.\n\n    shadowing symbols list\n          n. (of a package) a list, associated with the package, of\n          symbols that are to be exempted from `symbol conflict errors'\n          detected when packages are used.  See the function\n          package-shadowing-symbols.\n\n    shared slot\n          n. (of a class) a slot accessible in more than one instance of a\n          class; specifically, such a slot is accessible in all direct\n          instances of the class and in those indirect instances whose\n          class does not shadow_1 the slot.\n\n    sharpsign\n          n.  the standard character that is variously called \"number\n          sign,\" \"sharp,\" or \"sharp sign\" (#).  See Figure~2-5.\n\n    short float\n          n.  an object of type short-float.\n\n    sign\n          n.  one of the standard characters \"+\" or \"-\".\n\n    signal\n          v.  to announce, using a standard protocol, that a particular\n          situation, represented by a condition, has been detected.  See\n          *Note Condition System Concepts::.\n\n    signature\n          n. (of a method) a description of the parameters and parameter\n          specializers for the method which determines the method's\n          applicability for a given set of required arguments, and which\n          also describes the argument conventions for its other,\n          non-required arguments.\n\n    similar\n          adj. (of two objects) defined to be equivalent under the\n          similarity relationship.\n\n    similarity\n          n.  a two-place conceptual equivalence predicate, which is\n          independent of the Lisp image so that two objects in different\n          Lisp images can be understood to be equivalent under this\n          predicate.  See *Note Literal Objects in Compiled Files::.\n\n    simple\n          adj.  1. (of an array) being of type simple-array.  2. (of a\n          character) having no implementation-defined attributes, or else\n          having implementation-defined attributes each of which has the\n          null value for that attribute.\n\n    simple array\n          n.  an array of type simple-array.\n\n    simple bit array\n          n.  a bit array that is a simple array; that is, an object of\n          type (simple-array bit).\n\n    simple bit vector\n          n.  a bit vector of type simple-bit-vector.\n\n    simple condition\n          n.  a condition of type simple-condition.\n\n    simple general vector\n          n.  a simple vector.\n\n    simple string\n          n.  a string of type simple-string.\n\n    simple vector\n          n.  a vector of type simple-vector, sometimes called a \"simple\n          general vector.\" Not all vectors that are simple are simple\n          vectors--only those that have element type t.\n\n    single escape\n          n., adj.  1. n. the syntax type of a character that indicates\n          that the next character is to be treated as an alphabetic_2\n          character with its case preserved.  For details, see *Note\n          Single Escape Character::.  2. adj. (of a character) having the\n          single escape syntax type.  3. n. a single escape_2 character.\n          (In the standard readtable, slash is the only single escape.)\n\n    single float\n          n.  an object of type single-float.\n\n    single-quote\n          n.  the standard character that is variously called\n          ``apostrophe,\" ``acute accent,\" ``quote,\" or \"single quote\" (').\n          See Figure~2-5.\n\n    singleton\n          adj. (of a sequence) having only one element.  \"(list 'hello)\n          returns a singleton list.\"\n\n    situation\n          n.  the evaluation of a form in a specific environment.\n\n    slash\n          n.  the standard character that is variously called ``solidus\"\n          or \"slash\" (/).  See Figure~2-5.\n\n    slot\n          n.  a component of an object that can store a value.\n\n    slot specifier\n          n.  a representation of a slot that includes the name of the\n          slot and zero or more slot options.  A slot option pertains only\n          to a single slot.\n\n    source code\n          n.  code representing objects suitable for evaluation (e.g.,\n          objects created by read, by macro expansion,\n\n          or by compiler macro expansion).\n\n    source file\n          n.  a file which contains a textual representation of source\n          code, that can be edited, loaded, or compiled.\n\n    space\n          n.  the standard character <Space>, notated for the Lisp reader\n          as #\\Space.\n\n    special form\n          n.  a list, other than a macro form, which is a form with\n          special syntax or special evaluation rules or both, possibly\n          manipulating the evaluation environment or control flow or both.\n          The first element of a special form is a special operator.\n\n    special operator\n          n.  one of a fixed set of symbols, enumerated in Figure~3-2,\n          that may appear in the car of a form in order to identify the\n          form as a special form.\n\n    special variable\n          n. Trad.  a dynamic variable.\n\n    specialize\n          v.t. (a generic function) to define a method for the generic\n          function, or in other words, to refine the behavior of the\n          generic function by giving it a specific meaning for a\n          particular set of classes or arguments.\n\n    specialized\n          adj.  1. (of a generic function) having methods which specialize\n          the generic function.  2. (of an array) having an actual array\n          element type that is a proper subtype of the type t; see *Note\n          Array Elements::.  \"(make-array 5 :element-type 'bit) makes an\n          array of length five that is specialized for bits.\"\n\n    specialized lambda list\n          n.  an extended lambda list used in forms that establish method\n          definitions, such as defmethod.  See *Note Specialized Lambda\n          Lists::.\n\n    spreadable argument list designator\n          n.  a designator for a list of objects; that is, an object that\n          denotes a list and that is a non-null list L1 of length n, whose\n          last element is a list L2 of length m (denoting a list L3 of\n          length m+n-1 whose elements are L1_i for i < n-1 followed by\n          L2_j for j < m).  \"The list (1 2 (3 4 5)) is a spreadable\n          argument list designator for the list (1 2 3 4 5).\"\n\n    stack allocate\n          v.t. Trad.  to allocate in a non-permanent way, such as on a\n          stack.  Stack-allocation is an optimization technique used in\n          some implementations for allocating certain kinds of objects\n          that have dynamic extent.  Such objects are allocated on the\n          stack rather than in the heap so that their storage can be freed\n          as part of unwinding the stack rather than taking up space in\n          the heap until the next garbage collection.  What types (if any)\n          can have dynamic extent can vary from implementation to\n          implementation.  No implementation is ever required to perform\n          stack-allocation.\n\n    stack-allocated\n          adj. Trad.  having been stack allocated.\n\n    standard character\n          n.  a character of type standard-char, which is one of a fixed\n          set of 96 such characters required to be present in all\n          conforming implementations.  See *Note Standard Characters::.\n\n    standard class\n          n.  a class that is a generalized instance of class\n          standard-class.\n\n    standard generic function\n          a function of type standard-generic-function.\n\n    standard input\n          n.  the input stream which is the value of the dynamic variable\n          *standard-input*.\n\n    standard method combination\n          n.  the method combination named standard.\n\n    standard object\n          n.  an object that is a generalized instance of class\n          standard-object.\n\n    standard output\n          n.  the output stream which is the value of the dynamic variable\n          *standard-output*.\n\n    standard pprint dispatch table\n          n.  A pprint dispatch table that is different from the initial\n          pprint dispatch table, that implements pretty printing as\n          described in this specification, and that, unlike other pprint\n          dispatch tables, must never be modified by any program.\n          (Although the definite reference \"the standard pprint dispatch\n          table\" is generally used within this document, it is actually\n          implementation-dependent whether a single object fills the role\n          of the standard pprint dispatch table, or whether there might be\n          multiple such objects, any one of which could be used on any\n          given occasion where \"the standard pprint dispatch table\" is\n          called for.  As such, this phrase should be seen as an\n          indefinite reference in all cases except for anaphoric\n          references.)\n\n    standard readtable\n          n.  A readtable that is different from the initial readtable,\n          that implements the expression syntax defined in this\n          specification, and that, unlike other readtables, must never be\n          modified by any program.  (Although the definite reference \"the\n          standard readtable\" is generally used within this document, it\n          is actually implementation-dependent whether a single object\n          fills the role of the standard readtable, or whether there might\n          be multiple such objects, any one of which could be used on any\n          given occasion where \"the standard readtable\" is called for.  As\n          such, this phrase should be seen as an indefinite reference in\n          all cases except for anaphoric references.)\n\n    standard syntax\n          n.  the syntax represented by the standard readtable and used as\n          a reference syntax throughout this document.  See *Note\n          Character Syntax::.\n\n    standardized\n          adj. (of a name, object, or definition) having been defined by\n          Common Lisp.  \"All standardized variables that are required to\n          hold bidirectional streams have \"-io*\" in their name.\"\n\n    startup environment\n          n.  the global environment of the running Lisp image from which\n          the compiler was invoked.\n\n    step\n          v.t., n.  1. v.t. (an iteration variable) to assign the variable\n          a new value at the end of an iteration, in preparation for a new\n          iteration.  2. n. the code that identifies how the next value in\n          an iteration is to be computed.  3. v.t. (code) to specially\n          execute the code, pausing at intervals to allow user\n          confirmation or intervention, usually for debugging.\n\n    stream\n          n.  an object that can be used with an input or output function\n          to identify an appropriate source or sink of characters or bytes\n          for that operation.\n\n    stream associated with a file\n          n.  a file stream, or a synonym stream the target of which is a\n          stream associated with a file.  Such a stream cannot be created\n          with make-two-way-stream, make-echo-stream,\n          make-broadcast-stream, make-concatenated-stream,\n          make-string-input-stream, or make-string-output-stream.\n\n    stream designator\n          n.  a designator for a stream; that is, an object that denotes a\n          stream and that is one of: t (denoting the value of\n          *terminal-io*), nil (denoting the value of *standard-input* for\n          input stream designators or denoting the value of\n          *standard-output* for output stream designators), or a stream\n          (denoting itself).\n\n    stream element type\n          n. (of a stream) the type of data for which the stream is\n          specialized.\n\n    stream variable\n          n.  a variable whose value must be a stream.\n\n    stream variable designator\n          n.  a designator for a stream variable; that is, a symbol that\n          denotes a stream variable and that is one of: t (denoting\n          *terminal-io*), nil (denoting *standard-input* for input stream\n          variable designators or denoting *standard-output* for output\n          stream variable designators), or some other symbol (denoting\n          itself).\n\n    string\n          n.  a specialized vector that is of type string, and whose\n          elements are of type character or a subtype of type character.\n\n    string designator\n          n.  a designator for a string; that is, an object that denotes a\n          string and that is one of: a character (denoting a singleton\n          string that has the character as its only element), a symbol\n          (denoting the string that is its name), or a string (denoting\n          itself).\n\n          The intent is that this term be consistent with the behavior of\n          string; implementations that extend string must extend the\n          meaning of this term in a compatible way.\n\n    string equal\n          adj.  the same under string-equal.\n\n    string stream\n          n.  a stream of type string-stream.\n\n    structure\n          n.  an object of type structure-object.\n\n    structure class\n          n.  a class that is a generalized instance of class\n          structure-class.\n\n    structure name\n          n.  a name defined with defstruct.  Usually, such a type is also\n          a structure class, but there may be implementation-dependent\n          situations in which this is not so, if the :type option to\n          defstruct is used.\n\n    style warning\n          n.  a condition of type style-warning.\n\n    subclass\n          n.  a class that inherits from another class, called a\n          superclass.  (No class is a subclass of itself.)\n\n    subexpression\n          n. (of an expression) an expression that is contained within the\n          expression.  (In fact, the state of being a subexpression is not\n          an attribute of the subexpression, but really an attribute of\n          the containing expression since the same object can at once be a\n          subexpression in one context, and not in another.)\n\n    subform\n          n. (of a form) an expression that is a subexpression of the form,\n          and which by virtue of its position in that form is also a form.\n          \"(f x) and x, but not exit, are subforms of (return-from exit (f\n          x)).\"\n\n    subrepertoire\n          n.  a subset of a repertoire.\n\n    subtype\n          n.  a type whose membership is the same as or a proper subset of\n          the membership of another type, called a supertype.  (Every type\n          is a subtype of itself.)\n\n    superclass\n          n.  a class from which another class (called a subclass)\n          inherits.  (No class is a superclass of itself.) See subclass.\n\n    supertype\n          n.  a type whose membership is the same as or a proper superset\n          of the membership of another type, called a subtype.  (Every\n          type is a supertype of itself.) See subtype.\n\n    supplied-p parameter\n          n.  a parameter which recieves its generalized boolean value\n          implicitly due to the presence or absence of an argument\n          corresponding to another parameter (such as an optional\n          parameter or a rest parameter).  See *Note Ordinary Lambda\n          Lists::.\n\n    symbol\n          n.  an object of type symbol.\n\n    symbol macro\n          n.  a symbol that stands for another form.  See the macro\n          symbol-macrolet.\n\n    synonym stream\n          n.  1. a stream of type synonym-stream, which is consequently a\n          stream that is an alias for another stream, which is the value\n          of a dynamic variable whose name is the synonym stream symbol of\n          the synonym stream.  See the function make-synonym-stream.  2.\n          (to a stream) a synonym stream which has the stream as the value\n          of its synonym stream symbol.  3. (to a symbol) a synonym stream\n          which has the symbol as its synonym stream symbol.\n\n    synonym stream symbol\n          n. (of a synonym stream) the symbol which names the dynamic\n          variable which has as its value another stream for which the\n          synonym stream is an alias.\n\n    syntax type\n          n. (of a character) one of several classifications, enumerated\n          in Figure~2-6, that are used for dispatch during parsing by the\n          Lisp reader.  See *Note Character Syntax Types::.\n\n    system class\n          n.  a class that may be of type built-in-class in a conforming\n          implementation and hence cannot be inherited by classes defined\n          by conforming programs.\n\n    system code\n          n.  code supplied by the implementation to implement this\n          specification (e.g., the definition of mapcar) or generated\n          automatically in support of this specification (e.g., during\n          method combination); that is, code that is not programmer code.\n\nT\n-\n\n    t\n          n.  1. a. the boolean representing true.  b. the canonical\n          generalized boolean representing true.  (Although any object\n          other than nil is considered true as a generalized boolean, t is\n          generally used when there is no special reason to prefer one\n          such object over another.) 2. the name of the type to which all\n          objects belong--the supertype of all types (including itself).\n          3. the name of the superclass of all classes except itself.\n\n    tag\n          n.  1. a catch tag.  2. a go tag.\n\n    tail\n          n. (of a list) an object that is the same as either some cons\n          which makes up that list or the atom (if any) which terminates\n          the list.  \"The empty list is a tail of every proper list.\"\n\n    target\n          n.  1. (of a constructed stream) a constituent of the\n          constructed stream.  \"The target of a synonym stream is the\n          value of its synonym stream symbol.\" 2. (of a displaced array)\n          the array to which the displaced array is displaced.  (In the\n          case of a chain of constructed streams or displaced arrays, the\n          unqualified term \"target\" always refers to the immediate target\n          of the first item in the chain, not the immediate target of the\n          last item.)\n\n    terminal I/O\n          n.  the bidirectional stream that is the value of the variable\n          *terminal-io*.\n\n    terminating\n          n. (of a macro character) being such that, if it appears while\n          parsing a token, it terminates that token.  See *Note Reader\n          Algorithm::.\n\n    tertiary value\n          n. (of values resulting from the evaluation of a form) the third\n          value, if any, or else nil if there are fewer than three values.\n\n    throw\n          v.  to transfer control and values to a catch.  See the special\n          operator throw.\n\n    tilde\n          n.  the standard character that is called \"tilde\" (~).  See\n          Figure~2-5.\n\n    time\n          a representation of a point (absolute time) or an interval\n          (relative time) on a time line.  See decoded time, internal\n          time, and universal time.\n\n    time zone\n          n.  a rational multiple of 1/3600 between -24 (inclusive) and 24\n          (inclusive) that represents a time zone as a number of hours\n          offset from Greenwich Mean Time.  Time zone values increase with\n          motion to the west, so   Massachusetts, U.S.A. is in time zone 5,\n          California, U.S.A. is time zone 8, and Moscow, Russia is time\n          zone -3.  (When \"daylight savings time\" is separately represented\n          as an argument or return value, the time zone that accompanies\n          it does not depend on whether daylight savings time is in\n          effect.)\n\n    token\n          n.  a textual representation for a number or a symbol.  See\n          *Note Interpretation of Tokens::.\n\n    top level form\n          n.  a form which is processed specially by compile-file for the\n          purposes of enabling compile time evaluation of that form.  Top\n          level forms include those forms which are not subforms of any\n          other form, and certain other cases.  See *Note Processing of\n          Top Level Forms::.\n\n    trace output\n          n.  the output stream which is the value of the dynamic variable\n          *trace-output*.\n\n    tree\n          n.  1. a binary recursive data structure made up of conses and\n          atoms:  the conses are themselves also trees (sometimes called\n          \"subtrees\" or \"branches\"), and the atoms are terminal nodes\n          (sometimes called leaves). Typically, the leaves represent data\n          while the branches establish some relationship among that data.\n          2. in general, any recursive data structure that has some notion\n          of ``branches\" and leaves.\n\n    tree structure\n          n. (of a tree_1) the set of conses that make up the tree.  Note\n          that while the car_{1b} component of each such cons is part of\n          the tree structure, the objects that are the cars_2 of each cons\n          in the tree are not themselves part of its tree structure unless\n          they are also conses.\n\n    true\n          n.  any object that is not false and that is used to represent\n          the success of a predicate test.  See t_1.\n\n    truename\n          n.  1. the canonical filename of a file in the file system.  See\n          *Note Truenames::.  2. a pathname representing a truename_1.\n\n    two-way stream\n          n.  a stream of type two-way-stream, which is a bidirectional\n          composite stream that receives its input  from an associated\n          input  stream and sends    its output to   an associated output\n          stream.\n\n    type\n          n.  1. a set of objects, usually with common structure,\n          behavior, or purpose.  (Note that the expression \"X is of type\n          S_a\" naturally implies that \"X is of type S_b\" if S_a is a\n          subtype of S_b.) 2. (immediately following the name of a type) a\n          subtype of that type.  \"The type vector is an array type.\"\n\n    type declaration\n          n.  a declaration that asserts that every reference to a\n          specified binding within the scope of the declaration results in\n          some object of the specified type.\n\n    type equivalent\n          adj. (of two types X and Y) having the same elements; that is, X\n          is a subtype of Y and Y is a subtype of X.\n\n    type expand\n          n.  to fully expand a type specifier, removing any references to\n          derived types.  (Common Lisp provides no program interface to\n          cause this to occur, but the semantics of Common Lisp are such\n          that every implementation must be able to do this internally,\n          and some situations involving type specifiers are most easily\n          described in terms of a fully expanded type specifier.)\n\n    type specifier\n          n.  an expression that denotes a type.  \"The symbol\n          random-state, the list (integer 3 5), the list (and list (not\n          null)), and the class named standard-class are type specifiers.\"\n\nU\n-\n\n    unbound\n          adj.  not having an associated denotation in a binding.  See\n          bound.\n\n    unbound variable\n          n.  a name that is syntactically plausible as the name of a\n          variable but which is not bound in the variable namespace.\n\n    undefined function\n          n.  a name that is syntactically plausible as the name of a\n          function but which is not bound in the function namespace.\n\n    unintern\n          v.t. (a symbol in a package) to make the symbol not be present\n          in that package.  (The symbol might continue to be accessible by\n          inheritance.)\n\n    uninterned\n          adj. (of a symbol) not accessible in any package; i.e., not\n          interned_1.\n\n    universal time\n          n.  time, represented as a non-negative integer number of\n          seconds.  Absolute universal time is measured as an offset from\n          the beginning of the year 1900 (ignoring leap seconds).  See\n          *Note Universal Time::.\n\n    unqualified method\n          n.  a method with no qualifiers.\n\n    unregistered package\n          n.  a package object that is not present in the package registry.\n          An unregistered package has no name; i.e., its name is nil.  See\n          the function delete-package.\n\n    unsafe\n          adj. (of code) not safe.  (Note that, unless explicitly\n          specified otherwise, if a particular kind of error checking is\n          guaranteed only in a safe context, the same checking might or\n          might not occur in that context if it were unsafe; describing a\n          context as unsafe means that certain kinds of error checking are\n          not reliably enabled but does not guarantee that error checking\n          is definitely disabled.)\n\n    unsafe call\n          n.  a call that is not a safe call.  For more detailed\n          information, see *Note Safe and Unsafe Calls::.\n\n    upgrade\n          v.t. (a declared type to an actual type) 1. (when creating an\n          array) to substitute an actual array element type for an\n          expressed array element type when choosing an appropriately\n          specialized array representation.  See the function\n          upgraded-array-element-type.  2. (when creating a complex) to\n          substitute an actual complex part type for an expressed complex\n          part type when choosing an appropriately specialized complex\n          representation.  See the function upgraded-complex-part-type.\n\n    upgraded array element type\n          n. (of a type) a type that is a supertype of the type and that\n          is used instead of the type whenever the type is used as an\n          array element type for object creation or type discrimination.\n          See *Note Array Upgrading::.\n\n    upgraded complex part type\n          n. (of a type) a type that is a supertype of the type and that\n          is used instead of the type whenever the type is used as a\n          complex part type for object creation or type discrimination.\n          See the function upgraded-complex-part-type.\n\n    uppercase\n          adj. (of a character) being among standard characters\n          corresponding to the capital letters A through Z, or being some\n          other implementation-defined character that is defined by the\n          implementation to be uppercase.  See *Note Characters With\n          Case::.\n\n    use\n          v.t. (a package P_1) to inherit the external symbols of P_1.\n          (If a package P_2 uses P_1, the external symbols of P_1 become\n          internal symbols of P_2 unless they are explicitly exported.)\n          \"The package CL-USER uses the package CL.\"\n\n    use list\n          n. (of a package) a (possibly empty) list associated with each\n          package which determines what other packages are currently being\n          used by that package.\n\n    user\n          n.  an active entity, typically a human, that invokes or\n          interacts with a program at run time, but that is not\n          necessarily a programmer.\n\nV\n-\n\n    valid array dimension\n          n.  a fixnum suitable for use as an array dimension.  Such a\n          fixnum must be greater than or equal to zero, and less than the\n          value of array-dimension-limit.  When multiple array dimensions\n          are to be used together to specify a multi-dimensional array,\n          there is also an implied constraint that the product of all of\n          the dimensions be less than the value of array-total-size-limit.\n\n    valid array index\n          n. (of an array) a fixnum suitable for use as one of possibly\n          several indices needed to name an element of the array according\n          to a multi-dimensional Cartesian coordinate system. Such a\n          fixnum must be greater than or equal to zero, and must be less\n          than the corresponding dimension_1 of the array.  (Unless\n          otherwise explicitly specified, the phrase \"a list of valid\n          array indices\" further implies that the length of the list must\n          be the same as the rank of the array.) \"For a 2 by~3 array,\n          valid array indices for the first  dimension are 0 and~1, and\n          valid array indices for the second dimension are 0, 1 and~2.\"\n\n    valid array row-major index\n          n. (of an array, which might have any number of dimensions_2) a\n          single fixnum suitable for use in naming any element of the\n          array, by viewing the array's storage as a linear series of\n          elements in row-major order.  Such a fixnum must be greater than\n          or equal to zero, and less than the array total size of the\n          array.\n\n    valid fill pointer\n          n. (of an array) a fixnum suitable for use as a fill pointer for\n          the array.  Such a fixnum must be greater than or equal to zero,\n          and less than or equal to the array total size of the array.\n\n          [Editorial Note by KMP: The \"valid pathname xxx\" definitions\n          were taken from text found in make-pathname, but look wrong to\n          me.  I'll fix them later.]\n\n    valid logical pathname host\n          n.  a string that has been defined as the name of a logical host.\n          See the function load-logical-pathname-translations.\n\n    valid pathname device\n          n.  a string, nil, :unspecific, or some other object defined by\n          the implementation to be a valid pathname device.\n\n    valid pathname directory\n          n.  a string, a list of strings, nil,\n\n          :wild,\n\n          :unspecific, or some other object defined by the implementation\n          to be a valid directory component.\n\n    valid pathname host\n          n.  a valid physical pathname host or a valid logical pathname\n          host.\n\n    valid pathname name\n          n.  a string, nil, :wild, :unspecific, or some other object\n          defined by the implementation to be a valid pathname name.\n\n    valid pathname type\n          n.  a string, nil, :wild, :unspecific.\n\n    valid pathname version\n          n.  a non-negative integer, or one of :wild, :newest,\n          :unspecific, or nil.  The symbols :oldest, :previous, and\n          :installed are semi-standard special version symbols.\n\n    valid physical pathname host\n          n.  any of a string, a list of strings, or the symbol\n          :unspecific, that is recognized by the implementation as the\n          name of a host.\n\n    valid sequence index\n          n. (of a sequence) an integer suitable for use to name an element\n          of the sequence.  Such an integer must be greater than or equal\n          to zero, and must be less than the length of the sequence.\n\n          (If the sequence is an array, the valid sequence index is\n          further constrained to be a fixnum.)\n\n    value\n          n.  1. a. one of possibly several objects that are the result of\n          an evaluation.  b. (in a situation where exactly one value is\n          expected from the evaluation of a form) the primary value\n          returned by the form.  c. (of forms in an implicit progn) one of\n          possibly several objects that result from the evaluation of the\n          last form, or nil if there are no forms.  2. an object\n          associated with a name in a binding.  3. (of a symbol) the value\n          of the dynamic variable named by that symbol.  4. an object\n          associated with a key in an association list, a  property list,\n          or a  hash table.\n\n    value cell\n          n. Trad. (of a symbol) The place which holds the value, if any,\n          of the dynamic variable named by that symbol, and which is\n          accessed by symbol-value.  See cell.\n\n    variable\n          n.  a binding in which a symbol is the name used to refer to an\n          object.\n\n    vector\n          n.  a one-dimensional array.\n\n    vertical-bar\n          n.  the standard character that is called \"vertical bar\" (|).\n          See Figure~2-5.\n\nW\n-\n\n    whitespace\n          n.  1. one or more characters that are either the graphic\n          character #\\Space or else non-graphic characters such as\n          #\\Newline that only move the print position.  2. a. n. the\n          syntax type of a character that is a token separator.  For\n          details, see *Note Whitespace Characters::.  b. adj. (of a\n          character) having the whitespace_{2a} syntax type_2.  c. n. a\n          whitespace_{2b} character.\n\n    wild\n          adj.  1. (of a namestring) using an implementation-defined\n          syntax for naming files, which might \"match\" any of possibly\n          several possible filenames, and which can therefore be used to\n          refer to the aggregate of the files named by those filenames.\n          2. (of a pathname) a structured representation of a name which\n          might \"match\" any of possibly several pathnames, and which can\n          therefore be used to refer to the aggregate of the files named\n          by those pathnames.  The set of wild pathnames includes, but is\n          not restricted to, pathnames which have a component which is\n          :wild, or which have a directory component which contains :wild\n          or :wild-inferors.  See the function wild-pathname-p.\n\n    write\n          v.t.\n\n          1. (a binding or slot or component) to change the value of the\n          binding or slot.\n\n          2. (an object to a stream) to output a representation of the\n          object to the stream.\n\n    writer\n          n.  a function that writes_1 a variable or slot.\n\nY\n-\n\n    yield\n          v.t. (values) to produce the values as the result of evaluation.\n          \"The form (+ 2 3) yields 5.\"\n\n"
}