{
    "name": "Initializing Newly Added Local Slots (Redefining Classes)",
    "prev": "Modifying the Structure of Instances",
    "next": "Customizing Class Redefinition",
    "up": "Redefining Classes",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Initializing Newly Added Local Slots",
            "text": "The second step initializes the newly added local slots and performs any\nother user-defined actions.  This step is implemented by the generic\nfunction update-instance-for-redefined-class, which is called after\ncompletion of the first step of modifying the structure of the instance.\nThe generic function update-instance-for-redefined-class takes four\nrequired arguments: the instance being updated after it has undergone the\nfirst step, a list of the names of local slots that were added, a list of\nthe names of local slots that were discarded, and a property list\ncontaining the slot names and values of slots that were discarded and had\nvalues.  Included among the discarded slots are slots that were local in\nthe old class and that are shared in the new class.\nThe generic function update-instance-for-redefined-class also takes any\nnumber of initialization arguments.  When it is called by the system to\nupdate an instance whose class has been redefined, no initialization\narguments are provided.\nThere is a system-supplied primary method for\nupdate-instance-for-redefined-class whose parameter specializer for its\ninstance argument is the class standard-object.  First this method checks\nthe validity of initialization arguments and signals an error if an\ninitialization argument is supplied that is not declared as valid.  (For\nmore information, see *Note Declaring the Validity of Initialization\nArguments::.) Then it calls the generic function shared-initialize with\nthe following arguments: the instance, the list of names of the newly\nadded slots, and the initialization arguments it received.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Initializing Newly Added Local Slots (Redefining Classes),  Next: Customizing Class Redefinition,  Prev: Modifying the Structure of Instances,  Up: Redefining Classes\n\nInitializing Newly Added Local Slots\n....................................\n\nThe second step initializes the newly added local slots and performs any\nother user-defined actions.  This step is implemented by the generic\nfunction update-instance-for-redefined-class, which is called after\ncompletion of the first step of modifying the structure of the instance.\n\nThe generic function update-instance-for-redefined-class takes four\nrequired arguments: the instance being updated after it has undergone the\nfirst step, a list of the names of local slots that were added, a list of\nthe names of local slots that were discarded, and a property list\ncontaining the slot names and values of slots that were discarded and had\nvalues.  Included among the discarded slots are slots that were local in\nthe old class and that are shared in the new class.\n\nThe generic function update-instance-for-redefined-class also takes any\nnumber of initialization arguments.  When it is called by the system to\nupdate an instance whose class has been redefined, no initialization\narguments are provided.\n\nThere is a system-supplied primary method for\nupdate-instance-for-redefined-class whose parameter specializer for its\ninstance argument is the class standard-object.  First this method checks\nthe validity of initialization arguments and signals an error if an\ninitialization argument is supplied that is not declared as valid.  (For\nmore information, see *Note Declaring the Validity of Initialization\nArguments::.) Then it calls the generic function shared-initialize with\nthe following arguments: the instance, the list of names of the newly\nadded slots, and the initialization arguments it received.\n\n"
}