{
    "name": "pi",
    "prev": "asin",
    "next": "sinh",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Constant Variable",
        "text": "pi"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value",
            "text": "an implementation-dependent long float.\n"
        },
        {
            "type": "Description",
            "text": "The best long float approximation to the mathematical constant \\pi.\n"
        },
        {
            "type": "Examples",
            "text": "      ;; In each of the following computations, the precision depends\n      ;; on the implementation.  Also, if `long float' is treated by\n      ;; the implementation as equivalent to some other float format\n      ;; (e.g., `double float') the exponent marker might be the marker\n      ;; for that equivalent (e.g., `D' instead of `L').\n      pi =>  3.141592653589793L0\n      (cos pi) =>  -1.0L0\n      (defun sin-of-degrees (degrees)\n        (let ((x (if (floatp degrees) degrees (float degrees pi))))\n          (sin (* x (/ (float pi x) 180)))))\n"
        },
        {
            "type": "Notes",
            "text": "An approximation to \\pi in some other precision can be obtained by writing\n(float pi x), where x is a float of the desired precision, or by writing\n(coerce pi type), where type is the desired type, such as short-float.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: pi,  Next: sinh,  Prev: asin,  Up: Numbers Dictionary\n\npi                                                      [Constant Variable]\n---------------------------------------------------------------------------\n\nValue::\n.......\n\nan implementation-dependent long float.\n\nDescription::\n.............\n\nThe best long float approximation to the mathematical constant \\pi.\n\nExamples::\n..........\n\n      ;; In each of the following computations, the precision depends\n      ;; on the implementation.  Also, if `long float' is treated by\n      ;; the implementation as equivalent to some other float format\n      ;; (e.g., `double float') the exponent marker might be the marker\n      ;; for that equivalent (e.g., `D' instead of `L').\n      pi =>  3.141592653589793L0\n      (cos pi) =>  -1.0L0\n     \n      (defun sin-of-degrees (degrees)\n        (let ((x (if (floatp degrees) degrees (float degrees pi))))\n          (sin (* x (/ (float pi x) 180)))))\n\nNotes::\n.......\n\nAn approximation to \\pi in some other precision can be obtained by writing\n(float pi x), where x is a float of the desired precision, or by writing\n(coerce pi type), where type is the desired type, such as short-float.\n\n"
}