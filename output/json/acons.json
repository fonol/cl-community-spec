{
    "name": "acons",
    "prev": "mapc",
    "next": "assoc",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "acons"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "acons",
                    "text": " key datum alist =>  new-alist\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "key",
                    "desc": "an object."
                },
                {
                    "name": "datum",
                    "desc": "an object."
                },
                {
                    "name": "alist",
                    "desc": "an association list."
                },
                {
                    "name": "new-alist",
                    "desc": "an association list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a fresh cons, the cdr of which is alist and the car of which is\nanother fresh cons, the car of which is key and the cdr of which is datum.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq alist '()) =>  NIL\n      (acons 1 \"one\" alist) =>  ((1 . \"one\"))\n      alist =>  NIL\n      (setq alist (acons 1 \"one\" (acons 2 \"two\" alist))) =>  ((1 . \"one\") (2 . \"two\"))\n      (assoc 1 alist) =>  (1 . \"one\")\n      (setq alist (acons 1 \"uno\" alist)) =>  ((1 . \"uno\") (1 . \"one\") (2 . \"two\"))\n      (assoc 1 alist) =>  (1 . \"uno\")\n"
        },
        {
            "type": "See Also",
            "text": "*Note assoc; assoc-if; assoc-if-not:: , *Note pairlis::\n"
        },
        {
            "type": "Notes",
            "text": "     (acons key datum alist) == (cons (cons key datum) alist)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: acons,  Next: assoc,  Prev: mapc,  Up: Conses Dictionary\n\nacons                                                            [Function]\n---------------------------------------------------------------------------\n\n`acons'  key datum alist =>  new-alist\n\nArguments and Values::\n......................\n\nkey--an object.\n\ndatum--an object.\n\nalist--an association list.\n\nnew-alist--an association list.\n\nDescription::\n.............\n\nCreates a fresh cons, the cdr of which is alist and the car of which is\nanother fresh cons, the car of which is key and the cdr of which is datum.\n\nExamples::\n..........\n\n      (setq alist '()) =>  NIL\n      (acons 1 \"one\" alist) =>  ((1 . \"one\"))\n      alist =>  NIL\n      (setq alist (acons 1 \"one\" (acons 2 \"two\" alist))) =>  ((1 . \"one\") (2 . \"two\"))\n      (assoc 1 alist) =>  (1 . \"one\")\n      (setq alist (acons 1 \"uno\" alist)) =>  ((1 . \"uno\") (1 . \"one\") (2 . \"two\"))\n      (assoc 1 alist) =>  (1 . \"uno\")\n\nSee Also::\n..........\n\n*Note assoc; assoc-if; assoc-if-not:: , *Note pairlis::\n\nNotes::\n.......\n\n     (acons key datum alist) == (cons (cons key datum) alist)\n\n"
}