{
    "name": "Symbols Naming Both Lexical and Dynamic Variables",
    "prev": "Constant Variables",
    "next": "Conses as Forms",
    "up": "The Evaluation Model",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Symbols Naming Both Lexical and Dynamic Variables",
            "text": "The same symbol can name both a lexical variable and a dynamic variable,\nbut never in the same lexical environment.\nIn the following example, the symbol x is used, at different times, as the\nname of a lexical variable and as the name of a dynamic variable.\n      (let ((x 1))            ;Binds a special variable X\n        (declare (special x))\n        (let ((x 2))          ;Binds a lexical variable X\n          (+ x                ;Reads a lexical variable X\n             (locally (declare (special x))\n                      x))))   ;Reads a special variable X\n     =>  3\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Symbols Naming Both Lexical and Dynamic Variables,  Next: Conses as Forms,  Prev: Constant Variables,  Up: The Evaluation Model\n\nSymbols Naming Both Lexical and Dynamic Variables\n.................................................\n\nThe same symbol can name both a lexical variable and a dynamic variable,\nbut never in the same lexical environment.\n\nIn the following example, the symbol x is used, at different times, as the\nname of a lexical variable and as the name of a dynamic variable.\n\n      (let ((x 1))            ;Binds a special variable X\n        (declare (special x))\n        (let ((x 2))          ;Binds a lexical variable X\n          (+ x                ;Reads a lexical variable X\n             (locally (declare (special x))\n                      x))))   ;Reads a special variable X\n     =>  3\n\n"
}