{
    "name": "Input",
    "prev": "Abstract Classifications of Streams (Introduction to Streams)",
    "next": "Open and Closed Streams",
    "up": "Introduction to Streams",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Input, Output, and Bidirectional Streams",
            "text": "A stream, whether a character stream or a binary stream, can be an input\nstream (source of data), an output stream (sink for data), both, or (e.g.,\nwhen \":direction :probe\" is given to open) neither.\nFigure 21-2 shows operators relating to input streams.\n  clear-input  read-byte            read-from-string            \n  listen       read-char            read-line                   \n  peek-char    read-char-no-hang    read-preserving-whitespace  \n  read         read-delimited-list  unread-char                 \n        Figure 21-2: Operators relating to Input Streams.      \nFigure 21-3 shows operators relating to output streams.\n  clear-output   prin1            write            \n  finish-output  prin1-to-string  write-byte       \n  force-output   princ            write-char       \n  format         princ-to-string  write-line       \n  fresh-line     print            write-string     \n  pprint         terpri           write-to-string  \n  Figure 21-3: Operators relating to Output Streams.\nA stream that is both an input stream and an output stream is called a\nbidirectional stream .  See the functions input-stream-p and\noutput-stream-p.\nAny of the operators listed in Figure~21-2 or Figure~21-3 can be used with\nbidirectional streams.  In addition, Figure 21-4 shows a list of operators\nthat relate specificaly to bidirectional streams.\n  y-or-n-p  yes-or-no-p    \n  Figure 21-4: Operators relating to Bidirectional Streams.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Input,  Next: Open and Closed Streams,  Prev: Abstract Classifications of Streams (Introduction to Streams),  Up: Introduction to Streams\n\nInput, Output, and Bidirectional Streams\n........................................\n\nA stream, whether a character stream or a binary stream, can be an input\nstream (source of data), an output stream (sink for data), both, or (e.g.,\nwhen \":direction :probe\" is given to open) neither.\n\nFigure 21-2 shows operators relating to input streams.\n\n  clear-input  read-byte            read-from-string            \n  listen       read-char            read-line                   \n  peek-char    read-char-no-hang    read-preserving-whitespace  \n  read         read-delimited-list  unread-char                 \n\n        Figure 21-2: Operators relating to Input Streams.      \n\n\nFigure 21-3 shows operators relating to output streams.\n\n  clear-output   prin1            write            \n  finish-output  prin1-to-string  write-byte       \n  force-output   princ            write-char       \n  format         princ-to-string  write-line       \n  fresh-line     print            write-string     \n  pprint         terpri           write-to-string  \n\n  Figure 21-3: Operators relating to Output Streams.\n\n\nA stream that is both an input stream and an output stream is called a\nbidirectional stream .  See the functions input-stream-p and\noutput-stream-p.\n\nAny of the operators listed in Figure~21-2 or Figure~21-3 can be used with\nbidirectional streams.  In addition, Figure 21-4 shows a list of operators\nthat relate specificaly to bidirectional streams.\n\n  y-or-n-p  yes-or-no-p    \n\n  Figure 21-4: Operators relating to Bidirectional Streams.\n\n\n"
}