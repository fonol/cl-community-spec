{
    "name": "ldb",
    "prev": "dpb",
    "next": "ldb-test",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Accessor",
        "text": "ldb"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "ldb",
                    "text": " bytespec integer =>  byte\n(setf (` ldb' bytespec place) new-byte)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Pronunciation",
            "text": "pronounced 'lid ib or pronounced 'lid e b or pronounced 'el 'd\\=e 'b\\=e\n"
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "bytespec",
                    "desc": "a byte specifier."
                },
                {
                    "name": "integer",
                    "desc": "an integer."
                },
                {
                    "name": "byte, new-byte",
                    "desc": "a non-negative integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "ldb extracts and returns the byte of integer specified by bytespec.\nldb returns an integer in which the bits with weights 2^(s-1) through 2^0\nare the same as those in integer with weights 2^(p+s-1) through 2^p, and\nall other bits zero; s is (byte-size bytespec) and p is (byte-position\nbytespec).\nsetf may be used with ldb to modify a byte within the integer that is\nstored in a given place.\nThe order of evaluation, when an ldb form is supplied to setf, is exactly\nleft-to-right.\nThe effect is to perform a dpb operation and then store the result back\ninto the place.\n"
        },
        {
            "type": "Examples",
            "text": "      (ldb (byte 2 1) 10) =>  1\n      (setq a (list 8)) =>  (8)\n      (setf (ldb (byte 2 1) (car a)) 1) =>  1\n      a =>  (10)\n"
        },
        {
            "type": "See Also",
            "text": "*Note byte; byte-size; byte-position:: , byte-position, byte-size, *Note\ndpb::\n"
        },
        {
            "type": "Notes",
            "text": "      (logbitp j (ldb (byte s p) n))\n         == (and (< j s) (logbitp (+ j p) n))\nIn general,\n      (ldb (byte 0 x) y) =>  0\nfor all valid values of x and y.\nHistorically, the name \"ldb\" comes from a DEC PDP-10 assembly language\ninstruction meaning \"load byte.\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ldb,  Next: ldb-test,  Prev: dpb,  Up: Numbers Dictionary\n\nldb                                                              [Accessor]\n---------------------------------------------------------------------------\n\n`ldb'  bytespec integer =>  byte\n\n(setf (` ldb' bytespec place) new-byte)\nPronunciation::\n...............\n\npronounced 'lid ib or pronounced 'lid e b or pronounced 'el 'd\\=e 'b\\=e\n\nArguments and Values::\n......................\n\nbytespec--a byte specifier.\n\ninteger--an integer.\n\nbyte, new-byte--a non-negative integer.\n\nDescription::\n.............\n\nldb extracts and returns the byte of integer specified by bytespec.\n\nldb returns an integer in which the bits with weights 2^(s-1) through 2^0\nare the same as those in integer with weights 2^(p+s-1) through 2^p, and\nall other bits zero; s is (byte-size bytespec) and p is (byte-position\nbytespec).\n\nsetf may be used with ldb to modify a byte within the integer that is\nstored in a given place.\n\nThe order of evaluation, when an ldb form is supplied to setf, is exactly\nleft-to-right.\n\nThe effect is to perform a dpb operation and then store the result back\ninto the place.\n\nExamples::\n..........\n\n      (ldb (byte 2 1) 10) =>  1\n      (setq a (list 8)) =>  (8)\n      (setf (ldb (byte 2 1) (car a)) 1) =>  1\n      a =>  (10)\n\nSee Also::\n..........\n\n*Note byte; byte-size; byte-position:: , byte-position, byte-size, *Note\ndpb::\n\nNotes::\n.......\n\n      (logbitp j (ldb (byte s p) n))\n         == (and (< j s) (logbitp (+ j p) n))\n\nIn general,\n\n      (ldb (byte 0 x) y) =>  0\n\nfor all valid values of x and y.\n\nHistorically, the name \"ldb\" comes from a DEC PDP-10 assembly language\ninstruction meaning \"load byte.\"\n\n"
}