{
    "name": "the",
    "prev": "locally",
    "next": "special-operator-p",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Special Operator",
        "text": "the"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "the",
                    "text": " value-type form =>  {result}*\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "value-type",
                    "desc": "a type specifier; not evaluated."
                },
                {
                    "name": "form",
                    "desc": "a form; evaluated."
                },
                {
                    "name": "results",
                    "desc": "the values resulting from the evaluation of form.  These values"
                }
            ]
        },
        {
            "type": "Description",
            "text": "the specifies that the values_{1a} returned by form are of the types\nspecified by value-type.  The consequences are undefined if any result is\nnot of the declared type.\nIt is permissible for form to yield a different number of values than are\nspecified by value-type, provided that the values for which types are\ndeclared are indeed of those types.  Missing values are treated as nil for\nthe purposes of checking their types.\nRegardless of number of values declared by value-type, the number of\nvalues returned by the the special form is the same as the number of\nvalues returned by form.\n"
        },
        {
            "type": "Examples",
            "text": "      (the symbol (car (list (gensym)))) =>  #:G9876\n      (the fixnum (+ 5 7)) =>  12\n      (the (values) (truncate 3.2 2)) =>  1, 1.2\n      (the integer (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer) (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer float) (truncate 3.2 2))   =>  1, 1.2\n      (the (values integer float symbol) (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer float symbol t null list)\n           (truncate 3.2 2)) =>  1, 1.2\n      (let ((i 100))\n         (declare (fixnum i))\n         (the fixnum (1+ i))) =>  101\n      (let* ((x (list 'a 'b 'c))\n             (y 5))\n         (setf (the fixnum (car x)) y)\n         x) =>  (5 B C)\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if the values yielded by the form are not\nof the type specified by value-type.\n"
        },
        {
            "type": "See Also",
            "text": "values\n"
        },
        {
            "type": "Notes",
            "text": "The values type specifier can be used to indicate the types of multiple\nvalues:\n      (the (values integer integer) (floor x y))\n      (the (values string t)\n           (gethash the-key the-string-table))\nsetf can be used with the type declarations.  In this case the declaration\nis transferred to the form that specifies  the new value.  The resulting\nsetf form is then analyzed.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: the,  Next: special-operator-p,  Prev: locally,  Up: Evaluation and Compilation Dictionary\n\nthe                                                      [Special Operator]\n---------------------------------------------------------------------------\n\n`the'  value-type form =>  {result}*\n\nArguments and Values::\n......................\n\nvalue-type--a type specifier; not evaluated.\n\nform--a form; evaluated.\n\nresults--the values resulting from the evaluation of form.  These values\nmust conform to the type supplied by value-type; see below.\n\nDescription::\n.............\n\nthe specifies that the values_{1a} returned by form are of the types\nspecified by value-type.  The consequences are undefined if any result is\nnot of the declared type.\n\nIt is permissible for form to yield a different number of values than are\nspecified by value-type, provided that the values for which types are\ndeclared are indeed of those types.  Missing values are treated as nil for\nthe purposes of checking their types.\n\nRegardless of number of values declared by value-type, the number of\nvalues returned by the the special form is the same as the number of\nvalues returned by form.\n\nExamples::\n..........\n\n      (the symbol (car (list (gensym)))) =>  #:G9876\n      (the fixnum (+ 5 7)) =>  12\n      (the (values) (truncate 3.2 2)) =>  1, 1.2\n      (the integer (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer) (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer float) (truncate 3.2 2))   =>  1, 1.2\n      (the (values integer float symbol) (truncate 3.2 2)) =>  1, 1.2\n      (the (values integer float symbol t null list)\n           (truncate 3.2 2)) =>  1, 1.2\n      (let ((i 100))\n         (declare (fixnum i))\n         (the fixnum (1+ i))) =>  101\n      (let* ((x (list 'a 'b 'c))\n             (y 5))\n         (setf (the fixnum (car x)) y)\n         x) =>  (5 B C)\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if the values yielded by the form are not\nof the type specified by value-type.\n\nSee Also::\n..........\n\nvalues\n\nNotes::\n.......\n\nThe values type specifier can be used to indicate the types of multiple\nvalues:\n\n      (the (values integer integer) (floor x y))\n      (the (values string t)\n           (gethash the-key the-string-table))\n\nsetf can be used with the type declarations.  In this case the declaration\nis transferred to the form that specifies  the new value.  The resulting\nsetf form is then analyzed.\n\n"
}