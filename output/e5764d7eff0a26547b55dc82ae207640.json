{
    "name": "char-int",
    "prev": "char-code",
    "next": "code-char",
    "up": "Characters Dictionary",
    "header": {
        "type": "Function",
        "text": "char-int"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "char-int",
                    "text": " character =>  integer\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character",
                    "desc": "a character."
                },
                {
                    "name": "integer",
                    "desc": "a non-negative integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns a non-negative integer encoding the character object.  The manner\nin which the integer is computed is implementation-dependent.  In contrast\nto sxhash, the result is not guaranteed to be independent of the\nparticular Lisp image.\nIf character has no implementation-defined attributes, the results of\nchar-int and char-code are the same.\n      (char= c1 c2) == (= (char-int c1) (char-int c2))\nfor characters c1 and c2.\n"
        },
        {
            "type": "Examples",
            "text": "      (char-int #\\A) =>  65       ; implementation A\n      (char-int #\\A) =>  577      ; implementation B\n      (char-int #\\A) =>  262145   ; implementation C\n"
        },
        {
            "type": "See Also",
            "text": "*Note char-code::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: char-int,  Next: code-char,  Prev: char-code,  Up: Characters Dictionary\n\nchar-int                                                         [Function]\n---------------------------------------------------------------------------\n\n`char-int'  character =>  integer\n\nArguments and Values::\n......................\n\ncharacter--a character.\n\ninteger--a non-negative integer.\n\nDescription::\n.............\n\nReturns a non-negative integer encoding the character object.  The manner\nin which the integer is computed is implementation-dependent.  In contrast\nto sxhash, the result is not guaranteed to be independent of the\nparticular Lisp image.\n\nIf character has no implementation-defined attributes, the results of\nchar-int and char-code are the same.\n\n      (char= c1 c2) == (= (char-int c1) (char-int c2))\n\nfor characters c1 and c2.\n\nExamples::\n..........\n\n      (char-int #\\A) =>  65       ; implementation A\n      (char-int #\\A) =>  577      ; implementation B\n      (char-int #\\A) =>  262145   ; implementation C\n\nSee Also::\n..........\n\n*Note char-code::\n\n"
}