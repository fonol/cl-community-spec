{
    "name": "gensym",
    "prev": "copy-symbol",
    "next": "*gensym-counter*",
    "up": "Symbols Dictionary",
    "header": {
        "type": "Function",
        "text": "gensym"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "gensym",
                    "text": " &optional x =>  new-symbol\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "x",
                    "desc": "a string or a non-negative integer.  Complicated defaulting behavior;"
                },
                {
                    "name": "x",
                    "desc": "a string or a non-negative integer.  Complicated defaulting behavior;see below.\n"
                },
                {
                    "name": "new-symbol",
                    "desc": "a fresh, uninterned symbol."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates and returns a fresh, uninterned symbol, as if by calling\nmake-symbol.  (The only difference between gensym and make-symbol is in\nhow the new-symbol's name is determined.)\nThe name of the new-symbol is the concatenation of a prefix, which\ndefaults to \"G\", and\na suffix, which is the decimal representation of a number that defaults to\nthe value of *gensym-counter*.\nIf x is supplied, and is a string, then that string is used as a prefix\ninstead of \"G\" for this call to gensym only.\nIf x is supplied, and is an integer, then that integer, instead of the\nvalue of *gensym-counter*, is used as the suffix for this call to gensym\nonly.\nIf and only if no explicit suffix is supplied, *gensym-counter* is\nincremented after it is used.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq sym1 (gensym)) =>  #:G3142\n      (symbol-package sym1) =>  NIL\n      (setq sym2 (gensym 100)) =>  #:G100\n      (setq sym3 (gensym 100)) =>  #:G100\n      (eq sym2 sym3) =>  false\n      (find-symbol \"G100\") =>  NIL, NIL\n      (gensym \"T\") =>  #:T3143\n      (gensym) =>  #:G3144\n"
        },
        {
            "type": "Side Effects",
            "text": "Might increment *gensym-counter*.\n"
        },
        {
            "type": "Affected By",
            "text": "*gensym-counter*\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if x is not a string or a\nnon-negative integer.\n"
        },
        {
            "type": "See Also",
            "text": "*Note gentemp:: , *gensym-counter*\n"
        },
        {
            "type": "Notes",
            "text": "The ability to pass a numeric argument to gensym has been deprecated;\nexplicitly binding *gensym-counter* is now stylistically preferred.  (The\nsomewhat baroque conventions for the optional argument are historical in\nnature, and supported primarily for compatibility with older dialects of\nLisp.   In modern code, it is recommended that the only kind of argument\nused be a string prefix.  In general, though, to obtain more flexible\ncontrol of the new-symbol's name, consider using make-symbol instead.)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: gensym,  Next: *gensym-counter*,  Prev: copy-symbol,  Up: Symbols Dictionary\n\ngensym                                                           [Function]\n---------------------------------------------------------------------------\n\n`gensym'  &optional x =>  new-symbol\n\nArguments and Values::\n......................\n\nx--a string or a non-negative integer.  Complicated defaulting behavior;\nsee below.\n\nnew-symbol--a fresh, uninterned symbol.\n\nDescription::\n.............\n\nCreates and returns a fresh, uninterned symbol, as if by calling\nmake-symbol.  (The only difference between gensym and make-symbol is in\nhow the new-symbol's name is determined.)\n\nThe name of the new-symbol is the concatenation of a prefix, which\ndefaults to \"G\", and\n\na suffix, which is the decimal representation of a number that defaults to\nthe value of *gensym-counter*.\n\nIf x is supplied, and is a string, then that string is used as a prefix\ninstead of \"G\" for this call to gensym only.\n\nIf x is supplied, and is an integer, then that integer, instead of the\nvalue of *gensym-counter*, is used as the suffix for this call to gensym\nonly.\n\nIf and only if no explicit suffix is supplied, *gensym-counter* is\nincremented after it is used.\n\nExamples::\n..........\n\n      (setq sym1 (gensym)) =>  #:G3142\n      (symbol-package sym1) =>  NIL\n      (setq sym2 (gensym 100)) =>  #:G100\n      (setq sym3 (gensym 100)) =>  #:G100\n      (eq sym2 sym3) =>  false\n      (find-symbol \"G100\") =>  NIL, NIL\n      (gensym \"T\") =>  #:T3143\n      (gensym) =>  #:G3144\n\nSide Effects::\n..............\n\nMight increment *gensym-counter*.\n\nAffected By::\n.............\n\n*gensym-counter*\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if x is not a string or a\nnon-negative integer.\n\nSee Also::\n..........\n\n*Note gentemp:: , *gensym-counter*\n\nNotes::\n.......\n\nThe ability to pass a numeric argument to gensym has been deprecated;\nexplicitly binding *gensym-counter* is now stylistically preferred.  (The\nsomewhat baroque conventions for the optional argument are historical in\nnature, and supported primarily for compatibility with older dialects of\nLisp.   In modern code, it is recommended that the only kind of argument\nused be a string prefix.  In general, though, to obtain more flexible\ncontrol of the new-symbol's name, consider using make-symbol instead.)\n\n"
}