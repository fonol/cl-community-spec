{
    "name": "find-method",
    "prev": "define-method-combination",
    "next": "add-method",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "find-method"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "find-method",
                    "text": " generic-function method-qualifiers specializers &optionalerrorp\n=>  method\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "find-method",
                    "text": " (generic-function standard-generic-function)method-qualifiers specializers &optional errorp\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "generic-function",
                    "desc": "a generic function."
                },
                {
                    "name": "method-qualifiers",
                    "desc": "a list."
                },
                {
                    "name": "specializers",
                    "desc": "a list."
                },
                {
                    "name": "errorp",
                    "desc": "a generalized boolean.  The default is true."
                },
                {
                    "name": "method",
                    "desc": "a method object, or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function find-method takes a generic function and returns the\nmethod object that agrees on qualifiers and parameter specializers with\nthe method-qualifiers and specializers arguments of find-method.\nMethod-qualifiers  contains the method qualifiers for the method.  The\norder of the method qualifiers is significant.  For a definition of\nagreement in this context, see *Note Agreement on Parameter Specializers\nand Qualifiers::.\nThe specializers argument contains the parameter specializers for the\nmethod. It must correspond in length to the number of required arguments\nof the generic function, or an error is signaled.  This means that to\nobtain the default method on a given generic-function, a list whose\nelements are the class t must be given.\nIf there is no such method and errorp is true, find-method signals an\nerror.  If there is no such method and errorp is false, find-method\nreturns nil.\n"
        },
        {
            "type": "Examples",
            "text": "      (defmethod some-operation ((a integer) (b float)) (list a b))\n     =>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>\n      (find-method #'some-operation '() (mapcar #'find-class '(integer float)))\n     =>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>\n      (find-method #'some-operation '() (mapcar #'find-class '(integer integer)))\n      |>  Error: No matching method\n      (find-method #'some-operation '() (mapcar #'find-class '(integer integer)) nil)\n     =>  NIL\n"
        },
        {
            "type": "Affected By",
            "text": "add-method, defclass, defgeneric, defmethod\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If the specializers argument does not correspond in length to the number\nof required arguments of the generic-function, an an error of type error\nis signaled.\nIf there is no such method and errorp is true, find-method signals an\nerror of type error.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Agreement on Parameter Specializers and Qualifiers::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: find-method,  Next: add-method,  Prev: define-method-combination,  Up: Objects Dictionary\n\nfind-method                                     [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`find-method'  generic-function method-qualifiers specializers &optional\nerrorp\n=>  method\n\nMethod Signatures::\n...................\n\n`find-method'  (generic-function standard-generic-function)\nmethod-qualifiers specializers &optional errorp\n\nArguments and Values::\n......................\n\ngeneric-function--a generic function.\n\nmethod-qualifiers--a list.\n\nspecializers--a list.\n\nerrorp--a generalized boolean.  The default is true.\n\nmethod--a method object, or nil.\n\nDescription::\n.............\n\nThe generic function find-method takes a generic function and returns the\nmethod object that agrees on qualifiers and parameter specializers with\nthe method-qualifiers and specializers arguments of find-method.\nMethod-qualifiers  contains the method qualifiers for the method.  The\norder of the method qualifiers is significant.  For a definition of\nagreement in this context, see *Note Agreement on Parameter Specializers\nand Qualifiers::.\n\nThe specializers argument contains the parameter specializers for the\nmethod. It must correspond in length to the number of required arguments\nof the generic function, or an error is signaled.  This means that to\nobtain the default method on a given generic-function, a list whose\nelements are the class t must be given.\n\nIf there is no such method and errorp is true, find-method signals an\nerror.  If there is no such method and errorp is false, find-method\nreturns nil.\n\nExamples::\n..........\n\n      (defmethod some-operation ((a integer) (b float)) (list a b))\n     =>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>\n      (find-method #'some-operation '() (mapcar #'find-class '(integer float)))\n     =>  #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>\n      (find-method #'some-operation '() (mapcar #'find-class '(integer integer)))\n      |>  Error: No matching method\n      (find-method #'some-operation '() (mapcar #'find-class '(integer integer)) nil)\n     =>  NIL\n\nAffected By::\n.............\n\nadd-method, defclass, defgeneric, defmethod\n\nExceptional Situations::\n........................\n\nIf the specializers argument does not correspond in length to the number\nof required arguments of the generic-function, an an error of type error\nis signaled.\n\nIf there is no such method and errorp is true, find-method signals an\nerror of type error.\n\nSee Also::\n..........\n\n*Note Agreement on Parameter Specializers and Qualifiers::\n\n"
}