{
    "name": "Shared-Initialize",
    "prev": "Rules for Initialization Arguments",
    "next": "Initialize-Instance",
    "up": "Object Creation and Initialization",
    "header": {
        "type": null,
        "text": "Shared-Initialize"
    },
    "sections": [
        {
            "type": "",
            "text": "The generic function shared-initialize is used to fill the slots of an\ninstance using initialization arguments and :initform forms when an\ninstance is created, when an instance is re-initialized, when an instance\nis updated to conform to a redefined class, and when an instance is\nupdated to conform to a different class.  It uses standard method\ncombination. It takes the following arguments: the instance to be\ninitialized, a specification of a set of names of slots accessible in that\ninstance, and any number of initialization arguments.  The arguments after\nthe first two must form an initialization argument list.\nThe second argument to shared-initialize may be one of the following:\n*\n     It can be a (possibly empty) list of slot names, which specifies the\n     set of those slot names.\n*\n     It can be the symbol t, which specifies the set of all of the slots.\nThere is a system-supplied primary method for shared-initialize whose\nfirst parameter specializer is the class standard-object.  This method\nbehaves as follows on each slot, whether shared or local:\n*\n     If an initialization argument in the initialization argument list\n     specifies a value for that slot, that value is stored into the slot,\n     even if a value has already been stored in the slot before the method\n     is run.  The affected slots are independent of which slots are\n     indicated by the second argument to shared-initialize.\n*\n     Any slots indicated by the second argument that are still unbound at\n     this point are initialized according to their :initform forms.  For\n     any such slot that has an :initform form, that form is evaluated in\n     the lexical environment of its defining defclass form and the result\n     is stored into the slot.  For example, if a before method stores a\n     value in the slot, the :initform form will not be used to supply a\n     value for the slot.  If the second argument specifies a name that\n     does not correspond to any slots accessible in the instance, the\n     results are unspecified.\n*\n     The rules mentioned in *Note Rules for Initialization Arguments:: are\n     obeyed.\nThe generic function shared-initialize is called by the system-supplied\nprimary methods for reinitialize-instance,\nupdate-instance-for-different-class, update-instance-for-redefined-class,\nand initialize-instance.  Thus, methods can be written for\nshared-initialize to specify actions that should be taken in all of these\ncontexts.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Shared-Initialize,  Next: Initialize-Instance,  Prev: Rules for Initialization Arguments,  Up: Object Creation and Initialization\n\nShared-Initialize\n-----------------\n\nThe generic function shared-initialize is used to fill the slots of an\ninstance using initialization arguments and :initform forms when an\ninstance is created, when an instance is re-initialized, when an instance\nis updated to conform to a redefined class, and when an instance is\nupdated to conform to a different class.  It uses standard method\ncombination. It takes the following arguments: the instance to be\ninitialized, a specification of a set of names of slots accessible in that\ninstance, and any number of initialization arguments.  The arguments after\nthe first two must form an initialization argument list.\n\nThe second argument to shared-initialize may be one of the following:\n\n*\n     It can be a (possibly empty) list of slot names, which specifies the\n     set of those slot names.\n\n*\n     It can be the symbol t, which specifies the set of all of the slots.\n\nThere is a system-supplied primary method for shared-initialize whose\nfirst parameter specializer is the class standard-object.  This method\nbehaves as follows on each slot, whether shared or local:\n\n*\n     If an initialization argument in the initialization argument list\n     specifies a value for that slot, that value is stored into the slot,\n     even if a value has already been stored in the slot before the method\n     is run.  The affected slots are independent of which slots are\n     indicated by the second argument to shared-initialize.\n\n*\n     Any slots indicated by the second argument that are still unbound at\n     this point are initialized according to their :initform forms.  For\n     any such slot that has an :initform form, that form is evaluated in\n     the lexical environment of its defining defclass form and the result\n     is stored into the slot.  For example, if a before method stores a\n     value in the slot, the :initform form will not be used to supply a\n     value for the slot.  If the second argument specifies a name that\n     does not correspond to any slots accessible in the instance, the\n     results are unspecified.\n\n*\n     The rules mentioned in *Note Rules for Initialization Arguments:: are\n     obeyed.\n\nThe generic function shared-initialize is called by the system-supplied\nprimary methods for reinitialize-instance,\nupdate-instance-for-different-class, update-instance-for-redefined-class,\nand initialize-instance.  Thus, methods can be written for\nshared-initialize to specify actions that should be taken in all of these\ncontexts.\n\n"
}