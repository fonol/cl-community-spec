{
    "name": "slot-value",
    "prev": "slot-unbound",
    "next": "method-qualifiers",
    "up": "Objects Dictionary",
    "header": {
        "type": "Function",
        "text": "slot-value"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "slot-value",
                    "text": " object slot-name =>  value\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "name",
                    "desc": "a symbol."
                },
                {
                    "name": "value",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The function slot-value returns the value of the slot named slot-name in\nthe object.  If there is no slot named slot-name, slot-missing is called.\nIf the slot is unbound, slot-unbound is called.\nThe macro setf can be used with slot-value to change the value of a slot.\n"
        },
        {
            "type": "Examples",
            "text": "      (defclass foo ()\n        ((a :accessor foo-a :initarg :a :initform 1)\n         (b :accessor foo-b :initarg :b)\n         (c :accessor foo-c :initform 3)))\n     =>  #<STANDARD-CLASS FOO 244020371>\n      (setq foo1 (make-instance 'foo :a 'one :b 'two))\n     =>  #<FOO 36325624>\n      (slot-value foo1 'a) =>  ONE\n      (slot-value foo1 'b) =>  TWO\n      (slot-value foo1 'c) =>  3\n      (setf (slot-value foo1 'a) 'uno) =>  UNO\n      (slot-value foo1 'a) =>  UNO\n      (defmethod foo-method ((x foo))\n        (slot-value x 'a))\n     =>  #<STANDARD-METHOD FOO-METHOD (FOO) 42720573>\n      (foo-method foo1) =>  UNO\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If an attempt is made to read a slot and no slot of the name slot-name\nexists in the object, slot-missing is called as follows:\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'slot-value)\n(If slot-missing is invoked, its primary value is returned by slot-value.)\nIf an attempt is made to write a slot and no slot of the name slot-name\nexists in the object, slot-missing is called as follows:\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'setf\n                    new-value)\n(If slot-missing returns in this case, any values are ignored.)\nThe specific behavior depends on object's metaclass.  An error is never\nsignaled if object has metaclass standard-class.  An error is always\nsignaled if object has metaclass built-in-class.  The consequences are\nunspecified if object has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n"
        },
        {
            "type": "See Also",
            "text": "*Note slot-missing:: , *Note slot-unbound:: , *Note with-slots::\n"
        },
        {
            "type": "Notes",
            "text": "Although no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-value using the function\nslot-value-using-class described in the Metaobject Protocol.\nImplementations may optimize slot-value by compiling it inline.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: slot-value,  Next: method-qualifiers,  Prev: slot-unbound,  Up: Objects Dictionary\n\nslot-value                                                       [Function]\n---------------------------------------------------------------------------\n\n`slot-value'  object slot-name =>  value\n\nArguments and Values::\n......................\n\nobject--an object.\n\nname--a symbol.\n\nvalue--an object.\n\nDescription::\n.............\n\nThe function slot-value returns the value of the slot named slot-name in\nthe object.  If there is no slot named slot-name, slot-missing is called.\nIf the slot is unbound, slot-unbound is called.\n\nThe macro setf can be used with slot-value to change the value of a slot.\n\nExamples::\n..........\n\n      (defclass foo ()\n        ((a :accessor foo-a :initarg :a :initform 1)\n         (b :accessor foo-b :initarg :b)\n         (c :accessor foo-c :initform 3)))\n     =>  #<STANDARD-CLASS FOO 244020371>\n      (setq foo1 (make-instance 'foo :a 'one :b 'two))\n     =>  #<FOO 36325624>\n      (slot-value foo1 'a) =>  ONE\n      (slot-value foo1 'b) =>  TWO\n      (slot-value foo1 'c) =>  3\n      (setf (slot-value foo1 'a) 'uno) =>  UNO\n      (slot-value foo1 'a) =>  UNO\n      (defmethod foo-method ((x foo))\n        (slot-value x 'a))\n     =>  #<STANDARD-METHOD FOO-METHOD (FOO) 42720573>\n      (foo-method foo1) =>  UNO\n\nExceptional Situations::\n........................\n\nIf an attempt is made to read a slot and no slot of the name slot-name\nexists in the object, slot-missing is called as follows:\n\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'slot-value)\n\n(If slot-missing is invoked, its primary value is returned by slot-value.)\n\nIf an attempt is made to write a slot and no slot of the name slot-name\nexists in the object, slot-missing is called as follows:\n\n      (slot-missing (class-of instance)\n                    instance\n                    slot-name\n                    'setf\n                    new-value)\n\n(If slot-missing returns in this case, any values are ignored.)\n\nThe specific behavior depends on object's metaclass.  An error is never\nsignaled if object has metaclass standard-class.  An error is always\nsignaled if object has metaclass built-in-class.  The consequences are\nunspecified if object has any other metaclass-an error might or might not\nbe signaled in this situation.  Note in particular that the behavior for\nconditions and structures is not specified.\n\nSee Also::\n..........\n\n*Note slot-missing:: , *Note slot-unbound:: , *Note with-slots::\n\nNotes::\n.......\n\nAlthough no implementation is required to do so, implementors are strongly\nencouraged to implement the function slot-value using the function\nslot-value-using-class described in the Metaobject Protocol.\n\nImplementations may optimize slot-value by compiling it inline.\n\n"
}