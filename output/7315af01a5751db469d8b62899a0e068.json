{
    "name": "Printing Other Vectors",
    "prev": "Printing Bit Vectors",
    "next": "Printing Other Arrays",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Printing Other Vectors",
            "text": "If *print-array* is true and *print-readably* is false, any\nvector other than a string or bit vector is printed using general-vector\nsyntax; this means that information about specialized vector\nrepresentations does not appear.  The printed representation of a\nzero-length vector is #().  The printed representation of a\nnon-zero-length vector begins with #(.  Following that, the first element\nof the vector is printed.\nIf there are any other elements, they are printed in turn, with each such\nadditional element preceded by a space if *print-pretty* is false, or\nwhitespace_1 if *print-pretty* is true.\nA right-parenthesis after the last element terminates the printed\nrepresentation of the vector.  The printing of vectors is affected by\n*print-level* and *print-length*.  If the vector has a fill pointer, then\nonly those elements below the fill pointer are printed.\nIf both *print-array* and *print-readably* are false,\nthe vector is not printed as described above, but in a format (using #<)\nthat is concise but not readable.\nIf *print-readably* is true, the vector prints in an\nimplementation-defined manner; see the variable *print-readably*.\nFor information on how the Lisp reader parses these \"other vectors,\" see\n*Note Sharpsign Left-Parenthesis::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Printing Other Vectors,  Next: Printing Other Arrays,  Prev: Printing Bit Vectors,  Up: Default Print-Object Methods\n\nPrinting Other Vectors\n......................\n\nIf *print-array* is true and *print-readably* is false, any\n\nvector other than a string or bit vector is printed using general-vector\nsyntax; this means that information about specialized vector\nrepresentations does not appear.  The printed representation of a\nzero-length vector is #().  The printed representation of a\nnon-zero-length vector begins with #(.  Following that, the first element\nof the vector is printed.\n\nIf there are any other elements, they are printed in turn, with each such\nadditional element preceded by a space if *print-pretty* is false, or\nwhitespace_1 if *print-pretty* is true.\n\nA right-parenthesis after the last element terminates the printed\nrepresentation of the vector.  The printing of vectors is affected by\n*print-level* and *print-length*.  If the vector has a fill pointer, then\nonly those elements below the fill pointer are printed.\n\nIf both *print-array* and *print-readably* are false,\n\nthe vector is not printed as described above, but in a format (using #<)\nthat is concise but not readable.\n\nIf *print-readably* is true, the vector prints in an\nimplementation-defined manner; see the variable *print-readably*.\n\nFor information on how the Lisp reader parses these \"other vectors,\" see\n*Note Sharpsign Left-Parenthesis::.\n\n"
}