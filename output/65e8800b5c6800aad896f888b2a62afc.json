{
    "name": "rest",
    "prev": "nthcdr",
    "next": "member",
    "up": "Conses Dictionary",
    "header": {
        "type": "Accessor",
        "text": "rest"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "rest",
                    "text": " list =>  tail\n(setf (`         rest' list) new-tail)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list,which might be a dotted list or a circular list.\n"
                },
                {
                    "name": "tail",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "rest performs the same operation as cdr, but mnemonically complements\nfirst.  Specifically,\n      (rest list) == (cdr list)\n      (setf (rest list) new-tail) == (setf (cdr list) new-tail)\n"
        },
        {
            "type": "Examples",
            "text": "      (rest '(1 2)) =>  (2)\n      (rest '(1 . 2)) =>  2\n      (rest '(1)) =>  NIL\n      (setq *cons* '(1 . 2)) =>  (1 . 2)\n      (setf (rest *cons*) \"two\") =>  \"two\"\n      *cons* =>  (1 . \"two\")\n"
        },
        {
            "type": "See Also",
            "text": "cdr, *Note nthcdr::\n"
        },
        {
            "type": "Notes",
            "text": "rest is often preferred stylistically over cdr when the argument is to\nbeing subjectively viewed as a list rather than as a cons.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: rest,  Next: member,  Prev: nthcdr,  Up: Conses Dictionary\n\nrest                                                             [Accessor]\n---------------------------------------------------------------------------\n\n`rest'  list =>  tail\n\n(setf (`         rest' list) new-tail)\nArguments and Values::\n......................\n\nlist--a list,\n\nwhich might be a dotted list or a circular list.\n\ntail--an object.\n\nDescription::\n.............\n\nrest performs the same operation as cdr, but mnemonically complements\nfirst.  Specifically,\n\n      (rest list) == (cdr list)\n      (setf (rest list) new-tail) == (setf (cdr list) new-tail)\n\nExamples::\n..........\n\n      (rest '(1 2)) =>  (2)\n      (rest '(1 . 2)) =>  2\n      (rest '(1)) =>  NIL\n      (setq *cons* '(1 . 2)) =>  (1 . 2)\n      (setf (rest *cons*) \"two\") =>  \"two\"\n      *cons* =>  (1 . \"two\")\n\nSee Also::\n..........\n\ncdr, *Note nthcdr::\n\nNotes::\n.......\n\nrest is often preferred stylistically over cdr when the argument is to\nbeing subjectively viewed as a list rather than as a cons.\n\n"
}