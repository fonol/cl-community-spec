{
    "name": "Printing Random States",
    "prev": "Examples of Printing Arrays",
    "next": "Printing Pathnames",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Printing Random States",
            "text": "A specific syntax for printing objects of type random-state is not\nspecified. However, every implementation must arrange to print a random\nstate object in such a way that, within the same implementation, read can\nconstruct from the printed representation a copy of the random state\nobject as if the copy had been made by make-random-state.\nIf the type random state is effectively implemented by using the machinery\nfor defstruct, the usual structure syntax can then be used for printing\nrandom state objects; one might look something like\n      #S(RANDOM-STATE :DATA #(14 49 98436589 786345 8734658324 ... ))\nwhere the components are implementation-dependent.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Printing Random States,  Next: Printing Pathnames,  Prev: Examples of Printing Arrays,  Up: Default Print-Object Methods\n\nPrinting Random States\n......................\n\nA specific syntax for printing objects of type random-state is not\nspecified. However, every implementation must arrange to print a random\nstate object in such a way that, within the same implementation, read can\nconstruct from the printed representation a copy of the random state\nobject as if the copy had been made by make-random-state.\n\nIf the type random state is effectively implemented by using the machinery\nfor defstruct, the usual structure syntax can then be used for printing\nrandom state objects; one might look something like\n\n      #S(RANDOM-STATE :DATA #(14 49 98436589 786345 8734658324 ... ))\n\nwhere the components are implementation-dependent.\n\n"
}