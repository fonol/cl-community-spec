{
    "name": "file-position",
    "prev": "file-length",
    "next": "file-string-length",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "file-position"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "file-position",
                    "text": " stream =>  position\n"
                },
                {
                    "name": "file-position",
                    "text": " stream position-spec =>  success-p\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "stream",
                    "desc": "a stream."
                },
                {
                    "name": "position-spec",
                    "desc": "a file position designator."
                },
                {
                    "name": "position",
                    "desc": "a file position or nil."
                },
                {
                    "name": "success-p",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns or changes the current position within a stream.\nWhen position-spec is not supplied, file-position returns the current file\nposition in the stream, or nil if this cannot be determined.\nWhen position-spec is supplied, the file position in stream is set to that\nfile position (if possible).  file-position returns true if the\nrepositioning is performed successfully, or false if it is not.\nAn integer returned by file-position of one argument should be acceptable\nas position-spec for use with the same file.\nFor a character file, performing a single read-char or write-char operation\nmay cause the file position to be increased by more than 1 because of\ncharacter-set translations (such as translating between the Common Lisp\n#\\Newline character and an external ASCII carriage-return/line-feed\nsequence) and other aspects of the implementation.  For a binary file,\nevery read-byte or write-byte operation increases the file position by 1.\n"
        },
        {
            "type": "Examples",
            "text": "      (defun tester ()\n        (let ((noticed '()) file-written)\n          (flet ((notice (x) (push x noticed) x))\n            (with-open-file (s \"test.bin\"\n                               :element-type '(unsigned-byte 8)\n                               :direction :output\n                               :if-exists :error)\n               (notice (file-position s)) ;1\n               (write-byte 5 s)\n               (write-byte 6 s)\n               (let ((p (file-position s)))\n                 (notice p) ;2\n                 (notice (when p (file-position s (1- p))))) ;3\n               (write-byte 7 s)\n               (notice (file-position s)) ;4\n               (setq file-written (truename s)))\n             (with-open-file (s file-written\n                                :element-type '(unsigned-byte 8)\n                                :direction :input)\n               (notice (file-position s)) ;5\n               (let ((length (file-length s)))\n                 (notice length) ;6\n                 (when length\n                   (dotimes (i length)\n                     (notice (read-byte s)))))) ;7,...\n             (nreverse noticed))))\n     =>  tester\n      (tester)\n     =>  (0 2 T 2 0 2 5 7)\n     OR=> (0 2 NIL 3 0 3 5 6 7)\n     OR=> (NIL NIL NIL NIL NIL NIL)\n"
        },
        {
            "type": "Side Effects",
            "text": "When the position-spec argument is supplied, the file position in the\nstream might be moved.\n"
        },
        {
            "type": "Affected By",
            "text": "The value returned by file-position increases monotonically as input or\noutput operations are performed.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If position-spec is supplied, but is too large or otherwise inappropriate,\nan error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "*Note file-length:: , *Note file-string-length:: , *Note open::\n"
        },
        {
            "type": "Notes",
            "text": "Implementations that have character files represented as a sequence of\nrecords of bounded size might choose to encode the file position as, for\nexample, <<record-number>>*<<max-record-size>>+<<character-within-record>>.\nThis is a valid encoding because it increases monotonically as each\ncharacter is read or written, though not necessarily by 1 at each step.\nAn integer might then be considered \"inappropriate\" as position-spec to\nfile-position if, when decoded into record number and character number, it\nturned out that the supplied record was too short for the specified\ncharacter number.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: file-position,  Next: file-string-length,  Prev: file-length,  Up: Streams Dictionary\n\nfile-position                                                    [Function]\n---------------------------------------------------------------------------\n\n`file-position'  stream =>  position\n\n`file-position'  stream position-spec =>  success-p\n\nArguments and Values::\n......................\n\nstream--a stream.\n\nposition-spec--a file position designator.\n\nposition--a file position or nil.\n\nsuccess-p--a generalized boolean.\n\nDescription::\n.............\n\nReturns or changes the current position within a stream.\n\nWhen position-spec is not supplied, file-position returns the current file\nposition in the stream, or nil if this cannot be determined.\n\nWhen position-spec is supplied, the file position in stream is set to that\nfile position (if possible).  file-position returns true if the\nrepositioning is performed successfully, or false if it is not.\n\nAn integer returned by file-position of one argument should be acceptable\nas position-spec for use with the same file.\n\nFor a character file, performing a single read-char or write-char operation\nmay cause the file position to be increased by more than 1 because of\ncharacter-set translations (such as translating between the Common Lisp\n#\\Newline character and an external ASCII carriage-return/line-feed\nsequence) and other aspects of the implementation.  For a binary file,\nevery read-byte or write-byte operation increases the file position by 1.\n\nExamples::\n..........\n\n      (defun tester ()\n        (let ((noticed '()) file-written)\n          (flet ((notice (x) (push x noticed) x))\n            (with-open-file (s \"test.bin\"\n                               :element-type '(unsigned-byte 8)\n                               :direction :output\n                               :if-exists :error)\n               (notice (file-position s)) ;1\n               (write-byte 5 s)\n               (write-byte 6 s)\n               (let ((p (file-position s)))\n                 (notice p) ;2\n                 (notice (when p (file-position s (1- p))))) ;3\n               (write-byte 7 s)\n               (notice (file-position s)) ;4\n               (setq file-written (truename s)))\n             (with-open-file (s file-written\n                                :element-type '(unsigned-byte 8)\n                                :direction :input)\n               (notice (file-position s)) ;5\n               (let ((length (file-length s)))\n                 (notice length) ;6\n                 (when length\n                   (dotimes (i length)\n                     (notice (read-byte s)))))) ;7,...\n             (nreverse noticed))))\n     =>  tester\n      (tester)\n     =>  (0 2 T 2 0 2 5 7)\n     OR=> (0 2 NIL 3 0 3 5 6 7)\n     OR=> (NIL NIL NIL NIL NIL NIL)\n\nSide Effects::\n..............\n\nWhen the position-spec argument is supplied, the file position in the\nstream might be moved.\n\nAffected By::\n.............\n\nThe value returned by file-position increases monotonically as input or\noutput operations are performed.\n\nExceptional Situations::\n........................\n\nIf position-spec is supplied, but is too large or otherwise inappropriate,\nan error is signaled.\n\nSee Also::\n..........\n\n*Note file-length:: , *Note file-string-length:: , *Note open::\n\nNotes::\n.......\n\nImplementations that have character files represented as a sequence of\nrecords of bounded size might choose to encode the file position as, for\nexample, <<record-number>>*<<max-record-size>>+<<character-within-record>>.\nThis is a valid encoding because it increases monotonically as each\ncharacter is read or written, though not necessarily by 1 at each step.\nAn integer might then be considered \"inappropriate\" as position-spec to\nfile-position if, when decoded into record number and character number, it\nturned out that the supplied record was too short for the specified\ncharacter number.\n\n"
}