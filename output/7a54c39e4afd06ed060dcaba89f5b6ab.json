{
    "name": "1+",
    "prev": "/",
    "next": "abs",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "1+, 1-"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "1'  + =>  number successor `1",
                    "text": " - =>  number predecessor\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "number",
                    "desc": "a number."
                },
                {
                    "name": "successor, predecessor",
                    "desc": "a number."
                }
            ]
        },
        {
            "type": "Description",
            "text": "1+ returns a number that is one more than its argument number.  1- returns\na number that is one less than its argument number.\n"
        },
        {
            "type": "Examples",
            "text": "      (1+ 99) =>  100\n      (1- 100) =>  99\n      (1+ (complex 0.0)) =>  #C(1.0 0.0)\n      (1- 5/3) =>  2/3\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Might signal type-error if its argument is not a number.  Might signal\narithmetic-error.\n"
        },
        {
            "type": "See Also",
            "text": "*Note incf; decf:: , decf\n"
        },
        {
            "type": "Notes",
            "text": "      (1+ number) == (+ number 1)\n      (1- number) == (- number 1)\nImplementors are encouraged to make the performance of both the previous\nexpressions be the same.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: 1+,  Next: abs,  Prev: /,  Up: Numbers Dictionary\n\n1+, 1-                                                         [Function]\n-------------------------------------------------------------------------\n\n`1'  + =>  number successor `1'  - =>  number predecessor\n\nArguments and Values::\n......................\n\nnumber--a number.\n\nsuccessor, predecessor--a number.\n\nDescription::\n.............\n\n1+ returns a number that is one more than its argument number.  1- returns\na number that is one less than its argument number.\n\nExamples::\n..........\n\n      (1+ 99) =>  100\n      (1- 100) =>  99\n      (1+ (complex 0.0)) =>  #C(1.0 0.0)\n      (1- 5/3) =>  2/3\n\nExceptional Situations::\n........................\n\nMight signal type-error if its argument is not a number.  Might signal\narithmetic-error.\n\nSee Also::\n..........\n\n*Note incf; decf:: , decf\n\nNotes::\n.......\n\n      (1+ number) == (+ number 1)\n      (1- number) == (- number 1)\n\nImplementors are encouraged to make the performance of both the previous\nexpressions be the same.\n\n"
}