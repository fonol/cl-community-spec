{
    "name": "Applying method combination to the sorted list of applicable methods",
    "prev": "Sorting the Applicable Methods by Precedence Order",
    "next": "Standard Method Combination",
    "up": "Method Selection and Combination",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Applying method combination to the sorted list of applicable methods",
            "text": "In the simple case--if standard method combination is used and all\napplicable methods are primary methods--the effective method is the most\nspecific method.  That method can call the next most specific method by\nusing the function call-next-method.  The method that call-next-method\nwill call is referred to as the next method .  The predicate next-method-p\ntests whether a next method exists.  If call-next-method is called and\nthere is no next most specific method, the generic function no-next-method\nis invoked.\nIn general, the effective method is some combination of the applicable\nmethods.  It is described by a form that contains calls to some or all of\nthe applicable methods, returns the value or values that will be returned\nas the value or values of the generic function, and optionally makes some\nof the methods accessible by means of call-next-method.\nThe role of each method in the effective method is determined by its\nqualifiers and the specificity of the method.  A qualifier serves to mark\na method, and the meaning of a qualifier is determined by the way that\nthese marks are used by this step of the procedure.  If an applicable\nmethod has an unrecognized qualifier, this step signals an error and does\nnot include that method in the effective method.\nWhen standard method combination is used together with qualified methods,\nthe effective method is produced as described in *Note Standard Method\nCombination::.\nAnother type of method combination can be specified by using the\n:method-combination option of defgeneric or of any of the other operators\nthat specify generic function options.  In this way this step of the\nprocedure can be customized.\nNew types of method combination can be defined by using the\ndefine-method-combination macro.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Applying method combination to the sorted list of applicable methods,  Next: Standard Method Combination,  Prev: Sorting the Applicable Methods by Precedence Order,  Up: Method Selection and Combination\n\nApplying method combination to the sorted list of applicable methods\n....................................................................\n\nIn the simple case--if standard method combination is used and all\napplicable methods are primary methods--the effective method is the most\nspecific method.  That method can call the next most specific method by\nusing the function call-next-method.  The method that call-next-method\nwill call is referred to as the next method .  The predicate next-method-p\ntests whether a next method exists.  If call-next-method is called and\nthere is no next most specific method, the generic function no-next-method\nis invoked.\n\nIn general, the effective method is some combination of the applicable\nmethods.  It is described by a form that contains calls to some or all of\nthe applicable methods, returns the value or values that will be returned\nas the value or values of the generic function, and optionally makes some\nof the methods accessible by means of call-next-method.\n\nThe role of each method in the effective method is determined by its\nqualifiers and the specificity of the method.  A qualifier serves to mark\na method, and the meaning of a qualifier is determined by the way that\nthese marks are used by this step of the procedure.  If an applicable\nmethod has an unrecognized qualifier, this step signals an error and does\nnot include that method in the effective method.\n\nWhen standard method combination is used together with qualified methods,\nthe effective method is produced as described in *Note Standard Method\nCombination::.\n\nAnother type of method combination can be specified by using the\n:method-combination option of defgeneric or of any of the other operators\nthat specify generic function options.  In this way this step of the\nprocedure can be customized.\n\nNew types of method combination can be defined by using the\ndefine-method-combination macro.\n\n"
}