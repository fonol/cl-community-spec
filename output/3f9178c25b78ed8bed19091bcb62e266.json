{
    "name": "condition",
    "prev": "Conditions Dictionary",
    "next": "warning",
    "up": "Conditions Dictionary",
    "header": {
        "type": "Condition Type",
        "text": "condition"
    },
    "sections": [
        {
            "type": "",
            "text": "[Reviewer Note by Barrett: I think CONDITION-RESTARTS is not fully\nintegrated.]\n"
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "condition",
                    "link": "3f9178c25b78ed8bed19091bcb62e266"
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "All types of conditions, whether error or non-error, must inherit from\nthis type.\nNo additional subtype relationships among the specified subtypes of type\ncondition are allowed, except when explicitly mentioned in the text;\nhowever implementations are permitted to introduce additional types and\none of these types can be a subtype of any number of the subtypes of type\ncondition.\nWhether a user-defined condition type has slots that are accessible by\nwith-slots is implementation-dependent.  Furthermore, even in an\nimplementation in which user-defined condition types would have slots, it\nis implementation-dependent whether any condition types defined in this\ndocument have such slots or, if they do, what their names might be; only\nthe reader functions documented by this specification may be relied upon\nby portable code.\nConforming code must observe the following restrictions related to\nconditions:\n*\n     define-condition, not defclass, must be used to define new condition\n     types.\n*\n     make-condition, not make-instance, must be used to create condition\n     objects explicitly.\n*\n     The :report option of define-condition, not defmethod for\n     print-object, must be used to define a condition reporter.\n*\n     slot-value, slot-boundp, slot-makunbound, and with-slots must not be\n     used on condition objects.  Instead, the appropriate accessor\n     functions (defined by define-condition) should be used.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: condition,  Next: warning,  Prev: Conditions Dictionary,  Up: Conditions Dictionary\n\ncondition                                                  [Condition Type]\n---------------------------------------------------------------------------\n\n[Reviewer Note by Barrett: I think CONDITION-RESTARTS is not fully\nintegrated.]\n\nClass Precedence List::\n.......................\n\ncondition, t\n\nDescription::\n.............\n\nAll types of conditions, whether error or non-error, must inherit from\nthis type.\n\nNo additional subtype relationships among the specified subtypes of type\ncondition are allowed, except when explicitly mentioned in the text;\nhowever implementations are permitted to introduce additional types and\none of these types can be a subtype of any number of the subtypes of type\ncondition.\n\nWhether a user-defined condition type has slots that are accessible by\nwith-slots is implementation-dependent.  Furthermore, even in an\nimplementation in which user-defined condition types would have slots, it\nis implementation-dependent whether any condition types defined in this\ndocument have such slots or, if they do, what their names might be; only\nthe reader functions documented by this specification may be relied upon\nby portable code.\n\nConforming code must observe the following restrictions related to\nconditions:\n\n*\n     define-condition, not defclass, must be used to define new condition\n     types.\n\n*\n     make-condition, not make-instance, must be used to create condition\n     objects explicitly.\n\n*\n     The :report option of define-condition, not defmethod for\n     print-object, must be used to define a condition reporter.\n\n*\n     slot-value, slot-boundp, slot-makunbound, and with-slots must not be\n     used on condition objects.  Instead, the appropriate accessor\n     functions (defined by define-condition) should be used.\n\n"
}