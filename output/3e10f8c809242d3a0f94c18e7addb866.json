{
    "name": "atom",
    "prev": "consp",
    "next": "rplaca",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "atom"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "atom",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type atom; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (atom 'sss) =>  true\n      (atom (cons 1 2)) =>  false\n      (atom nil) =>  true\n      (atom '()) =>  true\n      (atom 3) =>  true\n"
        },
        {
            "type": "Notes",
            "text": "      (atom object) == (typep object 'atom) == (not (consp object))\n      == (not (typep object 'cons)) == (typep object '(not cons))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: atom,  Next: rplaca,  Prev: consp,  Up: Conses Dictionary\n\natom                                                             [Function]\n---------------------------------------------------------------------------\n\n`atom'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type atom; otherwise, returns false.\n\nExamples::\n..........\n\n      (atom 'sss) =>  true\n      (atom (cons 1 2)) =>  false\n      (atom nil) =>  true\n      (atom '()) =>  true\n      (atom 3) =>  true\n\nNotes::\n.......\n\n      (atom object) == (typep object 'atom) == (not (consp object))\n      == (not (typep object 'cons)) == (typep object '(not cons))\n\n"
}