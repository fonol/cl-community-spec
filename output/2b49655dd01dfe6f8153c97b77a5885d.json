{
    "name": "Dynamic Variables",
    "prev": "Lexical Variables",
    "next": "Constant Variables",
    "up": "The Evaluation Model",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Dynamic Variables",
            "text": "A variable is a dynamic variable if one of the following conditions hold:\n*\n     It is locally declared or globally proclaimed special.\n*\n     It occurs textually within a form that creates a dynamic binding for\n     a variable of the same name, and the binding is not shadowed_2 by a\n     form that creates a lexical binding of the same variable name.\nA dynamic variable can be referenced at any time in any program; there is\nno textual limitation on references to dynamic variables.  At any given\ntime, all dynamic variables with a given name refer to exactly one\nbinding, either in the dynamic environment or in the global environment.\nThe value part of the binding for a dynamic variable might be empty; in\nthis case, the dynamic variable is said to have no value, or to be\nunbound.  A dynamic variable can be made unbound by using makunbound.\nThe effect of binding a dynamic variable is to create a new binding to\nwhich all references to that dynamic variable in any program refer for the\nduration of the evaluation of the form that creates the dynamic binding.\nA dynamic variable can be referenced outside the dynamic extent of a form\nthat binds it.  Such a variable is sometimes called a \"global variable\"\nbut is still in all respects just a dynamic variable whose binding happens\nto exist in the global environment rather than in some dynamic environment.\nA dynamic variable is unbound unless and until explicitly assigned a\nvalue, except for those variables whose initial value is defined in this\nspecification or by an implementation.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Dynamic Variables,  Next: Constant Variables,  Prev: Lexical Variables,  Up: The Evaluation Model\n\nDynamic Variables\n.................\n\nA variable is a dynamic variable if one of the following conditions hold:\n\n*\n     It is locally declared or globally proclaimed special.\n\n*\n     It occurs textually within a form that creates a dynamic binding for\n     a variable of the same name, and the binding is not shadowed_2 by a\n     form that creates a lexical binding of the same variable name.\n\nA dynamic variable can be referenced at any time in any program; there is\nno textual limitation on references to dynamic variables.  At any given\ntime, all dynamic variables with a given name refer to exactly one\nbinding, either in the dynamic environment or in the global environment.\n\nThe value part of the binding for a dynamic variable might be empty; in\nthis case, the dynamic variable is said to have no value, or to be\nunbound.  A dynamic variable can be made unbound by using makunbound.\n\nThe effect of binding a dynamic variable is to create a new binding to\nwhich all references to that dynamic variable in any program refer for the\nduration of the evaluation of the form that creates the dynamic binding.\n\nA dynamic variable can be referenced outside the dynamic extent of a form\nthat binds it.  Such a variable is sometimes called a \"global variable\"\nbut is still in all respects just a dynamic variable whose binding happens\nto exist in the global environment rather than in some dynamic environment.\n\nA dynamic variable is unbound unless and until explicitly assigned a\nvalue, except for those variables whose initial value is defined in this\nspecification or by an implementation.\n\n"
}