{
    "name": "Defaulting of Initialization Arguments",
    "prev": "Declaring the Validity of Initialization Arguments",
    "next": "Rules for Initialization Arguments",
    "up": "Object Creation and Initialization",
    "header": {
        "type": null,
        "text": "Defaulting of Initialization Arguments"
    },
    "sections": [
        {
            "type": "",
            "text": "A default value form can be supplied for an initialization argument by\nusing the :default-initargs class option.  If an initialization argument\nis declared valid by some particular class, its default  value form might\nbe specified by a different class.  In this case :default-initargs is used\nto supply a default value for an inherited initialization argument.\nThe :default-initargs option is used only to provide default values for\ninitialization arguments; it does not declare a symbol as a valid\ninitialization argument name.  Furthermore, the :default-initargs option\nis used only to provide default values for initialization arguments when\nmaking an instance.\nThe argument to the :default-initargs class option is a list of\nalternating initialization argument names and forms.  Each form is the\ndefault  value form for the corresponding initialization argument.  The\ndefault  value form of an initialization argument is used and evaluated\nonly if that initialization argument does not appear in the arguments to\nmake-instance and is not defaulted by a more specific class.  The default\nvalue form is evaluated in the lexical environment of the defclass form\nthat supplied it; the resulting value is used as the initialization\nargument's value.\nThe initialization arguments supplied to make-instance are combined with\ndefaulted initialization arguments to produce a defaulted initialization\nargument list. A defaulted initialization argument list is a list of\nalternating initialization argument names and values in which unsupplied\ninitialization arguments are defaulted and in which the explicitly\nsupplied initialization arguments appear earlier in the list than the\ndefaulted initialization arguments.  Defaulted initialization arguments\nare ordered according to the order in the class precedence list of the\nclasses that supplied the default values.\nThere is a distinction between the purposes of the :default-initargs and\nthe :initform options with respect to the initialization of slots.  The\n:default-initargs class option provides a mechanism for the user to give a\ndefault  value form for an initialization argument without knowing whether\nthe initialization argument initializes a slot or is passed to a method.\nIf that initialization argument is not explicitly supplied in a call to\nmake-instance, the default  value form is used, just as if it had been\nsupplied in the call.  In contrast, the :initform slot option provides a\nmechanism for the user to give a default initial value form for a slot.\nAn :initform form is used to initialize a slot only if no initialization\nargument associated with that slot is given as an argument to\nmake-instance or is defaulted by :default-initargs.\nThe order of evaluation of default value forms for initialization\narguments and the order of evaluation of :initform forms are undefined.\nIf the order of evaluation is important, initialize-instance or\nshared-initialize methods should be used instead.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Defaulting of Initialization Arguments,  Next: Rules for Initialization Arguments,  Prev: Declaring the Validity of Initialization Arguments,  Up: Object Creation and Initialization\n\nDefaulting of Initialization Arguments\n--------------------------------------\n\nA default value form can be supplied for an initialization argument by\nusing the :default-initargs class option.  If an initialization argument\nis declared valid by some particular class, its default  value form might\nbe specified by a different class.  In this case :default-initargs is used\nto supply a default value for an inherited initialization argument.\n\nThe :default-initargs option is used only to provide default values for\ninitialization arguments; it does not declare a symbol as a valid\ninitialization argument name.  Furthermore, the :default-initargs option\nis used only to provide default values for initialization arguments when\nmaking an instance.\n\nThe argument to the :default-initargs class option is a list of\nalternating initialization argument names and forms.  Each form is the\ndefault  value form for the corresponding initialization argument.  The\ndefault  value form of an initialization argument is used and evaluated\nonly if that initialization argument does not appear in the arguments to\nmake-instance and is not defaulted by a more specific class.  The default\nvalue form is evaluated in the lexical environment of the defclass form\nthat supplied it; the resulting value is used as the initialization\nargument's value.\n\nThe initialization arguments supplied to make-instance are combined with\ndefaulted initialization arguments to produce a defaulted initialization\nargument list. A defaulted initialization argument list is a list of\nalternating initialization argument names and values in which unsupplied\ninitialization arguments are defaulted and in which the explicitly\nsupplied initialization arguments appear earlier in the list than the\ndefaulted initialization arguments.  Defaulted initialization arguments\nare ordered according to the order in the class precedence list of the\nclasses that supplied the default values.\n\nThere is a distinction between the purposes of the :default-initargs and\nthe :initform options with respect to the initialization of slots.  The\n:default-initargs class option provides a mechanism for the user to give a\ndefault  value form for an initialization argument without knowing whether\nthe initialization argument initializes a slot or is passed to a method.\nIf that initialization argument is not explicitly supplied in a call to\nmake-instance, the default  value form is used, just as if it had been\nsupplied in the call.  In contrast, the :initform slot option provides a\nmechanism for the user to give a default initial value form for a slot.\nAn :initform form is used to initialize a slot only if no initialization\nargument associated with that slot is given as an argument to\nmake-instance or is defaulted by :default-initargs.\n\nThe order of evaluation of default value forms for initialization\narguments and the order of evaluation of :initform forms are undefined.\nIf the order of evaluation is important, initialize-instance or\nshared-initialize methods should be used instead.\n\n"
}