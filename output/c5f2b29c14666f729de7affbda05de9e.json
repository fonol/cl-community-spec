{
    "name": "Literal Objects in Compiled Files",
    "prev": "File Compilation",
    "next": "Exceptional Situations in the Compiler",
    "up": "Compilation",
    "header": {
        "type": null,
        "text": "Literal Objects in Compiled Files"
    },
    "sections": [
        {
            "type": "",
            "text": "The functions eval and compile are required to ensure that literal objects\nreferenced within the resulting interpreted or compiled code objects are\nthe same as the corresponding objects in the source code.  compile-file,\non the other hand, must produce a compiled file that, when loaded with\nload, constructs the objects defined by the source code and produces\nreferences to them.\nIn the case of compile-file, objects constructed by load of the compiled\nfile cannot be spoken of as being the same as the objects constructed at\ncompile time, because the compiled file may be loaded into a different\nLisp image than the one in which it was compiled.  This section defines\nthe concept of similarity which relates objects in the evaluation\nenvironment to the corresponding objects in the run-time environment.\nThe constraints on literal objects described in this section apply only to\ncompile-file; eval and compile do not copy or coalesce constants.\n* Menu:\n* Externalizable Objects::\n* Similarity of Literal Objects::\n* Similarity of Aggregate Objects::\n* Definition of Similarity::\n* Extensions to Similarity Rules::\n* Additional Constraints on Externalizable Objects::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Literal Objects in Compiled Files,  Next: Exceptional Situations in the Compiler,  Prev: File Compilation,  Up: Compilation\n\nLiteral Objects in Compiled Files\n---------------------------------\n\nThe functions eval and compile are required to ensure that literal objects\nreferenced within the resulting interpreted or compiled code objects are\nthe same as the corresponding objects in the source code.  compile-file,\non the other hand, must produce a compiled file that, when loaded with\nload, constructs the objects defined by the source code and produces\nreferences to them.\n\nIn the case of compile-file, objects constructed by load of the compiled\nfile cannot be spoken of as being the same as the objects constructed at\ncompile time, because the compiled file may be loaded into a different\nLisp image than the one in which it was compiled.  This section defines\nthe concept of similarity which relates objects in the evaluation\nenvironment to the corresponding objects in the run-time environment.\n\nThe constraints on literal objects described in this section apply only to\ncompile-file; eval and compile do not copy or coalesce constants.\n\n* Menu:\n\n* Externalizable Objects::\n* Similarity of Literal Objects::\n* Similarity of Aggregate Objects::\n* Definition of Similarity::\n* Extensions to Similarity Rules::\n* Additional Constraints on Externalizable Objects::\n\n"
}