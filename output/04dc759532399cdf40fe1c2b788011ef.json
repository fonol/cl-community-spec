{
    "name": "make-hash-table",
    "prev": "hash-table",
    "next": "hash-table-p",
    "up": "Hash Tables Dictionary",
    "header": {
        "type": "Function",
        "text": "make-hash-table"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-hash-table",
                    "text": " &key test size rehash-size rehash-threshold =>hash-table\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "test",
                    "desc": "a designator for one of the functions eq, eql, equal, orequalp.\nThe default is eql.\n"
                },
                {
                    "name": "size",
                    "desc": "a non-negative integer.The default is implementation-dependent.\n"
                },
                {
                    "name": "rehash-size",
                    "desc": "a real of type (or (integer 1 *) (float (1.0) *)).  The"
                },
                {
                    "name": "rehash-size",
                    "desc": "a real of type (or (integer 1 *) (float (1.0) *)).  Thedefault is implementation-dependent.\n"
                },
                {
                    "name": "rehash-threshold",
                    "desc": "a real of type (real 0 1).  The default is"
                },
                {
                    "name": "rehash-threshold",
                    "desc": "a real of type (real 0 1).  The default isimplementation-dependent.\n"
                },
                {
                    "name": "hash-table",
                    "desc": "a hash table."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates and returns a new hash table.\ntest determines how keys are compared.  An object is said to be present in\nthe hash-table if that object is the same under the test as the key for\nsome entry in the hash-table.\nsize is a hint to the implementation about how much initial space to\nallocate in the hash-table.\nThis information, taken together with the rehash-threshold, controls the\napproximate number of entries which it should be possible to insert before\nthe table has to grow.\nThe actual size might be rounded up from size to the next `good' size; for\nexample, some implementations might round to the next prime number.\nrehash-size specifies a minimum amount to increase the size of the\nhash-table when it becomes full enough to require rehashing; see\nrehash-theshold below.\nIf rehash-size is an integer, the expected growth rate for the table is\nadditive and the integer is the number of entries to add; if it is a float,\nthe expected growth rate for the table is multiplicative and the float is\nthe ratio of the new size to the old size.\nAs with size, the actual size of the increase might be rounded up.\nrehash-threshold specifies how full the hash-table can get before it must\ngrow.\nIt specifies the maximum desired hash-table occupancy level.\nThe values of rehash-size and rehash-threshold do not constrain the\nimplementation to use any particular method for computing when and by how\nmuch the size of hash-table should be enlarged.  Such decisions are\nimplementation-dependent, and these values only hints from the programmer\nto the implementation, and the implementation is permitted to ignore them.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 46142754>\n      (setf (gethash \"one\" table) 1) =>  1\n      (gethash \"one\" table) =>  NIL, false\n      (setq table (make-hash-table :test 'equal)) =>  #<HASH-TABLE EQUAL 0/139 46145547>\n      (setf (gethash \"one\" table) 1) =>  1\n      (gethash \"one\" table) =>  1, T\n      (make-hash-table :rehash-size 1.5 :rehash-threshold 0.7)\n     =>  #<HASH-TABLE EQL 0/120 46156620>\n"
        },
        {
            "type": "See Also",
            "text": "*Note gethash:: , hash-table\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-hash-table,  Next: hash-table-p,  Prev: hash-table,  Up: Hash Tables Dictionary\n\nmake-hash-table                                                  [Function]\n---------------------------------------------------------------------------\n\n`make-hash-table'  &key test size rehash-size rehash-threshold =>\nhash-table\n\nArguments and Values::\n......................\n\ntest--a designator for one of the functions eq, eql, equal, or\n\nequalp.\n\nThe default is eql.\n\nsize--a non-negative integer.\n\nThe default is implementation-dependent.\n\nrehash-size--a real of type (or (integer 1 *) (float (1.0) *)).  The\ndefault is implementation-dependent.\n\nrehash-threshold--a real of type (real 0 1).  The default is\nimplementation-dependent.\n\nhash-table--a hash table.\n\nDescription::\n.............\n\nCreates and returns a new hash table.\n\ntest determines how keys are compared.  An object is said to be present in\nthe hash-table if that object is the same under the test as the key for\nsome entry in the hash-table.\n\nsize is a hint to the implementation about how much initial space to\nallocate in the hash-table.\n\nThis information, taken together with the rehash-threshold, controls the\napproximate number of entries which it should be possible to insert before\nthe table has to grow.\n\nThe actual size might be rounded up from size to the next `good' size; for\nexample, some implementations might round to the next prime number.\n\nrehash-size specifies a minimum amount to increase the size of the\nhash-table when it becomes full enough to require rehashing; see\nrehash-theshold below.\n\nIf rehash-size is an integer, the expected growth rate for the table is\nadditive and the integer is the number of entries to add; if it is a float,\nthe expected growth rate for the table is multiplicative and the float is\nthe ratio of the new size to the old size.\n\nAs with size, the actual size of the increase might be rounded up.\n\nrehash-threshold specifies how full the hash-table can get before it must\ngrow.\n\nIt specifies the maximum desired hash-table occupancy level.\n\nThe values of rehash-size and rehash-threshold do not constrain the\nimplementation to use any particular method for computing when and by how\nmuch the size of hash-table should be enlarged.  Such decisions are\nimplementation-dependent, and these values only hints from the programmer\nto the implementation, and the implementation is permitted to ignore them.\n\nExamples::\n..........\n\n      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 46142754>\n      (setf (gethash \"one\" table) 1) =>  1\n      (gethash \"one\" table) =>  NIL, false\n      (setq table (make-hash-table :test 'equal)) =>  #<HASH-TABLE EQUAL 0/139 46145547>\n      (setf (gethash \"one\" table) 1) =>  1\n      (gethash \"one\" table) =>  1, T\n      (make-hash-table :rehash-size 1.5 :rehash-threshold 0.7)\n     =>  #<HASH-TABLE EQL 0/120 46156620>\n\nSee Also::\n..........\n\n*Note gethash:: , hash-table\n\n"
}