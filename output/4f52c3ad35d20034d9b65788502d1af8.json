{
    "name": "butlast",
    "prev": "revappend",
    "next": "last",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "butlast, nbutlast"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "butlast",
                    "text": " list &optional n =>  result-list\n"
                },
                {
                    "name": "nbutlast",
                    "text": " list &optional n =>  result-list\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list,which might be a dotted list but must not be a circular list.\n"
                },
                {
                    "name": "n",
                    "desc": "a non-negative integer."
                },
                {
                    "name": "result-list",
                    "desc": "a list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "butlast returns a copy of list from which the last n\nconses\nhave been omitted.  If n is not supplied, its value is 1.  If there are\nfewer than n\nconses\nin list, nil is returned and, in the case of nbutlast, list is not\nmodified.\nnbutlast is like butlast, but nbutlast may modify list.  It changes the\ncdr of the cons n+1 from the end of the list to nil.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq lst '(1 2 3 4 5 6 7 8 9)) =>  (1 2 3 4 5 6 7 8 9)\n      (butlast lst) =>  (1 2 3 4 5 6 7 8)\n      (butlast lst 5) =>  (1 2 3 4)\n      (butlast lst (+ 5 5)) =>  NIL\n      lst =>  (1 2 3 4 5 6 7 8 9)\n      (nbutlast lst 3) =>  (1 2 3 4 5 6)\n      lst =>  (1 2 3 4 5 6)\n      (nbutlast lst 99) =>  NIL\n      lst =>  (1 2 3 4 5 6)\n      (butlast '(a b c d)) =>  (A B C)\n      (butlast '((a b) (c d))) =>  ((A B))\n      (butlast '(a)) =>  NIL\n      (butlast nil) =>  NIL\n      (setq foo (list 'a 'b 'c 'd)) =>  (A B C D)\n      (nbutlast foo) =>  (A B C)\n      foo =>  (A B C)\n      (nbutlast (list 'a)) =>  NIL\n      (nbutlast '()) =>  NIL\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if list is not a proper list or\na dotted list.\nShould signal an error of type type-error if n is not a non-negative\ninteger.\n"
        },
        {
            "type": "Notes",
            "text": "      (butlast list n) == (ldiff list (last list n))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: butlast,  Next: last,  Prev: revappend,  Up: Conses Dictionary\n\nbutlast, nbutlast                                                [Function]\n---------------------------------------------------------------------------\n\n`butlast'  list &optional n =>  result-list\n\n`nbutlast'  list &optional n =>  result-list\n\nArguments and Values::\n......................\n\nlist--a list,\n\nwhich might be a dotted list but must not be a circular list.\n\nn--a non-negative integer.\n\nresult-list--a list.\n\nDescription::\n.............\n\nbutlast returns a copy of list from which the last n\n\nconses\n\nhave been omitted.  If n is not supplied, its value is 1.  If there are\nfewer than n\n\nconses\n\nin list, nil is returned and, in the case of nbutlast, list is not\nmodified.\n\nnbutlast is like butlast, but nbutlast may modify list.  It changes the\ncdr of the cons n+1 from the end of the list to nil.\n\nExamples::\n..........\n\n      (setq lst '(1 2 3 4 5 6 7 8 9)) =>  (1 2 3 4 5 6 7 8 9)\n      (butlast lst) =>  (1 2 3 4 5 6 7 8)\n      (butlast lst 5) =>  (1 2 3 4)\n      (butlast lst (+ 5 5)) =>  NIL\n      lst =>  (1 2 3 4 5 6 7 8 9)\n      (nbutlast lst 3) =>  (1 2 3 4 5 6)\n      lst =>  (1 2 3 4 5 6)\n      (nbutlast lst 99) =>  NIL\n      lst =>  (1 2 3 4 5 6)\n      (butlast '(a b c d)) =>  (A B C)\n      (butlast '((a b) (c d))) =>  ((A B))\n      (butlast '(a)) =>  NIL\n      (butlast nil) =>  NIL\n      (setq foo (list 'a 'b 'c 'd)) =>  (A B C D)\n      (nbutlast foo) =>  (A B C)\n      foo =>  (A B C)\n      (nbutlast (list 'a)) =>  NIL\n      (nbutlast '()) =>  NIL\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if list is not a proper list or\na dotted list.\n\nShould signal an error of type type-error if n is not a non-negative\ninteger.\n\nNotes::\n.......\n\n      (butlast list n) == (ldiff list (last list n))\n\n"
}