{
    "name": "Declarative Method Combination",
    "prev": "Standard Method Combination",
    "next": "Built-in Method Combination Types",
    "up": "Method Selection and Combination",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Declarative Method Combination",
            "text": "The macro define-method-combination defines new forms of method\ncombination.  It provides a mechanism for customizing the production of\nthe effective method. The default procedure for producing an effective\nmethod is described in *Note Determining the Effective Method::.  There\nare two forms of define-method-combination.  The short form is a simple\nfacility while the long form is more powerful and more verbose.  The long\nform resembles defmacro in that the body is an expression that computes a\nLisp form; it provides mechanisms for implementing arbitrary control\nstructures within method combination and for arbitrary processing of\nmethod qualifiers.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Declarative Method Combination,  Next: Built-in Method Combination Types,  Prev: Standard Method Combination,  Up: Method Selection and Combination\n\nDeclarative Method Combination\n..............................\n\nThe macro define-method-combination defines new forms of method\ncombination.  It provides a mechanism for customizing the production of\nthe effective method. The default procedure for producing an effective\nmethod is described in *Note Determining the Effective Method::.  There\nare two forms of define-method-combination.  The short form is a simple\nfacility while the long form is more powerful and more verbose.  The long\nform resembles defmacro in that the body is an expression that computes a\nLisp form; it provides mechanisms for implementing arbitrary control\nstructures within method combination and for arbitrary processing of\nmethod qualifiers.\n\n"
}