{
    "name": "write-string",
    "prev": "read-line",
    "next": "read-sequence",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "write-string, write-line"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "write-string",
                    "text": " string &optional output-stream &key start end =>  string\n"
                },
                {
                    "name": "write-line",
                    "text": " string &optional output-stream &key start end =>  string\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "string",
                    "desc": "a string.output-stream - an output stream designator.  The default is standard\noutput.\n"
                },
                {
                    "name": "start, end",
                    "desc": "bounding index designators of string.  The defaults for start"
                }
            ]
        },
        {
            "type": "Description",
            "text": "write-string writes the characters of the subsequence of string bounded by\nstart and end to output-stream.  write-line does the same thing, but then\noutputs a newline afterwards.\n"
        },
        {
            "type": "Examples",
            "text": "      (prog1 (write-string \"books\" nil :end 4) (write-string \"worms\"))\n      |>  bookworms\n     =>  \"books\"\n      (progn (write-char #\\*)\n             (write-line \"test12\" *standard-output* :end 5)\n             (write-line \"*test2\")\n             (write-char #\\*)\n             nil)\n      |>  *test1\n      |>  *test2\n      |>  *\n     =>  NIL\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*, *terminal-io*.\n"
        },
        {
            "type": "See Also",
            "text": "*Note read-line:: , *Note write-char::\n"
        },
        {
            "type": "Notes",
            "text": "write-line and write-string return string, not the substring bounded by\nstart and end.\n      (write-string string)\n     == (dotimes (i (length string)\n           (write-char (char string i)))\n      (write-line string)\n     == (prog1 (write-string string) (terpri))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: write-string,  Next: read-sequence,  Prev: read-line,  Up: Streams Dictionary\n\nwrite-string, write-line                                         [Function]\n---------------------------------------------------------------------------\n\n`write-string'  string &optional output-stream &key start end =>  string\n\n`write-line'  string &optional output-stream &key start end =>  string\n\nArguments and Values::\n......................\n\nstring--a string.\n\noutput-stream - an output stream designator.  The default is standard\noutput.\n\nstart, end--bounding index designators of string.  The defaults for start\nand end are 0 and nil, respectively.\n\nDescription::\n.............\n\nwrite-string writes the characters of the subsequence of string bounded by\nstart and end to output-stream.  write-line does the same thing, but then\noutputs a newline afterwards.\n\nExamples::\n..........\n\n      (prog1 (write-string \"books\" nil :end 4) (write-string \"worms\"))\n      |>  bookworms\n     =>  \"books\"\n      (progn (write-char #\\*)\n             (write-line \"test12\" *standard-output* :end 5)\n             (write-line \"*test2\")\n             (write-char #\\*)\n             nil)\n      |>  *test1\n      |>  *test2\n      |>  *\n     =>  NIL\n\nAffected By::\n.............\n\n*standard-output*, *terminal-io*.\n\nSee Also::\n..........\n\n*Note read-line:: , *Note write-char::\n\nNotes::\n.......\n\nwrite-line and write-string return string, not the substring bounded by\nstart and end.\n\n      (write-string string)\n     == (dotimes (i (length string)\n           (write-char (char string i)))\n     \n      (write-line string)\n     == (prog1 (write-string string) (terpri))\n\n"
}