{
    "name": "Standard Macro Characters",
    "prev": "Interpretation of Tokens",
    "next": null,
    "up": "Syntax",
    "header": {
        "type": null,
        "text": "Standard Macro Characters"
    },
    "sections": [
        {
            "type": "",
            "text": "If the reader encounters a macro character, then its associated reader\nmacro function is invoked and may produce an object to be returned.  This\nfunction may read the characters following the macro character in the\nstream in any syntax and return the object represented by that syntax.\nAny character can be made to be a macro character.  The macro characters\ndefined initially in a conforming implementation include the following:\n* Menu:\n* Left-Parenthesis::\n* Right-Parenthesis::\n* Single-Quote::\n* Semicolon::\n* Double-Quote::\n* Backquote::\n* Comma::\n* Sharpsign::\n* Re-Reading Abbreviated Expressions::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Standard Macro Characters,  Prev: Interpretation of Tokens,  Up: Syntax\n\nStandard Macro Characters\n=========================\n\nIf the reader encounters a macro character, then its associated reader\nmacro function is invoked and may produce an object to be returned.  This\nfunction may read the characters following the macro character in the\nstream in any syntax and return the object represented by that syntax.\n\nAny character can be made to be a macro character.  The macro characters\ndefined initially in a conforming implementation include the following:\n\n* Menu:\n\n* Left-Parenthesis::\n* Right-Parenthesis::\n* Single-Quote::\n* Semicolon::\n* Double-Quote::\n* Backquote::\n* Comma::\n* Sharpsign::\n* Re-Reading Abbreviated Expressions::\n\n"
}