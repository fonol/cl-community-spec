{
    "name": "NIL",
    "prev": "Use of the Dot Character",
    "next": "Designators",
    "up": "Notational Conventions",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "NIL",
            "text": "nil has a variety of meanings.  It is a symbol in the COMMON-LISP package\nwith the name \"NIL\", it is boolean (and generalized boolean) false, it is\nthe empty list, and it is the name of the empty type (a subtype of all\ntypes).\nWithin Common Lisp, nil can be notated interchangeably as either NIL or ().\nBy convention, the choice of notation offers a hint as to which of its many\nroles it is playing.\n  For Evaluation?  Notation  Typically Implied Role       \n  ________________________________________________________\n  Yes              nil       use as a boolean.            \n  Yes              'nil      use as a symbol.             \n  Yes              '()       use as an empty list         \n  No               nil       use as a symbol or boolean.  \n  No               ()        use as an empty list.        \n               Figure 1-1: Notations for NIL             \nWithin this document only, nil is also sometimes notated as false to\nemphasize its role as a boolean.\nFor example:\n      (print ())                          ;avoided\n      (defun three nil 3)                 ;avoided\n      '(nil nil)                          ;list of two symbols\n      '(() ())                            ;list of empty lists\n      (defun three () 3)                  ;Emphasize empty parameter list.\n      (append '() '()) =>  ()              ;Emphasize use of empty lists\n      (not nil) =>  true                   ;Emphasize use as Boolean false\n      (get 'nil 'color)                   ;Emphasize use as a symbol\nA function is sometimes said to \"be false\" or \"be true\" in some\ncircumstance.  Since no function object can be the same as nil and all\nfunction objects represent true when viewed as booleans, it would be\nmeaningless to say that the function was literally false and uninteresting\nto say that it was literally true.  Instead, these phrases are just\ntraditional alternative ways of saying that the function \"returns false\"\nor \"returns true,\" respectively.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: NIL,  Next: Designators,  Prev: Use of the Dot Character,  Up: Notational Conventions\n\nNIL\n...\n\nnil has a variety of meanings.  It is a symbol in the COMMON-LISP package\nwith the name \"NIL\", it is boolean (and generalized boolean) false, it is\nthe empty list, and it is the name of the empty type (a subtype of all\ntypes).\n\nWithin Common Lisp, nil can be notated interchangeably as either NIL or ().\nBy convention, the choice of notation offers a hint as to which of its many\nroles it is playing.\n\n  For Evaluation?  Notation  Typically Implied Role       \n  ________________________________________________________\n  Yes              nil       use as a boolean.            \n  Yes              'nil      use as a symbol.             \n  Yes              '()       use as an empty list         \n  No               nil       use as a symbol or boolean.  \n  No               ()        use as an empty list.        \n\n               Figure 1-1: Notations for NIL             \n\n\nWithin this document only, nil is also sometimes notated as false to\nemphasize its role as a boolean.\n\nFor example:\n\n      (print ())                          ;avoided\n      (defun three nil 3)                 ;avoided\n      '(nil nil)                          ;list of two symbols\n      '(() ())                            ;list of empty lists\n      (defun three () 3)                  ;Emphasize empty parameter list.\n      (append '() '()) =>  ()              ;Emphasize use of empty lists\n      (not nil) =>  true                   ;Emphasize use as Boolean false\n      (get 'nil 'color)                   ;Emphasize use as a symbol\n\nA function is sometimes said to \"be false\" or \"be true\" in some\ncircumstance.  Since no function object can be the same as nil and all\nfunction objects represent true when viewed as booleans, it would be\nmeaningless to say that the function was literally false and uninteresting\nto say that it was literally true.  Instead, these phrases are just\ntraditional alternative ways of saying that the function \"returns false\"\nor \"returns true,\" respectively.\n\n"
}