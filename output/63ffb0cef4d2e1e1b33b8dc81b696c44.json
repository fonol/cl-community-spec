{
    "name": "Printing Lists and Conses",
    "prev": "Printing Strings",
    "next": "Printing Bit Vectors",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Printing Lists and Conses",
            "text": "Wherever possible, list notation is preferred over dot notation.\nTherefore the following algorithm is used to print a cons x:\n1.\n     A left-parenthesis is printed.\n2.\n     The car of x is printed.\n3.\n     If the cdr of x is itself a cons, it is made to be the current cons\n     (i.e., x becomes that cons),\n     a space\n     is printed, and step 2 is re-entered.\n4.\n     If the cdr of x is not null,\n     a space,\n     a dot,\n     a space,\n     and the cdr of x are printed.\n5.\n     A right-parenthesis is printed.\nActually, the above algorithm is only used when *print-pretty* is false.\nWhen *print-pretty* is true (or when pprint is used), additional\nwhitespace_1 may replace the use of a single space, and a more elaborate\nalgorithm with similar goals but more presentational flexibility is used;\nsee *Note Printer Dispatching::.\nAlthough the two expressions below are equivalent, and the reader accepts\neither one and produces the same cons, the printer always prints such a\ncons in the second form.\n      (a . (b . ((c . (d . nil)) . (e . nil))))\n      (a b (c d) e)\nThe printing of conses is affected by *print-level*, *print-length*, and\n*print-circle*.\nFollowing are examples of printed representations of lists:\n      (a . b)     ;A dotted pair of a and b\n      (a.b)       ;A list of one element, the symbol named a.b\n      (a. b)      ;A list of two elements a. and b\n      (a .b)      ;A list of two elements a and .b\n      (a b . c)   ;A dotted list of a and b with c at the end; two conses\n      .iot        ;The symbol whose name is .iot\n      (. b)       ;Invalid -- an error is signaled if an attempt is made to read\n                  ;this syntax.\n      (a .)       ;Invalid -- an error is signaled.\n      (a .. b)    ;Invalid -- an error is signaled.\n      (a . . b)   ;Invalid -- an error is signaled.\n      (a b c ...) ;Invalid -- an error is signaled.\n      (a \\. b)    ;A list of three elements a, ., and b\n      (a |.| b)   ;A list of three elements a, ., and b\n      (a \\... b)  ;A list of three elements a, ..., and b\n      (a |...| b) ;A list of three elements a, ..., and b\nFor information on how the Lisp reader parses lists and conses, see *Note\nLeft-Parenthesis::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Printing Lists and Conses,  Next: Printing Bit Vectors,  Prev: Printing Strings,  Up: Default Print-Object Methods\n\nPrinting Lists and Conses\n.........................\n\nWherever possible, list notation is preferred over dot notation.\nTherefore the following algorithm is used to print a cons x:\n\n1.\n     A left-parenthesis is printed.\n\n2.\n     The car of x is printed.\n\n3.\n     If the cdr of x is itself a cons, it is made to be the current cons\n     (i.e., x becomes that cons),\n\n     a space\n\n     is printed, and step 2 is re-entered.\n\n4.\n     If the cdr of x is not null,\n\n     a space,\n\n     a dot,\n\n     a space,\n\n     and the cdr of x are printed.\n\n5.\n     A right-parenthesis is printed.\n\nActually, the above algorithm is only used when *print-pretty* is false.\nWhen *print-pretty* is true (or when pprint is used), additional\nwhitespace_1 may replace the use of a single space, and a more elaborate\nalgorithm with similar goals but more presentational flexibility is used;\nsee *Note Printer Dispatching::.\n\nAlthough the two expressions below are equivalent, and the reader accepts\neither one and produces the same cons, the printer always prints such a\ncons in the second form.\n\n      (a . (b . ((c . (d . nil)) . (e . nil))))\n      (a b (c d) e)\n\nThe printing of conses is affected by *print-level*, *print-length*, and\n*print-circle*.\n\nFollowing are examples of printed representations of lists:\n\n      (a . b)     ;A dotted pair of a and b\n      (a.b)       ;A list of one element, the symbol named a.b\n      (a. b)      ;A list of two elements a. and b\n      (a .b)      ;A list of two elements a and .b\n      (a b . c)   ;A dotted list of a and b with c at the end; two conses\n      .iot        ;The symbol whose name is .iot\n      (. b)       ;Invalid -- an error is signaled if an attempt is made to read\n                  ;this syntax.\n      (a .)       ;Invalid -- an error is signaled.\n      (a .. b)    ;Invalid -- an error is signaled.\n      (a . . b)   ;Invalid -- an error is signaled.\n      (a b c ...) ;Invalid -- an error is signaled.\n      (a \\. b)    ;A list of three elements a, ., and b\n      (a |.| b)   ;A list of three elements a, ., and b\n      (a \\... b)  ;A list of three elements a, ..., and b\n      (a |...| b) ;A list of three elements a, ..., and b\n\nFor information on how the Lisp reader parses lists and conses, see *Note\nLeft-Parenthesis::.\n\n"
}