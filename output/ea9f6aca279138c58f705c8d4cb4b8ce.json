{
    "name": "method",
    "prev": "standard-class",
    "next": "standard-method",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "System Class",
        "text": "method"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "method",
                    "link": "ea9f6aca279138c58f705c8d4cb4b8ce"
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "A method is an object that represents a modular part of the behavior of a\ngeneric function.\nA method contains code to implement the method's behavior, a sequence of\nparameter specializers that specify when the given method is applicable,\nand a sequence of qualifiers that is used by the method combination\nfacility to distinguish among methods.  Each required parameter of each\nmethod has an associated parameter specializer, and the method will be\ninvoked only on arguments that satisfy its parameter specializers.\nThe method combination facility controls the selection of methods, the\norder in which they are run, and the values that are returned by the\ngeneric function.  The object system offers a default method combination\ntype and provides a facility for declaring new types of method combination.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Generic Functions and Methods::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: method,  Next: standard-method,  Prev: standard-class,  Up: Types and Classes Dictionary\n\nmethod                                                       [System Class]\n---------------------------------------------------------------------------\n\nClass Precedence List::\n.......................\n\nmethod, t\n\nDescription::\n.............\n\nA method is an object that represents a modular part of the behavior of a\ngeneric function.\n\nA method contains code to implement the method's behavior, a sequence of\nparameter specializers that specify when the given method is applicable,\nand a sequence of qualifiers that is used by the method combination\nfacility to distinguish among methods.  Each required parameter of each\nmethod has an associated parameter specializer, and the method will be\ninvoked only on arguments that satisfy its parameter specializers.\n\nThe method combination facility controls the selection of methods, the\norder in which they are run, and the values that are returned by the\ngeneric function.  The object system offers a default method combination\ntype and provides a facility for declaring new types of method combination.\n\nSee Also::\n..........\n\n*Note Generic Functions and Methods::\n\n"
}