{
    "name": "time",
    "prev": "step",
    "next": "internal-time-units-per-second",
    "up": "Environment Dictionary",
    "header": {
        "type": "Macro",
        "text": "time"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "time",
                    "text": " form =>  {result}*\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "form",
                    "desc": "a form; evaluated as described below."
                },
                {
                    "name": "results",
                    "desc": "the values returned by the form."
                }
            ]
        },
        {
            "type": "Description",
            "text": "time evaluates form in the current environment (lexical and dynamic).  A\ncall to time can be compiled.\ntime prints various timing data and other information to trace output.\nThe nature and format of the printed information is implementation-defined.\nImplementations are encouraged to provide such information as elapsed real\ntime, machine run time, and storage management statistics.\n"
        },
        {
            "type": "Affected By",
            "text": "The accuracy of the results depends, among other things, on the accuracy\nof the corresponding functions provided by the underlying operating system.\nThe magnitude of the results may depend on the hardware, the operating\nsystem, the lisp implementation, and the state of the global environment.\nSome specific issues which frequently affect the outcome are hardware\nspeed, nature of the scheduler (if any), number of competing processes (if\nany), system paging, whether the call is interpreted or compiled, whether\nfunctions called are compiled, the kind of garbage collector involved and\nwhether it runs, whether internal data structures (e.g., hash tables) are\nimplicitly reorganized, etc.\n"
        },
        {
            "type": "See Also",
            "text": "*Note get-internal-real-time:: , *Note get-internal-run-time::\n"
        },
        {
            "type": "Notes",
            "text": "In general, these timings are not guaranteed to be reliable enough for\nmarketing comparisons. Their value is primarily heuristic, for tuning\npurposes.\nFor useful background information on the complicated issues involved in\ninterpreting timing results, see Performance and Evaluation of Lisp\nPrograms.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: time,  Next: internal-time-units-per-second,  Prev: step,  Up: Environment Dictionary\n\ntime                                                                [Macro]\n---------------------------------------------------------------------------\n\n`time'  form =>  {result}*\n\nArguments and Values::\n......................\n\nform--a form; evaluated as described below.\n\nresults--the values returned by the form.\n\nDescription::\n.............\n\ntime evaluates form in the current environment (lexical and dynamic).  A\ncall to time can be compiled.\n\ntime prints various timing data and other information to trace output.\nThe nature and format of the printed information is implementation-defined.\nImplementations are encouraged to provide such information as elapsed real\ntime, machine run time, and storage management statistics.\n\nAffected By::\n.............\n\nThe accuracy of the results depends, among other things, on the accuracy\nof the corresponding functions provided by the underlying operating system.\n\nThe magnitude of the results may depend on the hardware, the operating\nsystem, the lisp implementation, and the state of the global environment.\nSome specific issues which frequently affect the outcome are hardware\nspeed, nature of the scheduler (if any), number of competing processes (if\nany), system paging, whether the call is interpreted or compiled, whether\nfunctions called are compiled, the kind of garbage collector involved and\nwhether it runs, whether internal data structures (e.g., hash tables) are\nimplicitly reorganized, etc.\n\nSee Also::\n..........\n\n*Note get-internal-real-time:: , *Note get-internal-run-time::\n\nNotes::\n.......\n\nIn general, these timings are not guaranteed to be reliable enough for\nmarketing comparisons. Their value is primarily heuristic, for tuning\npurposes.\n\nFor useful background information on the complicated issues involved in\ninterpreting timing results, see Performance and Evaluation of Lisp\nPrograms.\n\n"
}