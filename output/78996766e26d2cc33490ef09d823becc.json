{
    "name": "Embedded Newlines in Condition Reports",
    "prev": "Leading and Trailing Newlines in Condition Reports",
    "next": "Note about Tabs in Condition Reports",
    "up": "Printing Conditions",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Embedded Newlines in Condition Reports",
            "text": "Especially if it is long, it is permissible and appropriate for a report\nmessage to contain one or more embedded newlines.\nIf the calling routine conventionally inserts some additional prefix (such\nas \"Error: \" or \";; Error: \") on the first line of the message, it must\nalso assure that an appropriate prefix will be added to each subsequent\nline of the output, so that the left edge of the message output by the\ncondition reporter will still be properly aligned.\n      (defun test ()\n        (error \"This is an error message.~%It has two lines.\"))\n      ;; Implementation A\n      (test)\n      This is an error message.\n      It has two lines.\n      ;; Implementation B\n      (test)\n      ;; Error: This is an error message.\n      ;;        It has two lines.\n      ;; Implementation C\n      (test)\n      >> Error: This is an error message.\n                It has two lines.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Embedded Newlines in Condition Reports,  Next: Note about Tabs in Condition Reports,  Prev: Leading and Trailing Newlines in Condition Reports,  Up: Printing Conditions\n\nEmbedded Newlines in Condition Reports\n......................................\n\nEspecially if it is long, it is permissible and appropriate for a report\nmessage to contain one or more embedded newlines.\n\nIf the calling routine conventionally inserts some additional prefix (such\nas \"Error: \" or \";; Error: \") on the first line of the message, it must\nalso assure that an appropriate prefix will be added to each subsequent\nline of the output, so that the left edge of the message output by the\ncondition reporter will still be properly aligned.\n\n      (defun test ()\n        (error \"This is an error message.~%It has two lines.\"))\n     \n      ;; Implementation A\n      (test)\n      This is an error message.\n      It has two lines.\n     \n      ;; Implementation B\n      (test)\n      ;; Error: This is an error message.\n      ;;        It has two lines.\n     \n      ;; Implementation C\n      (test)\n      >> Error: This is an error message.\n                It has two lines.\n\n"
}