{
    "name": "Exceptional Situations in the Compiler",
    "prev": "Literal Objects in Compiled Files",
    "next": null,
    "up": "Compilation",
    "header": {
        "type": null,
        "text": "Exceptional Situations in the Compiler"
    },
    "sections": [
        {
            "type": "",
            "text": "compile and compile-file are permitted to signal errors and warnings,\nincluding errors due to compile-time processing of (eval-when\n(:compile-toplevel) ...) forms, macro expansion, and conditions signaled\nby the compiler itself.\nConditions of type error might be signaled by the compiler in situations\nwhere the compilation cannot proceed without intervention.\nIn addition to situations for which the standard specifies that conditions\nof type warning must or might be signaled, warnings might be signaled in\nsituations where the compiler can determine that the consequences are\nundefined or that a run-time error will be signaled.  Examples of this\nsituation are as follows: violating type declarations, altering or\nassigning the value of a constant defined with defconstant, calling\nbuilt-in Lisp functions with a wrong number of arguments or malformed\nkeyword argument lists, and using unrecognized declaration specifiers.\nThe compiler is permitted to issue warnings about matters of programming\nstyle as conditions of type style-warning.  Examples of this situation are\nas follows: redefining a function using a different argument list, calling\na function with a wrong number of arguments, not declaring ignore of a\nlocal variable that is not referenced, and referencing a variable declared\nignore.\nBoth compile and compile-file are permitted (but not required) to\nestablish a handler for conditions of type error.  For example, they might\nsignal a warning, and restart compilation from some\nimplementation-dependent point in order to let the compilation proceed\nwithout manual intervention.\nBoth compile and compile-file return three values, the second two\nindicating whether the source code being compiled contained errors and\nwhether style warnings were issued.\nSome warnings might be deferred until the end of compilation.  See\nwith-compilation-unit.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Exceptional Situations in the Compiler,  Prev: Literal Objects in Compiled Files,  Up: Compilation\n\nExceptional Situations in the Compiler\n--------------------------------------\n\ncompile and compile-file are permitted to signal errors and warnings,\nincluding errors due to compile-time processing of (eval-when\n(:compile-toplevel) ...) forms, macro expansion, and conditions signaled\nby the compiler itself.\n\nConditions of type error might be signaled by the compiler in situations\nwhere the compilation cannot proceed without intervention.\n\nIn addition to situations for which the standard specifies that conditions\nof type warning must or might be signaled, warnings might be signaled in\nsituations where the compiler can determine that the consequences are\nundefined or that a run-time error will be signaled.  Examples of this\nsituation are as follows: violating type declarations, altering or\nassigning the value of a constant defined with defconstant, calling\nbuilt-in Lisp functions with a wrong number of arguments or malformed\nkeyword argument lists, and using unrecognized declaration specifiers.\n\nThe compiler is permitted to issue warnings about matters of programming\nstyle as conditions of type style-warning.  Examples of this situation are\nas follows: redefining a function using a different argument list, calling\na function with a wrong number of arguments, not declaring ignore of a\nlocal variable that is not referenced, and referencing a variable declared\nignore.\n\nBoth compile and compile-file are permitted (but not required) to\nestablish a handler for conditions of type error.  For example, they might\nsignal a warning, and restart compilation from some\nimplementation-dependent point in order to let the compilation proceed\nwithout manual intervention.\n\nBoth compile and compile-file return three values, the second two\nindicating whether the source code being compiled contained errors and\nwhether style warnings were issued.\n\nSome warnings might be deferred until the end of compilation.  See\nwith-compilation-unit.\n\n"
}