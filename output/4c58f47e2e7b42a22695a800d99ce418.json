{
    "name": "reinitialize-instance",
    "prev": "allocate-instance",
    "next": "shared-initialize",
    "up": "Objects Dictionary",
    "header": {
        "type": "Standard Generic Function",
        "text": "reinitialize-instance"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "reinitialize-instance",
                    "text": " instance &rest initargs &key &allow-other-keys =>instance\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "reinitialize-instance",
                    "text": " (instance standard-object) &rest initargs\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "instance",
                    "desc": "an object."
                },
                {
                    "name": "initargs",
                    "desc": "an initialization argument list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The generic function reinitialize-instance can be used to change the\nvalues of local slots of an instance according to initargs.  This generic\nfunction can be called by users.\nThe system-supplied primary method for reinitialize-instance checks the\nvalidity of initargs and signals an error if an initarg is supplied that\nis not declared as valid.  The method then calls the generic function\nshared-initialize with the following arguments:  the instance, nil (which\nmeans no slots should be initialized according to their initforms), and the\ninitargs it received.\n"
        },
        {
            "type": "Side Effects",
            "text": "The generic function reinitialize-instance changes the values of local\nslots.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The system-supplied primary method for reinitialize-instance signals an\nerror if an initarg is supplied that is not declared as valid.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Initialize-Instance:: , *Note Shared-Initialize:: , *Note\nupdate-instance-for-redefined-class:: , *Note\nupdate-instance-for-different-class:: , *Note slot-boundp:: , *Note\nslot-makunbound:: , *Note Reinitializing an Instance::, *Note Rules for\nInitialization Arguments::, *Note Declaring the Validity of Initialization\nArguments::\n"
        },
        {
            "type": "Notes",
            "text": "Initargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for reinitialize-instance or shared-initialize.\nThe keyword name of each keyword parameter specifier in the lambda list of\nany method defined on reinitialize-instance or shared-initialize is\ndeclared as a valid initialization argument name for all classes for which\nthat method is applicable.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: reinitialize-instance,  Next: shared-initialize,  Prev: allocate-instance,  Up: Objects Dictionary\n\nreinitialize-instance                           [Standard Generic Function]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`reinitialize-instance'  instance &rest initargs &key &allow-other-keys =>\ninstance\n\nMethod Signatures::\n...................\n\n`reinitialize-instance'  (instance standard-object) &rest initargs\n\nArguments and Values::\n......................\n\ninstance--an object.\n\ninitargs--an initialization argument list.\n\nDescription::\n.............\n\nThe generic function reinitialize-instance can be used to change the\nvalues of local slots of an instance according to initargs.  This generic\nfunction can be called by users.\n\nThe system-supplied primary method for reinitialize-instance checks the\nvalidity of initargs and signals an error if an initarg is supplied that\nis not declared as valid.  The method then calls the generic function\nshared-initialize with the following arguments:  the instance, nil (which\nmeans no slots should be initialized according to their initforms), and the\ninitargs it received.\n\nSide Effects::\n..............\n\nThe generic function reinitialize-instance changes the values of local\nslots.\n\nExceptional Situations::\n........................\n\nThe system-supplied primary method for reinitialize-instance signals an\nerror if an initarg is supplied that is not declared as valid.\n\nSee Also::\n..........\n\n*Note Initialize-Instance:: , *Note Shared-Initialize:: , *Note\nupdate-instance-for-redefined-class:: , *Note\nupdate-instance-for-different-class:: , *Note slot-boundp:: , *Note\nslot-makunbound:: , *Note Reinitializing an Instance::, *Note Rules for\nInitialization Arguments::, *Note Declaring the Validity of Initialization\nArguments::\n\nNotes::\n.......\n\nInitargs are declared as valid by using the :initarg option to defclass,\nor by defining methods for reinitialize-instance or shared-initialize.\nThe keyword name of each keyword parameter specifier in the lambda list of\nany method defined on reinitialize-instance or shared-initialize is\ndeclared as a valid initialization argument name for all classes for which\nthat method is applicable.\n\n"
}