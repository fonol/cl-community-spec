{
    "name": "hash-table-count",
    "prev": "hash-table-p",
    "next": "hash-table-rehash-size",
    "up": "Hash Tables Dictionary",
    "header": {
        "type": "Function",
        "text": "hash-table-count"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "hash-table-count",
                    "text": " hash-table =>  count\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "hash-table",
                    "desc": "a hash table."
                },
                {
                    "name": "count",
                    "desc": "a non-negative integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the number of entries in the hash-table.  If hash-table has just\nbeen created or newly cleared (see clrhash) the entry count is 0.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32115135>\n      (hash-table-count table) =>  0\n      (setf (gethash 57 table) \"fifty-seven\") =>  \"fifty-seven\"\n      (hash-table-count table) =>  1\n      (dotimes (i 100) (setf (gethash i table) i)) =>  NIL\n      (hash-table-count table) =>  100\n"
        },
        {
            "type": "Affected By",
            "text": "clrhash, remhash, setf of gethash\n"
        },
        {
            "type": "See Also",
            "text": "*Note hash-table-size::\n"
        },
        {
            "type": "Notes",
            "text": "The following relationships are functionally correct, although in practice\nusing hash-table-count is probably much faster:\n      (hash-table-count table) ==\n      (loop for value being the hash-values of table count t) ==\n      (let ((total 0))\n        (maphash #'(lambda (key value)\n                     (declare (ignore key value))\n                     (incf total))\n                 table)\n        total)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: hash-table-count,  Next: hash-table-rehash-size,  Prev: hash-table-p,  Up: Hash Tables Dictionary\n\nhash-table-count                                                 [Function]\n---------------------------------------------------------------------------\n\n`hash-table-count'  hash-table =>  count\n\nArguments and Values::\n......................\n\nhash-table--a hash table.\n\ncount--a non-negative integer.\n\nDescription::\n.............\n\nReturns the number of entries in the hash-table.  If hash-table has just\nbeen created or newly cleared (see clrhash) the entry count is 0.\n\nExamples::\n..........\n\n      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32115135>\n      (hash-table-count table) =>  0\n      (setf (gethash 57 table) \"fifty-seven\") =>  \"fifty-seven\"\n      (hash-table-count table) =>  1\n      (dotimes (i 100) (setf (gethash i table) i)) =>  NIL\n      (hash-table-count table) =>  100\n\nAffected By::\n.............\n\nclrhash, remhash, setf of gethash\n\nSee Also::\n..........\n\n*Note hash-table-size::\n\nNotes::\n.......\n\nThe following relationships are functionally correct, although in practice\nusing hash-table-count is probably much faster:\n\n      (hash-table-count table) ==\n      (loop for value being the hash-values of table count t) ==\n      (let ((total 0))\n        (maphash #'(lambda (key value)\n                     (declare (ignore key value))\n                     (incf total))\n                 table)\n        total)\n\n"
}