{
    "name": "shadow",
    "prev": "rename-package",
    "next": "shadowing-import",
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "shadow"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "shadow",
                    "text": " symbol-names &optional package =>  t\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "symbol-names",
                    "desc": "a designator for a list of string designators."
                }
            ]
        },
        {
            "type": "Description",
            "text": "shadow assures that symbols with names given by symbol-names are present in\nthe package.\nSpecifically, package is searched for symbols with the names supplied by\nsymbol-names.\nFor each such name, if a corresponding symbol is not present in package\n(directly, not by inheritance), then a corresponding symbol is created\nwith that name, and inserted into package as an internal symbol.  The\ncorresponding symbol, whether pre-existing or newly created, is then\nadded, if not already present, to the shadowing symbols list of package.\n"
        },
        {
            "type": "Examples",
            "text": "      (package-shadowing-symbols (make-package 'temp)) =>  NIL\n      (find-symbol 'car 'temp) =>  CAR, :INHERITED\n      (shadow 'car 'temp) =>  T\n      (find-symbol 'car 'temp) =>  TEMP::CAR, :INTERNAL\n      (package-shadowing-symbols 'temp) =>  (TEMP::CAR)\n      (make-package 'test-1) =>  #<PACKAGE \"TEST-1\">\n      (intern \"TEST\" (find-package 'test-1)) =>  TEST-1::TEST, NIL\n      (shadow 'test-1::test (find-package 'test-1)) =>  T\n      (shadow 'TEST (find-package 'test-1)) =>  T\n      (assert (not (null (member 'test-1::test (package-shadowing-symbols\n                                                 (find-package 'test-1))))))\n      (make-package 'test-2) =>  #<PACKAGE \"TEST-2\">\n      (intern \"TEST\" (find-package 'test-2)) =>  TEST-2::TEST, NIL\n      (export 'test-2::test (find-package 'test-2)) =>  T\n      (use-package 'test-2 (find-package 'test-1))    ;should not error\n"
        },
        {
            "type": "Side Effects",
            "text": "shadow changes the state of the package system in such a way that the\npackage consistency rules do not hold across the change.\n"
        },
        {
            "type": "Affected By",
            "text": "Current state of the package system.\n"
        },
        {
            "type": "See Also",
            "text": "*Note package-shadowing-symbols:: , *Note Package Concepts::\n"
        },
        {
            "type": "Notes",
            "text": "If a symbol with a name in symbol-names already exists in package, but by\ninheritance, the inherited symbol becomes shadowed_3 by a newly created\ninternal symbol.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: shadow,  Next: shadowing-import,  Prev: rename-package,  Up: Packages Dictionary\n\nshadow                                                           [Function]\n---------------------------------------------------------------------------\n\n`shadow'  symbol-names &optional package =>  t\n\nArguments and Values::\n......................\n\nsymbol-names--a designator for a list of string designators.\n\npackage--a package designator.\n\nThe default is the current package.\n\nDescription::\n.............\n\nshadow assures that symbols with names given by symbol-names are present in\nthe package.\n\nSpecifically, package is searched for symbols with the names supplied by\nsymbol-names.\n\nFor each such name, if a corresponding symbol is not present in package\n(directly, not by inheritance), then a corresponding symbol is created\nwith that name, and inserted into package as an internal symbol.  The\ncorresponding symbol, whether pre-existing or newly created, is then\nadded, if not already present, to the shadowing symbols list of package.\n\nExamples::\n..........\n\n      (package-shadowing-symbols (make-package 'temp)) =>  NIL\n      (find-symbol 'car 'temp) =>  CAR, :INHERITED\n      (shadow 'car 'temp) =>  T\n      (find-symbol 'car 'temp) =>  TEMP::CAR, :INTERNAL\n      (package-shadowing-symbols 'temp) =>  (TEMP::CAR)\n\n      (make-package 'test-1) =>  #<PACKAGE \"TEST-1\">\n      (intern \"TEST\" (find-package 'test-1)) =>  TEST-1::TEST, NIL\n      (shadow 'test-1::test (find-package 'test-1)) =>  T\n      (shadow 'TEST (find-package 'test-1)) =>  T\n      (assert (not (null (member 'test-1::test (package-shadowing-symbols\n                                                 (find-package 'test-1))))))\n     \n      (make-package 'test-2) =>  #<PACKAGE \"TEST-2\">\n      (intern \"TEST\" (find-package 'test-2)) =>  TEST-2::TEST, NIL\n      (export 'test-2::test (find-package 'test-2)) =>  T\n      (use-package 'test-2 (find-package 'test-1))    ;should not error\n\nSide Effects::\n..............\n\nshadow changes the state of the package system in such a way that the\npackage consistency rules do not hold across the change.\n\nAffected By::\n.............\n\nCurrent state of the package system.\n\nSee Also::\n..........\n\n*Note package-shadowing-symbols:: , *Note Package Concepts::\n\nNotes::\n.......\n\nIf a symbol with a name in symbol-names already exists in package, but by\ninheritance, the inherited symbol becomes shadowed_3 by a newly created\ninternal symbol.\n\n"
}