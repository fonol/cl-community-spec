{
    "name": "subsetp",
    "prev": "set-exclusive-or",
    "next": "union",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "subsetp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "subsetp",
                    "text": " list-1 list-2 &key key test test-not =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list-1",
                    "desc": "a proper list."
                },
                {
                    "name": "list-2",
                    "desc": "a proper list."
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns a"
                },
                {
                    "name": "test-not",
                    "desc": "a designator for a function of two arguments that returns ageneralized boolean.\n"
                },
                {
                    "name": "key",
                    "desc": "a designator for a function of one argument, or nil."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "subsetp returns true if every element of list-1 matches some element of\nlist-2, and false otherwise.\nWhether a list element is the same as another list element is determined\nby the functions specified by the keyword arguments.  The first argument\nto the :test or :test-not function is typically part of an element of\nlist-1 extracted by the :key function; the second argument is  typically\npart of an element of list-2 extracted by the :key function.\nThe argument to the :key function is an element of either list-1 or\nlist-2; the return value is part of the element of the supplied list\nelement.  If :key is not supplied or nil, the list-1 or list-2 element\nitself is supplied to the :test or :test-not function.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq cosmos '(1 \"a\" (1 2))) =>  (1 \"a\" (1 2))\n      (subsetp '(1) cosmos) =>  true\n      (subsetp '((1 2)) cosmos) =>  false\n      (subsetp '((1 2)) cosmos :test 'equal) =>  true\n      (subsetp '(1 \"A\") cosmos :test #'equalp) =>  true\n      (subsetp '((1) (2)) '((1) (2))) =>  false\n      (subsetp '((1) (2)) '((1) (2)) :key #'car) =>  true\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should be prepared to signal an error of type type-error if list-1 and\nlist-2 are not proper lists.\n"
        },
        {
            "type": "See Also",
            "text": "*Note Traversal Rules and Side Effects::\n"
        },
        {
            "type": "Notes",
            "text": "The :test-not parameter is deprecated.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: subsetp,  Next: union,  Prev: set-exclusive-or,  Up: Conses Dictionary\n\nsubsetp                                                          [Function]\n---------------------------------------------------------------------------\n\n`subsetp'  list-1 list-2 &key key test test-not =>  generalized-boolean\n\nArguments and Values::\n......................\n\nlist-1--a proper list.\n\nlist-2--a proper list.\n\ntest--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\ntest-not--a designator for a function of two arguments that returns a\ngeneralized boolean.\n\nkey--a designator for a function of one argument, or nil.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nsubsetp returns true if every element of list-1 matches some element of\nlist-2, and false otherwise.\n\nWhether a list element is the same as another list element is determined\nby the functions specified by the keyword arguments.  The first argument\nto the :test or :test-not function is typically part of an element of\nlist-1 extracted by the :key function; the second argument is  typically\npart of an element of list-2 extracted by the :key function.\n\nThe argument to the :key function is an element of either list-1 or\nlist-2; the return value is part of the element of the supplied list\nelement.  If :key is not supplied or nil, the list-1 or list-2 element\nitself is supplied to the :test or :test-not function.\n\nExamples::\n..........\n\n      (setq cosmos '(1 \"a\" (1 2))) =>  (1 \"a\" (1 2))\n      (subsetp '(1) cosmos) =>  true\n      (subsetp '((1 2)) cosmos) =>  false\n      (subsetp '((1 2)) cosmos :test 'equal) =>  true\n      (subsetp '(1 \"A\") cosmos :test #'equalp) =>  true\n      (subsetp '((1) (2)) '((1) (2))) =>  false\n      (subsetp '((1) (2)) '((1) (2)) :key #'car) =>  true\n\nExceptional Situations::\n........................\n\nShould be prepared to signal an error of type type-error if list-1 and\nlist-2 are not proper lists.\n\nSee Also::\n..........\n\n*Note Traversal Rules and Side Effects::\n\nNotes::\n.......\n\nThe :test-not parameter is deprecated.\n\n"
}