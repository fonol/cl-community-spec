{
    "name": "sleep",
    "prev": "get-universal-time",
    "next": "apropos",
    "up": "Environment Dictionary",
    "header": {
        "type": "Function",
        "text": "sleep"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "sleep",
                    "text": " seconds =>  nil\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "seconds",
                    "desc": "a non-negative real."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Causes execution to cease and become dormant for approximately the seconds\nof real time indicated by seconds, whereupon execution is resumed.\n"
        },
        {
            "type": "Examples",
            "text": "      (sleep 1) =>  NIL\n     ;; Actually, since SLEEP is permitted to use approximate timing,\n     ;; this might not always yield true, but it will often enough that\n     ;; we felt it to be a productive example of the intent.\n      (let ((then (get-universal-time))\n            (now  (progn (sleep 10) (get-universal-time))))\n        (>= (- now then) 10))\n     =>  true\n"
        },
        {
            "type": "Side Effects",
            "text": "Causes processing to pause.\n"
        },
        {
            "type": "Affected By",
            "text": "The granularity of the scheduler.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if seconds is not a non-negative\nreal.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: sleep,  Next: apropos,  Prev: get-universal-time,  Up: Environment Dictionary\n\nsleep                                                            [Function]\n---------------------------------------------------------------------------\n\n`sleep'  seconds =>  nil\n\nArguments and Values::\n......................\n\nseconds--a non-negative real.\n\nDescription::\n.............\n\nCauses execution to cease and become dormant for approximately the seconds\nof real time indicated by seconds, whereupon execution is resumed.\n\nExamples::\n..........\n\n      (sleep 1) =>  NIL\n     \n     ;; Actually, since SLEEP is permitted to use approximate timing,\n     ;; this might not always yield true, but it will often enough that\n     ;; we felt it to be a productive example of the intent.\n      (let ((then (get-universal-time))\n            (now  (progn (sleep 10) (get-universal-time))))\n        (>= (- now then) 10))\n     =>  true\n\nSide Effects::\n..............\n\nCauses processing to pause.\n\nAffected By::\n.............\n\nThe granularity of the scheduler.\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if seconds is not a non-negative\nreal.\n\n"
}