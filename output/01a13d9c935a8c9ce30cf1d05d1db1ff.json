{
    "name": "copy-alist",
    "prev": "assoc",
    "next": "pairlis",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "copy-alist"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "copy-alist",
                    "text": " alist =>  new-alist\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "alist",
                    "desc": "an association list."
                },
                {
                    "name": "new-alist",
                    "desc": "an association list."
                }
            ]
        },
        {
            "type": "Description",
            "text": "copy-alist returns a copy of alist.\nThe list structure of alist is copied, and the elements of alist which are\nconses are also copied (as conses only).  Any other objects which are\nreferred to, whether directly or indirectly, by the alist continue to be\nshared.\n"
        },
        {
            "type": "Examples",
            "text": "     (defparameter *alist* (acons 1 \"one\" (acons 2 \"two\" '())))\n     *alist* =>  ((1 . \"one\") (2 . \"two\"))\n     (defparameter *list-copy* (copy-list *alist*))\n     *list-copy* =>  ((1 . \"one\") (2 . \"two\"))\n     (defparameter *alist-copy* (copy-alist *alist*))\n     *alist-copy* =>  ((1 . \"one\") (2 . \"two\"))\n     (setf (cdr (assoc 2 *alist-copy*)) \"deux\") =>  \"deux\"\n     *alist-copy* =>  ((1 . \"one\") (2 . \"deux\"))\n     *alist* =>  ((1 . \"one\") (2 . \"two\"))\n     (setf (cdr (assoc 1 *list-copy*)) \"uno\") =>  \"uno\"\n     *list-copy* =>  ((1 . \"uno\") (2 . \"two\"))\n     *alist* =>  ((1 . \"uno\") (2 . \"two\"))\n"
        },
        {
            "type": "See Also",
            "text": "*Note copy-list::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: copy-alist,  Next: pairlis,  Prev: assoc,  Up: Conses Dictionary\n\ncopy-alist                                                       [Function]\n---------------------------------------------------------------------------\n\n`copy-alist'  alist =>  new-alist\n\nArguments and Values::\n......................\n\nalist--an association list.\n\nnew-alist--an association list.\n\nDescription::\n.............\n\ncopy-alist returns a copy of alist.\n\nThe list structure of alist is copied, and the elements of alist which are\nconses are also copied (as conses only).  Any other objects which are\nreferred to, whether directly or indirectly, by the alist continue to be\nshared.\n\nExamples::\n..........\n\n     (defparameter *alist* (acons 1 \"one\" (acons 2 \"two\" '())))\n     *alist* =>  ((1 . \"one\") (2 . \"two\"))\n     (defparameter *list-copy* (copy-list *alist*))\n     *list-copy* =>  ((1 . \"one\") (2 . \"two\"))\n     (defparameter *alist-copy* (copy-alist *alist*))\n     *alist-copy* =>  ((1 . \"one\") (2 . \"two\"))\n     (setf (cdr (assoc 2 *alist-copy*)) \"deux\") =>  \"deux\"\n     *alist-copy* =>  ((1 . \"one\") (2 . \"deux\"))\n     *alist* =>  ((1 . \"one\") (2 . \"two\"))\n     (setf (cdr (assoc 1 *list-copy*)) \"uno\") =>  \"uno\"\n     *list-copy* =>  ((1 . \"uno\") (2 . \"two\"))\n     *alist* =>  ((1 . \"uno\") (2 . \"two\"))\n\nSee Also::\n..........\n\n*Note copy-list::\n\n"
}