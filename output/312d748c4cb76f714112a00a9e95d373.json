{
    "name": "Sharpsign Sharpsign",
    "prev": "Sharpsign Equal-Sign",
    "next": "Sharpsign Plus",
    "up": "Sharpsign",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Sharpsign Sharpsign",
            "text": "#n#\n#n#, where n is a required unsigned decimal integer, provides a reference\nto some object labeled by #n=; that is, #n# represents a pointer to the\nsame (eq) object labeled by #n=.  For example, a structure created in the\nvariable y by this code:\n      (setq x (list 'p 'q))\n      (setq y (list (list 'a 'b) x 'foo x))\n      (rplacd (last y) (cdr y))\ncould be represented in this way:\n      ((a b) . #1=(#2=(p q) foo #2# . #1#))\nWithout this notation, but with *print-length* set to 10 and\n*print-circle* set to nil, the structure would print in this way:\n      ((a b) (p q) foo (p q) (p q) foo (p q) (p q) foo (p q) ...)\nA reference #n# may only occur after a label #n=; forward references are\nnot permitted.  The reference may not appear as the labeled object itself\n(that is, #n=#n#) may not be written because the object labeled by #n= is\nnot well defined in this case.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sharpsign Sharpsign,  Next: Sharpsign Plus,  Prev: Sharpsign Equal-Sign,  Up: Sharpsign\n\nSharpsign Sharpsign\n...................\n\n#n#\n\n#n#, where n is a required unsigned decimal integer, provides a reference\nto some object labeled by #n=; that is, #n# represents a pointer to the\nsame (eq) object labeled by #n=.  For example, a structure created in the\nvariable y by this code:\n\n      (setq x (list 'p 'q))\n      (setq y (list (list 'a 'b) x 'foo x))\n      (rplacd (last y) (cdr y))\n\ncould be represented in this way:\n\n      ((a b) . #1=(#2=(p q) foo #2# . #1#))\n\nWithout this notation, but with *print-length* set to 10 and\n*print-circle* set to nil, the structure would print in this way:\n\n      ((a b) (p q) foo (p q) (p q) foo (p q) (p q) foo (p q) ...)\n\nA reference #n# may only occur after a label #n=; forward references are\nnot permitted.  The reference may not appear as the labeled object itself\n(that is, #n=#n#) may not be written because the object labeled by #n= is\nnot well defined in this case.\n\n"
}