{
    "name": "array-total-size",
    "prev": "array-row-major-index",
    "next": "arrayp",
    "up": "Arrays Dictionary",
    "header": {
        "type": "Function",
        "text": "array-total-size"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "array-total-size",
                    "text": " array =>  size\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "array",
                    "desc": "an array."
                },
                {
                    "name": "size",
                    "desc": "a non-negative integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the array total size of the array.\n"
        },
        {
            "type": "Examples",
            "text": "      (array-total-size (make-array 4)) =>  4\n      (array-total-size (make-array 4 :fill-pointer 2)) =>  4\n      (array-total-size (make-array 0)) =>  0\n      (array-total-size (make-array '(4 2))) =>  8\n      (array-total-size (make-array '(4 0))) =>  0\n      (array-total-size (make-array '())) =>  1\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if its argument is not an array.\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-array:: , *Note array-dimensions::\n"
        },
        {
            "type": "Notes",
            "text": "If the array is a vector with a fill pointer, the fill pointer is ignored\nwhen calculating the array total size.\nSince the product of no arguments is one, the array total size of a\nzero-dimensional array is one.\n      (array-total-size x)\n         == (apply #'* (array-dimensions x))\n         == (reduce #'* (array-dimensions x))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: array-total-size,  Next: arrayp,  Prev: array-row-major-index,  Up: Arrays Dictionary\n\narray-total-size                                                 [Function]\n---------------------------------------------------------------------------\n\n`array-total-size'  array =>  size\n\nArguments and Values::\n......................\n\narray--an array.\n\nsize--a non-negative integer.\n\nDescription::\n.............\n\nReturns the array total size of the array.\n\nExamples::\n..........\n\n      (array-total-size (make-array 4)) =>  4\n      (array-total-size (make-array 4 :fill-pointer 2)) =>  4\n      (array-total-size (make-array 0)) =>  0\n      (array-total-size (make-array '(4 2))) =>  8\n      (array-total-size (make-array '(4 0))) =>  0\n      (array-total-size (make-array '())) =>  1\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if its argument is not an array.\n\nSee Also::\n..........\n\n*Note make-array:: , *Note array-dimensions::\n\nNotes::\n.......\n\nIf the array is a vector with a fill pointer, the fill pointer is ignored\nwhen calculating the array total size.\n\nSince the product of no arguments is one, the array total size of a\nzero-dimensional array is one.\n\n      (array-total-size x)\n         == (apply #'* (array-dimensions x))\n         == (reduce #'* (array-dimensions x))\n\n"
}