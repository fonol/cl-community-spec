{
    "name": "describe",
    "prev": "apropos",
    "next": "describe-object",
    "up": "Environment Dictionary",
    "header": {
        "type": "Function",
        "text": "describe"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "describe",
                    "text": " object &optional stream =>  <no values>\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "stream",
                    "desc": "an output stream designator.  The default is standard output."
                }
            ]
        },
        {
            "type": "Description",
            "text": "describe displays information about object\nto stream.\nFor example, describe of a symbol might show the symbol's value, its\ndefinition, and each of its properties.  describe of a float might show\nthe number's internal representation in a way that is useful for tracking\ndown round-off errors.  In all cases, however, the nature and format of the\noutput of describe is implementation-dependent.\ndescribe can describe something that it finds inside the object; in such\ncases, a notational device such as increased indentation or positioning in\na table is typically used in order to visually distinguish such recursive\ndescriptions from descriptions of the argument object.\nThe actual act of describing the object is implemented by describe-object.\ndescribe exists as an interface primarily to manage argument defaulting\n(including conversion of arguments t and nil into stream objects) and to\ninhibit any return values from describe-object.\ndescribe is not intended to be an interactive function.  In a conforming\nimplementation, describe must not, by default, prompt for user input.\nUser-defined methods for describe-object are likewise restricted.\n"
        },
        {
            "type": "Side Effects",
            "text": "Output to standard output or terminal I/O.\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output* and *terminal-io*, methods on describe-object and\nprint-object for objects having user-defined classes.\n"
        },
        {
            "type": "See Also",
            "text": "*Note inspect:: , *Note describe-object::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: describe,  Next: describe-object,  Prev: apropos,  Up: Environment Dictionary\n\ndescribe                                                         [Function]\n---------------------------------------------------------------------------\n\n`describe'  object &optional stream =>  <no values>\n\nArguments and Values::\n......................\n\nobject--an object.\n\nstream--an output stream designator.  The default is standard output.\n\nDescription::\n.............\n\ndescribe displays information about object\n\nto stream.\n\nFor example, describe of a symbol might show the symbol's value, its\ndefinition, and each of its properties.  describe of a float might show\nthe number's internal representation in a way that is useful for tracking\ndown round-off errors.  In all cases, however, the nature and format of the\noutput of describe is implementation-dependent.\n\ndescribe can describe something that it finds inside the object; in such\ncases, a notational device such as increased indentation or positioning in\na table is typically used in order to visually distinguish such recursive\ndescriptions from descriptions of the argument object.\n\nThe actual act of describing the object is implemented by describe-object.\ndescribe exists as an interface primarily to manage argument defaulting\n(including conversion of arguments t and nil into stream objects) and to\ninhibit any return values from describe-object.\n\ndescribe is not intended to be an interactive function.  In a conforming\nimplementation, describe must not, by default, prompt for user input.\nUser-defined methods for describe-object are likewise restricted.\n\nSide Effects::\n..............\n\nOutput to standard output or terminal I/O.\n\nAffected By::\n.............\n\n*standard-output* and *terminal-io*, methods on describe-object and\nprint-object for objects having user-defined classes.\n\nSee Also::\n..........\n\n*Note inspect:: , *Note describe-object::\n\n"
}