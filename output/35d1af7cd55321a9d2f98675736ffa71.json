{
    "name": "Tilde Less-Than-Sign-> Justification",
    "prev": "Tilde T-> Tabulate",
    "next": "Tilde Greater-Than-Sign-> End of Justification",
    "up": "FORMAT Layout Control",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde Less-Than-Sign: Justification",
            "text": "~mincol,colinc,minpad,padchar<str~>\nThis justifies the text produced by processing str within a field at least\nmincol columns wide.  str may be divided up into segments with ~;, in\nwhich case the spacing is evenly divided between the text segments.\nWith no modifiers, the leftmost text segment is left justified in the\nfield, and the rightmost text segment is right justified.  If there is\nonly one text element, as a special case, it is right justified.  The :\nmodifier causes spacing to be introduced before the first text segment;\nthe @ modifier causes spacing to be added after the last.  The minpad\nparameter (default 0) is the minimum number of padding characters to be\noutput between each segment.  The padding character is supplied by padchar,\nwhich defaults to the space character.  If the total width needed to\nsatisfy these constraints is greater than mincol, then the width used is\nmincol+k*colinc for the smallest possible non-negative integer value k.\ncolinc defaults to 1, and mincol defaults to 0.\nNote that str may include format directives.  All the clauses in str are\nprocessed in order; it is the resulting pieces of text that are justified.\nThe ~^  directive may be used to terminate processing of the clauses\nprematurely, in which case only the completely processed clauses are\njustified.\nIf the first clause of a ~< is terminated with ~:; instead of ~;, then it\nis used in a special way.  All of the clauses are processed (subject to ~^\n, of course), but the first one is not used in performing the spacing and\npadding.  When the padded result has been determined, then if it will fit\non the current line of output, it is output, and the text for the first\nclause is discarded.  If, however, the padded text will not fit on the\ncurrent line, then the text segment for the first clause is output before\nthe padded text.  The first clause ought to contain a newline (such as a\n~% directive).  The first clause is always processed, and so any arguments\nit refers to will be used; the decision is whether to use the resulting\nsegment of text, not whether to process the first clause.  If the ~:; has\na prefix parameter n, then the padded text must fit on the current line\nwith n character positions to spare to avoid outputting the first clause's\ntext.  For example, the control string\n      \"~\ncan be used to print a list of items separated by commas without breaking\nitems over line boundaries, beginning each line with ;; .  The prefix\nparameter 1 in ~1:; accounts for the width of the comma that will follow\nthe justified item if it is not the last element in the list, or the period\nif it is.  If ~:; has a second prefix parameter, then it is used as the\nwidth of the line, thus overriding the natural line width of the output\nstream.  To make the preceding example use a line width of 50, one would\nwrite\n      \"~\nIf the second argument is not supplied, then format uses the line width of\nthe destination output stream.  If this cannot be determined (for example,\nwhen producing a string result), then format uses 72 as the line length.\nSee also *Note Tilde Less-Than-Sign-> Logical Block::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde Less-Than-Sign-> Justification,  Next: Tilde Greater-Than-Sign-> End of Justification,  Prev: Tilde T-> Tabulate,  Up: FORMAT Layout Control\n\nTilde Less-Than-Sign: Justification\n...................................\n\n~mincol,colinc,minpad,padchar<str~>\n\nThis justifies the text produced by processing str within a field at least\nmincol columns wide.  str may be divided up into segments with ~;, in\nwhich case the spacing is evenly divided between the text segments.\n\nWith no modifiers, the leftmost text segment is left justified in the\nfield, and the rightmost text segment is right justified.  If there is\nonly one text element, as a special case, it is right justified.  The :\nmodifier causes spacing to be introduced before the first text segment;\nthe @ modifier causes spacing to be added after the last.  The minpad\nparameter (default 0) is the minimum number of padding characters to be\noutput between each segment.  The padding character is supplied by padchar,\nwhich defaults to the space character.  If the total width needed to\nsatisfy these constraints is greater than mincol, then the width used is\nmincol+k*colinc for the smallest possible non-negative integer value k.\ncolinc defaults to 1, and mincol defaults to 0.\n\nNote that str may include format directives.  All the clauses in str are\nprocessed in order; it is the resulting pieces of text that are justified.\n\nThe ~^  directive may be used to terminate processing of the clauses\nprematurely, in which case only the completely processed clauses are\njustified.\n\nIf the first clause of a ~< is terminated with ~:; instead of ~;, then it\nis used in a special way.  All of the clauses are processed (subject to ~^\n, of course), but the first one is not used in performing the spacing and\npadding.  When the padded result has been determined, then if it will fit\non the current line of output, it is output, and the text for the first\nclause is discarded.  If, however, the padded text will not fit on the\ncurrent line, then the text segment for the first clause is output before\nthe padded text.  The first clause ought to contain a newline (such as a\n~% directive).  The first clause is always processed, and so any arguments\nit refers to will be used; the decision is whether to use the resulting\nsegment of text, not whether to process the first clause.  If the ~:; has\na prefix parameter n, then the padded text must fit on the current line\nwith n character positions to spare to avoid outputting the first clause's\ntext.  For example, the control string\n\n      \"~\n\ncan be used to print a list of items separated by commas without breaking\nitems over line boundaries, beginning each line with ;; .  The prefix\nparameter 1 in ~1:; accounts for the width of the comma that will follow\nthe justified item if it is not the last element in the list, or the period\nif it is.  If ~:; has a second prefix parameter, then it is used as the\nwidth of the line, thus overriding the natural line width of the output\nstream.  To make the preceding example use a line width of 50, one would\nwrite\n\n      \"~\n\nIf the second argument is not supplied, then format uses the line width of\nthe destination output stream.  If this cannot be determined (for example,\nwhen producing a string result), then format uses 72 as the line length.\n\nSee also *Note Tilde Less-Than-Sign-> Logical Block::.\n\n"
}