{
    "name": "write",
    "prev": "set-pprint-dispatch",
    "next": "write-to-string",
    "up": "Printer Dictionary",
    "header": {
        "type": "Function",
        "text": "write, prin1, print, pprint, princ"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "write",
                    "text": " object &key \\writekeysstream=>  object\n\n"
                },
                {
                    "name": "prin'  1 =>  object &optional output-stream object `princ",
                    "text": " object\n&optional output-stream =>  object\n\n"
                },
                {
                    "name": "print",
                    "text": " object &optional output-stream =>  object\n\n"
                },
                {
                    "name": "pprint",
                    "text": " object &optional output-stream =>  <no values>\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "output-stream",
                    "desc": "an output stream designator.  The default is standard"
                },
                {
                    "name": "output-stream",
                    "desc": "an output stream designator.  The default is standardoutput.\n"
                },
                {
                    "name": "\\writekeydescriptionsstream",
                    "desc": "an output stream designator.  The default is"
                }
            ]
        },
        {
            "type": "Description",
            "text": "write, prin1, princ, print, and pprint write the printed representation of\nobject to output-stream.\nwrite is the general entry point to the Lisp printer.  For each explicitly\nsupplied keyword parameter named in Figure 22-6, the corresponding printer\ncontrol variable is dynamically bound to its value while printing goes on;\nfor each keyword parameter in Figure 22-6 that is not explicitly supplied,\nthe value of the corresponding printer control variable is the same as it\nwas at the time write was invoked.  Once the appropriate bindings are\nestablished, the object is output by the Lisp printer.\n  Parameter        Corresponding Dynamic Variable  \n  array            *print-array*                   \n  base             *print-base*                    \n  case             *print-case*                    \n  circle           *print-circle*                  \n  escape           *print-escape*                  \n  gensym           *print-gensym*                  \n  length           *print-length*                  \n  level            *print-level*                   \n  lines            *print-lines*                   \n  miser-width      *print-miser-width*             \n  pprint-dispatch  *print-pprint-dispatch*         \n  pretty           *print-pretty*                  \n  radix            *print-radix*                   \n  readably         *print-readably*                \n  right-margin     *print-right-margin*            \n  Figure 22-6: Argument correspondences for the WRITE function.\nprin1, princ, print, and pprint implicitly bind certain print parameters\nto particular values.  The remaining parameter values are taken from\n*print-array*, *print-base*, *print-case*, *print-circle*, *print-escape*,\n*print-gensym*, *print-length*, *print-level*, *print-lines*,\n*print-miser-width*, *print-pprint-dispatch*, *print-pretty*,\n*print-radix*, and *print-right-margin*.\nprin1 produces output suitable for input to read.  It binds *print-escape*\nto true.\nprinc is just like prin1 except that the output has no escape characters.\nIt binds *print-escape*   to false\nand *print-readably* to false.\nThe general rule is that output from princ is intended to look good to\npeople, while output from prin1 is intended to be acceptable to read.\nprint is just like prin1 except that the printed representation of object\nis preceded by a newline and followed by a space.\npprint is just like print except that the trailing space is omitted and\nobject is printed with the *print-pretty* flag non-nil to produce pretty\noutput.\nOutput-stream specifies the stream to which output is to be sent.\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*, *terminal-io*, *print-escape*, *print-radix*,\n*print-base*, *print-circle*, *print-pretty*, *print-level*,\n*print-length*, *print-case*, *print-gensym*, *print-array*,\n*read-default-float-format*.\n"
        },
        {
            "type": "See Also",
            "text": "*Note readtable-case:: , *Note FORMAT Printer Operations::\n"
        },
        {
            "type": "Notes",
            "text": "The functions prin1 and print do not bind *print-readably*.\n      (prin1 object output-stream)\n     == (write object :stream output-stream :escape t)\n      (princ object output-stream)\n     == (write object stream output-stream :escape nil :readably nil)\n      (print object output-stream)\n     == (progn (terpri output-stream)\n                (write object :stream output-stream\n                              :escape t)\n                (write-char #\\space output-stream))\n      (pprint object output-stream)\n     == (write object :stream output-stream :escape t :pretty t)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: write,  Next: write-to-string,  Prev: set-pprint-dispatch,  Up: Printer Dictionary\n\nwrite, prin1, print, pprint, princ                               [Function]\n---------------------------------------------------------------------------\n\n`write'  object &key \\writekeysstream\n=>  object\n\n`prin'  1 =>  object &optional output-stream object `princ'  object\n&optional output-stream =>  object\n\n`print'  object &optional output-stream =>  object\n\n`pprint'  object &optional output-stream =>  <no values>\n\nArguments and Values::\n......................\n\nobject--an object.\n\noutput-stream--an output stream designator.  The default is standard\noutput.\n\n\\writekeydescriptionsstream--an output stream designator.  The default is\nstandard output.\n\nDescription::\n.............\n\nwrite, prin1, princ, print, and pprint write the printed representation of\nobject to output-stream.\n\nwrite is the general entry point to the Lisp printer.  For each explicitly\nsupplied keyword parameter named in Figure 22-6, the corresponding printer\ncontrol variable is dynamically bound to its value while printing goes on;\nfor each keyword parameter in Figure 22-6 that is not explicitly supplied,\nthe value of the corresponding printer control variable is the same as it\nwas at the time write was invoked.  Once the appropriate bindings are\nestablished, the object is output by the Lisp printer.\n\n  Parameter        Corresponding Dynamic Variable  \n  array            *print-array*                   \n  base             *print-base*                    \n  case             *print-case*                    \n  circle           *print-circle*                  \n  escape           *print-escape*                  \n  gensym           *print-gensym*                  \n  length           *print-length*                  \n  level            *print-level*                   \n  lines            *print-lines*                   \n  miser-width      *print-miser-width*             \n  pprint-dispatch  *print-pprint-dispatch*         \n  pretty           *print-pretty*                  \n  radix            *print-radix*                   \n  readably         *print-readably*                \n  right-margin     *print-right-margin*            \n\n  Figure 22-6: Argument correspondences for the WRITE function.\n\n\nprin1, princ, print, and pprint implicitly bind certain print parameters\nto particular values.  The remaining parameter values are taken from\n*print-array*, *print-base*, *print-case*, *print-circle*, *print-escape*,\n*print-gensym*, *print-length*, *print-level*, *print-lines*,\n*print-miser-width*, *print-pprint-dispatch*, *print-pretty*,\n*print-radix*, and *print-right-margin*.\n\nprin1 produces output suitable for input to read.  It binds *print-escape*\nto true.\n\nprinc is just like prin1 except that the output has no escape characters.\nIt binds *print-escape*   to false\n\nand *print-readably* to false.\n\nThe general rule is that output from princ is intended to look good to\npeople, while output from prin1 is intended to be acceptable to read.\n\nprint is just like prin1 except that the printed representation of object\nis preceded by a newline and followed by a space.\n\npprint is just like print except that the trailing space is omitted and\nobject is printed with the *print-pretty* flag non-nil to produce pretty\noutput.\n\nOutput-stream specifies the stream to which output is to be sent.\n\nAffected By::\n.............\n\n*standard-output*, *terminal-io*, *print-escape*, *print-radix*,\n*print-base*, *print-circle*, *print-pretty*, *print-level*,\n*print-length*, *print-case*, *print-gensym*, *print-array*,\n*read-default-float-format*.\n\nSee Also::\n..........\n\n*Note readtable-case:: , *Note FORMAT Printer Operations::\n\nNotes::\n.......\n\nThe functions prin1 and print do not bind *print-readably*.\n\n      (prin1 object output-stream)\n     == (write object :stream output-stream :escape t)\n\n      (princ object output-stream)\n     == (write object stream output-stream :escape nil :readably nil)\n\n      (print object output-stream)\n     == (progn (terpri output-stream)\n                (write object :stream output-stream\n                              :escape t)\n                (write-char #\\space output-stream))\n\n      (pprint object output-stream)\n     == (write object :stream output-stream :escape t :pretty t)\n\n"
}