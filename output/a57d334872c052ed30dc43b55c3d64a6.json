{
    "name": "Satisfying a Two-Argument Test",
    "prev": "Rules about Test Functions",
    "next": "Satisfying a One-Argument Test",
    "up": "Rules about Test Functions",
    "header": {
        "type": null,
        "text": "Satisfying a Two-Argument Test"
    },
    "sections": [
        {
            "type": "",
            "text": "When an object O is being considered iteratively against each element E_i\nof a sequence S by an operator F listed in Figure 17-2, it is sometimes\nuseful to control the way in which the presence of O is tested in S is\ntested by F.  This control is offered on the basis of a function\ndesignated with either a :test or :test-not argument.\n  adjoin           nset-exclusive-or  search            \n  assoc            nsublis            set-difference    \n  count            nsubst             set-exclusive-or  \n  delete           nsubstitute        sublis            \n  find             nunion             subsetp           \n  intersection     position           subst             \n  member           pushnew            substitute        \n  mismatch         rassoc             tree-equal        \n  nintersection    remove             union             \n  nset-difference  remove-duplicates                    \n  Figure 17-2: Operators that have Two-Argument Tests to be Satisfied\nThe object O might not be compared directly to E_i.  If a :key argument is\nprovided, it is a designator for a function of one argument to be called\nwith each E_i as an argument, and yielding an object Z_i to be used for\ncomparison.  (If there is no :key argument, Z_i is E_i.)\nThe function designated by the :key argument is never called on O itself.\nHowever, if the function operates on multiple sequences (e.g., as happens\nin set-difference), O will be the result of calling the :key function on an\nelement of the other sequence.\nA :test argument, if supplied to F, is a designator for a  function of two\narguments, O and Z_i.  An E_i is said (or, sometimes, an O and an E_i are\nsaid) to satisfy the test\nif this :test function returns a generalized boolean representing true.\nA :test-not argument, if supplied to F, is designator for a function of\ntwo arguments, O and Z_i.  An E_i is said (or, sometimes, an O and an E_i\nare said) to satisfy the test\nif this :test-not function returns a generalized boolean representing\nfalse.\nIf neither a :test nor a :test-not argument is supplied, it is as if a\n:test argument of #'eql was supplied.\nThe consequences are unspecified if both a :test and a :test-not argument\nare supplied in the same call to F.\n* Menu:\n* Examples of Satisfying a Two-Argument Test::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Satisfying a Two-Argument Test,  Next: Satisfying a One-Argument Test,  Prev: Rules about Test Functions,  Up: Rules about Test Functions\n\nSatisfying a Two-Argument Test\n------------------------------\n\nWhen an object O is being considered iteratively against each element E_i\nof a sequence S by an operator F listed in Figure 17-2, it is sometimes\nuseful to control the way in which the presence of O is tested in S is\ntested by F.  This control is offered on the basis of a function\ndesignated with either a :test or :test-not argument.\n\n  adjoin           nset-exclusive-or  search            \n  assoc            nsublis            set-difference    \n  count            nsubst             set-exclusive-or  \n  delete           nsubstitute        sublis            \n  find             nunion             subsetp           \n  intersection     position           subst             \n  member           pushnew            substitute        \n  mismatch         rassoc             tree-equal        \n  nintersection    remove             union             \n  nset-difference  remove-duplicates                    \n\n  Figure 17-2: Operators that have Two-Argument Tests to be Satisfied\n\n\nThe object O might not be compared directly to E_i.  If a :key argument is\nprovided, it is a designator for a function of one argument to be called\nwith each E_i as an argument, and yielding an object Z_i to be used for\ncomparison.  (If there is no :key argument, Z_i is E_i.)\n\nThe function designated by the :key argument is never called on O itself.\nHowever, if the function operates on multiple sequences (e.g., as happens\nin set-difference), O will be the result of calling the :key function on an\nelement of the other sequence.\n\nA :test argument, if supplied to F, is a designator for a  function of two\narguments, O and Z_i.  An E_i is said (or, sometimes, an O and an E_i are\nsaid) to satisfy the test\n\nif this :test function returns a generalized boolean representing true.\n\nA :test-not argument, if supplied to F, is designator for a function of\ntwo arguments, O and Z_i.  An E_i is said (or, sometimes, an O and an E_i\nare said) to satisfy the test\n\nif this :test-not function returns a generalized boolean representing\nfalse.\n\nIf neither a :test nor a :test-not argument is supplied, it is as if a\n:test argument of #'eql was supplied.\n\nThe consequences are unspecified if both a :test and a :test-not argument\nare supplied in the same call to F.\n\n* Menu:\n\n* Examples of Satisfying a Two-Argument Test::\n\n"
}