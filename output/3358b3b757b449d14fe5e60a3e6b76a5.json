{
    "name": "Initialize-Instance",
    "prev": "Shared-Initialize",
    "next": "Definitions of Make-Instance and Initialize-Instance",
    "up": "Object Creation and Initialization",
    "header": {
        "type": null,
        "text": "Initialize-Instance"
    },
    "sections": [
        {
            "type": "",
            "text": "The generic function initialize-instance is called by make-instance to\ninitialize a newly created instance.  It uses standard method combination.\nMethods for initialize-instance can be defined in order to perform any\ninitialization that cannot be achieved simply by supplying initial values\nfor slots.\nDuring initialization, initialize-instance is invoked after the following\nactions have been taken:\n*\n     The defaulted initialization argument list has been computed by\n     combining the supplied initialization argument list with any default\n     initialization arguments for the class.\n*\n     The validity of the defaulted initialization argument list has been\n     checked.  If any of the initialization arguments has not been\n     declared as valid, an error is signaled.\n*\n     A new instance whose slots are unbound has been created.\nThe generic function initialize-instance is called with the new instance\nand the defaulted initialization arguments.  There is a system-supplied\nprimary method for initialize-instance whose parameter specializer is the\nclass standard-object.  This method calls the generic function\nshared-initialize to fill in the slots according to the initialization\narguments and the :initform forms for the slots; the generic function\nshared-initialize is called with the following arguments: the instance, t,\nand the defaulted initialization arguments.\nNote that initialize-instance provides the defaulted initialization\nargument list in its call to shared-initialize, so the first step\nperformed by the system-supplied primary method for shared-initialize\ntakes into account both the initialization arguments provided in the call\nto make-instance and the defaulted initialization argument list.\nMethods for initialize-instance can be defined to specify actions to be\ntaken when an instance is initialized.  If only after methods for\ninitialize-instance are defined, they will be run after the\nsystem-supplied primary method for initialization and therefore will not\ninterfere with the default behavior of initialize-instance.\nThe object system provides two functions that are useful in the bodies of\ninitialize-instance methods.  The function slot-boundp returns a generic\nboolean value that indicates whether a specified slot has a value; this\nprovides a mechanism for writing after methods for initialize-instance\nthat initialize slots only if they have not already been initialized.  The\nfunction slot-makunbound causes the slot to have no value.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Initialize-Instance,  Next: Definitions of Make-Instance and Initialize-Instance,  Prev: Shared-Initialize,  Up: Object Creation and Initialization\n\nInitialize-Instance\n-------------------\n\nThe generic function initialize-instance is called by make-instance to\ninitialize a newly created instance.  It uses standard method combination.\nMethods for initialize-instance can be defined in order to perform any\ninitialization that cannot be achieved simply by supplying initial values\nfor slots.\n\nDuring initialization, initialize-instance is invoked after the following\nactions have been taken:\n\n*\n     The defaulted initialization argument list has been computed by\n     combining the supplied initialization argument list with any default\n     initialization arguments for the class.\n\n*\n     The validity of the defaulted initialization argument list has been\n     checked.  If any of the initialization arguments has not been\n     declared as valid, an error is signaled.\n\n*\n     A new instance whose slots are unbound has been created.\n\nThe generic function initialize-instance is called with the new instance\nand the defaulted initialization arguments.  There is a system-supplied\nprimary method for initialize-instance whose parameter specializer is the\nclass standard-object.  This method calls the generic function\nshared-initialize to fill in the slots according to the initialization\narguments and the :initform forms for the slots; the generic function\nshared-initialize is called with the following arguments: the instance, t,\nand the defaulted initialization arguments.\n\nNote that initialize-instance provides the defaulted initialization\nargument list in its call to shared-initialize, so the first step\nperformed by the system-supplied primary method for shared-initialize\ntakes into account both the initialization arguments provided in the call\nto make-instance and the defaulted initialization argument list.\n\nMethods for initialize-instance can be defined to specify actions to be\ntaken when an instance is initialized.  If only after methods for\ninitialize-instance are defined, they will be run after the\nsystem-supplied primary method for initialization and therefore will not\ninterfere with the default behavior of initialize-instance.\n\nThe object system provides two functions that are useful in the bodies of\ninitialize-instance methods.  The function slot-boundp returns a generic\nboolean value that indicates whether a specified slot has a value; this\nprovides a mechanism for writing after methods for initialize-instance\nthat initialize slots only if they have not already been initialized.  The\nfunction slot-makunbound causes the slot to have no value.\n\n"
}