{
    "name": "Tilde W-> Write",
    "prev": "Tilde S-> Standard",
    "next": null,
    "up": "FORMAT Printer Operations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde W: Write",
            "text": "An argument, any object, is printed obeying every printer control variable\n(as by write).  In addition, ~W interacts correctly with depth\nabbreviation, by not resetting the depth counter to zero.  ~W does not\naccept parameters.  If given the colon modifier, ~W binds *print-pretty*\nto true.  If given the at-sign modifier, ~W binds *print-level* and\n*print-length* to nil.\n~W provides automatic support for the detection of circularity and\nsharing.  If the value of *print-circle* is not nil and ~W is applied to\nan argument that is a circular (or shared) reference, an appropriate #n#\nmarker is inserted in the output instead of printing the argument.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde W-> Write,  Prev: Tilde S-> Standard,  Up: FORMAT Printer Operations\n\nTilde W: Write\n..............\n\nAn argument, any object, is printed obeying every printer control variable\n(as by write).  In addition, ~W interacts correctly with depth\nabbreviation, by not resetting the depth counter to zero.  ~W does not\naccept parameters.  If given the colon modifier, ~W binds *print-pretty*\nto true.  If given the at-sign modifier, ~W binds *print-level* and\n*print-length* to nil.\n\n~W provides automatic support for the detection of circularity and\nsharing.  If the value of *print-circle* is not nil and ~W is applied to\nan argument that is a circular (or shared) reference, an appropriate #n#\nmarker is inserted in the output instead of printing the argument.\n\n"
}