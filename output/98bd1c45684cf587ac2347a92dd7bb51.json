{
    "name": "last",
    "prev": "butlast",
    "next": "ldiff",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "last"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "last",
                    "text": " list &optional n =>  tail\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list,which might be a dotted list but must not be a circular list.\n"
                },
                {
                    "name": "n",
                    "desc": "a non-negative integer.  The default is 1."
                },
                {
                    "name": "tail",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "last returns the last n conses (not the last n elements) of list).  If\nlist is (), last returns ().\nIf n is zero, the atom that terminates list is returned.  If n is greater\nthan or equal to the number of cons cells in list, the result is list.\n"
        },
        {
            "type": "Examples",
            "text": "      (last nil) =>  NIL\n      (last '(1 2 3)) =>  (3)\n      (last '(1 2 . 3)) =>  (2 . 3)\n      (setq x (list 'a 'b 'c 'd)) =>  (A B C D)\n      (last x) =>  (D)\n      (rplacd (last x) (list 'e 'f)) x =>  (A B C D E F)\n      (last x) =>  (F)\n      (last '(a b c))   =>  (C)\n      (last '(a b c) 0) =>  ()\n      (last '(a b c) 1) =>  (C)\n      (last '(a b c) 2) =>  (B C)\n      (last '(a b c) 3) =>  (A B C)\n      (last '(a b c) 4) =>  (A B C)\n      (last '(a . b) 0) =>  B\n      (last '(a . b) 1) =>  (A . B)\n      (last '(a . b) 2) =>  (A . B)\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are undefined if list is a circular list.\nShould signal an error of type type-error if n is not a non-negative\ninteger.\n"
        },
        {
            "type": "See Also",
            "text": "*Note butlast; nbutlast:: , *Note nth::\n"
        },
        {
            "type": "Notes",
            "text": "The following code could be used to define last.\n      (defun last (list &optional (n 1))\n        (check-type n (integer 0))\n        (do ((l list (cdr l))\n             (r list)\n             (i 0 (+ i 1)))\n            ((atom l) r)\n          (if (>= i n) (pop r))))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: last,  Next: ldiff,  Prev: butlast,  Up: Conses Dictionary\n\nlast                                                             [Function]\n---------------------------------------------------------------------------\n\n`last'  list &optional n =>  tail\n\nArguments and Values::\n......................\n\nlist--a list,\n\nwhich might be a dotted list but must not be a circular list.\n\nn--a non-negative integer.  The default is 1.\n\ntail--an object.\n\nDescription::\n.............\n\nlast returns the last n conses (not the last n elements) of list).  If\nlist is (), last returns ().\n\nIf n is zero, the atom that terminates list is returned.  If n is greater\nthan or equal to the number of cons cells in list, the result is list.\n\nExamples::\n..........\n\n      (last nil) =>  NIL\n      (last '(1 2 3)) =>  (3)\n      (last '(1 2 . 3)) =>  (2 . 3)\n      (setq x (list 'a 'b 'c 'd)) =>  (A B C D)\n      (last x) =>  (D)\n      (rplacd (last x) (list 'e 'f)) x =>  (A B C D E F)\n      (last x) =>  (F)\n     \n      (last '(a b c))   =>  (C)\n     \n      (last '(a b c) 0) =>  ()\n      (last '(a b c) 1) =>  (C)\n      (last '(a b c) 2) =>  (B C)\n      (last '(a b c) 3) =>  (A B C)\n      (last '(a b c) 4) =>  (A B C)\n     \n      (last '(a . b) 0) =>  B\n      (last '(a . b) 1) =>  (A . B)\n      (last '(a . b) 2) =>  (A . B)\n\nExceptional Situations::\n........................\n\nThe consequences are undefined if list is a circular list.\n\nShould signal an error of type type-error if n is not a non-negative\ninteger.\n\nSee Also::\n..........\n\n*Note butlast; nbutlast:: , *Note nth::\n\nNotes::\n.......\n\nThe following code could be used to define last.\n\n      (defun last (list &optional (n 1))\n        (check-type n (integer 0))\n        (do ((l list (cdr l))\n             (r list)\n             (i 0 (+ i 1)))\n            ((atom l) r)\n          (if (>= i n) (pop r))))\n\n"
}