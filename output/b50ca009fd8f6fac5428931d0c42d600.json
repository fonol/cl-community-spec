{
    "name": "terpri",
    "prev": "read-char-no-hang",
    "next": "unread-char",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "terpri, fresh-line"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "terpri",
                    "text": " &optional output-stream =>  nil\n"
                },
                {
                    "name": "fresh-line",
                    "text": " &optional output-stream =>  generalized-boolean\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "terpri outputs a newline to output-stream.\nfresh-line is similar to terpri but outputs a newline only if the\noutput-stream is not already at the start of a line.  If for some reason\nthis cannot be determined, then a newline is output anyway.  fresh-line\nreturns true if it outputs a newline; otherwise it returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (with-output-to-string (s)\n         (write-string \"some text\" s)\n         (terpri s)\n         (terpri s)\n         (write-string \"more text\" s))\n     =>  \"some text\n     more text\"\n      (with-output-to-string (s)\n         (write-string \"some text\" s)\n         (fresh-line s)\n         (fresh-line s)\n         (write-string \"more text\" s))\n     =>  \"some text\n     more text\"\n"
        },
        {
            "type": "Side Effects",
            "text": "The output-stream is modified.\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*, *terminal-io*.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "None.\n[Reviewer Note by Barmar: What if stream is closed?]\n"
        },
        {
            "type": "Notes",
            "text": "terpri is identical in effect to\n      (write-char #\\Newline output-stream)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: terpri,  Next: unread-char,  Prev: read-char-no-hang,  Up: Streams Dictionary\n\nterpri, fresh-line                                               [Function]\n---------------------------------------------------------------------------\n\n`terpri'  &optional output-stream =>  nil\n\n`fresh-line'  &optional output-stream =>  generalized-boolean\n\nArguments and Values::\n......................\n\noutput-stream - an output stream designator.  The default is standard\noutput.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nterpri outputs a newline to output-stream.\n\nfresh-line is similar to terpri but outputs a newline only if the\noutput-stream is not already at the start of a line.  If for some reason\nthis cannot be determined, then a newline is output anyway.  fresh-line\nreturns true if it outputs a newline; otherwise it returns false.\n\nExamples::\n..........\n\n      (with-output-to-string (s)\n         (write-string \"some text\" s)\n         (terpri s)\n         (terpri s)\n         (write-string \"more text\" s))\n     =>  \"some text\n     \n     more text\"\n      (with-output-to-string (s)\n         (write-string \"some text\" s)\n         (fresh-line s)\n         (fresh-line s)\n         (write-string \"more text\" s))\n     =>  \"some text\n     more text\"\n\nSide Effects::\n..............\n\nThe output-stream is modified.\n\nAffected By::\n.............\n\n*standard-output*, *terminal-io*.\n\nExceptional Situations::\n........................\n\nNone.\n\n[Reviewer Note by Barmar: What if stream is closed?]\n\nNotes::\n.......\n\nterpri is identical in effect to\n\n      (write-char #\\Newline output-stream)\n\n"
}