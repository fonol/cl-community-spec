{
    "name": "Printing Other Arrays",
    "prev": "Printing Other Vectors",
    "next": "Examples of Printing Arrays",
    "up": "Default Print-Object Methods",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Printing Other Arrays",
            "text": "If  *print-array* is true and *print-readably* is false, any\narray other than a vector is printed using #nA format.  Let n be the rank\nof the array.  Then # is printed, then n as a decimal integer, then A,\nthen n open parentheses.  Next the elements are scanned in row-major order,\nusing write on each element, and separating elements from each other with\nwhitespace_1.  The array's dimensions are numbered 0 to n-1 from left to\nright, and are enumerated with the rightmost index changing fastest.\nEvery time the index for dimension j is incremented, the following actions\nare taken:\n*\n     If j < n-1, then a close parenthesis is printed.\n*\n     If incrementing the index for dimension j caused it to equal\n     dimension j, that index is reset to zero and the index for dimension\n     j-1 is incremented (thereby performing these three steps recursively),\n     unless j=0, in which case the entire algorithm is terminated.  If\n     incrementing the index for dimension j did not cause it to equal\n     dimension j, then a space is printed.\n*\n     If j < n-1, then an open parenthesis is printed.\nThis causes the contents to be printed in a format suitable for\n:initial-contents to make-array.  The lists effectively printed by this\nprocedure are subject to truncation by *print-level* and *print-length*.\nIf the array is of a specialized type, containing bits or characters, then\nthe innermost lists generated by the algorithm given above can instead be\nprinted using bit-vector or string syntax, provided that these innermost\nlists would not be subject to truncation by *print-length*.\nIf both *print-array* and *print-readably* are false,\nthen the array is printed in a format (using #<) that is concise but not\nreadable.\nIf *print-readably* is true, the array prints in an implementation-defined\nmanner; see the variable *print-readably*.\nIn particular, this may be important for arrays having some dimension 0.\nFor information on how the Lisp reader parses these \"other arrays,\" see\n*Note Sharpsign A::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Printing Other Arrays,  Next: Examples of Printing Arrays,  Prev: Printing Other Vectors,  Up: Default Print-Object Methods\n\nPrinting Other Arrays\n.....................\n\nIf  *print-array* is true and *print-readably* is false, any\n\narray other than a vector is printed using #nA format.  Let n be the rank\nof the array.  Then # is printed, then n as a decimal integer, then A,\nthen n open parentheses.  Next the elements are scanned in row-major order,\nusing write on each element, and separating elements from each other with\nwhitespace_1.  The array's dimensions are numbered 0 to n-1 from left to\nright, and are enumerated with the rightmost index changing fastest.\nEvery time the index for dimension j is incremented, the following actions\nare taken:\n\n*\n     If j < n-1, then a close parenthesis is printed.\n\n*\n     If incrementing the index for dimension j caused it to equal\n     dimension j, that index is reset to zero and the index for dimension\n     j-1 is incremented (thereby performing these three steps recursively),\n     unless j=0, in which case the entire algorithm is terminated.  If\n     incrementing the index for dimension j did not cause it to equal\n     dimension j, then a space is printed.\n\n*\n     If j < n-1, then an open parenthesis is printed.\n\nThis causes the contents to be printed in a format suitable for\n:initial-contents to make-array.  The lists effectively printed by this\nprocedure are subject to truncation by *print-level* and *print-length*.\n\nIf the array is of a specialized type, containing bits or characters, then\nthe innermost lists generated by the algorithm given above can instead be\nprinted using bit-vector or string syntax, provided that these innermost\nlists would not be subject to truncation by *print-length*.\n\nIf both *print-array* and *print-readably* are false,\n\nthen the array is printed in a format (using #<) that is concise but not\nreadable.\n\nIf *print-readably* is true, the array prints in an implementation-defined\nmanner; see the variable *print-readably*.\n\nIn particular, this may be important for arrays having some dimension 0.\n\nFor information on how the Lisp reader parses these \"other arrays,\" see\n*Note Sharpsign A::.\n\n"
}