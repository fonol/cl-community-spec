{
    "name": "directory",
    "prev": "Files Dictionary",
    "next": "probe-file",
    "up": "Files Dictionary",
    "header": {
        "type": "Function",
        "text": "directory"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "directory",
                    "text": " pathspec &key =>  pathnames\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "pathspec",
                    "desc": "a pathname designator, which may contain wild components."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Determines which, if any, files that are present in the file system have\nnames matching pathspec, and returns a\nfresh\nlist of pathnames corresponding to the truenames of those files.\nAn implementation may be extended to accept implementation-defined keyword\narguments to directory.\n"
        },
        {
            "type": "Affected By",
            "text": "The host computer's file system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If the attempt to obtain a directory listing is not successful, an error\nof type file-error is signaled.\n"
        },
        {
            "type": "See Also",
            "text": "pathname,\nlogical-pathname,\n*Note ensure-directories-exist:: , *Note File System Concepts::, *Note\nFile Operations on Open and Closed Streams::,\n*Note Pathnames as Filenames::\n"
        },
        {
            "type": "Notes",
            "text": "If the pathspec is not wild, the resulting list will contain either zero\nor one elements.\nCommon Lisp specifies \"&key\" in the argument list to directory even though\nno standardized keyword arguments to directory are defined.\n\":allow-other-keys t\" may be used in conforming programs in order to\nquietly ignore any additional keywords which are passed by the program but\nnot supported by the implementation.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: directory,  Next: probe-file,  Prev: Files Dictionary,  Up: Files Dictionary\n\ndirectory                                                        [Function]\n---------------------------------------------------------------------------\n\n`directory'  pathspec &key =>  pathnames\n\nArguments and Values::\n......................\n\npathspec--a pathname designator, which may contain wild components.\n\npathnames--a list of\n\nphysical pathnames.\n\nDescription::\n.............\n\nDetermines which, if any, files that are present in the file system have\nnames matching pathspec, and returns a\n\nfresh\n\nlist of pathnames corresponding to the truenames of those files.\n\nAn implementation may be extended to accept implementation-defined keyword\narguments to directory.\n\nAffected By::\n.............\n\nThe host computer's file system.\n\nExceptional Situations::\n........................\n\nIf the attempt to obtain a directory listing is not successful, an error\nof type file-error is signaled.\n\nSee Also::\n..........\n\npathname,\n\nlogical-pathname,\n\n*Note ensure-directories-exist:: , *Note File System Concepts::, *Note\nFile Operations on Open and Closed Streams::,\n\n*Note Pathnames as Filenames::\n\nNotes::\n.......\n\nIf the pathspec is not wild, the resulting list will contain either zero\nor one elements.\n\nCommon Lisp specifies \"&key\" in the argument list to directory even though\nno standardized keyword arguments to directory are defined.\n\":allow-other-keys t\" may be used in conforming programs in order to\nquietly ignore any additional keywords which are passed by the program but\nnot supported by the implementation.\n\n"
}