{
    "name": "Tilde Less-Than-Sign-> Logical Block",
    "prev": "Tilde Underscore-> Conditional Newline",
    "next": "Tilde I-> Indent",
    "up": "FORMAT Pretty Printer Operations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde Less-Than-Sign: Logical Block",
            "text": "~<...~:>\nIf ~:> is used to terminate a ~<...~>, the directive is equivalent to a\ncall to pprint-logical-block.  The argument corresponding to the ~<...~:>\ndirective is treated in the same way as the list argument to\npprint-logical-block, thereby providing automatic support for non-list\narguments and the detection of circularity, sharing, and depth\nabbreviation.  The portion of the control-string nested within the ~<...~:>\nspecifies the :prefix (or :per-line-prefix), :suffix, and body of the\npprint-logical-block.\nThe control-string portion enclosed by ~<...~:> can be divided into\nsegments ~<prefix~;body~;suffix~:> by ~; directives.  If the first section\nis terminated by ~@;, it specifies a per-line prefix rather than a simple\nprefix.  The prefix and suffix cannot contain format directives.  An error\nis signaled if either the prefix or suffix fails to be a constant string\nor if the enclosed portion is divided into more than three segments.\nIf the enclosed portion is divided into only two segments, the suffix\ndefaults to the null string.  If the enclosed portion consists of only a\nsingle segment, both the prefix and the suffix default to the null string.\nIf the colon modifier is used (i.e., ~:<...~:>), the prefix and suffix\ndefault to \"(\" and \")\" (respectively) instead of the null string.\nThe body segment can be any arbitrary format string.  This format string\nis applied to the elements of the list corresponding to the ~<...~:>\ndirective as a whole.  Elements are extracted from this list using\npprint-pop, thereby providing automatic support for malformed lists, and\nthe detection of circularity, sharing, and length abbreviation.  Within\nthe body segment, ~^ acts like pprint-exit-if-list-exhausted.\n~<...~:> supports a feature not supported by pprint-logical-block.  If\n~:@> is used to terminate the directive (i.e., ~<...~:@>), then a\nfill-style conditional newline is automatically inserted after each group\nof blanks immediately contained in the body (except for blanks after a\n~<Newline> directive).  This makes it easy to achieve the equivalent of\nparagraph filling.\nIf the at-sign modifier is used with ~<...~:>, the entire remaining\nargument list is passed to the directive as its argument.  All of the\nremaining arguments are always consumed by ~@<...~:>, even if they are not\nall used by the format string nested in the directive.  Other than the\ndifference in its argument, ~@<...~:> is exactly the same as ~<...~:>\nexcept that circularity detection is not applied if ~@<...~:> is\nencountered at top level in a format string.  This ensures that\ncircularity detection is applied only to data lists, not to format\nargument lists.\n\" . #n#\" is printed if circularity or sharing has to be indicated for its\nargument as a whole.\nTo a considerable extent, the basic form of the directive ~<...~> is\nincompatible with the dynamic control of the arrangement of output by ~W,\n~_, ~<...~:>, ~I, and ~:T.  As a result, an error is signaled if any of\nthese directives is nested within ~<...~>.  Beyond this, an error is also\nsignaled if the ~<...~:;...~> form of ~<...~> is used in the same format\nstring with ~W, ~_, ~<...~:>, ~I, or ~:T.\nSee also *Note Tilde Less-Than-Sign-> Justification::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde Less-Than-Sign-> Logical Block,  Next: Tilde I-> Indent,  Prev: Tilde Underscore-> Conditional Newline,  Up: FORMAT Pretty Printer Operations\n\nTilde Less-Than-Sign: Logical Block\n...................................\n\n~<...~:>\n\nIf ~:> is used to terminate a ~<...~>, the directive is equivalent to a\ncall to pprint-logical-block.  The argument corresponding to the ~<...~:>\ndirective is treated in the same way as the list argument to\npprint-logical-block, thereby providing automatic support for non-list\narguments and the detection of circularity, sharing, and depth\nabbreviation.  The portion of the control-string nested within the ~<...~:>\nspecifies the :prefix (or :per-line-prefix), :suffix, and body of the\npprint-logical-block.\n\nThe control-string portion enclosed by ~<...~:> can be divided into\nsegments ~<prefix~;body~;suffix~:> by ~; directives.  If the first section\nis terminated by ~@;, it specifies a per-line prefix rather than a simple\nprefix.  The prefix and suffix cannot contain format directives.  An error\nis signaled if either the prefix or suffix fails to be a constant string\nor if the enclosed portion is divided into more than three segments.\n\nIf the enclosed portion is divided into only two segments, the suffix\ndefaults to the null string.  If the enclosed portion consists of only a\nsingle segment, both the prefix and the suffix default to the null string.\nIf the colon modifier is used (i.e., ~:<...~:>), the prefix and suffix\ndefault to \"(\" and \")\" (respectively) instead of the null string.\n\nThe body segment can be any arbitrary format string.  This format string\nis applied to the elements of the list corresponding to the ~<...~:>\ndirective as a whole.  Elements are extracted from this list using\npprint-pop, thereby providing automatic support for malformed lists, and\nthe detection of circularity, sharing, and length abbreviation.  Within\nthe body segment, ~^ acts like pprint-exit-if-list-exhausted.\n\n~<...~:> supports a feature not supported by pprint-logical-block.  If\n~:@> is used to terminate the directive (i.e., ~<...~:@>), then a\nfill-style conditional newline is automatically inserted after each group\nof blanks immediately contained in the body (except for blanks after a\n~<Newline> directive).  This makes it easy to achieve the equivalent of\nparagraph filling.\n\nIf the at-sign modifier is used with ~<...~:>, the entire remaining\nargument list is passed to the directive as its argument.  All of the\nremaining arguments are always consumed by ~@<...~:>, even if they are not\nall used by the format string nested in the directive.  Other than the\ndifference in its argument, ~@<...~:> is exactly the same as ~<...~:>\nexcept that circularity detection is not applied if ~@<...~:> is\nencountered at top level in a format string.  This ensures that\ncircularity detection is applied only to data lists, not to format\nargument lists.\n\n\" . #n#\" is printed if circularity or sharing has to be indicated for its\nargument as a whole.\n\nTo a considerable extent, the basic form of the directive ~<...~> is\nincompatible with the dynamic control of the arrangement of output by ~W,\n~_, ~<...~:>, ~I, and ~:T.  As a result, an error is signaled if any of\nthese directives is nested within ~<...~>.  Beyond this, an error is also\nsignaled if the ~<...~:;...~> form of ~<...~> is used in the same format\nstring with ~W, ~_, ~<...~:>, ~I, or ~:T.\n\nSee also *Note Tilde Less-Than-Sign-> Justification::.\n\n"
}