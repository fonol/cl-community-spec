{
    "name": "Return Values",
    "prev": "Extent",
    "next": null,
    "up": "Evaluation",
    "header": {
        "type": null,
        "text": "Return Values"
    },
    "sections": [
        {
            "type": "",
            "text": "Ordinarily the result of calling a function is a single object.\nSometimes, however, it is convenient for a function to compute several\nobjects and return them.\nIn order to receive other than exactly one value from a form, one of\nseveral special forms or macros must be used to request those values.  If\na form produces multiple values which were not requested in this way, then\nthe first value is given to the caller and all others are discarded; if\nthe form produces zero values, then the caller receives nil as a value.\nFigure 3-5 lists some operators for receiving multiple values_2.  These\noperators can be used to specify one or more forms to evaluate and where\nto put the values returned by those forms.\n  multiple-value-bind  multiple-value-prog1  return-from  \n  multiple-value-call  multiple-value-setq   throw        \n  multiple-value-list  return                             \n  Figure 3-5: Some operators applicable to receiving multiple values\nThe function values can produce multiple values_2.  (values) returns zero\nvalues; (values form) returns the primary value returned by form; (values\nform1 form2) returns two values, the primary value of form1 and the\nprimary value of form2; and so on.\nSee multiple-values-limit and values-list.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Return Values,  Prev: Extent,  Up: Evaluation\n\nReturn Values\n-------------\n\nOrdinarily the result of calling a function is a single object.\nSometimes, however, it is convenient for a function to compute several\nobjects and return them.\n\nIn order to receive other than exactly one value from a form, one of\nseveral special forms or macros must be used to request those values.  If\na form produces multiple values which were not requested in this way, then\nthe first value is given to the caller and all others are discarded; if\nthe form produces zero values, then the caller receives nil as a value.\n\nFigure 3-5 lists some operators for receiving multiple values_2.  These\noperators can be used to specify one or more forms to evaluate and where\nto put the values returned by those forms.\n\n  multiple-value-bind  multiple-value-prog1  return-from  \n  multiple-value-call  multiple-value-setq   throw        \n  multiple-value-list  return                             \n\n  Figure 3-5: Some operators applicable to receiving multiple values\n\n\nThe function values can produce multiple values_2.  (values) returns zero\nvalues; (values form) returns the primary value returned by form; (values\nform1 form2) returns two values, the primary value of form1 and the\nprimary value of form2; and so on.\n\nSee multiple-values-limit and values-list.\n\n"
}