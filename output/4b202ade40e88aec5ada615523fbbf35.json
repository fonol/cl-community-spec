{
    "name": "Rule of Canonical Representation for Rationals",
    "prev": "Rule of Unbounded Rational Precision",
    "next": "Rule of Float Substitutability",
    "up": "Rational Computations",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Rule of Canonical Representation for Rationals",
            "text": "If any computation produces a result that is a mathematical ratio of two\nintegers such that the denominator evenly divides the numerator, then the\nresult is converted to the equivalent integer.\nIf the denominator does not evenly divide the numerator, the canonical\nrepresentation of a rational number is as the ratio that numerator and\nthat denominator, where the greatest common divisor of the numerator and\ndenominator is one, and where the denominator is positive and greater than\none.\nWhen used as input (in the default syntax), the notation -0 always denotes\nthe integer 0.  A conforming implementation must not have a representation\nof \"minus zero\" for integers that is distinct from its representation of\nzero for integers.  However, such a distinction is possible for floats;\nsee the type float.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Rule of Canonical Representation for Rationals,  Next: Rule of Float Substitutability,  Prev: Rule of Unbounded Rational Precision,  Up: Rational Computations\n\nRule of Canonical Representation for Rationals\n..............................................\n\nIf any computation produces a result that is a mathematical ratio of two\nintegers such that the denominator evenly divides the numerator, then the\nresult is converted to the equivalent integer.\n\nIf the denominator does not evenly divide the numerator, the canonical\nrepresentation of a rational number is as the ratio that numerator and\nthat denominator, where the greatest common divisor of the numerator and\ndenominator is one, and where the denominator is positive and greater than\none.\n\nWhen used as input (in the default syntax), the notation -0 always denotes\nthe integer 0.  A conforming implementation must not have a representation\nof \"minus zero\" for integers that is distinct from its representation of\nzero for integers.  However, such a distinction is possible for floats;\nsee the type float.\n\n"
}