{
    "name": "format",
    "prev": "print-not-readable-object",
    "next": null,
    "up": "Printer Dictionary",
    "header": {
        "type": "Function",
        "text": "format"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "format",
                    "text": " destination control-string &rest args =>  result\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "destination",
                    "desc": "nil, t, a stream, or a string with a fill pointer."
                },
                {
                    "name": "control-string",
                    "desc": "a format control."
                },
                {
                    "name": "args",
                    "desc": "format arguments for control-string."
                },
                {
                    "name": "result",
                    "desc": "if destination is non-nil, then nil; otherwise, a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "format produces formatted output by outputting the characters of\ncontrol-string and observing that a tilde introduces a directive.  The\ncharacter after the tilde, possibly preceded by prefix parameters and\nmodifiers, specifies what kind of formatting is desired.  Most directives\nuse one or more elements of args to create their output.\nIf destination is a string, a stream, or t, then the result is nil.\nOtherwise, the result is a string containing the `output.'\nformat is useful for producing nicely formatted text, producing\ngood-looking messages, and so on.  format can generate and return a string\nor output to destination.\nFor details on how the control-string is interpreted, see *Note Formatted\nOutput::.\n"
        },
        {
            "type": "Affected By",
            "text": "*standard-output*, *print-escape*, *print-radix*, *print-base*,\n*print-circle*, *print-pretty*, *print-level*, *print-length*,\n*print-case*, *print-gensym*, *print-array*.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If destination is a string with a fill pointer, the consequences are\nundefined if destructive modifications are performed directly on the\nstring during the dynamic extent of the call.\n"
        },
        {
            "type": "See Also",
            "text": "*Note write; prin1; print; pprint; princ:: , *Note Documentation of\nImplementation-Defined Scripts::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: format,  Prev: print-not-readable-object,  Up: Printer Dictionary\n\nformat                                                           [Function]\n---------------------------------------------------------------------------\n\n`format'  destination control-string &rest args =>  result\n\nArguments and Values::\n......................\n\ndestination--nil, t, a stream, or a string with a fill pointer.\n\ncontrol-string--a format control.\n\nargs--format arguments for control-string.\n\nresult--if destination is non-nil, then nil; otherwise, a string.\n\nDescription::\n.............\n\nformat produces formatted output by outputting the characters of\ncontrol-string and observing that a tilde introduces a directive.  The\ncharacter after the tilde, possibly preceded by prefix parameters and\nmodifiers, specifies what kind of formatting is desired.  Most directives\nuse one or more elements of args to create their output.\n\nIf destination is a string, a stream, or t, then the result is nil.\nOtherwise, the result is a string containing the `output.'\n\nformat is useful for producing nicely formatted text, producing\ngood-looking messages, and so on.  format can generate and return a string\nor output to destination.\n\nFor details on how the control-string is interpreted, see *Note Formatted\nOutput::.\n\nAffected By::\n.............\n\n*standard-output*, *print-escape*, *print-radix*, *print-base*,\n*print-circle*, *print-pretty*, *print-level*, *print-length*,\n*print-case*, *print-gensym*, *print-array*.\n\nExceptional Situations::\n........................\n\nIf destination is a string with a fill pointer, the consequences are\nundefined if destructive modifications are performed directly on the\nstring during the dynamic extent of the call.\n\nSee Also::\n..........\n\n*Note write; prin1; print; pprint; princ:: , *Note Documentation of\nImplementation-Defined Scripts::\n\n"
}