{
    "name": "Sorting the Applicable Methods by Precedence Order",
    "prev": "Selecting the Applicable Methods",
    "next": "Applying method combination to the sorted list of applicable methods",
    "up": "Method Selection and Combination",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Sorting the Applicable Methods by Precedence Order",
            "text": "To compare the precedence of two methods, their parameter specializers are\nexamined in order.  The default examination order is from left to right,\nbut an alternative order may be specified by the\n:argument-precedence-order option to defgeneric or to any of the other\noperators that specify generic function options.\nThe corresponding parameter specializers from each method are compared.\nWhen a pair of parameter specializers agree, the next pair are compared\nfor agreement.  If all corresponding parameter specializers agree, the two\nmethods must have different qualifiers; in this case, either method can be\nselected to precede the other.  For information about agreement, see *Note\nAgreement on Parameter Specializers and Qualifiers::.\nIf some corresponding parameter specializers do not agree, the first pair\nof parameter specializers that do not agree determines the precedence.  If\nboth parameter specializers are classes, the more specific of the two\nmethods is the method whose parameter specializer appears earlier in the\nclass precedence list of the corresponding argument.  Because of the way\nin which the set of applicable methods is chosen, the parameter\nspecializers are guaranteed to be present in the class precedence list of\nthe class of the argument.\nIf just one of a pair of corresponding parameter specializers is (eql\nobject), the method with that parameter specializer precedes the other\nmethod.  If both parameter specializers are eql expressions, the\nspecializers must agree (otherwise the two methods would not both have\nbeen applicable to this argument).\nThe resulting list of applicable methods has the most specific method\nfirst and the least specific method last.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Sorting the Applicable Methods by Precedence Order,  Next: Applying method combination to the sorted list of applicable methods,  Prev: Selecting the Applicable Methods,  Up: Method Selection and Combination\n\nSorting the Applicable Methods by Precedence Order\n..................................................\n\nTo compare the precedence of two methods, their parameter specializers are\nexamined in order.  The default examination order is from left to right,\nbut an alternative order may be specified by the\n:argument-precedence-order option to defgeneric or to any of the other\noperators that specify generic function options.\n\nThe corresponding parameter specializers from each method are compared.\nWhen a pair of parameter specializers agree, the next pair are compared\nfor agreement.  If all corresponding parameter specializers agree, the two\nmethods must have different qualifiers; in this case, either method can be\nselected to precede the other.  For information about agreement, see *Note\nAgreement on Parameter Specializers and Qualifiers::.\n\nIf some corresponding parameter specializers do not agree, the first pair\nof parameter specializers that do not agree determines the precedence.  If\nboth parameter specializers are classes, the more specific of the two\nmethods is the method whose parameter specializer appears earlier in the\nclass precedence list of the corresponding argument.  Because of the way\nin which the set of applicable methods is chosen, the parameter\nspecializers are guaranteed to be present in the class precedence list of\nthe class of the argument.\n\nIf just one of a pair of corresponding parameter specializers is (eql\nobject), the method with that parameter specializer precedes the other\nmethod.  If both parameter specializers are eql expressions, the\nspecializers must agree (otherwise the two methods would not both have\nbeen applicable to this argument).\n\nThe resulting list of applicable methods has the most specific method\nfirst and the least specific method last.\n\n"
}