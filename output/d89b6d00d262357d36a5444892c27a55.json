{
    "name": "make-package",
    "prev": "delete-package",
    "next": "with-package-iterator",
    "up": "Packages Dictionary",
    "header": {
        "type": "Function",
        "text": "make-package"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "make-package",
                    "text": " package-name &key nicknames use =>  package\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "package-name",
                    "desc": "a string designator."
                },
                {
                    "name": "nicknames",
                    "desc": "a list of string designators.  The default is the empty list."
                },
                {
                    "name": "use",
                    "desc": " a list of package designators.The default is implementation-defined.\n"
                },
                {
                    "name": "package",
                    "desc": "a package."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Creates a new package with the name package-name.\nNicknames are additional names which may be used to refer to the new\npackage.\nuse specifies zero or more packages the external symbols of which are to\nbe inherited by the new package.  See the function use-package.\n"
        },
        {
            "type": "Examples",
            "text": "      (make-package 'temporary :nicknames '(\"TEMP\" \"temp\")) =>  #<PACKAGE \"TEMPORARY\">\n      (make-package \"OWNER\" :use '(\"temp\")) =>  #<PACKAGE \"OWNER\">\n      (package-used-by-list 'temp) =>  (#<PACKAGE \"OWNER\">)\n      (package-use-list 'owner) =>  (#<PACKAGE \"TEMPORARY\">)\n"
        },
        {
            "type": "Affected By",
            "text": "The existence of other packages in the system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "The consequences are unspecified if packages denoted by use do not exist.\nA correctable error is signaled if the package-name or any of the\nnicknames is already the name or nickname of an existing package.\n"
        },
        {
            "type": "See Also",
            "text": "*Note defpackage:: , *Note use-package::\n"
        },
        {
            "type": "Notes",
            "text": "In situations where the packages to be used contain symbols which would\nconflict, it is necessary to first create the package with :use '(), then\nto use shadow or shadowing-import to address the conflicts, and then after\nthat to use use-package once the conflicts have been addressed.\nWhen packages are being created as part of the static definition of a\nprogram rather than dynamically by the program, it is generally considered\nmore stylistically appropriate to use defpackage rather than make-package.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: make-package,  Next: with-package-iterator,  Prev: delete-package,  Up: Packages Dictionary\n\nmake-package                                                     [Function]\n---------------------------------------------------------------------------\n\n`make-package'  package-name &key nicknames use =>  package\n\nArguments and Values::\n......................\n\npackage-name--a string designator.\n\nnicknames--a list of string designators.  The default is the empty list.\n\nuse-- a list of package designators.\n\nThe default is implementation-defined.\n\npackage--a package.\n\nDescription::\n.............\n\nCreates a new package with the name package-name.\n\nNicknames are additional names which may be used to refer to the new\npackage.\n\nuse specifies zero or more packages the external symbols of which are to\nbe inherited by the new package.  See the function use-package.\n\nExamples::\n..........\n\n      (make-package 'temporary :nicknames '(\"TEMP\" \"temp\")) =>  #<PACKAGE \"TEMPORARY\">\n      (make-package \"OWNER\" :use '(\"temp\")) =>  #<PACKAGE \"OWNER\">\n      (package-used-by-list 'temp) =>  (#<PACKAGE \"OWNER\">)\n      (package-use-list 'owner) =>  (#<PACKAGE \"TEMPORARY\">)\n\nAffected By::\n.............\n\nThe existence of other packages in the system.\n\nExceptional Situations::\n........................\n\nThe consequences are unspecified if packages denoted by use do not exist.\n\nA correctable error is signaled if the package-name or any of the\nnicknames is already the name or nickname of an existing package.\n\nSee Also::\n..........\n\n*Note defpackage:: , *Note use-package::\n\nNotes::\n.......\n\nIn situations where the packages to be used contain symbols which would\nconflict, it is necessary to first create the package with :use '(), then\nto use shadow or shadowing-import to address the conflicts, and then after\nthat to use use-package once the conflicts have been addressed.\n\nWhen packages are being created as part of the static definition of a\nprogram rather than dynamically by the program, it is generally considered\nmore stylistically appropriate to use defpackage rather than make-package.\n\n"
}