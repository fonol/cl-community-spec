{
    "name": "Safe and Unsafe Calls",
    "prev": "Argument Mismatch Detection",
    "next": "Error Detection Time in Safe Calls",
    "up": "Argument Mismatch Detection",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Safe and Unsafe Calls",
            "text": "A call is a safe call if each of the following is either safe code or\nsystem code (other than system code that results from macro expansion of\nprogrammer code):\n*\n     the call.\n*\n     the definition of the function being called.\n*\n     the point of functional evaluation\nThe following special cases require some elaboration:\n*\n     If the function being called is a generic function, it is considered\n     safe if all of the following are\n     safe code or system code:\n    -\n          its definition (if it was defined explicitly).\n    -\n          the method definitions for all applicable methods.\n    -\n          the definition of its method combination.\n*\n     For the form (coerce x 'function), where x is a lambda expression,\n     the value of the optimize quality safety in the global environment at\n     the time the coerce is executed applies to the resulting function.\n*\n     For a call to the function ensure-generic-function, the value of the\n     optimize quality safety in the environment object passed as the\n     :environment argument applies to the resulting generic function.\n*\n     For a call to compile with a lambda expression as the argument, the\n     value of the optimize quality safety in the global environment at the\n     time compile is called applies to the resulting compiled function.\n*\n     For a call to compile with only one argument, if the original\n     definition of the function was safe, then the resulting compiled\n     function must also be safe.\n*\n     A call to a method by call-next-method must be considered safe if\n     each of the following is\n     safe code or system code:\n    -\n          the definition of the generic function (if it was defined\n          explicitly).\n    -\n          the method definitions for all applicable methods.\n    -\n          the definition of the method combination.\n    -\n          the point of entry into the body of the method defining form,\n          where the binding of call-next-method is established.\n    -\n          the point of functional evaluation of the name call-next-method.\nAn unsafe call is a call that is not a safe call.\nThe informal intent is that the programmer can rely on a call to be safe,\neven when system code is involved, if all reasonable steps have been taken\nto ensure that the call is safe.  For example, if a programmer calls\nmapcar from safe code and supplies a function that was compiled as safe,\nthe implementation is required to ensure that mapcar makes a safe call as\nwell.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Safe and Unsafe Calls,  Next: Error Detection Time in Safe Calls,  Prev: Argument Mismatch Detection,  Up: Argument Mismatch Detection\n\nSafe and Unsafe Calls\n.....................\n\nA call is a safe call if each of the following is either safe code or\nsystem code (other than system code that results from macro expansion of\nprogrammer code):\n*\n     the call.\n\n*\n     the definition of the function being called.\n\n*\n     the point of functional evaluation\n\nThe following special cases require some elaboration:\n\n*\n     If the function being called is a generic function, it is considered\n     safe if all of the following are\n\n     safe code or system code:\n\n    -\n          its definition (if it was defined explicitly).\n\n    -\n          the method definitions for all applicable methods.\n\n    -\n          the definition of its method combination.\n\n*\n     For the form (coerce x 'function), where x is a lambda expression,\n     the value of the optimize quality safety in the global environment at\n     the time the coerce is executed applies to the resulting function.\n\n*\n     For a call to the function ensure-generic-function, the value of the\n     optimize quality safety in the environment object passed as the\n     :environment argument applies to the resulting generic function.\n\n*\n     For a call to compile with a lambda expression as the argument, the\n     value of the optimize quality safety in the global environment at the\n     time compile is called applies to the resulting compiled function.\n\n*\n     For a call to compile with only one argument, if the original\n     definition of the function was safe, then the resulting compiled\n     function must also be safe.\n\n*\n     A call to a method by call-next-method must be considered safe if\n     each of the following is\n\n     safe code or system code:\n\n    -\n          the definition of the generic function (if it was defined\n          explicitly).\n\n    -\n          the method definitions for all applicable methods.\n\n    -\n          the definition of the method combination.\n\n    -\n          the point of entry into the body of the method defining form,\n          where the binding of call-next-method is established.\n\n    -\n          the point of functional evaluation of the name call-next-method.\n\nAn unsafe call is a call that is not a safe call.\n\nThe informal intent is that the programmer can rely on a call to be safe,\neven when system code is involved, if all reasonable steps have been taken\nto ensure that the call is safe.  For example, if a programmer calls\nmapcar from safe code and supplies a function that was compiled as safe,\nthe implementation is required to ensure that mapcar makes a safe call as\nwell.\n\n"
}