{
    "name": "open",
    "prev": "file-string-length",
    "next": "stream-external-format",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "open"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "open",
                    "text": " filespec &key direction element-type if-exists if-does-not-existexternal-format\n=>  stream\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "filespec",
                    "desc": "a pathname designator."
                },
                {
                    "name": "direction",
                    "desc": "one of :input, :output, :io, or :probe.  The default is :input."
                },
                {
                    "name": "element-type",
                    "desc": "a type specifier for recognizable subtype of character; or atype specifier for a finite recognizable subtype of integer; or one of the\nsymbols signed-byte, unsigned-byte, or :default.  The default is character.\n"
                },
                {
                    "name": "if-exists",
                    "desc": "one of :error, :new-version, :rename, :rename-and-delete,:overwrite, :append, :supersede, or nil.  The default is :new-version if\nthe version component of filespec is :newest, or :error otherwise.\n"
                },
                {
                    "name": "if-does-not-exist",
                    "desc": "one of :error, :create, or nil.  The default is :errorif direction is :input or if-exists is :overwrite or :append; :create if\ndirection is :output or :io, and if-exists is neither :overwrite nor\n:append; or nil when direction is :probe.\n"
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is"
                },
                {
                    "name": "external-format",
                    "desc": "an external file format designator.  The default is:default.\n"
                },
                {
                    "name": "stream",
                    "desc": "a file stream or nil."
                }
            ]
        },
        {
            "type": "Description",
            "text": "open creates, opens, and returns a file stream that is connected to the\nfile specified by filespec.  Filespec is the name of the file to be opened.\nIf the filespec designator is a stream, that stream is not closed first or\notherwise affected.\nThe keyword arguments to open specify the characteristics of the file\nstream that is returned, and how to handle errors.\nIf direction is :input or :probe, or if if-exists is not :new-version and\nthe version component of the filespec is :newest, then the file opened is\nthat file already existing in the file system that has a version greater\nthan that of any other file in the file system whose other pathname\ncomponents are the same as those of filespec.\nAn implementation is required to recognize all of the open keyword options\nand to do something reasonable in the context of the host operating system.\nFor example, if a file system does not support distinct file versions and\ndoes not distinguish the notions of deletion and expunging, :new-version\nmight be treated the same as :rename or :supersede, and :rename-and-delete\nmight be treated the same as :supersede.\n:direction\n     These are the possible values for direction, and how they affect the\n     nature of the stream that is created:\n    :input\n          Causes the creation of an input file stream.\n    :output\n          Causes the creation of an output file stream.\n    :io\n          Causes the creation of a bidirectional file stream.\n    :probe\n          Causes the creation of a \"no-directional\" file stream; in\n          effect, the file stream is created and then closed prior to\n          being returned by open.\n:element-type\n     The element-type specifies the unit of transaction for the file\n     stream.  If it is :default, the unit is determined by file system,\n     possibly based on the file.\n:if-exists\n     if-exists specifies the action to be taken if direction is :output or\n     :io and a file of the name filespec already exists.  If direction is\n     :input, not supplied, or :probe, if-exists is ignored.  These are the\n     results of open as modified by if-exists:\n    :error\n          An error of type file-error is signaled.\n    :new-version\n          A new file is created with a larger version number.\n    :rename\n          The existing file is renamed to some other name and then a new\n          file is created.\n    :rename-and-delete\n          The existing file is renamed to some other name, then it is\n          deleted but not expunged, and then a new file is created.\n    :overwrite\n          Output operations on the stream destructively modify the\n          existing file.  If direction is :io the file is opened in a\n          bidirectional mode that allows both reading and writing.  The\n          file pointer is initially positioned at the beginning of the\n          file; however, the file is not truncated back to length zero\n          when it is opened.\n    :append\n          Output operations on the stream destructively modify the\n          existing file.  The file pointer is initially positioned at the\n          end of the file.\n          If direction is :io, the file is opened in a bidirectional mode\n          that allows both reading and writing.\n    :supersede\n          The existing file is superseded; that is, a new file with the\n          same name as the old one is created.  If possible, the\n          implementation should not destroy the old file until the new\n          stream is closed.\n    nil\n          No file or stream is created; instead, nil is returned to\n          indicate failure.\n:if-does-not-exist\n     if-does-not-exist specifies the action to be taken if a file of name\n     filespec does not already exist.  These are the results of open as\n     modified by if-does-not-exist:\n    :error\n          An error of type file-error is signaled.\n    :create\n          An empty file is created.  Processing continues  as if the file\n          had already existed but no processing as directed by if-exists\n          is performed.\n    nil\n          No file or stream is created; instead, nil is returned to\n          indicate failure.\n:external-format\n     This option selects an external file format for the file: The only\n     standardized value for this option is :default, although\n     implementations are permitted to define additional external file\n     formats and implementation-dependent values returned by\n     stream-external-format can also be used by conforming programs.\n     The external-format is meaningful for any kind of file stream whose\n     element type is a subtype of character.  This option is ignored for\n     streams for which it is not meaningful; however, implementations may\n     define other element types for which it is meaningful.  The\n     consequences are unspecified if a character is written that cannot be\n     represented by the given external file format.\nWhen a file is opened, a file stream is constructed to serve as the file\nsystem's ambassador to the Lisp environment; operations on the file stream\nare reflected by operations on the file in the file system.\nA file can be deleted, renamed, or destructively modified by open.\nFor information about opening relative pathnames, see *Note Merging\nPathnames::.\n"
        },
        {
            "type": "Examples",
            "text": "      (open filespec :direction :probe)  =>  #<Closed Probe File Stream...>\n      (setq q (merge-pathnames (user-homedir-pathname) \"test\"))\n     =>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY directory-name\n         :NAME \"test\" :TYPE NIL :VERSION :NEWEST>\n      (open filespec :if-does-not-exist :create) =>  #<Input File Stream...>\n      (setq s (open filespec :direction :probe)) =>  #<Closed Probe File Stream...>\n      (truename s) =>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY\n         directory-name :NAME filespec :TYPE extension :VERSION 1>\n      (open s :direction :output :if-exists nil) =>  NIL\n"
        },
        {
            "type": "Affected By",
            "text": "The nature and state of the host computer's file system.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "If if-exists is :error, (subject to the constraints on the meaning of\nif-exists listed above), an error of type file-error is signaled.\nIf if-does-not-exist is :error (subject to the constraints on the meaning\nof if-does-not-exist listed above), an error of type file-error is\nsignaled.\nIf it is impossible for an implementation to handle some option in a\nmanner close to what is specified here, an error of type error might be\nsignaled.\nAn error of type file-error is signaled if (wild-pathname-p filespec)\nreturns true.\nAn error of type error is signaled if the external-format is not\nunderstood by the implementation.\nThe various file systems in existence today have widely differing\ncapabilities, and some aspects of the file system are beyond the scope of\nthis specification to define.  A given implementation might not be able to\nsupport all of these options in exactly the manner stated.  An\nimplementation is required to recognize all of these option keywords and\nto try to do something \"reasonable\" in the context of the host file\nsystem.  Where necessary to accomodate the file system, an implementation\ndeviate slightly from the semantics specified here without being\ndisqualified for consideration as a conforming implementation.  If it is\nutterly impossible for an implementation to handle some option in a manner\nsimilar to what is specified here, it may simply signal an error.\nWith regard to the :element-type option, if a type is requested that is\nnot supported by the file system, a substitution of types such as that\nwhich goes on in upgrading is permissible.  As a minimum requirement, it\nshould be the case that opening an output stream to a file in a given\nelement type and later opening an input stream to the same file in the\nsame element type should work compatibly.\n"
        },
        {
            "type": "See Also",
            "text": "*Note with-open-file:: , *Note close:: , pathname, logical-pathname,\n*Note Merging Pathnames::,\n*Note Pathnames as Filenames::\n"
        },
        {
            "type": "Notes",
            "text": "open does not automatically close the file when an abnormal exit occurs.\nWhen element-type is a subtype of character, read-char and/or write-char\ncan be used on the resulting file stream.\nWhen element-type is a subtype of integer, read-byte and/or write-byte can\nbe used on the resulting file stream.\nWhen element-type is :default, the type can be determined by using\nstream-element-type.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: open,  Next: stream-external-format,  Prev: file-string-length,  Up: Streams Dictionary\n\nopen                                                             [Function]\n---------------------------------------------------------------------------\n\n`open'  filespec &key direction element-type if-exists if-does-not-exist\nexternal-format\n=>  stream\n\nArguments and Values::\n......................\n\nfilespec--a pathname designator.\n\ndirection--one of :input, :output, :io, or :probe.  The default is :input.\n\nelement-type--a type specifier for recognizable subtype of character; or a\ntype specifier for a finite recognizable subtype of integer; or one of the\nsymbols signed-byte, unsigned-byte, or :default.  The default is character.\n\nif-exists--one of :error, :new-version, :rename, :rename-and-delete,\n:overwrite, :append, :supersede, or nil.  The default is :new-version if\nthe version component of filespec is :newest, or :error otherwise.\n\nif-does-not-exist--one of :error, :create, or nil.  The default is :error\nif direction is :input or if-exists is :overwrite or :append; :create if\ndirection is :output or :io, and if-exists is neither :overwrite nor\n:append; or nil when direction is :probe.\n\nexternal-format--an external file format designator.  The default is\n:default.\n\nstream--a file stream or nil.\n\nDescription::\n.............\n\nopen creates, opens, and returns a file stream that is connected to the\nfile specified by filespec.  Filespec is the name of the file to be opened.\nIf the filespec designator is a stream, that stream is not closed first or\notherwise affected.\n\nThe keyword arguments to open specify the characteristics of the file\nstream that is returned, and how to handle errors.\n\nIf direction is :input or :probe, or if if-exists is not :new-version and\nthe version component of the filespec is :newest, then the file opened is\nthat file already existing in the file system that has a version greater\nthan that of any other file in the file system whose other pathname\ncomponents are the same as those of filespec.\n\nAn implementation is required to recognize all of the open keyword options\nand to do something reasonable in the context of the host operating system.\nFor example, if a file system does not support distinct file versions and\ndoes not distinguish the notions of deletion and expunging, :new-version\nmight be treated the same as :rename or :supersede, and :rename-and-delete\nmight be treated the same as :supersede.\n\n:direction\n     These are the possible values for direction, and how they affect the\n     nature of the stream that is created:\n\n    :input\n          Causes the creation of an input file stream.\n\n    :output\n          Causes the creation of an output file stream.\n\n    :io\n          Causes the creation of a bidirectional file stream.\n\n    :probe\n          Causes the creation of a \"no-directional\" file stream; in\n          effect, the file stream is created and then closed prior to\n          being returned by open.\n\n:element-type\n     The element-type specifies the unit of transaction for the file\n     stream.  If it is :default, the unit is determined by file system,\n     possibly based on the file.\n\n:if-exists\n     if-exists specifies the action to be taken if direction is :output or\n     :io and a file of the name filespec already exists.  If direction is\n     :input, not supplied, or :probe, if-exists is ignored.  These are the\n     results of open as modified by if-exists:\n\n    :error\n          An error of type file-error is signaled.\n\n    :new-version\n          A new file is created with a larger version number.\n\n    :rename\n          The existing file is renamed to some other name and then a new\n          file is created.\n\n    :rename-and-delete\n          The existing file is renamed to some other name, then it is\n          deleted but not expunged, and then a new file is created.\n\n    :overwrite\n          Output operations on the stream destructively modify the\n          existing file.  If direction is :io the file is opened in a\n          bidirectional mode that allows both reading and writing.  The\n          file pointer is initially positioned at the beginning of the\n          file; however, the file is not truncated back to length zero\n          when it is opened.\n\n    :append\n          Output operations on the stream destructively modify the\n          existing file.  The file pointer is initially positioned at the\n          end of the file.\n\n          If direction is :io, the file is opened in a bidirectional mode\n          that allows both reading and writing.\n\n    :supersede\n          The existing file is superseded; that is, a new file with the\n          same name as the old one is created.  If possible, the\n          implementation should not destroy the old file until the new\n          stream is closed.\n\n    nil\n          No file or stream is created; instead, nil is returned to\n          indicate failure.\n\n:if-does-not-exist\n     if-does-not-exist specifies the action to be taken if a file of name\n     filespec does not already exist.  These are the results of open as\n     modified by if-does-not-exist:\n\n    :error\n          An error of type file-error is signaled.\n\n    :create\n          An empty file is created.  Processing continues  as if the file\n          had already existed but no processing as directed by if-exists\n          is performed.\n\n    nil\n          No file or stream is created; instead, nil is returned to\n          indicate failure.\n\n:external-format\n     This option selects an external file format for the file: The only\n     standardized value for this option is :default, although\n     implementations are permitted to define additional external file\n     formats and implementation-dependent values returned by\n     stream-external-format can also be used by conforming programs.\n\n     The external-format is meaningful for any kind of file stream whose\n     element type is a subtype of character.  This option is ignored for\n     streams for which it is not meaningful; however, implementations may\n     define other element types for which it is meaningful.  The\n     consequences are unspecified if a character is written that cannot be\n     represented by the given external file format.\n\nWhen a file is opened, a file stream is constructed to serve as the file\nsystem's ambassador to the Lisp environment; operations on the file stream\nare reflected by operations on the file in the file system.\n\nA file can be deleted, renamed, or destructively modified by open.\n\nFor information about opening relative pathnames, see *Note Merging\nPathnames::.\n\nExamples::\n..........\n\n      (open filespec :direction :probe)  =>  #<Closed Probe File Stream...>\n      (setq q (merge-pathnames (user-homedir-pathname) \"test\"))\n     =>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY directory-name\n         :NAME \"test\" :TYPE NIL :VERSION :NEWEST>\n      (open filespec :if-does-not-exist :create) =>  #<Input File Stream...>\n      (setq s (open filespec :direction :probe)) =>  #<Closed Probe File Stream...>\n      (truename s) =>  #<PATHNAME :HOST NIL :DEVICE device-name :DIRECTORY\n         directory-name :NAME filespec :TYPE extension :VERSION 1>\n      (open s :direction :output :if-exists nil) =>  NIL\n\nAffected By::\n.............\n\nThe nature and state of the host computer's file system.\n\nExceptional Situations::\n........................\n\nIf if-exists is :error, (subject to the constraints on the meaning of\nif-exists listed above), an error of type file-error is signaled.\n\nIf if-does-not-exist is :error (subject to the constraints on the meaning\nof if-does-not-exist listed above), an error of type file-error is\nsignaled.\n\nIf it is impossible for an implementation to handle some option in a\nmanner close to what is specified here, an error of type error might be\nsignaled.\n\nAn error of type file-error is signaled if (wild-pathname-p filespec)\nreturns true.\n\nAn error of type error is signaled if the external-format is not\nunderstood by the implementation.\n\nThe various file systems in existence today have widely differing\ncapabilities, and some aspects of the file system are beyond the scope of\nthis specification to define.  A given implementation might not be able to\nsupport all of these options in exactly the manner stated.  An\nimplementation is required to recognize all of these option keywords and\nto try to do something \"reasonable\" in the context of the host file\nsystem.  Where necessary to accomodate the file system, an implementation\ndeviate slightly from the semantics specified here without being\ndisqualified for consideration as a conforming implementation.  If it is\nutterly impossible for an implementation to handle some option in a manner\nsimilar to what is specified here, it may simply signal an error.\n\nWith regard to the :element-type option, if a type is requested that is\nnot supported by the file system, a substitution of types such as that\nwhich goes on in upgrading is permissible.  As a minimum requirement, it\nshould be the case that opening an output stream to a file in a given\nelement type and later opening an input stream to the same file in the\nsame element type should work compatibly.\n\nSee Also::\n..........\n\n*Note with-open-file:: , *Note close:: , pathname, logical-pathname,\n\n*Note Merging Pathnames::,\n\n*Note Pathnames as Filenames::\n\nNotes::\n.......\n\nopen does not automatically close the file when an abnormal exit occurs.\n\nWhen element-type is a subtype of character, read-char and/or write-char\ncan be used on the resulting file stream.\n\nWhen element-type is a subtype of integer, read-byte and/or write-byte can\nbe used on the resulting file stream.\n\nWhen element-type is :default, the type can be determined by using\nstream-element-type.\n\n"
}