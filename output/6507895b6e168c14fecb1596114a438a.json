{
    "name": "VALUES Forms as Places",
    "prev": "Function Call Forms as Places",
    "next": "THE Forms as Places",
    "up": "Kinds of Places",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "VALUES Forms as Places",
            "text": "A values form can be used as a place, provided that each of its subforms\nis also a place form.\nA form such as\n(setf (values place-1 \\dots place-n) values-form)\ndoes the following:\n1.\n     The subforms of each nested place are evaluated in left-to-right\n     order.\n2.\n     The values-form is evaluated, and the first store variable from each\n     place is bound to its return values as if by multiple-value-bind.\n3.\n     If the setf expansion for any place involves more than one store\n     variable, then the additional store variables are bound to nil.\n4.\n     The storing forms for each place are evaluated in left-to-right order.\nThe storing form in the setf expansion of values returns as multiple\nvalues_2 the values of the store variables in step 2.  That is, the number\nof values returned is the same as the number of place forms.  This may be\nmore or fewer values than are produced by the values-form.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: VALUES Forms as Places,  Next: THE Forms as Places,  Prev: Function Call Forms as Places,  Up: Kinds of Places\n\nVALUES Forms as Places\n......................\n\nA values form can be used as a place, provided that each of its subforms\nis also a place form.\n\nA form such as\n\n(setf (values place-1 \\dots place-n) values-form)\n\ndoes the following:\n\n1.\n     The subforms of each nested place are evaluated in left-to-right\n     order.\n\n2.\n     The values-form is evaluated, and the first store variable from each\n     place is bound to its return values as if by multiple-value-bind.\n\n3.\n     If the setf expansion for any place involves more than one store\n     variable, then the additional store variables are bound to nil.\n\n4.\n     The storing forms for each place are evaluated in left-to-right order.\n\nThe storing form in the setf expansion of values returns as multiple\nvalues_2 the values of the store variables in step 2.  That is, the number\nof values returned is the same as the number of place forms.  This may be\nmore or fewer values than are produced by the values-form.\n\n"
}