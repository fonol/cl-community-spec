{
    "name": "first",
    "prev": "pop",
    "next": "nth",
    "up": "Conses Dictionary",
    "header": {
        "type": null,
        "text": "sixth, seventh, eighth, ninth, tenth"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "first'  list =>  object (setf (`first",
                    "text": "list) new-object)"
                },
                {
                    "name": "second'  list =>  object (setf (`second",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "third'  list =>  object (setf (`third",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "fourth'  list =>  object (setf (`fourth",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "fifth'  list =>  object (setf (`fifth",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "sixth'  list =>  object (setf (`sixth",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "seventh'  list =>  object (setf (`seventh",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "eighth'  list =>  object (setf (`eighth",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "ninth'  list =>  object (setf (`ninth",
                    "text": "list) new-object)\n"
                },
                {
                    "name": "tenth'  list =>  object (setf (`tenth",
                    "text": "list) new-object)\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "list",
                    "desc": "a list,which might be a dotted list or a circular list.\n"
                },
                {
                    "name": "object, new-object",
                    "desc": "an object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "The functions first, second, third, fourth, fifth, sixth, seventh, eighth,\nninth, and tenth access the first, second, third, fourth, fifth, sixth,\nseventh, eighth, ninth, and tenth elements of list, respectively.\nSpecifically,\n      (first list)    ==  (car list)\n      (second list)   ==  (car (cdr list))\n      (third list)    ==  (car (cddr list))\n      (fourth list)   ==  (car (cdddr list))\n      (fifth list)    ==  (car (cddddr list))\n      (sixth list)    ==  (car (cdr (cddddr list)))\n      (seventh list)  ==  (car (cddr (cddddr list)))\n      (eighth list)   ==  (car (cdddr (cddddr list)))\n      (ninth list)    ==  (car (cddddr (cddddr list)))\n      (tenth list)    ==  (car (cdr (cddddr (cddddr list))))\nsetf can also be used with any of these functions to change an existing\ncomponent.  The same equivalences apply.  For example:\n      (setf (fifth list) new-object) == (setf (car (cddddr list)) new-object)\n"
        },
        {
            "type": "Examples",
            "text": "      (setq lst '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10))\n     =>  (1 2 3 (4 5 6) ((V)) VI 7 8 9 10)\n      (first lst) =>  1\n      (tenth lst) =>  10\n      (fifth lst) =>  ((V))\n      (second (fourth lst)) =>  5\n      (sixth '(1 2 3)) =>  NIL\n      (setf (fourth lst) \"four\") =>  \"four\"\n      lst =>  (1 2 3 \"four\" ((V)) VI 7 8 9 10)\n"
        },
        {
            "type": "See Also",
            "text": "*Note car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar;\ncdadr; cddar; cdddr; caaaar; caaadr; caadar; caaddr; cadaar; cadadr;\ncaddar; cadddr; cdaaar; cdaadr; cdadar; cdaddr; cddaar; cddadr; cdddar;\ncddddr:: , *Note nth::\n"
        },
        {
            "type": "Notes",
            "text": "first  is functionally equivalent to car, second is functionally\nequivalent to cadr, third  is functionally equivalent to caddr, and fourth\nis functionally equivalent to cadddr.\nThe ordinal numbering used here is one-origin, as opposed to the\nzero-origin numbering used by nth:\n      (fifth x) == (nth 4 x)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: first,  Next: nth,  Prev: pop,  Up: Conses Dictionary\n\nfirst, second, third, fourth, fifth,\n------------------------------------\n\nsixth, seventh, eighth, ninth, tenth\n------------------------------------\n\n                                                                [Accessor]\n\n`first'  list =>  object (setf (`first' list) new-object)\n`second'  list =>  object (setf (`second' list) new-object)\n`third'  list =>  object (setf (`third' list) new-object)\n`fourth'  list =>  object (setf (`fourth' list) new-object)\n`fifth'  list =>  object (setf (`fifth' list) new-object)\n`sixth'  list =>  object (setf (`sixth' list) new-object)\n`seventh'  list =>  object (setf (`seventh' list) new-object)\n`eighth'  list =>  object (setf (`eighth' list) new-object)\n`ninth'  list =>  object (setf (`ninth' list) new-object)\n`tenth'  list =>  object (setf (`tenth' list) new-object)\nArguments and Values::\n......................\n\nlist--a list,\n\nwhich might be a dotted list or a circular list.\n\nobject, new-object--an object.\n\nDescription::\n.............\n\nThe functions first, second, third, fourth, fifth, sixth, seventh, eighth,\nninth, and tenth access the first, second, third, fourth, fifth, sixth,\nseventh, eighth, ninth, and tenth elements of list, respectively.\nSpecifically,\n\n      (first list)    ==  (car list)\n      (second list)   ==  (car (cdr list))\n      (third list)    ==  (car (cddr list))\n      (fourth list)   ==  (car (cdddr list))\n      (fifth list)    ==  (car (cddddr list))\n      (sixth list)    ==  (car (cdr (cddddr list)))\n      (seventh list)  ==  (car (cddr (cddddr list)))\n      (eighth list)   ==  (car (cdddr (cddddr list)))\n      (ninth list)    ==  (car (cddddr (cddddr list)))\n      (tenth list)    ==  (car (cdr (cddddr (cddddr list))))\n\nsetf can also be used with any of these functions to change an existing\ncomponent.  The same equivalences apply.  For example:\n\n      (setf (fifth list) new-object) == (setf (car (cddddr list)) new-object)\n\nExamples::\n..........\n\n      (setq lst '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10))\n     =>  (1 2 3 (4 5 6) ((V)) VI 7 8 9 10)\n      (first lst) =>  1\n      (tenth lst) =>  10\n      (fifth lst) =>  ((V))\n      (second (fourth lst)) =>  5\n      (sixth '(1 2 3)) =>  NIL\n      (setf (fourth lst) \"four\") =>  \"four\"\n      lst =>  (1 2 3 \"four\" ((V)) VI 7 8 9 10)\n\nSee Also::\n..........\n\n*Note car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar;\ncdadr; cddar; cdddr; caaaar; caaadr; caadar; caaddr; cadaar; cadadr;\ncaddar; cadddr; cdaaar; cdaadr; cdadar; cdaddr; cddaar; cddadr; cdddar;\ncddddr:: , *Note nth::\n\nNotes::\n.......\n\nfirst  is functionally equivalent to car, second is functionally\nequivalent to cadr, third  is functionally equivalent to caddr, and fourth\nis functionally equivalent to cadddr.\n\nThe ordinal numbering used here is one-origin, as opposed to the\nzero-origin numbering used by nth:\n\n      (fifth x) == (nth 4 x)\n\n"
}