{
    "name": "*print-pretty*",
    "prev": "*print-pprint-dispatch*",
    "next": "*print-readably*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Variable",
        "text": "*print-pretty*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a generalized boolean.\n"
        },
        {
            "type": "Initial Value",
            "text": "implementation-dependent.\n"
        },
        {
            "type": "Description",
            "text": "Controls whether the Lisp printer calls the pretty printer.\nIf it is false, the pretty printer is not used and\na minimum\nof whitespace_1 is output when printing an expression.\nIf it is true, the pretty printer is used, and the Lisp printer will\nendeavor to insert extra whitespace_1 where appropriate to make expressions\nmore readable.\n*print-pretty* has an effect even when the value of *print-escape* is\nfalse.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq *print-pretty* 'nil) =>  NIL\n      (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil)\n      |>  (LET ((A 1) (B 2) (C 3)) (+ A B C))\n     =>  NIL\n      (let ((*print-pretty* t))\n        (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil))\n      |>  (LET ((A 1)\n      |>        (B 2)\n      |>        (C 3))\n      |>    (+ A B C))\n     =>  NIL\n     ;; Note that the first two expressions printed by this next form\n     ;; differ from the second two only in whether escape characters are printed.\n     ;; In all four cases, extra whitespace is inserted by the pretty printer.\n      (flet ((test (x)\n               (let ((*print-pretty* t))\n                 (print x)\n                 (format t \"~\n                 (terpri) (princ x) (princ \" \")\n                 (format t \"~\n       (test '#'(lambda () (list \"a\" #'c #'d))))\n      |>  #'(LAMBDA ()\n      |>      (LIST \"a\" #'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST \"a\" #'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST a b 'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST a b 'C #'D))\n     =>  NIL\n"
        },
        {
            "type": "See Also",
            "text": "*Note write; prin1; print; pprint; princ::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *print-pretty*,  Next: *print-readably*,  Prev: *print-pprint-dispatch*,  Up: Printer Dictionary\n\n*print-pretty*                                                   [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na generalized boolean.\n\nInitial Value::\n...............\n\nimplementation-dependent.\n\nDescription::\n.............\n\nControls whether the Lisp printer calls the pretty printer.\n\nIf it is false, the pretty printer is not used and\n\na minimum\n\nof whitespace_1 is output when printing an expression.\n\nIf it is true, the pretty printer is used, and the Lisp printer will\nendeavor to insert extra whitespace_1 where appropriate to make expressions\nmore readable.\n\n*print-pretty* has an effect even when the value of *print-escape* is\nfalse.\n\nExamples::\n..........\n\n      (setq *print-pretty* 'nil) =>  NIL\n      (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil)\n      |>  (LET ((A 1) (B 2) (C 3)) (+ A B C))\n     =>  NIL\n      (let ((*print-pretty* t))\n        (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil))\n      |>  (LET ((A 1)\n      |>        (B 2)\n      |>        (C 3))\n      |>    (+ A B C))\n     =>  NIL\n     ;; Note that the first two expressions printed by this next form\n     ;; differ from the second two only in whether escape characters are printed.\n     ;; In all four cases, extra whitespace is inserted by the pretty printer.\n      (flet ((test (x)\n               (let ((*print-pretty* t))\n                 (print x)\n                 (format t \"~\n                 (terpri) (princ x) (princ \" \")\n                 (format t \"~\n       (test '#'(lambda () (list \"a\" #'c #'d))))\n      |>  #'(LAMBDA ()\n      |>      (LIST \"a\" #'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST \"a\" #'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST a b 'C #'D))\n      |>  #'(LAMBDA ()\n      |>      (LIST a b 'C #'D))\n     =>  NIL\n\nSee Also::\n..........\n\n*Note write; prin1; print; pprint; princ::\n\n"
}