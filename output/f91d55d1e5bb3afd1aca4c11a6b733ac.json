{
    "name": "Accessibility of Symbols in a Package",
    "prev": "Package Inheritance",
    "next": "Locating a Symbol in a Package",
    "up": "Introduction to Packages",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Accessibility of Symbols in a Package",
            "text": "A symbol becomes accessible in a package if that is its home package when\nit is created, or if it is imported into that package, or by inheritance\nvia use-package.\nIf a symbol is accessible in a package, it can be referred to when using\nthe Lisp reader without a package prefix when that package is the current\npackage, regardless of whether it is present or inherited.\nSymbols from one package can be made accessible in another package in two\nways.\n-\n     Any individual symbol can be added to a package by use of import.\n     After the call to import the symbol is present in the importing\n     package.  The status of the symbol in the package it came from (if\n     any) is unchanged, and the home package for this symbol is unchanged.\n     Once imported, a symbol is present in the importing package and can\n     be removed only by calling unintern.\n     A symbol is shadowed_3 by another symbol in some package if the first\n     symbol would be accessible by inheritance if not for the presence of\n     the second symbol.  See shadowing-import.\n-\n     The second mechanism for making symbols from one package accessible\n     in another is provided by use-package.  All of the external symbols\n     of the used package are inherited by the using package.  The function\n     unuse-package undoes the effects of a previous use-package.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Accessibility of Symbols in a Package,  Next: Locating a Symbol in a Package,  Prev: Package Inheritance,  Up: Introduction to Packages\n\nAccessibility of Symbols in a Package\n.....................................\n\nA symbol becomes accessible in a package if that is its home package when\nit is created, or if it is imported into that package, or by inheritance\nvia use-package.\n\nIf a symbol is accessible in a package, it can be referred to when using\nthe Lisp reader without a package prefix when that package is the current\npackage, regardless of whether it is present or inherited.\n\nSymbols from one package can be made accessible in another package in two\nways.\n\n-\n     Any individual symbol can be added to a package by use of import.\n     After the call to import the symbol is present in the importing\n     package.  The status of the symbol in the package it came from (if\n     any) is unchanged, and the home package for this symbol is unchanged.\n     Once imported, a symbol is present in the importing package and can\n     be removed only by calling unintern.\n\n     A symbol is shadowed_3 by another symbol in some package if the first\n     symbol would be accessible by inheritance if not for the presence of\n     the second symbol.  See shadowing-import.\n\n-\n     The second mechanism for making symbols from one package accessible\n     in another is provided by use-package.  All of the external symbols\n     of the used package are inherited by the using package.  The function\n     unuse-package undoes the effects of a previous use-package.\n\n"
}