{
    "name": "compiled-function-p",
    "prev": "functionp",
    "next": "call-arguments-limit",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Function",
        "text": "compiled-function-p"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "compiled-function-p",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type compiled-function; otherwise, returns\nfalse.\n"
        },
        {
            "type": "Examples",
            "text": "      (defun f (x) x) =>  F\n      (compiled-function-p #'f)\n     =>  false\n     OR=> true\n      (compiled-function-p 'f) =>  false\n      (compile 'f) =>  F\n      (compiled-function-p #'f) =>  true\n      (compiled-function-p 'f) =>  false\n      (compiled-function-p (compile nil '(lambda (x) x)))\n     =>  true\n      (compiled-function-p #'(lambda (x) x))\n     =>  false\n     OR=> true\n      (compiled-function-p '(lambda (x) x)) =>  false\n"
        },
        {
            "type": "See Also",
            "text": "*Note compile:: , *Note compile-file:: , *Note compiled-function::\n"
        },
        {
            "type": "Notes",
            "text": "      (compiled-function-p object) == (typep object 'compiled-function)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: compiled-function-p,  Next: call-arguments-limit,  Prev: functionp,  Up: Data and Control Flow Dictionary\n\ncompiled-function-p                                              [Function]\n---------------------------------------------------------------------------\n\n`compiled-function-p'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type compiled-function; otherwise, returns\nfalse.\n\nExamples::\n..........\n\n      (defun f (x) x) =>  F\n      (compiled-function-p #'f)\n     =>  false\n     OR=> true\n      (compiled-function-p 'f) =>  false\n      (compile 'f) =>  F\n      (compiled-function-p #'f) =>  true\n      (compiled-function-p 'f) =>  false\n      (compiled-function-p (compile nil '(lambda (x) x)))\n     =>  true\n      (compiled-function-p #'(lambda (x) x))\n     =>  false\n     OR=> true\n      (compiled-function-p '(lambda (x) x)) =>  false\n\nSee Also::\n..........\n\n*Note compile:: , *Note compile-file:: , *Note compiled-function::\n\nNotes::\n.......\n\n      (compiled-function-p object) == (typep object 'compiled-function)\n\n"
}