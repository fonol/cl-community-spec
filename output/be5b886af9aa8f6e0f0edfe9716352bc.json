{
    "name": "File Compilation",
    "prev": "Compilation Semantics",
    "next": "Literal Objects in Compiled Files",
    "up": "Compilation",
    "header": {
        "type": null,
        "text": "File Compilation"
    },
    "sections": [
        {
            "type": "",
            "text": "The function compile-file performs compilation of forms in a file\nfollowing the rules specified in *Note Compilation Semantics::, and\nproduces an output file that can be loaded by using load.\nNormally, the top level forms appearing in a file compiled with\ncompile-file are evaluated only when the resulting compiled file is\nloaded, and not when the file is compiled.  However, it is typically the\ncase that some forms in the file need to be evaluated at compile time so\nthe remainder of the file can be read and compiled correctly.\nThe eval-when special form can be used to control whether a top level form\nis evaluated at compile time, load time, or both.  It is possible to\nspecify any of three situations with eval-when, denoted by the symbols\n:compile-toplevel, :load-toplevel, and :execute.  For top level eval-when\nforms, :compile-toplevel specifies that the compiler must evaluate the\nbody at compile time, and :load-toplevel specifies that the compiler must\narrange to evaluate the body at load time. For non-top level eval-when\nforms, :execute specifies that the body must be executed in the run-time\nenvironment.\nThe behavior of this form can be more precisely understood in terms of a\nmodel of how compile-file processes forms in a file to be compiled. There\nare two processing modes, called \"not-compile-time\" and \"compile-time-too\".\nSuccessive forms are read from the file by compile-file and processed in\nnot-compile-time mode; in this mode, compile-file arranges for forms to be\nevaluated only at load time and not at compile time.  When compile-file is\nin compile-time-too mode, forms are evaluated both at compile time and\nload time.\n* Menu:\n* Processing of Top Level Forms::\n* Processing of Defining Macros::\n* Constraints on Macros and Compiler Macros::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: File Compilation,  Next: Literal Objects in Compiled Files,  Prev: Compilation Semantics,  Up: Compilation\n\nFile Compilation\n----------------\n\nThe function compile-file performs compilation of forms in a file\nfollowing the rules specified in *Note Compilation Semantics::, and\nproduces an output file that can be loaded by using load.\n\nNormally, the top level forms appearing in a file compiled with\ncompile-file are evaluated only when the resulting compiled file is\nloaded, and not when the file is compiled.  However, it is typically the\ncase that some forms in the file need to be evaluated at compile time so\nthe remainder of the file can be read and compiled correctly.\n\nThe eval-when special form can be used to control whether a top level form\nis evaluated at compile time, load time, or both.  It is possible to\nspecify any of three situations with eval-when, denoted by the symbols\n:compile-toplevel, :load-toplevel, and :execute.  For top level eval-when\nforms, :compile-toplevel specifies that the compiler must evaluate the\nbody at compile time, and :load-toplevel specifies that the compiler must\narrange to evaluate the body at load time. For non-top level eval-when\nforms, :execute specifies that the body must be executed in the run-time\nenvironment.\n\nThe behavior of this form can be more precisely understood in terms of a\nmodel of how compile-file processes forms in a file to be compiled. There\nare two processing modes, called \"not-compile-time\" and \"compile-time-too\".\n\nSuccessive forms are read from the file by compile-file and processed in\nnot-compile-time mode; in this mode, compile-file arranges for forms to be\nevaluated only at load time and not at compile time.  When compile-file is\nin compile-time-too mode, forms are evaluated both at compile time and\nload time.\n\n* Menu:\n\n* Processing of Top Level Forms::\n* Processing of Defining Macros::\n* Constraints on Macros and Compiler Macros::\n\n"
}