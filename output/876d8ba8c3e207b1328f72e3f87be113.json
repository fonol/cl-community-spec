{
    "name": "The \"Name\" Section of a Dictionary Entry",
    "prev": "The \"Method Signature\" Section of a Dictionary Entry",
    "next": "The \"Notes\" Section of a Dictionary Entry",
    "up": "Interpreting Dictionary Entries",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The \"Name\" Section of a Dictionary Entry",
            "text": "This section introduces the dictionary entry.  It is not explicitly\nlabeled.  It appears preceded and followed by a horizontal bar.\nIn large print at left, the defined name appears; if more than one defined\nname is to be described by the entry, all such names are shown separated\nby commas.\nIn somewhat smaller italic print at right is an indication of what kind of\ndictionary entry this is.  Possible values are:\nAccessor\n     This is an accessor function.\nClass\n     This is a class.\nCondition Type\n     This is a subtype of type condition.\nConstant Variable\n     This is a constant variable.\nDeclaration\n     This is a declaration identifier.\nFunction\n     This is a function.\nLocal Function\n     This is a function that is defined only lexically within the scope of\n     some other macro form.\nLocal Macro\n     This is a macro that is defined only lexically within the scope of\n     some other macro form.\nMacro\n     This is a macro.\nRestart\n     This is a restart.\nSpecial Operator\n     This is a special operator.\nStandard Generic Function\n     This is a standard generic function.\nSymbol\n     This is a symbol that is specially recognized in some particular\n     situation, such as the syntax of a macro.\nSystem Class\n     This is like class, but it identifies a class that is potentially a\n     built-in class.  (No class is actually required to be a built-in\n     class.)\nType\n     This is an atomic type specifier, and depending on information for\n     each particular entry, may subject to form other type specifiers.\nType Specifier\n     This is a defined name that is not an atomic type specifier, but that\n     can be used in constructing valid type specifiers.\nVariable\n     This is a dynamic variable.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The ``Name'' Section of a Dictionary Entry,  Next: The ``Notes'' Section of a Dictionary Entry,  Prev: The ``Method Signature'' Section of a Dictionary Entry,  Up: Interpreting Dictionary Entries\n\nThe \"Name\" Section of a Dictionary Entry\n........................................\n\nThis section introduces the dictionary entry.  It is not explicitly\nlabeled.  It appears preceded and followed by a horizontal bar.\n\nIn large print at left, the defined name appears; if more than one defined\nname is to be described by the entry, all such names are shown separated\nby commas.\n\nIn somewhat smaller italic print at right is an indication of what kind of\ndictionary entry this is.  Possible values are:\n\nAccessor\n     This is an accessor function.\n\nClass\n     This is a class.\n\nCondition Type\n     This is a subtype of type condition.\n\nConstant Variable\n     This is a constant variable.\n\nDeclaration\n     This is a declaration identifier.\n\nFunction\n     This is a function.\n\nLocal Function\n     This is a function that is defined only lexically within the scope of\n     some other macro form.\n\nLocal Macro\n     This is a macro that is defined only lexically within the scope of\n     some other macro form.\n\nMacro\n     This is a macro.\n\nRestart\n     This is a restart.\n\nSpecial Operator\n     This is a special operator.\n\nStandard Generic Function\n     This is a standard generic function.\n\nSymbol\n     This is a symbol that is specially recognized in some particular\n     situation, such as the syntax of a macro.\n\nSystem Class\n     This is like class, but it identifies a class that is potentially a\n     built-in class.  (No class is actually required to be a built-in\n     class.)\n\nType\n     This is an atomic type specifier, and depending on information for\n     each particular entry, may subject to form other type specifiers.\n\nType Specifier\n     This is a defined name that is not an atomic type specifier, but that\n     can be used in constructing valid type specifiers.\n\nVariable\n     This is a dynamic variable.\n\n"
}