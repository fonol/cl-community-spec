{
    "name": "Pretty Printer Concepts",
    "prev": "The Lisp Pretty Printer",
    "next": "Examples of using the Pretty Printer",
    "up": "The Lisp Pretty Printer",
    "header": {
        "type": null,
        "text": "Pretty Printer Concepts"
    },
    "sections": [
        {
            "type": "",
            "text": "The facilities provided by the pretty printer permit programs to redefine\nthe way in which code is displayed, and allow the full power of pretty\nprinting to be applied to complex combinations of data structures.\nWhether any given style of output is in fact \"pretty\" is inherently a\nsomewhat subjective issue.  However, since the effect of the pretty\nprinter can be customized by conforming programs, the necessary\nflexibility is provided for individual programs to achieve an arbitrary\ndegree of aesthetic control.\nBy providing direct access to the mechanisms within the pretty printer\nthat make dynamic decisions about layout, the macros and functions\npprint-logical-block, pprint-newline, and pprint-indent make it possible\nto specify pretty printing layout rules as a part of any function that\nproduces output.  They also make it very easy for the detection of\ncircularity and sharing, and abbreviation based on length and nesting\ndepth to be supported by the function.\nThe pretty printer is driven entirely by dispatch based on the value of\n*print-pprint-dispatch*.  The function set-pprint-dispatch makes it\npossible for conforming programs to associate new pretty printing\nfunctions with a type.\n* Menu:\n* Dynamic Control of the Arrangement of Output::\n* Format Directive Interface::\n* Compiling Format Strings::\n* Pretty Print Dispatch Tables::\n* Pretty Printer Margins::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Pretty Printer Concepts,  Next: Examples of using the Pretty Printer,  Prev: The Lisp Pretty Printer,  Up: The Lisp Pretty Printer\n\nPretty Printer Concepts\n-----------------------\n\nThe facilities provided by the pretty printer permit programs to redefine\nthe way in which code is displayed, and allow the full power of pretty\nprinting to be applied to complex combinations of data structures.\n\nWhether any given style of output is in fact \"pretty\" is inherently a\nsomewhat subjective issue.  However, since the effect of the pretty\nprinter can be customized by conforming programs, the necessary\nflexibility is provided for individual programs to achieve an arbitrary\ndegree of aesthetic control.\n\nBy providing direct access to the mechanisms within the pretty printer\nthat make dynamic decisions about layout, the macros and functions\npprint-logical-block, pprint-newline, and pprint-indent make it possible\nto specify pretty printing layout rules as a part of any function that\nproduces output.  They also make it very easy for the detection of\ncircularity and sharing, and abbreviation based on length and nesting\ndepth to be supported by the function.\n\nThe pretty printer is driven entirely by dispatch based on the value of\n*print-pprint-dispatch*.  The function set-pprint-dispatch makes it\npossible for conforming programs to associate new pretty printing\nfunctions with a type.\n\n* Menu:\n\n* Dynamic Control of the Arrangement of Output::\n* Format Directive Interface::\n* Compiling Format Strings::\n* Pretty Print Dispatch Tables::\n* Pretty Printer Margins::\n\n"
}