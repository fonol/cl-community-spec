{
    "name": "Examples of WITH clause",
    "prev": "Local Variable Initializations",
    "next": null,
    "up": "Variable Initialization and Stepping Clauses",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Examples of WITH clause",
            "text": "     ;; These bindings occur in sequence.\n      (loop with a = 1\n            with b = (+ a 2)\n            with c = (+ b 3)\n            return (list a b c))\n     =>  (1 3 6)\n     ;; These bindings occur in parallel.\n      (setq a 5 b 10)\n     =>  10\n      (loop with a = 1\n            and b = (+ a 2)\n            and c = (+ b 3)\n            return (list a b c))\n     =>  (1 7 13)\n     ;; This example shows a shorthand way to declare local variables\n     ;; that are of different types.\n      (loop with (a b c) of-type (float integer float)\n            return (format nil \"~A ~A ~A\" a b c))\n     =>  \"0.0 0 0.0\"\n     ;; This example shows a shorthand way to declare local variables\n     ;; that are the same type.\n      (loop with (a b c) of-type float\n            return (format nil \"~A ~A ~A\" a b c))\n     =>  \"0.0 0.0 0.0\"\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Examples of WITH clause,  Prev: Local Variable Initializations,  Up: Variable Initialization and Stepping Clauses\n\nExamples of WITH clause\n.......................\n\n     ;; These bindings occur in sequence.\n      (loop with a = 1\n            with b = (+ a 2)\n            with c = (+ b 3)\n            return (list a b c))\n     =>  (1 3 6)\n     \n     ;; These bindings occur in parallel.\n      (setq a 5 b 10)\n     =>  10\n      (loop with a = 1\n            and b = (+ a 2)\n            and c = (+ b 3)\n            return (list a b c))\n     =>  (1 7 13)\n     \n     ;; This example shows a shorthand way to declare local variables\n     ;; that are of different types.\n      (loop with (a b c) of-type (float integer float)\n            return (format nil \"~A ~A ~A\" a b c))\n     =>  \"0.0 0 0.0\"\n     \n     ;; This example shows a shorthand way to declare local variables\n     ;; that are the same type.\n      (loop with (a b c) of-type float\n            return (format nil \"~A ~A ~A\" a b c))\n     =>  \"0.0 0.0 0.0\"\n\n"
}