{
    "name": "*print-pprint-dispatch*",
    "prev": "*print-miser-width*",
    "next": "*print-pretty*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Variable",
        "text": "*print-pprint-dispatch*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a pprint dispatch table.\n"
        },
        {
            "type": "Initial Value",
            "text": "implementation-dependent, but the initial entries all use a special class\nof priorities that have the property that they are less than every\npriority that can be specified using set-pprint-dispatch, so that the\ninitial contents of any entry can be overridden.\n"
        },
        {
            "type": "Description",
            "text": "The pprint dispatch table which currently controls the pretty printer.\n"
        },
        {
            "type": "See Also",
            "text": "*print-pretty*, *Note Pretty Print Dispatch Tables::\n"
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "traditional",
                    "text": "pretty printing of code.  In general, however, you can put avalue in *print-pprint-dispatch* that makes pretty-printed output look\nexactly like non-pretty-printed output.\n\nSetting *print-pretty* to true just causes the functions contained in the\ncurrent pprint dispatch table to have priority over normal print-object\nmethods; it has no magic way of enforcing that those functions actually\nproduce pretty output.  For details, see *Note Pretty Print Dispatch\nTables::.\n\n"
                }
            ],
            "text": "`traditional' pretty printing of code.  In general, however, you can put a\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *print-pprint-dispatch*,  Next: *print-pretty*,  Prev: *print-miser-width*,  Up: Printer Dictionary\n\n*print-pprint-dispatch*                                          [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na pprint dispatch table.\n\nInitial Value::\n...............\n\nimplementation-dependent, but the initial entries all use a special class\nof priorities that have the property that they are less than every\npriority that can be specified using set-pprint-dispatch, so that the\ninitial contents of any entry can be overridden.\n\nDescription::\n.............\n\nThe pprint dispatch table which currently controls the pretty printer.\n\nSee Also::\n..........\n\n*print-pretty*, *Note Pretty Print Dispatch Tables::\n\nNotes::\n.......\n\nThe intent is that the initial value of this variable should cause\n`traditional' pretty printing of code.  In general, however, you can put a\nvalue in *print-pprint-dispatch* that makes pretty-printed output look\nexactly like non-pretty-printed output.\n\nSetting *print-pretty* to true just causes the functions contained in the\ncurrent pprint dispatch table to have priority over normal print-object\nmethods; it has no magic way of enforcing that those functions actually\nproduce pretty output.  For details, see *Note Pretty Print Dispatch\nTables::.\n\n"
}