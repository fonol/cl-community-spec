{
    "name": "array",
    "prev": "Arrays Dictionary",
    "next": "simple-array",
    "up": "Arrays Dictionary",
    "header": {
        "type": "System Class",
        "text": "array"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Class Precedence List",
            "text": "",
            "items": [
                {
                    "name": "array",
                    "link": "f1f713c9e000f5d3f280adbd124df4f5"
                },
                {
                    "name": " t",
                    "link": null
                }
            ]
        },
        {
            "type": "Description",
            "text": "An array contains objects arranged according to a Cartesian coordinate\nsystem.  An array provides mappings from a set of\nfixnums\n\\left{i_0,i_1,\\dots,i_{r-1}\\right} to corresponding elements of the array,\nwhere 0 \\le i_j < d_j, r is the rank of the array, and d_j is the size of\ndimension j of the array.\nWhen an array is created, the program requesting its creation may declare\nthat all elements are of a particular type, called the expressed array\nelement type.  The implementation is permitted to upgrade this type in\norder to produce the actual array element type, which is the element type\nfor the array is actually specialized.  See the function\nupgraded-array-element-type.\n"
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Specializing.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`array'{[{element-type | *} [dimension-spec]]})\ndimension-spec ::=rank | * | ({dimension | *}*)\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "dimension--a valid array dimension.\nelement-type--a type specifier.\nrank--a non-negative fixnum.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "This denotes the set of arrays whose element type,  rank,  and dimensions\nmatch any given element-type, rank, and dimensions.  Specifically:\nIf element-type is the symbol *, arrays are not excluded on the basis of\ntheir element type.  Otherwise, only those arrays are included whose\nactual array element type\nis the result of upgrading element-type; see *Note Array Upgrading::.\nIf the dimension-spec is a rank, the set includes only those arrays having\nthat rank.  If the dimension-spec is a list of dimensions, the set\nincludes only those arrays having a rank given by the length of the\ndimensions, and having the indicated dimensions; in this case, * matches\nany value for the corresponding dimension.  If the dimension-spec is the\nsymbol *, the set is not restricted on the basis of rank or dimension.\n"
        },
        {
            "type": "See Also",
            "text": "*print-array*, *Note aref:: , *Note make-array:: , vector, *Note Sharpsign\nA::, *Note Printing Other Arrays::\n"
        },
        {
            "type": "Notes",
            "text": "Note that the type (array t) is a proper subtype of the type (array *).\nThe reason is that the type (array t) is the set of arrays that can hold\nany object (the elements are of type t,  which includes all objects).  On\nthe other hand, the type (array *) is the set of all arrays whatsoever,\nincluding for example arrays that can hold only characters.  The type\n(array character) is not a subtype of the type (array t); the two sets are\ndisjoint because the type (array character) is not the set of all arrays\nthat can hold characters, but rather the set of arrays that are\nspecialized to hold precisely characters and no other objects.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: array,  Next: simple-array,  Prev: Arrays Dictionary,  Up: Arrays Dictionary\n\narray                                                        [System Class]\n---------------------------------------------------------------------------\n\nClass Precedence List::\n.......................\n\narray, t\n\nDescription::\n.............\n\nAn array contains objects arranged according to a Cartesian coordinate\nsystem.  An array provides mappings from a set of\n\nfixnums\n\n\\left{i_0,i_1,\\dots,i_{r-1}\\right} to corresponding elements of the array,\nwhere 0 \\le i_j < d_j, r is the rank of the array, and d_j is the size of\ndimension j of the array.\n\nWhen an array is created, the program requesting its creation may declare\nthat all elements are of a particular type, called the expressed array\nelement type.  The implementation is permitted to upgrade this type in\norder to produce the actual array element type, which is the element type\nfor the array is actually specialized.  See the function\nupgraded-array-element-type.\n\nCompound Type Specifier Kind::\n..............................\n\nSpecializing.\n\nCompound Type Specifier Syntax::\n................................\n\n(`array'{[{element-type | *} [dimension-spec]]})\n\ndimension-spec ::=rank | * | ({dimension | *}*)\n\nCompound Type Specifier Arguments::\n...................................\n\ndimension--a valid array dimension.\n\nelement-type--a type specifier.\n\nrank--a non-negative fixnum.\n\nCompound Type Specifier Description::\n.....................................\n\nThis denotes the set of arrays whose element type,  rank,  and dimensions\nmatch any given element-type, rank, and dimensions.  Specifically:\n\nIf element-type is the symbol *, arrays are not excluded on the basis of\ntheir element type.  Otherwise, only those arrays are included whose\nactual array element type\n\nis the result of upgrading element-type; see *Note Array Upgrading::.\n\nIf the dimension-spec is a rank, the set includes only those arrays having\nthat rank.  If the dimension-spec is a list of dimensions, the set\nincludes only those arrays having a rank given by the length of the\ndimensions, and having the indicated dimensions; in this case, * matches\nany value for the corresponding dimension.  If the dimension-spec is the\nsymbol *, the set is not restricted on the basis of rank or dimension.\n\nSee Also::\n..........\n\n*print-array*, *Note aref:: , *Note make-array:: , vector, *Note Sharpsign\nA::, *Note Printing Other Arrays::\n\nNotes::\n.......\n\nNote that the type (array t) is a proper subtype of the type (array *).\nThe reason is that the type (array t) is the set of arrays that can hold\nany object (the elements are of type t,  which includes all objects).  On\nthe other hand, the type (array *) is the set of all arrays whatsoever,\nincluding for example arrays that can hold only characters.  The type\n(array character) is not a subtype of the type (array t); the two sets are\ndisjoint because the type (array character) is not the set of all arrays\nthat can hold characters, but rather the set of arrays that are\nspecialized to hold precisely characters and no other objects.\n\n"
}