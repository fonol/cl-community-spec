{
    "name": "Tilde R-> Radix",
    "prev": "FORMAT Radix Control",
    "next": "Tilde D-> Decimal",
    "up": "FORMAT Radix Control",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde R: Radix",
            "text": "~nR prints arg in radix n.  The modifier flags and any remaining\nparameters are used as for the ~D directive.  ~D is the same as ~10R.  The\nfull form is ~radix,mincol,padchar,commachar,comma-intervalR.\nIf no prefix parameters are given to ~R, then a different interpretation\nis given.  The argument should be an integer.  For example, if arg is 4:\n*\n     ~R prints arg as a cardinal English number: four.\n*\n     ~:R prints arg as an ordinal English number: fourth.\n*\n     ~@R prints arg as a Roman numeral: IV.\n*\n     ~:@R prints arg as an old Roman numeral: IIII.\nFor example:\n      (format nil \"~,,' ,4:B\" 13) =>  \"1101\"\n      (format nil \"~,,' ,4:B\" 17) =>  \"1 0001\"\n      (format nil \"~19,0,' ,4:B\" 3333) =>  \"0000 1101 0000 0101\"\n      (format nil \"~3,,,' ,2:R\" 17) =>  \"1 22\"\n      (format nil \"~,,'|,2:D\" #xFFFF) =>   \"6|55|35\"\nIf and only if the first parameter, n, is supplied, ~R binds\n*print-escape* to false, *print-radix* to false, *print-base* to n,\nand *print-readably* to false.\nIf and only if no parameters are supplied, ~R binds *print-base* to 10.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde R-> Radix,  Next: Tilde D-> Decimal,  Prev: FORMAT Radix Control,  Up: FORMAT Radix Control\n\nTilde R: Radix\n..............\n\n~nR prints arg in radix n.  The modifier flags and any remaining\nparameters are used as for the ~D directive.  ~D is the same as ~10R.  The\nfull form is ~radix,mincol,padchar,commachar,comma-intervalR.\n\nIf no prefix parameters are given to ~R, then a different interpretation\nis given.  The argument should be an integer.  For example, if arg is 4:\n\n*\n     ~R prints arg as a cardinal English number: four.\n\n*\n     ~:R prints arg as an ordinal English number: fourth.\n\n*\n     ~@R prints arg as a Roman numeral: IV.\n\n*\n     ~:@R prints arg as an old Roman numeral: IIII.\n\nFor example:\n\n      (format nil \"~,,' ,4:B\" 13) =>  \"1101\"\n      (format nil \"~,,' ,4:B\" 17) =>  \"1 0001\"\n      (format nil \"~19,0,' ,4:B\" 3333) =>  \"0000 1101 0000 0101\"\n      (format nil \"~3,,,' ,2:R\" 17) =>  \"1 22\"\n      (format nil \"~,,'|,2:D\" #xFFFF) =>   \"6|55|35\"\n\nIf and only if the first parameter, n, is supplied, ~R binds\n*print-escape* to false, *print-radix* to false, *print-base* to n,\n\nand *print-readably* to false.\n\nIf and only if no parameters are supplied, ~R binds *print-base* to 10.\n\n"
}