{
    "name": "lambda (Symbol)",
    "prev": "Evaluation and Compilation Dictionary",
    "next": "lambda",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Symbol",
        "text": "lambda"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "lambda",
                    "text": " lambda-list [[{declaration}* | documentation]] {form}*\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments",
            "text": "lambda-list--an ordinary lambda list.\ndeclaration--a declare expression; not evaluated.\ndocumentation--a string; not evaluated.\nform--a form.\n"
        },
        {
            "type": "Description",
            "text": "A lambda expression is a list that can be used in place of a function name\nin certain contexts to denote a function by directly describing its\nbehavior rather than indirectly by referring to the name of an established\nfunction.\nDocumentation is attached to the denoted function (if any is actually\ncreated) as a documentation string.\n"
        },
        {
            "type": "See Also",
            "text": "function, *Note documentation; (setf documentation):: , *Note Lambda\nExpressions::, *Note Lambda Forms::, *Note Syntactic Interaction of\nDocumentation Strings and Declarations::\n"
        },
        {
            "type": "Notes",
            "text": "The lambda form\n      ((lambda lambda-list . body) . arguments)\nis semantically equivalent to the function form\n      (funcall #'(lambda lambda-list . body) . arguments)\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: lambda (Symbol),  Next: lambda,  Prev: Evaluation and Compilation Dictionary,  Up: Evaluation and Compilation Dictionary\n\nlambda                                                             [Symbol]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n`lambda'  lambda-list [[{declaration}* | documentation]] {form}*\n\nArguments::\n...........\n\nlambda-list--an ordinary lambda list.\n\ndeclaration--a declare expression; not evaluated.\n\ndocumentation--a string; not evaluated.\n\nform--a form.\n\nDescription::\n.............\n\nA lambda expression is a list that can be used in place of a function name\nin certain contexts to denote a function by directly describing its\nbehavior rather than indirectly by referring to the name of an established\nfunction.\n\nDocumentation is attached to the denoted function (if any is actually\ncreated) as a documentation string.\n\nSee Also::\n..........\n\nfunction, *Note documentation; (setf documentation):: , *Note Lambda\nExpressions::, *Note Lambda Forms::, *Note Syntactic Interaction of\nDocumentation Strings and Declarations::\n\nNotes::\n.......\n\nThe lambda form\n\n      ((lambda lambda-list . body) . arguments)\n\nis semantically equivalent to the function form\n\n      (funcall #'(lambda lambda-list . body) . arguments)\n\n"
}