{
    "name": "The \"Class Precedence List\" Section of a Dictionary Entry",
    "prev": "The \"Binding Types Affected\" Section of a Dictionary Entry",
    "next": "Dictionary Entries for Type Specifiers",
    "up": "Interpreting Dictionary Entries",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "The \"Class Precedence List\" Section of a Dictionary Entry",
            "text": "This appears in the dictionary entry for a class, and contains an ordered\nlist of the classes defined by Common Lisp that must be in the class\nprecedence list of this class.\nIt is permissible for other (implementation-defined) classes to appear in\nthe implementation's class precedence list for the class.\nIt is permissible for either standard-object or structure-object to appear\nin the implementation's class precedence list; for details, see *Note Type\nRelationships::.\nExcept as explicitly indicated otherwise somewhere in this specification,\nno additional standardized classes may appear in the implementation's\nclass precedence list.\nBy definition of the relationship between classes and types, the classes\nlisted in this section are also supertypes of the type denoted by the\nclass.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: The ``Class Precedence List'' Section of a Dictionary Entry,  Next: Dictionary Entries for Type Specifiers,  Prev: The ``Binding Types Affected'' Section of a Dictionary Entry,  Up: Interpreting Dictionary Entries\n\nThe \"Class Precedence List\" Section of a Dictionary Entry\n.........................................................\n\nThis appears in the dictionary entry for a class, and contains an ordered\nlist of the classes defined by Common Lisp that must be in the class\nprecedence list of this class.\n\nIt is permissible for other (implementation-defined) classes to appear in\nthe implementation's class precedence list for the class.\n\nIt is permissible for either standard-object or structure-object to appear\nin the implementation's class precedence list; for details, see *Note Type\nRelationships::.\n\nExcept as explicitly indicated otherwise somewhere in this specification,\nno additional standardized classes may appear in the implementation's\nclass precedence list.\n\nBy definition of the relationship between classes and types, the classes\nlisted in this section are also supertypes of the type denoted by the\nclass.\n\n"
}