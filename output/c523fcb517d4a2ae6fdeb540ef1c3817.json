{
    "name": "Accessing Slots",
    "prev": "Introduction to Slots",
    "next": "Inheritance of Slots and Slot Options",
    "up": "Slots",
    "header": {
        "type": null,
        "text": "Accessing Slots"
    },
    "sections": [
        {
            "type": "",
            "text": "Slots can be accessed in two ways: by use of the primitive function\nslot-value and by use of generic functions generated by the defclass form.\nThe function slot-value can be used with any of the slot names specified\nin the defclass form to access a specific slot accessible in an instance\nof the given class.\nThe macro defclass provides syntax for generating methods to read and\nwrite slots.  If a reader method is requested, a method is automatically\ngenerated for reading the value of the slot, but no method for storing a\nvalue into it is generated.  If a writer method is requested, a method is\nautomatically generated for storing a value into the slot, but no method\nfor reading its value is generated.  If an accessor method is requested, a\nmethod for reading the value of the slot and a method for storing a value\ninto the slot are automatically generated.  Reader and writer methods are\nimplemented using slot-value.\nWhen a reader or writer method is specified for a slot, the name of the\ngeneric function to which the generated method belongs is directly\nspecified.  If the name specified for the writer method is the symbol\nname, the name of the generic function for writing the slot is the symbol\nname, and the generic function takes two arguments: the new value and the\ninstance, in that order.  If the name specified for the accessor method is\nthe symbol name, the name of the generic function for reading the slot is\nthe symbol name, and the name of the generic function for writing the slot\nis the list (setf name).\nA generic function created or modified by supplying :reader, :writer, or\n:accessor slot options can be treated exactly as an ordinary generic\nfunction.\nNote that slot-value can be used to read or write the value of a slot\nwhether or not reader or writer methods exist for that slot.  When\nslot-value is used, no reader or writer methods are invoked.\nThe macro with-slots can be used to establish a lexical environment in\nwhich specified slots are lexically available as if they were variables.\nThe macro with-slots invokes the function slot-value to access the\nspecified slots.\nThe macro with-accessors can be used to establish a lexical environment in\nwhich specified slots are lexically available through their accessors as\nif they were variables.  The macro with-accessors invokes the appropriate\naccessors to access the specified slots.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Accessing Slots,  Next: Inheritance of Slots and Slot Options,  Prev: Introduction to Slots,  Up: Slots\n\nAccessing Slots\n---------------\n\nSlots can be accessed in two ways: by use of the primitive function\nslot-value and by use of generic functions generated by the defclass form.\n\nThe function slot-value can be used with any of the slot names specified\nin the defclass form to access a specific slot accessible in an instance\nof the given class.\n\nThe macro defclass provides syntax for generating methods to read and\nwrite slots.  If a reader method is requested, a method is automatically\ngenerated for reading the value of the slot, but no method for storing a\nvalue into it is generated.  If a writer method is requested, a method is\nautomatically generated for storing a value into the slot, but no method\nfor reading its value is generated.  If an accessor method is requested, a\nmethod for reading the value of the slot and a method for storing a value\ninto the slot are automatically generated.  Reader and writer methods are\nimplemented using slot-value.\n\nWhen a reader or writer method is specified for a slot, the name of the\ngeneric function to which the generated method belongs is directly\nspecified.  If the name specified for the writer method is the symbol\nname, the name of the generic function for writing the slot is the symbol\nname, and the generic function takes two arguments: the new value and the\ninstance, in that order.  If the name specified for the accessor method is\nthe symbol name, the name of the generic function for reading the slot is\nthe symbol name, and the name of the generic function for writing the slot\nis the list (setf name).\n\nA generic function created or modified by supplying :reader, :writer, or\n:accessor slot options can be treated exactly as an ordinary generic\nfunction.\n\nNote that slot-value can be used to read or write the value of a slot\nwhether or not reader or writer methods exist for that slot.  When\nslot-value is used, no reader or writer methods are invoked.\n\nThe macro with-slots can be used to establish a lexical environment in\nwhich specified slots are lexically available as if they were variables.\nThe macro with-slots invokes the function slot-value to access the\nspecified slots.\n\nThe macro with-accessors can be used to establish a lexical environment in\nwhich specified slots are lexically available through their accessors as\nif they were variables.  The macro with-accessors invokes the appropriate\naccessors to access the specified slots.\n\n"
}