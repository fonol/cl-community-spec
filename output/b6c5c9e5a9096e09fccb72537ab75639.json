{
    "name": "Introduction to Slots",
    "prev": "Slots",
    "next": "Accessing Slots",
    "up": "Slots",
    "header": {
        "type": null,
        "text": "Introduction to Slots"
    },
    "sections": [
        {
            "type": "",
            "text": "An object of metaclass standard-class has zero or more named slots.  The\nslots of an object are determined by the class of the object.  Each slot\ncan hold one value.\n[Reviewer Note by Barmar: All symbols are valid variable names.  Perhaps\nthis means to preclude the use of named constants?  We have a terminology\nproblem to solve.] The name of a slot is a symbol that is syntactically\nvalid for use as a variable name.\nWhen a slot does not have a value, the slot is said to be unbound.  When\nan unbound slot is read,\n[Reviewer Note by Barmar: from an object whose metaclass is\nstandard-class?] the generic function slot-unbound is invoked. The\nsystem-supplied primary method for slot-unbound on class t signals an\nerror.\nIf slot-unbound returns, its primary value is used that time as the value\nof the slot.\nThe default initial value form for a slot is defined by the :initform slot\noption.  When the :initform form is used to supply a value, it is\nevaluated in the lexical environment in which the defclass form was\nevaluated. The :initform along with the lexical environment in which the\ndefclass form was evaluated is called a captured initialization form.  For\nmore details, see *Note Object Creation and Initialization::.\nA local slot is defined to be a slot that is accessible to exactly one\ninstance, namely the one in which the slot is allocated.  A shared slot is\ndefined to be a slot that is visible to more than one instance of a given\nclass and its subclasses.\nA class is said to define a slot with a given name when the defclass form\nfor that class contains a slot specifier with that name.  Defining a local\nslot does not immediately create a slot; it causes a slot to be created\neach time an instance of the class is created.  Defining a shared slot\nimmediately creates a slot.\nThe :allocation slot option to defclass controls the kind of slot that is\ndefined.  If the value of the :allocation slot option is :instance, a\nlocal slot is created.  If the value of :allocation is :class, a shared\nslot is created.\nA slot is said to be accessible in an instance of a class if the slot is\ndefined by the class of the instance or is inherited from a superclass of\nthat class.  At most one slot of a given name can be accessible in an\ninstance.  A shared slot defined by a class is accessible in all instances\nof that class.  A detailed explanation of the inheritance of slots is\ngiven in *Note Inheritance of Slots and Slot Options::.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Introduction to Slots,  Next: Accessing Slots,  Prev: Slots,  Up: Slots\n\nIntroduction to Slots\n---------------------\n\nAn object of metaclass standard-class has zero or more named slots.  The\nslots of an object are determined by the class of the object.  Each slot\ncan hold one value.\n\n[Reviewer Note by Barmar: All symbols are valid variable names.  Perhaps\nthis means to preclude the use of named constants?  We have a terminology\nproblem to solve.] The name of a slot is a symbol that is syntactically\nvalid for use as a variable name.\n\nWhen a slot does not have a value, the slot is said to be unbound.  When\nan unbound slot is read,\n\n[Reviewer Note by Barmar: from an object whose metaclass is\nstandard-class?] the generic function slot-unbound is invoked. The\nsystem-supplied primary method for slot-unbound on class t signals an\nerror.\n\nIf slot-unbound returns, its primary value is used that time as the value\nof the slot.\n\nThe default initial value form for a slot is defined by the :initform slot\noption.  When the :initform form is used to supply a value, it is\nevaluated in the lexical environment in which the defclass form was\nevaluated. The :initform along with the lexical environment in which the\ndefclass form was evaluated is called a captured initialization form.  For\nmore details, see *Note Object Creation and Initialization::.\n\nA local slot is defined to be a slot that is accessible to exactly one\ninstance, namely the one in which the slot is allocated.  A shared slot is\ndefined to be a slot that is visible to more than one instance of a given\nclass and its subclasses.\n\nA class is said to define a slot with a given name when the defclass form\nfor that class contains a slot specifier with that name.  Defining a local\nslot does not immediately create a slot; it causes a slot to be created\neach time an instance of the class is created.  Defining a shared slot\nimmediately creates a slot.\n\nThe :allocation slot option to defclass controls the kind of slot that is\ndefined.  If the value of the :allocation slot option is :instance, a\nlocal slot is created.  If the value of :allocation is :class, a shared\nslot is created.\n\nA slot is said to be accessible in an instance of a class if the slot is\ndefined by the class of the instance or is inherited from a superclass of\nthat class.  At most one slot of a given name can be accessible in an\ninstance.  A shared slot defined by a class is accessible in all instances\nof that class.  A detailed explanation of the inheritance of slots is\ngiven in *Note Inheritance of Slots and Slot Options::.\n\n"
}