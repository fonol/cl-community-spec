{
    "name": "Ordering of Characters",
    "prev": "Identity of Characters",
    "next": "Character Names",
    "up": "Character Concepts",
    "header": {
        "type": null,
        "text": "Ordering of Characters"
    },
    "sections": [
        {
            "type": "",
            "text": "The total ordering on characters is guaranteed to have the following\nproperties:\n*\n     If two characters have the same implementation-defined attributes,\n     then their ordering by char< is consistent with the numerical\n     ordering by the predicate < on their code attributes.\n*\n     If two characters differ in any attribute, then they are not char=.\n     [Reviewer Note by Barmar: I wonder if we should say that the ordering\n     may be dependent on the implementation-defined attributes.]\n*\n     The total ordering is not necessarily the same as the total ordering\n     on the integers produced by applying char-int to the characters.\n*\n     While alphabetic_1 standard characters of a given case must obey a\n     partial ordering, they need not be contiguous; it is permissible for\n     uppercase and lowercase characters to be interleaved.  Thus (char<=\n     #\\a x #\\z) is not a valid way of determining whether or not x is a\n     lowercase character.\nOf the standard characters, those which are alphanumeric obey the\nfollowing partial ordering:\n      A<B<C<D<E<F<G<H<I<J<K<L<M<N<O<P<Q<R<S<T<U<V<W<X<Y<Z\n      a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z\n      0<1<2<3<4<5<6<7<8<9\n      either 9<A or Z<0\n      either 9<a or z<0\nThis implies that, for standard characters, alphabetic_1 ordering holds\nwithin each case (uppercase and lowercase), and that the numeric\ncharacters as a group are not interleaved with alphabetic characters.\nHowever, the ordering or possible interleaving of uppercase characters and\nlowercase characters is implementation-defined.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Ordering of Characters,  Next: Character Names,  Prev: Identity of Characters,  Up: Character Concepts\n\nOrdering of Characters\n----------------------\n\nThe total ordering on characters is guaranteed to have the following\nproperties:\n\n*\n     If two characters have the same implementation-defined attributes,\n     then their ordering by char< is consistent with the numerical\n     ordering by the predicate < on their code attributes.\n\n*\n     If two characters differ in any attribute, then they are not char=.\n\n     [Reviewer Note by Barmar: I wonder if we should say that the ordering\n     may be dependent on the implementation-defined attributes.]\n\n*\n     The total ordering is not necessarily the same as the total ordering\n     on the integers produced by applying char-int to the characters.\n\n*\n     While alphabetic_1 standard characters of a given case must obey a\n     partial ordering, they need not be contiguous; it is permissible for\n     uppercase and lowercase characters to be interleaved.  Thus (char<=\n     #\\a x #\\z) is not a valid way of determining whether or not x is a\n     lowercase character.\n\nOf the standard characters, those which are alphanumeric obey the\nfollowing partial ordering:\n\n      A<B<C<D<E<F<G<H<I<J<K<L<M<N<O<P<Q<R<S<T<U<V<W<X<Y<Z\n      a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z\n      0<1<2<3<4<5<6<7<8<9\n      either 9<A or Z<0\n      either 9<a or z<0\n\nThis implies that, for standard characters, alphabetic_1 ordering holds\nwithin each case (uppercase and lowercase), and that the numeric\ncharacters as a group are not interleaved with alphabetic characters.\nHowever, the ordering or possible interleaving of uppercase characters and\nlowercase characters is implementation-defined.\n\n"
}