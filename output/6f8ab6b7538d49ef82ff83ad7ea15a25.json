{
    "name": "Package Inheritance",
    "prev": "Internal and External Symbols",
    "next": "Accessibility of Symbols in a Package",
    "up": "Introduction to Packages",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Package Inheritance",
            "text": "Packages can be built up in layers.  From one point of view, a package is\na single collection of mappings from strings into internal symbols and\nexternal symbols.  However, some of these mappings might be established\nwithin the package itself, while other mappings are inherited from other\npackages via use-package.  A symbol is said to be present in a package if\nthe mapping is in the package itself and is not inherited from somewhere\nelse.\nThere is no way to inherit the internal symbols of another package; to\nrefer to an internal symbol using the Lisp reader, a package containing\nthe symbol must be made to be the current package, a package prefix must\nbe used, or the symbol must be imported into the current package.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Package Inheritance,  Next: Accessibility of Symbols in a Package,  Prev: Internal and External Symbols,  Up: Introduction to Packages\n\nPackage Inheritance\n...................\n\nPackages can be built up in layers.  From one point of view, a package is\na single collection of mappings from strings into internal symbols and\nexternal symbols.  However, some of these mappings might be established\nwithin the package itself, while other mappings are inherited from other\npackages via use-package.  A symbol is said to be present in a package if\nthe mapping is in the package itself and is not inherited from somewhere\nelse.\n\nThere is no way to inherit the internal symbols of another package; to\nrefer to an internal symbol using the Lisp reader, a package containing\nthe symbol must be made to be the current package, a package prefix must\nbe used, or the symbol must be imported into the current package.\n\n"
}