{
    "name": "class-of",
    "prev": "(setf class-name)",
    "next": "unbound-slot",
    "up": "Objects Dictionary",
    "header": {
        "type": "Function",
        "text": "class-of"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "class-of",
                    "text": " object =>  class\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "class",
                    "desc": "a class object."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the class of which the object is a direct instance.\n"
        },
        {
            "type": "Examples",
            "text": "      (class-of 'fred) =>  #<BUILT-IN-CLASS SYMBOL 610327300>\n      (class-of 2/3) =>  #<BUILT-IN-CLASS RATIO 610326642>\n      (defclass book () ()) =>  #<STANDARD-CLASS BOOK 33424745>\n      (class-of (make-instance 'book)) =>  #<STANDARD-CLASS BOOK 33424745>\n      (defclass novel (book) ()) =>  #<STANDARD-CLASS NOVEL 33424764>\n      (class-of (make-instance 'novel)) =>  #<STANDARD-CLASS NOVEL 33424764>\n      (defstruct kons kar kdr) =>  KONS\n      (class-of (make-kons :kar 3 :kdr 4)) =>  #<STRUCTURE-CLASS KONS 250020317>\n"
        },
        {
            "type": "See Also",
            "text": "*Note make-instance:: , *Note type-of::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: class-of,  Next: unbound-slot,  Prev: (setf class-name),  Up: Objects Dictionary\n\nclass-of                                                         [Function]\n---------------------------------------------------------------------------\n\n`class-of'  object =>  class\n\nArguments and Values::\n......................\n\nobject--an object.\n\nclass--a class object.\n\nDescription::\n.............\n\nReturns the class of which the object is a direct instance.\n\nExamples::\n..........\n\n      (class-of 'fred) =>  #<BUILT-IN-CLASS SYMBOL 610327300>\n      (class-of 2/3) =>  #<BUILT-IN-CLASS RATIO 610326642>\n     \n      (defclass book () ()) =>  #<STANDARD-CLASS BOOK 33424745>\n      (class-of (make-instance 'book)) =>  #<STANDARD-CLASS BOOK 33424745>\n     \n      (defclass novel (book) ()) =>  #<STANDARD-CLASS NOVEL 33424764>\n      (class-of (make-instance 'novel)) =>  #<STANDARD-CLASS NOVEL 33424764>\n     \n      (defstruct kons kar kdr) =>  KONS\n      (class-of (make-kons :kar 3 :kdr 4)) =>  #<STRUCTURE-CLASS KONS 250020317>\n\nSee Also::\n..........\n\n*Note make-instance:: , *Note type-of::\n\n"
}