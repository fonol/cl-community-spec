{
    "name": "multiple-value-prog1",
    "prev": "multiple-value-list",
    "next": "multiple-value-setq",
    "up": "Data and Control Flow Dictionary",
    "header": {
        "type": "Special Operator",
        "text": "multiple-value-prog1"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "multiple-value-prog",
                    "text": " 1 =>  first-form {form}*\nfirst-form-results\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "first-form",
                    "desc": "a form; evaluated as described below."
                },
                {
                    "name": "form",
                    "desc": "a form; evaluated as described below."
                },
                {
                    "name": "first-form-results",
                    "desc": "the values resulting from the evaluation of first-form."
                }
            ]
        },
        {
            "type": "Description",
            "text": "multiple-value-prog1 evaluates first-form and saves all the values\nproduced by that form. It then evaluates each form from left to right,\ndiscarding their values.\n"
        },
        {
            "type": "Examples",
            "text": "      (setq temp '(1 2 3)) =>  (1 2 3)\n      (multiple-value-prog1\n         (values-list temp)\n         (setq temp nil)\n         (values-list temp)) =>  1, 2, 3\n"
        },
        {
            "type": "See Also",
            "text": "*Note prog1; prog2::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: multiple-value-prog1,  Next: multiple-value-setq,  Prev: multiple-value-list,  Up: Data and Control Flow Dictionary\n\nmultiple-value-prog1                                     [Special Operator]\n---------------------------------------------------------------------------\n\n`multiple-value-prog'  1 =>  first-form {form}*\n\nfirst-form-results\n\nArguments and Values::\n......................\n\nfirst-form--a form; evaluated as described below.\n\nform--a form; evaluated as described below.\n\nfirst-form-results--the values resulting from the evaluation of first-form.\n\nDescription::\n.............\n\nmultiple-value-prog1 evaluates first-form and saves all the values\nproduced by that form. It then evaluates each form from left to right,\ndiscarding their values.\n\nExamples::\n..........\n\n      (setq temp '(1 2 3)) =>  (1 2 3)\n      (multiple-value-prog1\n         (values-list temp)\n         (setq temp nil)\n         (values-list temp)) =>  1, 2, 3\n\nSee Also::\n..........\n\n*Note prog1; prog2::\n\n"
}