{
    "name": "*print-lines*",
    "prev": "*print-level*",
    "next": "*print-miser-width*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Variable",
        "text": "*print-lines*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a non-negative integer, or nil.\n"
        },
        {
            "type": "Initial Value",
            "text": "nil.\n"
        },
        {
            "type": "Description",
            "text": "When the value of *print-lines* is other than nil, it is a limit on the\nnumber of output lines produced when something is pretty printed.  If an\nattempt is made to go beyond that many lines, \"..\" is printed at the end\nof the last line followed by all of the suffixes (closing delimiters) that\nare pending to be printed.\n"
        },
        {
            "type": "Examples",
            "text": "      (let ((*print-right-margin* 25) (*print-lines* 3))\n        (pprint '(progn (setq a 1 b 2 c 3 d 4))))\n      |>  (PROGN (SETQ A 1\n      |>               B 2\n      |>               C 3 ..))\n     =>  <no values>\n"
        },
        {
            "type": "Notes",
            "text": "The \"..\" notation is intentionally different than the \"...\" notation used\nfor level abbreviation, so that the two different situations can be\nvisually distinguished.\nThis notation is used to increase the likelihood that the Lisp reader will\nsignal an error if an attempt is later made to read the abbreviated output.\nNote however that if the truncation occurs in a string, as in \"This string\nhas been trunc..\", the problem situation cannot be detected later and no\nsuch error will be signaled.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *print-lines*,  Next: *print-miser-width*,  Prev: *print-level*,  Up: Printer Dictionary\n\n*print-lines*                                                    [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na non-negative integer, or nil.\n\nInitial Value::\n...............\n\nnil.\n\nDescription::\n.............\n\nWhen the value of *print-lines* is other than nil, it is a limit on the\nnumber of output lines produced when something is pretty printed.  If an\nattempt is made to go beyond that many lines, \"..\" is printed at the end\nof the last line followed by all of the suffixes (closing delimiters) that\nare pending to be printed.\n\nExamples::\n..........\n\n      (let ((*print-right-margin* 25) (*print-lines* 3))\n        (pprint '(progn (setq a 1 b 2 c 3 d 4))))\n      |>  (PROGN (SETQ A 1\n      |>               B 2\n      |>               C 3 ..))\n     =>  <no values>\n\nNotes::\n.......\n\nThe \"..\" notation is intentionally different than the \"...\" notation used\nfor level abbreviation, so that the two different situations can be\nvisually distinguished.\n\nThis notation is used to increase the likelihood that the Lisp reader will\nsignal an error if an attempt is later made to read the abbreviated output.\nNote however that if the truncation occurs in a string, as in \"This string\nhas been trunc..\", the problem situation cannot be detected later and no\nsuch error will be signaled.\n\n"
}