{
    "name": "Satisfying a One-Argument Test",
    "prev": "Satisfying a Two-Argument Test",
    "next": null,
    "up": "Rules about Test Functions",
    "header": {
        "type": null,
        "text": "Satisfying a One-Argument Test"
    },
    "sections": [
        {
            "type": "",
            "text": "When using one of the functions in Figure 17-3, the elements E of a\nsequence S are filtered not on the basis of the presence or absence of an\nobject O under a two argument predicate, as with the functions described\nin *Note Satisfying a Two-Argument Test::, but rather on the basis of a\none argument predicate.\n  assoc-if       member-if           rassoc-if          \n  assoc-if-not   member-if-not       rassoc-if-not      \n  count-if       nsubst-if           remove-if          \n  count-if-not   nsubst-if-not       remove-if-not      \n  delete-if      nsubstitute-if      subst-if           \n  delete-if-not  nsubstitute-if-not  subst-if-not       \n  find-if        position-if         substitute-if      \n  find-if-not    position-if-not     substitute-if-not  \n  Figure 17-3: Operators that have One-Argument Tests to be Satisfied\nThe element E_i might not be considered directly.  If a :key argument is\nprovided, it is a designator for a function of one argument to be called\nwith each E_i as an argument, and yielding an object Z_i to be used for\ncomparison.  (If there is no :key argument, Z_i is E_i.)\nFunctions defined in this specification and having a name that ends in\n\"-if\" accept a first argument that is a designator for a function of one\nargument, Z_i.  An E_i is said to satisfy the test if this :test function\nreturns a generalized boolean representing true.\nFunctions defined in this specification and having a name that ends in\n\"-if-not\" accept a first argument that is a designator for a function of\none argument, Z_i.  An E_i is said to satisfy the test if this :test\nfunction returns a generalized boolean representing false.\n* Menu:\n* Examples of Satisfying a One-Argument Test::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Satisfying a One-Argument Test,  Prev: Satisfying a Two-Argument Test,  Up: Rules about Test Functions\n\nSatisfying a One-Argument Test\n------------------------------\n\nWhen using one of the functions in Figure 17-3, the elements E of a\nsequence S are filtered not on the basis of the presence or absence of an\nobject O under a two argument predicate, as with the functions described\nin *Note Satisfying a Two-Argument Test::, but rather on the basis of a\none argument predicate.\n\n  assoc-if       member-if           rassoc-if          \n  assoc-if-not   member-if-not       rassoc-if-not      \n  count-if       nsubst-if           remove-if          \n  count-if-not   nsubst-if-not       remove-if-not      \n  delete-if      nsubstitute-if      subst-if           \n  delete-if-not  nsubstitute-if-not  subst-if-not       \n  find-if        position-if         substitute-if      \n  find-if-not    position-if-not     substitute-if-not  \n\n  Figure 17-3: Operators that have One-Argument Tests to be Satisfied\n\n\nThe element E_i might not be considered directly.  If a :key argument is\nprovided, it is a designator for a function of one argument to be called\nwith each E_i as an argument, and yielding an object Z_i to be used for\ncomparison.  (If there is no :key argument, Z_i is E_i.)\n\nFunctions defined in this specification and having a name that ends in\n\"-if\" accept a first argument that is a designator for a function of one\nargument, Z_i.  An E_i is said to satisfy the test if this :test function\nreturns a generalized boolean representing true.\n\nFunctions defined in this specification and having a name that ends in\n\"-if-not\" accept a first argument that is a designator for a function of\none argument, Z_i.  An E_i is said to satisfy the test if this :test\nfunction returns a generalized boolean representing false.\n\n* Menu:\n\n* Examples of Satisfying a One-Argument Test::\n\n"
}