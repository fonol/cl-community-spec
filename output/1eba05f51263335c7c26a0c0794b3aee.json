{
    "name": "eql (Type Specifier)",
    "prev": "values (Type Specifier)",
    "next": "coerce",
    "up": "Types and Classes Dictionary",
    "header": {
        "type": "Type Specifier",
        "text": "eql"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Compound Type Specifier Kind",
            "text": "Combining.\n"
        },
        {
            "type": "Compound Type Specifier Syntax",
            "text": "(`eql'{object})\n"
        },
        {
            "type": "Compound Type Specifier Arguments",
            "text": "object--an object.\n"
        },
        {
            "type": "Compound Type Specifier Description",
            "text": "Represents the type whose only element is object.\nThe argument object is required.  The object can be *, but if so it\ndenotes itself (the symbol *) and does not represent an unspecified value.\nThe symbol eql is not valid as an atomic type specifier.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: eql (Type Specifier),  Next: coerce,  Prev: values (Type Specifier),  Up: Types and Classes Dictionary\n\neql                                                        [Type Specifier]\n---------------------------------------------------------------------------\n\nCompound Type Specifier Kind::\n..............................\n\nCombining.\n\nCompound Type Specifier Syntax::\n................................\n\n(`eql'{object})\n\nCompound Type Specifier Arguments::\n...................................\n\nobject--an object.\n\nCompound Type Specifier Description::\n.....................................\n\nRepresents the type whose only element is object.\n\nThe argument object is required.  The object can be *, but if so it\ndenotes itself (the symbol *) and does not represent an unspecified value.\nThe symbol eql is not valid as an atomic type specifier.\n\n"
}