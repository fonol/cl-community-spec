{
    "name": "string-trim",
    "prev": "string-upcase",
    "next": "string=",
    "up": "Strings Dictionary",
    "header": {
        "type": "Function",
        "text": "string-trim, string-left-trim, string-right-trim"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "string-trim",
                    "text": " character-bag string =>  trimmed-string\n"
                },
                {
                    "name": "string-left-trim",
                    "text": " character-bag string =>  trimmed-string\n\n"
                },
                {
                    "name": "string-right-trim",
                    "text": " character-bag string =>  trimmed-string\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "character-bag",
                    "desc": "a sequence containing characters."
                },
                {
                    "name": "string",
                    "desc": "a string designator."
                },
                {
                    "name": "trimmed-string",
                    "desc": "a string."
                }
            ]
        },
        {
            "type": "Description",
            "text": "string-trim returns a substring of string, with all characters in\ncharacter-bag stripped off the beginning and end.  string-left-trim is\nsimilar but strips characters off only the beginning; string-right-trim\nstrips off only the end.\nIf no characters need to be trimmed from the string, then either string\nitself or a copy of it may be returned, at the discretion of the\nimplementation.\nAll of these functions observe the fill pointer.\n"
        },
        {
            "type": "Examples",
            "text": "      (string-trim \"abc\" \"abcaakaaakabcaaa\") =>  \"kaaak\"\n      (string-trim '(#\\Space #\\Tab #\\Newline) \" garbanzo beans\n             \") =>  \"garbanzo beans\"\n      (string-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \"three (silly) words\"\n      (string-left-trim \"abc\" \"labcabcabc\") =>  \"labcabcabc\"\n      (string-left-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \"three (silly) words* ) \"\n      (string-right-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \" ( *three (silly) words\"\n"
        },
        {
            "type": "Affected By",
            "text": "The implementation.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: string-trim,  Next: string=,  Prev: string-upcase,  Up: Strings Dictionary\n\nstring-trim, string-left-trim, string-right-trim                 [Function]\n---------------------------------------------------------------------------\n\n`string-trim'  character-bag string =>  trimmed-string\n\n`string-left-trim'  character-bag string =>  trimmed-string\n\n`string-right-trim'  character-bag string =>  trimmed-string\n\nArguments and Values::\n......................\n\ncharacter-bag--a sequence containing characters.\n\nstring--a string designator.\n\ntrimmed-string--a string.\n\nDescription::\n.............\n\nstring-trim returns a substring of string, with all characters in\ncharacter-bag stripped off the beginning and end.  string-left-trim is\nsimilar but strips characters off only the beginning; string-right-trim\nstrips off only the end.\n\nIf no characters need to be trimmed from the string, then either string\nitself or a copy of it may be returned, at the discretion of the\nimplementation.\n\nAll of these functions observe the fill pointer.\n\nExamples::\n..........\n\n      (string-trim \"abc\" \"abcaakaaakabcaaa\") =>  \"kaaak\"\n      (string-trim '(#\\Space #\\Tab #\\Newline) \" garbanzo beans\n             \") =>  \"garbanzo beans\"\n      (string-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \"three (silly) words\"\n     \n      (string-left-trim \"abc\" \"labcabcabc\") =>  \"labcabcabc\"\n      (string-left-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \"three (silly) words* ) \"\n     \n      (string-right-trim \" (*)\" \" ( *three (silly) words* ) \")\n     =>  \" ( *three (silly) words\"\n\nAffected By::\n.............\n\nThe implementation.\n\n"
}