{
    "name": "Declaration Scope",
    "prev": "Declaration Identifiers",
    "next": null,
    "up": "Declarations",
    "header": {
        "type": null,
        "text": "Declaration Scope"
    },
    "sections": [
        {
            "type": "",
            "text": "Declarations can be divided into two kinds: those that apply to the\nbindings of variables or functions; and those that do not apply to\nbindings.\nA declaration that appears at the head of a binding form and applies to a\nvariable or function binding made by that form is called a bound\ndeclaration ; such a declaration affects both the binding and any\nreferences within the scope of the declaration.\nDeclarations that are not bound declarations are called free declarations .\nA free declaration in a form F1 that applies to a binding for a name N\nestablished by some form F2 of which F1 is a subform affects only\nreferences to N within F1; it does not to apply to other references to N\noutside of F1, nor does it affect the manner in which the binding of N by\nF2 is established.\nDeclarations that do not apply to bindings can only appear as free\ndeclarations.\nThe scope of a bound declaration is the same as the lexical scope of the\nbinding to which it applies; for special variables, this means the scope\nthat the binding would have had had it been a lexical binding.\nUnless explicitly stated otherwise, the scope of a free declaration\nincludes only the body subforms of the form at whose head it appears, and\nno other subforms.  The scope of free declarations specifically does not\ninclude initialization forms for bindings established by the form\ncontaining the declarations.\nSome iteration forms include step, end-test, or result subforms that are\nalso included in the scope of declarations that appear in the iteration\nform.  Specifically, the iteration forms and subforms involved are:\n*\n     do, do*: step-forms, end-test-form, and result-forms.\n*\n     dolist, dotimes: result-form\n*\n     do-all-symbols, do-external-symbols, do-symbols: result-form\n* Menu:\n* Examples of Declaration Scope::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Declaration Scope,  Prev: Declaration Identifiers,  Up: Declarations\n\nDeclaration Scope\n-----------------\n\nDeclarations can be divided into two kinds: those that apply to the\nbindings of variables or functions; and those that do not apply to\nbindings.\n\nA declaration that appears at the head of a binding form and applies to a\nvariable or function binding made by that form is called a bound\ndeclaration ; such a declaration affects both the binding and any\nreferences within the scope of the declaration.\n\nDeclarations that are not bound declarations are called free declarations .\n\nA free declaration in a form F1 that applies to a binding for a name N\nestablished by some form F2 of which F1 is a subform affects only\nreferences to N within F1; it does not to apply to other references to N\noutside of F1, nor does it affect the manner in which the binding of N by\nF2 is established.\n\nDeclarations that do not apply to bindings can only appear as free\ndeclarations.\n\nThe scope of a bound declaration is the same as the lexical scope of the\nbinding to which it applies; for special variables, this means the scope\nthat the binding would have had had it been a lexical binding.\n\nUnless explicitly stated otherwise, the scope of a free declaration\nincludes only the body subforms of the form at whose head it appears, and\nno other subforms.  The scope of free declarations specifically does not\ninclude initialization forms for bindings established by the form\ncontaining the declarations.\n\nSome iteration forms include step, end-test, or result subforms that are\nalso included in the scope of declarations that appear in the iteration\nform.  Specifically, the iteration forms and subforms involved are:\n\n*\n     do, do*: step-forms, end-test-form, and result-forms.\n\n*\n     dolist, dotimes: result-form\n\n*\n     do-all-symbols, do-external-symbols, do-symbols: result-form\n\n* Menu:\n\n* Examples of Declaration Scope::\n\n"
}