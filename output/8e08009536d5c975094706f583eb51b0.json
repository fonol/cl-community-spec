{
    "name": "Tilde E-> Exponential Floating-Point",
    "prev": "Tilde F-> Fixed-Format Floating-Point",
    "next": "Tilde G-> General Floating-Point",
    "up": "FORMAT Floating-Point Printers",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Tilde E: Exponential Floating-Point",
            "text": "The next arg is printed as a float in exponential notation.\nThe full form is ~w,d,e,k,overflowchar,padchar,exponentcharE.  The\nparameter w is the width of the field to be printed; d is the number of\ndigits to print after the decimal point; e is the number of digits to use\nwhen printing the exponent; k is a scale factor that defaults to one (not\nzero).\nExactly w characters will be output.  First, leading copies of the\ncharacter padchar (which defaults to a space) are printed, if necessary,\nto pad the field on the left.  If the arg is negative, then a minus sign\nis printed; if the arg is not negative, then a plus sign is printed if and\nonly if the @ modifier was supplied.  Then a sequence of digits containing\na single embedded decimal point is printed.  The form of this sequence of\ndigits depends on the scale factor k.  If k is zero, then d digits are\nprinted after the decimal point, and a single zero digit appears before\nthe decimal point if the total field width will permit it.  If k is\npositive, then it must be strictly less than d+2;  k significant digits\nare printed before the decimal point, and d- k+1 digits are printed after\nthe decimal point.  If k is negative, then it must be strictly greater\nthan - d; a single zero digit appears before the decimal point if the\ntotal field width will permit it, and after the decimal point are printed\nfirst - k zeros and then d+k significant digits.  The printed fraction\nmust be properly rounded.  When rounding up and rounding down would\nproduce printed values equidistant from the scaled value of arg, then the\nimplementation is free to use either one.  For example, printing the\nargument 637.5 using the format ~8,2E may correctly produce either 6.37E+2\nor 6.38E+2.\nFollowing the digit sequence, the exponent is printed.  First the\ncharacter parameter exponentchar is printed; if this parameter is omitted,\nthen the exponent marker that prin1 would use is printed, as determined\nfrom the type of the float and the current value of\n*read-default-float-format*.  Next, either a plus sign or a minus sign is\nprinted, followed by e digits representing the power of ten by which the\nprinted fraction must be multiplied to properly represent the rounded\nvalue of arg.\nIf it is impossible to print the value in the required format in a field\nof width w, possibly because k is too large or too small or because the\nexponent cannot be printed in e character positions, then one of two\nactions is taken.  If the parameter overflowchar is supplied, then w\ncopies of that parameter are printed instead of the scaled value of arg.\nIf the overflowchar parameter is omitted, then the scaled value is printed\nusing more than w characters, as many more as may be needed; if the\nproblem is that d is too small for the supplied k or that e is too small,\nthen a larger value is used for d or e as may be needed.\nIf the w parameter is omitted, then the field is of variable width.  In\neffect a value is chosen for w in such a way that no leading pad\ncharacters need to be printed.\nIf the parameter d is omitted, then there is no constraint on the number\nof digits to appear.  A value is chosen for d in such a way that as many\ndigits as possible may be printed subject to the width constraint imposed\nby the parameter w, the constraint of the scale factor k, and the\nconstraint that no trailing zero digits may appear in the fraction, except\nthat if the fraction to be printed is zero then a single zero digit should\nappear after the decimal point.\nIf the parameter e is omitted, then the exponent is printed using the\nsmallest number of digits necessary to represent its value.\nIf all of w, d, and e are omitted, then the effect is to print the value\nusing ordinary free-format exponential-notation output; prin1 uses\na similar\nformat for any non-zero number whose magnitude is less than 10^-3 or\ngreater than or equal to 10^7.\nThe only difference is that the ~E directive always prints a plus or minus\nsign in front of the exponent, while prin1 omits the plus sign if the\nexponent is non-negative.\nIf arg is a rational number, then it is coerced to be a single float and\nthen printed.  Alternatively, an implementation is permitted to process a\nrational number by any other method that has essentially the same behavior\nbut avoids loss of precision or overflow because of the coercion.  If w\nand d are unsupplied and the number has no exact decimal representation,\nfor example 1/3, some precision cutoff must be chosen by the\nimplementation since only a finite number of digits may be printed.\nIf arg is a complex number or some non-numeric object, then it is printed\nusing the format directive ~wD, thereby printing it in decimal radix and a\nminimum field width of w.\n~E binds *print-escape* to false\nand *print-readably* to false.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Tilde E-> Exponential Floating-Point,  Next: Tilde G-> General Floating-Point,  Prev: Tilde F-> Fixed-Format Floating-Point,  Up: FORMAT Floating-Point Printers\n\nTilde E: Exponential Floating-Point\n...................................\n\nThe next arg is printed as a float in exponential notation.\n\nThe full form is ~w,d,e,k,overflowchar,padchar,exponentcharE.  The\nparameter w is the width of the field to be printed; d is the number of\ndigits to print after the decimal point; e is the number of digits to use\nwhen printing the exponent; k is a scale factor that defaults to one (not\nzero).\n\nExactly w characters will be output.  First, leading copies of the\ncharacter padchar (which defaults to a space) are printed, if necessary,\nto pad the field on the left.  If the arg is negative, then a minus sign\nis printed; if the arg is not negative, then a plus sign is printed if and\nonly if the @ modifier was supplied.  Then a sequence of digits containing\na single embedded decimal point is printed.  The form of this sequence of\ndigits depends on the scale factor k.  If k is zero, then d digits are\nprinted after the decimal point, and a single zero digit appears before\nthe decimal point if the total field width will permit it.  If k is\npositive, then it must be strictly less than d+2;  k significant digits\nare printed before the decimal point, and d- k+1 digits are printed after\nthe decimal point.  If k is negative, then it must be strictly greater\nthan - d; a single zero digit appears before the decimal point if the\ntotal field width will permit it, and after the decimal point are printed\nfirst - k zeros and then d+k significant digits.  The printed fraction\nmust be properly rounded.  When rounding up and rounding down would\nproduce printed values equidistant from the scaled value of arg, then the\nimplementation is free to use either one.  For example, printing the\nargument 637.5 using the format ~8,2E may correctly produce either 6.37E+2\nor 6.38E+2.\n\nFollowing the digit sequence, the exponent is printed.  First the\ncharacter parameter exponentchar is printed; if this parameter is omitted,\nthen the exponent marker that prin1 would use is printed, as determined\nfrom the type of the float and the current value of\n*read-default-float-format*.  Next, either a plus sign or a minus sign is\nprinted, followed by e digits representing the power of ten by which the\nprinted fraction must be multiplied to properly represent the rounded\nvalue of arg.\n\nIf it is impossible to print the value in the required format in a field\nof width w, possibly because k is too large or too small or because the\nexponent cannot be printed in e character positions, then one of two\nactions is taken.  If the parameter overflowchar is supplied, then w\ncopies of that parameter are printed instead of the scaled value of arg.\nIf the overflowchar parameter is omitted, then the scaled value is printed\nusing more than w characters, as many more as may be needed; if the\nproblem is that d is too small for the supplied k or that e is too small,\nthen a larger value is used for d or e as may be needed.\n\nIf the w parameter is omitted, then the field is of variable width.  In\neffect a value is chosen for w in such a way that no leading pad\ncharacters need to be printed.\n\nIf the parameter d is omitted, then there is no constraint on the number\nof digits to appear.  A value is chosen for d in such a way that as many\ndigits as possible may be printed subject to the width constraint imposed\nby the parameter w, the constraint of the scale factor k, and the\nconstraint that no trailing zero digits may appear in the fraction, except\nthat if the fraction to be printed is zero then a single zero digit should\nappear after the decimal point.\n\nIf the parameter e is omitted, then the exponent is printed using the\nsmallest number of digits necessary to represent its value.\n\nIf all of w, d, and e are omitted, then the effect is to print the value\nusing ordinary free-format exponential-notation output; prin1 uses\n\na similar\n\nformat for any non-zero number whose magnitude is less than 10^-3 or\ngreater than or equal to 10^7.\n\nThe only difference is that the ~E directive always prints a plus or minus\nsign in front of the exponent, while prin1 omits the plus sign if the\nexponent is non-negative.\n\nIf arg is a rational number, then it is coerced to be a single float and\nthen printed.  Alternatively, an implementation is permitted to process a\nrational number by any other method that has essentially the same behavior\nbut avoids loss of precision or overflow because of the coercion.  If w\nand d are unsupplied and the number has no exact decimal representation,\nfor example 1/3, some precision cutoff must be chosen by the\nimplementation since only a finite number of digits may be printed.\n\nIf arg is a complex number or some non-numeric object, then it is printed\nusing the format directive ~wD, thereby printing it in decimal radix and a\nminimum field width of w.\n\n~E binds *print-escape* to false\n\nand *print-readably* to false.\n\n"
}