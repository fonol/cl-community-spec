{
    "name": "Character Syntax Types",
    "prev": "Standard Characters",
    "next": null,
    "up": "Character Syntax",
    "header": {
        "type": null,
        "text": "Character Syntax Types"
    },
    "sections": [
        {
            "type": "",
            "text": "The Lisp reader constructs an object from the input text by interpreting\neach character according to its syntax type.  The Lisp reader cannot\naccept as input everything that the Lisp printer produces, and the Lisp\nreader has features that are not used by the Lisp printer.  The Lisp\nreader can be used as a lexical analyzer for a more general user-written\nparser.\nWhen the Lisp reader is invoked, it reads a single character from the\ninput stream and dispatches according to the syntax type of that character.\nEvery character that can appear in the input stream is of one of the\nsyntax types shown in Figure~2-6.\n  constituent  macro character  single escape  \n  invalid      multiple escape  whitespace_2   \n  Figure 2-6: Possible Character Syntax Types \nThe syntax type of a character in a readtable determines how that\ncharacter is interpreted by the Lisp reader while that readtable is the\ncurrent readtable.  At any given time, every character has exactly one\nsyntax type.\nFigure~2-7 lists the syntax type of each character in standard syntax.\n  character  syntax type                 character  syntax type             \n  Backspace  constituent                 0-9       constituent             \n  Tab        whitespace_2                :          constituent             \n  Newline    whitespace_2                ;          terminating macro char  \n  Linefeed   whitespace_2                <          constituent             \n  Page       whitespace_2                =          constituent             \n  Return     whitespace_2                >          constituent             \n  Space      whitespace_2                ?          constituent*            \n  !          constituent*                @          constituent             \n  \"          terminating macro char      A-Z       constituent             \n  #          non-terminating macro char  [          constituent*            \n  $         constituent                 \\          single escape           \n  %          constituent                 ]          constituent*            \n  &          constituent                 ^          constituent             \n  '          terminating macro char      _          constituent             \n  (          terminating macro char      `          terminating macro char  \n  )          terminating macro char      a-z       constituent             \n  *          constituent                 {          constituent*            \n  +          constituent                 |          multiple escape         \n  ,          terminating macro char      }          constituent*            \n  -          constituent                 ~          constituent             \n  .          constituent                 Rubout     constituent             \n  /          constituent                 \n            Figure 2-7: Character Syntax Types in Standard Syntax          \nThe characters marked with an asterisk (*) are initially constituents, but\nthey are not used in any standard Common Lisp notations.  These characters\nare explicitly reserved to the programmer.  ~ is not used in Common Lisp,\nand reserved to implementors.  $ and % are alphabetic_2 characters, but\nare not used in the names of any standard Common Lisp defined names.\nWhitespace_2 characters serve as separators but are otherwise ignored.\nConstituent and escape characters are accumulated to make a token, which\nis then interpreted as a number or symbol.  Macro characters trigger the\ninvocation of functions (possibly user-supplied) that can perform\narbitrary parsing actions.  Macro characters are divided into two kinds,\nterminating and non-terminating, depending on whether or not they\nterminate a token.  The following are descriptions of each kind of syntax\ntype.\n* Menu:\n* Constituent Characters::\n* Constituent Traits::\n* Invalid Characters::\n* Macro Characters::\n* Multiple Escape Characters::\n* Examples of Multiple Escape Characters::\n* Single Escape Character::\n* Examples of Single Escape Characters::\n* Whitespace Characters::\n* Examples of Whitespace Characters::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Character Syntax Types,  Prev: Standard Characters,  Up: Character Syntax\n\nCharacter Syntax Types\n----------------------\n\nThe Lisp reader constructs an object from the input text by interpreting\neach character according to its syntax type.  The Lisp reader cannot\naccept as input everything that the Lisp printer produces, and the Lisp\nreader has features that are not used by the Lisp printer.  The Lisp\nreader can be used as a lexical analyzer for a more general user-written\nparser.\n\nWhen the Lisp reader is invoked, it reads a single character from the\ninput stream and dispatches according to the syntax type of that character.\nEvery character that can appear in the input stream is of one of the\nsyntax types shown in Figure~2-6.\n\n  constituent  macro character  single escape  \n  invalid      multiple escape  whitespace_2   \n\n  Figure 2-6: Possible Character Syntax Types \n\n\nThe syntax type of a character in a readtable determines how that\ncharacter is interpreted by the Lisp reader while that readtable is the\ncurrent readtable.  At any given time, every character has exactly one\nsyntax type.\n\nFigure~2-7 lists the syntax type of each character in standard syntax.\n\n  character  syntax type                 character  syntax type             \n  Backspace  constituent                 0-9       constituent             \n  Tab        whitespace_2                :          constituent             \n  Newline    whitespace_2                ;          terminating macro char  \n  Linefeed   whitespace_2                <          constituent             \n  Page       whitespace_2                =          constituent             \n  Return     whitespace_2                >          constituent             \n  Space      whitespace_2                ?          constituent*            \n  !          constituent*                @          constituent             \n  \"          terminating macro char      A-Z       constituent             \n  #          non-terminating macro char  [          constituent*            \n  $         constituent                 \\          single escape           \n  %          constituent                 ]          constituent*            \n  &          constituent                 ^          constituent             \n  '          terminating macro char      _          constituent             \n  (          terminating macro char      `          terminating macro char  \n  )          terminating macro char      a-z       constituent             \n  *          constituent                 {          constituent*            \n  +          constituent                 |          multiple escape         \n  ,          terminating macro char      }          constituent*            \n  -          constituent                 ~          constituent             \n  .          constituent                 Rubout     constituent             \n  /          constituent                 \n\n            Figure 2-7: Character Syntax Types in Standard Syntax          \n\n\nThe characters marked with an asterisk (*) are initially constituents, but\nthey are not used in any standard Common Lisp notations.  These characters\nare explicitly reserved to the programmer.  ~ is not used in Common Lisp,\nand reserved to implementors.  $ and % are alphabetic_2 characters, but\nare not used in the names of any standard Common Lisp defined names.\n\nWhitespace_2 characters serve as separators but are otherwise ignored.\nConstituent and escape characters are accumulated to make a token, which\nis then interpreted as a number or symbol.  Macro characters trigger the\ninvocation of functions (possibly user-supplied) that can perform\narbitrary parsing actions.  Macro characters are divided into two kinds,\nterminating and non-terminating, depending on whether or not they\nterminate a token.  The following are descriptions of each kind of syntax\ntype.\n\n* Menu:\n\n* Constituent Characters::\n* Constituent Traits::\n* Invalid Characters::\n* Macro Characters::\n* Multiple Escape Characters::\n* Examples of Multiple Escape Characters::\n* Single Escape Character::\n* Examples of Single Escape Characters::\n* Whitespace Characters::\n* Examples of Whitespace Characters::\n\n"
}