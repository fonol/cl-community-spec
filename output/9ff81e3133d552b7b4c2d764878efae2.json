{
    "name": "stream-error-stream",
    "prev": "stream-error",
    "next": "end-of-file",
    "up": "Streams Dictionary",
    "header": {
        "type": "Function",
        "text": "stream-error-stream"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "stream-error-stream",
                    "text": " condition =>  stream\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "condition",
                    "desc": "a condition of type stream-error."
                },
                {
                    "name": "stream",
                    "desc": "a stream."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns the offending stream of a condition of type stream-error.\n"
        },
        {
            "type": "Examples",
            "text": "      (with-input-from-string (s \"(FOO\")\n        (handler-case (read s)\n          (end-of-file (c)\n            (format nil \"~&End of file on ~S.\" (stream-error-stream c)))))\n     \"End of file on #<String Stream>.\"\n"
        },
        {
            "type": "See Also",
            "text": "stream-error, *Note Conditions::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: stream-error-stream,  Next: end-of-file,  Prev: stream-error,  Up: Streams Dictionary\n\nstream-error-stream                                              [Function]\n---------------------------------------------------------------------------\n\n`stream-error-stream'  condition =>  stream\n\nArguments and Values::\n......................\n\ncondition--a condition of type stream-error.\n\nstream--a stream.\n\nDescription::\n.............\n\nReturns the offending stream of a condition of type stream-error.\n\nExamples::\n..........\n\n      (with-input-from-string (s \"(FOO\")\n        (handler-case (read s)\n          (end-of-file (c)\n            (format nil \"~&End of file on ~S.\" (stream-error-stream c)))))\n     \"End of file on #<String Stream>.\"\n\nSee Also::\n..........\n\nstream-error, *Note Conditions::\n\n"
}