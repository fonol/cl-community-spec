{
    "name": "set-dispatch-macro-character",
    "prev": "readtablep",
    "next": "set-macro-character",
    "up": "Reader Dictionary",
    "header": {
        "type": null,
        "text": "set-dispatch-macro-character, get-dispatch-macro-character"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "get-dispatch-macro-character",
                    "text": " disp-char sub-char &optional readtable =>function\n\n"
                },
                {
                    "name": "set-dispatch-macro-character",
                    "text": " disp-char sub-char new-function &optional\nreadtable =>  t\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "disp-char",
                    "desc": "a character."
                },
                {
                    "name": "sub-char",
                    "desc": "a character."
                },
                {
                    "name": "readtable",
                    "desc": "a readtable designator.The default is the current readtable.\n"
                },
                {
                    "name": "function",
                    "desc": "a function designator or nil."
                },
                {
                    "name": "new-function",
                    "desc": "a function designator."
                }
            ]
        },
        {
            "type": "Description",
            "text": "set-dispatch-macro-character causes new-function to be called when\ndisp-char followed by sub-char is read.  If sub-char is a lowercase letter,\nit is converted to its uppercase equivalent.  It is an error if sub-char\nis one of the ten decimal digits.\nset-dispatch-macro-character installs a new-function to be called when a\nparticular dispatching macro character pair is read.  New-function is\ninstalled as the dispatch function to be called  when readtable is in use\nand when disp-char is followed by sub-char.\nFor more information about how the new-function is invoked, see *Note\nMacro Characters::.\nget-dispatch-macro-character retrieves the dispatch function associated\nwith disp-char and sub-char in readtable.\nget-dispatch-macro-character returns the macro-character function for\nsub-char under disp-char, or nil if there is no function associated with\nsub-char.  If sub-char is a decimal digit, get-dispatch-macro-character\nreturns nil.\n"
        },
        {
            "type": "Examples",
            "text": "      (get-dispatch-macro-character #\\# #\\{) =>  NIL\n      (set-dispatch-macro-character #\\# #\\{        ;dispatch on #{\n         #'(lambda(s c n)\n             (let ((list (read s nil (values) t)))  ;list is object after #n{\n               (when (consp list)                   ;return nth element of list\n                 (unless (and n (< 0 n (length list))) (setq n 0))\n                 (setq list (nth n list)))\n              list))) =>  T\n      #{(1 2 3 4) =>  1\n      #3{(0 1 2 3) =>  3\n      #{123 =>  123\nIf it is desired that #$foo : as if it were (dollars foo).\n     (defun |#$-reader| (stream subchar arg)\n        (declare (ignore subchar arg))\n        (list 'dollars (read stream t nil t))) =>  |#$-reader|\n      (set-dispatch-macro-character #\\# #\\$ #'|#$-reader|) =>  T\n"
        },
        {
            "type": "See Also",
            "text": "*Note Macro Characters::\n"
        },
        {
            "type": "Side Effects",
            "text": "The readtable is modified.\n"
        },
        {
            "type": "Affected By",
            "text": "*readtable*.\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "For either function, an error is signaled if disp-char is not a\ndispatching macro character in readtable.\n"
        },
        {
            "type": "See Also",
            "text": "*Note readtable::\n"
        },
        {
            "type": "Notes",
            "text": "It is necessary to use make-dispatch-macro-character to set up the\ndispatch character before specifying its sub-characters.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: set-dispatch-macro-character,  Next: set-macro-character,  Prev: readtablep,  Up: Reader Dictionary\n\nset-dispatch-macro-character, get-dispatch-macro-character\n----------------------------------------------------------\n\n                                                                [Function]\n\n`get-dispatch-macro-character'  disp-char sub-char &optional readtable =>\nfunction\n\n`set-dispatch-macro-character'  disp-char sub-char new-function &optional\nreadtable =>  t\n\nArguments and Values::\n......................\n\ndisp-char--a character.\n\nsub-char--a character.\n\nreadtable--a readtable designator.\n\nThe default is the current readtable.\n\nfunction--a function designator or nil.\n\nnew-function--a function designator.\n\nDescription::\n.............\n\nset-dispatch-macro-character causes new-function to be called when\ndisp-char followed by sub-char is read.  If sub-char is a lowercase letter,\nit is converted to its uppercase equivalent.  It is an error if sub-char\nis one of the ten decimal digits.\n\nset-dispatch-macro-character installs a new-function to be called when a\nparticular dispatching macro character pair is read.  New-function is\ninstalled as the dispatch function to be called  when readtable is in use\nand when disp-char is followed by sub-char.\n\nFor more information about how the new-function is invoked, see *Note\nMacro Characters::.\n\nget-dispatch-macro-character retrieves the dispatch function associated\nwith disp-char and sub-char in readtable.\n\nget-dispatch-macro-character returns the macro-character function for\nsub-char under disp-char, or nil if there is no function associated with\nsub-char.  If sub-char is a decimal digit, get-dispatch-macro-character\nreturns nil.\n\nExamples::\n..........\n\n      (get-dispatch-macro-character #\\# #\\{) =>  NIL\n      (set-dispatch-macro-character #\\# #\\{        ;dispatch on #{\n         #'(lambda(s c n)\n             (let ((list (read s nil (values) t)))  ;list is object after #n{\n               (when (consp list)                   ;return nth element of list\n                 (unless (and n (< 0 n (length list))) (setq n 0))\n                 (setq list (nth n list)))\n              list))) =>  T\n      #{(1 2 3 4) =>  1\n      #3{(0 1 2 3) =>  3\n      #{123 =>  123\n\nIf it is desired that #$foo : as if it were (dollars foo).\n\n     (defun |#$-reader| (stream subchar arg)\n        (declare (ignore subchar arg))\n        (list 'dollars (read stream t nil t))) =>  |#$-reader|\n      (set-dispatch-macro-character #\\# #\\$ #'|#$-reader|) =>  T\n\nSee Also::\n..........\n\n*Note Macro Characters::\n\nSide Effects::\n..............\n\nThe readtable is modified.\n\nAffected By::\n.............\n\n*readtable*.\n\nExceptional Situations::\n........................\n\nFor either function, an error is signaled if disp-char is not a\ndispatching macro character in readtable.\n\nSee Also::\n..........\n\n*Note readtable::\n\nNotes::\n.......\n\nIt is necessary to use make-dispatch-macro-character to set up the\ndispatch character before specifying its sub-characters.\n\n"
}