{
    "name": "ash",
    "prev": "rationalp",
    "next": "integer-length",
    "up": "Numbers Dictionary",
    "header": {
        "type": "Function",
        "text": "ash"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "ash",
                    "text": " integer count =>  shifted-integer\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "integer",
                    "desc": "an integer."
                },
                {
                    "name": "count",
                    "desc": "an integer."
                },
                {
                    "name": "shifted-integer",
                    "desc": "an integer."
                }
            ]
        },
        {
            "type": "Description",
            "text": "ash performs the arithmetic shift operation on the binary representation\nof integer, which is treated as if it were binary.\nash shifts integer arithmetically left by count bit positions if count is\npositive, or right count bit positions if count is negative.  The shifted\nvalue of the same sign as integer is returned.\nMathematically speaking, ash performs the computation floor(integer\\cdot\n2^count).  Logically, ash moves all of the bits in integer to the left,\nadding zero-bits at the right, or moves them to the right, discarding bits.\nash is defined to behave as if integer were represented in two's\ncomplement form, regardless of how integers are represented internally.\n"
        },
        {
            "type": "Examples",
            "text": "      (ash 16 1) =>  32\n      (ash 16 0) =>  16\n      (ash 16 -1) =>  8\n      (ash -100000000000000000000000000000000 -100) =>  -79\n"
        },
        {
            "type": "Exceptional Situations",
            "text": "Should signal an error of type type-error if integer is not an integer.\nShould signal an error of type type-error if count is not an integer.\nMight signal arithmetic-error.\n"
        },
        {
            "type": "Notes",
            "text": "      (logbitp j (ash n k))\n      == (and (>= j k) (logbitp (- j k) n))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ash,  Next: integer-length,  Prev: rationalp,  Up: Numbers Dictionary\n\nash                                                              [Function]\n---------------------------------------------------------------------------\n\n`ash'  integer count =>  shifted-integer\n\nArguments and Values::\n......................\n\ninteger--an integer.\n\ncount--an integer.\n\nshifted-integer--an integer.\n\nDescription::\n.............\n\nash performs the arithmetic shift operation on the binary representation\nof integer, which is treated as if it were binary.\n\nash shifts integer arithmetically left by count bit positions if count is\npositive, or right count bit positions if count is negative.  The shifted\nvalue of the same sign as integer is returned.\n\nMathematically speaking, ash performs the computation floor(integer\\cdot\n2^count).  Logically, ash moves all of the bits in integer to the left,\nadding zero-bits at the right, or moves them to the right, discarding bits.\n\nash is defined to behave as if integer were represented in two's\ncomplement form, regardless of how integers are represented internally.\n\nExamples::\n..........\n\n      (ash 16 1) =>  32\n      (ash 16 0) =>  16\n      (ash 16 -1) =>  8\n      (ash -100000000000000000000000000000000 -100) =>  -79\n\nExceptional Situations::\n........................\n\nShould signal an error of type type-error if integer is not an integer.\nShould signal an error of type type-error if count is not an integer.\nMight signal arithmetic-error.\n\nNotes::\n.......\n\n      (logbitp j (ash n k))\n      == (and (>= j k) (logbitp (- j k) n))\n\n"
}