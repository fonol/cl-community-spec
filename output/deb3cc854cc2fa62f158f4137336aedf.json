{
    "name": "Minimal Declaration Processing Requirements",
    "prev": "Declarations",
    "next": "Declaration Specifiers",
    "up": "Declarations",
    "header": {
        "type": null,
        "text": "Minimal Declaration Processing Requirements"
    },
    "sections": [
        {
            "type": "",
            "text": "In general, an implementation is free to ignore declaration specifiers\nexcept for the declaration , notinline , safety , and special declaration\nspecifiers.\nA declaration declaration must suppress warnings about unrecognized\ndeclarations of the kind that it declares.  If an implementation does not\nproduce warnings about unrecognized declarations, it may safely ignore\nthis declaration.\nA notinline declaration must be recognized by any implementation that\nsupports inline functions or compiler macros in order to disable those\nfacilities.  An implementation that does not use inline functions or\ncompiler macros may safely ignore this declaration.\nA safety declaration that increases the current safety level must always\nbe recognized.  An implementation that always processes code as if safety\nwere high may safely ignore this declaration.\nA special declaration must be processed by all implementations.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Minimal Declaration Processing Requirements,  Next: Declaration Specifiers,  Prev: Declarations,  Up: Declarations\n\nMinimal Declaration Processing Requirements\n-------------------------------------------\n\nIn general, an implementation is free to ignore declaration specifiers\nexcept for the declaration , notinline , safety , and special declaration\nspecifiers.\n\nA declaration declaration must suppress warnings about unrecognized\ndeclarations of the kind that it declares.  If an implementation does not\nproduce warnings about unrecognized declarations, it may safely ignore\nthis declaration.\n\nA notinline declaration must be recognized by any implementation that\nsupports inline functions or compiler macros in order to disable those\nfacilities.  An implementation that does not use inline functions or\ncompiler macros may safely ignore this declaration.\n\nA safety declaration that increases the current safety level must always\nbe recognized.  An implementation that always processes code as if safety\nwere high may safely ignore this declaration.\n\nA special declaration must be processed by all implementations.\n\n"
}