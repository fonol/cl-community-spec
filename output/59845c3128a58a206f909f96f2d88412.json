{
    "name": "Externalizable Objects",
    "prev": "Literal Objects in Compiled Files",
    "next": "Similarity of Literal Objects",
    "up": "Literal Objects in Compiled Files",
    "header": {
        "type": null,
        "text": null
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Externalizable Objects",
            "text": "The fact that the file compiler represents literal objects externally in a\ncompiled file and must later reconstruct suitable equivalents of those\nobjects when that file is loaded imposes a need for constraints on the\nnature of the objects that can be used as literal objects in code to be\nprocessed by the file compiler.\nAn object that can be used as a literal object in code to be processed by\nthe file compiler is called an externalizable object .\nWe define that two objects are similar if they satisfy a two-place\nconceptual equivalence predicate (defined below), which is independent of\nthe Lisp image so that the two objects in different Lisp images can be\nunderstood to be equivalent under this predicate.  Further, by inspecting\nthe definition of this conceptual predicate, the programmer can anticipate\nwhat aspects of an object are reliably preserved by file compilation.\nThe file compiler must cooperate with the loader in order to assure that\nin each case where an externalizable object is processed as a literal\nobject, the loader will construct a similar object.\nThe set of objects that are externalizable objects are those for which the\nnew conceptual term \"similar\" is defined, such that when a compiled file\nis loaded, an object can be constructed which can be shown to be similar\nto the original object which existed at the time the file compiler was\noperating.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: Externalizable Objects,  Next: Similarity of Literal Objects,  Prev: Literal Objects in Compiled Files,  Up: Literal Objects in Compiled Files\n\nExternalizable Objects\n......................\n\nThe fact that the file compiler represents literal objects externally in a\ncompiled file and must later reconstruct suitable equivalents of those\nobjects when that file is loaded imposes a need for constraints on the\nnature of the objects that can be used as literal objects in code to be\nprocessed by the file compiler.\n\nAn object that can be used as a literal object in code to be processed by\nthe file compiler is called an externalizable object .\n\nWe define that two objects are similar if they satisfy a two-place\nconceptual equivalence predicate (defined below), which is independent of\nthe Lisp image so that the two objects in different Lisp images can be\nunderstood to be equivalent under this predicate.  Further, by inspecting\nthe definition of this conceptual predicate, the programmer can anticipate\nwhat aspects of an object are reliably preserved by file compilation.\n\nThe file compiler must cooperate with the loader in order to assure that\nin each case where an externalizable object is processed as a literal\nobject, the loader will construct a similar object.\n\nThe set of objects that are externalizable objects are those for which the\nnew conceptual term \"similar\" is defined, such that when a compiled file\nis loaded, an object can be constructed which can be shown to be similar\nto the original object which existed at the time the file compiler was\noperating.\n\n"
}