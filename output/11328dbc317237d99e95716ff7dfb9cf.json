{
    "name": "listp",
    "prev": "list-length",
    "next": "make-list",
    "up": "Conses Dictionary",
    "header": {
        "type": "Function",
        "text": "listp"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "listp",
                    "text": " object =>  generalized-boolean\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "object",
                    "desc": "an object."
                },
                {
                    "name": "generalized-boolean",
                    "desc": "a generalized boolean."
                }
            ]
        },
        {
            "type": "Description",
            "text": "Returns true if object is of type list; otherwise, returns false.\n"
        },
        {
            "type": "Examples",
            "text": "      (listp nil) =>  true\n      (listp (cons 1 2)) =>  true\n      (listp (make-array 6)) =>  false\n      (listp t) =>  false\n"
        },
        {
            "type": "See Also",
            "text": "*Note consp::\n"
        },
        {
            "type": "Notes",
            "text": "If object is a cons, listp does not check whether object is a proper list;\nit returns true for any kind of list.\n      (listp object) == (typep object 'list) == (typep object '(or cons null))\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: listp,  Next: make-list,  Prev: list-length,  Up: Conses Dictionary\n\nlistp                                                            [Function]\n---------------------------------------------------------------------------\n\n`listp'  object =>  generalized-boolean\n\nArguments and Values::\n......................\n\nobject--an object.\n\ngeneralized-boolean--a generalized boolean.\n\nDescription::\n.............\n\nReturns true if object is of type list; otherwise, returns false.\n\nExamples::\n..........\n\n      (listp nil) =>  true\n      (listp (cons 1 2)) =>  true\n      (listp (make-array 6)) =>  false\n      (listp t) =>  false\n\nSee Also::\n..........\n\n*Note consp::\n\nNotes::\n.......\n\nIf object is a cons, listp does not check whether object is a proper list;\nit returns true for any kind of list.\n\n      (listp object) == (typep object 'list) == (typep object '(or cons null))\n\n"
}