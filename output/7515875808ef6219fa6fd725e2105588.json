{
    "name": "floor",
    "prev": "zerop",
    "next": "sin",
    "up": "Numbers Dictionary",
    "header": {
        "type": null,
        "text": "truncate, ftruncate, round, fround"
    },
    "sections": [
        {
            "type": "Syntax",
            "defs": [
                {
                    "name": "floor",
                    "text": " number &optional divisor =>  quotient, remainder\n"
                },
                {
                    "name": "ffloor",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "ceiling",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "fceiling",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "truncate",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "ftruncate",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "round",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                },
                {
                    "name": "fround",
                    "text": " number &optional divisor =>  quotient, remainder\n\n"
                }
            ],
            "text": ""
        },
        {
            "type": "Arguments and Values",
            "text": "",
            "values": [
                {
                    "name": "number",
                    "desc": "a real."
                },
                {
                    "name": "divisor",
                    "desc": "a non-zero real.  The default is the integer 1."
                },
                {
                    "name": "quotient",
                    "desc": "for floor, ceiling, truncate, and round: an integer; for ffloor,"
                },
                {
                    "name": "quotient",
                    "desc": "for floor, ceiling, truncate, and round: an integer; for ffloor,fceiling, ftruncate, and fround: a float.\n"
                },
                {
                    "name": "remainder",
                    "desc": "a real."
                }
            ]
        },
        {
            "type": "Description",
            "text": "These functions divide number by divisor, returning a quotient and\nremainder, such that\nquotient\\cdot divisor+remainder=number\nThe quotient always represents a mathematical integer.  When more than one\nmathematical integer might be possible (i.e., when the remainder is not\nzero), the kind of rounding or truncation depends on the operator:\nfloor, ffloor\n     floor and ffloor produce a quotient that has been truncated toward\n     negative infinity; that is, the quotient represents the largest\n     mathematical integer that is not larger than the mathematical\n     quotient.\nceiling, fceiling\n     ceiling and fceiling produce a quotient that has been truncated\n     toward positive infinity; that is, the quotient represents the\n     smallest mathematical integer that is not smaller than the\n     mathematical result.\ntruncate, ftruncate\n     truncate and ftruncate produce a quotient that has been truncated\n     towards zero; that is, the quotient represents the mathematical\n     integer of the same sign as the mathematical quotient, and that has\n     the greatest integral magnitude not greater than that of the\n     mathematical quotient.\nround, fround\n     round and fround produce a quotient that has been rounded to the\n     nearest mathematical integer; if the mathematical quotient is exactly\n     halfway between two integers, (that is, it has the form\n     integer+1\\over2), then the quotient has been rounded to the even\n     (divisible by two) integer.\nAll of these functions perform type conversion operations on numbers.\nThe remainder is an integer  if both   x and y are integers, is a\nrational if both   x and y are rationals, and is a  float    if either x\nor  y is  a float.\nffloor, fceiling, ftruncate, and fround handle arguments of different\ntypes in the following way: If  number  is     a float, and divisor is not\na float of longer format, then the first result is a float of the same\ntype as number.  Otherwise, the first result is of the type determined by\ncontagion rules; see *Note Contagion in Numeric Operations::.\n"
        },
        {
            "type": "Examples",
            "text": "      (floor 3/2) =>  1, 1/2\n      (ceiling 3 2) =>  2, -1\n      (ffloor 3 2) =>  1.0, 1\n      (ffloor -4.7) =>  -5.0, 0.3\n      (ffloor 3.5d0) =>  3.0d0, 0.5d0\n      (fceiling 3/2) =>  2.0, -1/2\n      (truncate 1) =>  1, 0\n      (truncate .5) =>  0, 0.5\n      (round .5) =>  0, 0.5\n      (ftruncate -7 2) =>  -3.0, -1\n      (fround -7 2) =>  -4.0, 1\n      (dolist (n '(2.6 2.5 2.4 0.7 0.3 -0.3 -0.7 -2.4 -2.5 -2.6))\n        (format t \"~&~4,1@F ~2,' D ~2,' D ~2,' D ~2,' D\"\n                n (floor n) (ceiling n) (truncate n) (round n)))\n      |>  +2.6  2  3  2  3\n      |>  +2.5  2  3  2  2\n      |>  +2.4  2  3  2  2\n      |>  +0.7  0  1  0  1\n      |>  +0.3  0  1  0  0\n      |>  -0.3 -1  0  0  0\n      |>  -0.7 -1  0  0 -1\n      |>  -2.4 -3 -2 -2 -2\n      |>  -2.5 -3 -2 -2 -2\n      |>  -2.6 -3 -2 -2 -3\n     =>  NIL\n"
        },
        {
            "type": "Notes",
            "text": "When only number is given, the two results are exact; the mathematical sum\nof the two results is always equal to the mathematical value of number.\n(function number divisor) and (function (/ number divisor)) (where\nfunction is any of one of floor, ceiling, ffloor, fceiling, truncate,\nround, ftruncate, and fround) return the same first value, but they return\ndifferent remainders as the second value. For example:\n      (floor 5 2) =>  2, 1\n      (floor (/ 5 2)) =>  2, 1/2\nIf an effect is desired that is similar to round, but that always rounds\nup or down (rather than toward the nearest even integer) if the\nmathematical quotient is exactly halfway between two integers, the\nprogrammer should consider a construction such as (floor (+ x 1/2)) or\n(ceiling (- x 1/2)).\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: floor,  Next: sin,  Prev: zerop,  Up: Numbers Dictionary\n\nfloor, ffloor, ceiling, fceiling,\n---------------------------------\n\ntruncate, ftruncate, round, fround\n----------------------------------\n\n                                                                [Function]\n\n`floor'  number &optional divisor =>  quotient, remainder\n\n`ffloor'  number &optional divisor =>  quotient, remainder\n\n`ceiling'  number &optional divisor =>  quotient, remainder\n\n`fceiling'  number &optional divisor =>  quotient, remainder\n\n`truncate'  number &optional divisor =>  quotient, remainder\n\n`ftruncate'  number &optional divisor =>  quotient, remainder\n\n`round'  number &optional divisor =>  quotient, remainder\n\n`fround'  number &optional divisor =>  quotient, remainder\n\nArguments and Values::\n......................\n\nnumber--a real.\n\ndivisor--a non-zero real.  The default is the integer 1.\n\nquotient--for floor, ceiling, truncate, and round: an integer; for ffloor,\nfceiling, ftruncate, and fround: a float.\n\nremainder--a real.\n\nDescription::\n.............\n\nThese functions divide number by divisor, returning a quotient and\nremainder, such that\n\nquotient\\cdot divisor+remainder=number\n\nThe quotient always represents a mathematical integer.  When more than one\nmathematical integer might be possible (i.e., when the remainder is not\nzero), the kind of rounding or truncation depends on the operator:\n\nfloor, ffloor\n     floor and ffloor produce a quotient that has been truncated toward\n     negative infinity; that is, the quotient represents the largest\n     mathematical integer that is not larger than the mathematical\n     quotient.\n\nceiling, fceiling\n     ceiling and fceiling produce a quotient that has been truncated\n     toward positive infinity; that is, the quotient represents the\n     smallest mathematical integer that is not smaller than the\n     mathematical result.\n\ntruncate, ftruncate\n     truncate and ftruncate produce a quotient that has been truncated\n     towards zero; that is, the quotient represents the mathematical\n     integer of the same sign as the mathematical quotient, and that has\n     the greatest integral magnitude not greater than that of the\n     mathematical quotient.\n\nround, fround\n     round and fround produce a quotient that has been rounded to the\n     nearest mathematical integer; if the mathematical quotient is exactly\n     halfway between two integers, (that is, it has the form\n     integer+1\\over2), then the quotient has been rounded to the even\n     (divisible by two) integer.\n\nAll of these functions perform type conversion operations on numbers.\n\nThe remainder is an integer  if both   x and y are integers, is a\nrational if both   x and y are rationals, and is a  float    if either x\nor  y is  a float.\n\nffloor, fceiling, ftruncate, and fround handle arguments of different\ntypes in the following way: If  number  is     a float, and divisor is not\na float of longer format, then the first result is a float of the same\ntype as number.  Otherwise, the first result is of the type determined by\ncontagion rules; see *Note Contagion in Numeric Operations::.\n\nExamples::\n..........\n\n      (floor 3/2) =>  1, 1/2\n      (ceiling 3 2) =>  2, -1\n      (ffloor 3 2) =>  1.0, 1\n      (ffloor -4.7) =>  -5.0, 0.3\n      (ffloor 3.5d0) =>  3.0d0, 0.5d0\n      (fceiling 3/2) =>  2.0, -1/2\n      (truncate 1) =>  1, 0\n      (truncate .5) =>  0, 0.5\n      (round .5) =>  0, 0.5\n      (ftruncate -7 2) =>  -3.0, -1\n      (fround -7 2) =>  -4.0, 1\n      (dolist (n '(2.6 2.5 2.4 0.7 0.3 -0.3 -0.7 -2.4 -2.5 -2.6))\n        (format t \"~&~4,1@F ~2,' D ~2,' D ~2,' D ~2,' D\"\n                n (floor n) (ceiling n) (truncate n) (round n)))\n      |>  +2.6  2  3  2  3\n      |>  +2.5  2  3  2  2\n      |>  +2.4  2  3  2  2\n      |>  +0.7  0  1  0  1\n      |>  +0.3  0  1  0  0\n      |>  -0.3 -1  0  0  0\n      |>  -0.7 -1  0  0 -1\n      |>  -2.4 -3 -2 -2 -2\n      |>  -2.5 -3 -2 -2 -2\n      |>  -2.6 -3 -2 -2 -3\n     =>  NIL\n\nNotes::\n.......\n\nWhen only number is given, the two results are exact; the mathematical sum\nof the two results is always equal to the mathematical value of number.\n\n(function number divisor) and (function (/ number divisor)) (where\nfunction is any of one of floor, ceiling, ffloor, fceiling, truncate,\nround, ftruncate, and fround) return the same first value, but they return\ndifferent remainders as the second value. For example:\n\n      (floor 5 2) =>  2, 1\n      (floor (/ 5 2)) =>  2, 1/2\n\nIf an effect is desired that is similar to round, but that always rounds\nup or down (rather than toward the nearest even integer) if the\nmathematical quotient is exactly halfway between two integers, the\nprogrammer should consider a construction such as (floor (+ x 1/2)) or\n(ceiling (- x 1/2)).\n\n"
}