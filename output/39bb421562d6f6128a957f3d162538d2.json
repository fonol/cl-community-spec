{
    "name": "ftype",
    "prev": "inline",
    "next": "declaration",
    "up": "Evaluation and Compilation Dictionary",
    "header": {
        "type": "Declaration",
        "text": "ftype"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Syntax",
            "text": "(ftype type {function-name}*)\n"
        },
        {
            "type": "Arguments",
            "text": "function-name--a function name.\ntype--a type specifier.\n"
        },
        {
            "type": "Valid Context",
            "text": "declaration or proclamation\n"
        },
        {
            "type": "Binding Types Affected",
            "text": "function\n"
        },
        {
            "type": "Description",
            "text": "Specifies that the functions named by function-names are of the functional\ntype type.  For example:\n      (declare (ftype (function (integer list) t) ith)\n               (ftype (function (number) float) sine cosine))\nIf one of the functions mentioned has a lexically apparent local definition\n(as made by flet or labels), then the declaration applies to that local\ndefinition and not to the global function definition.  ftype declarations\nnever apply to variable bindings (see type).\nThe lexically apparent bindings of function-names must not be macro\ndefinitions.  (This is because ftype declares the functional definition of\neach function name to be of a particular subtype of function, and macros\ndo not denote functions.)\nftype\ndeclarations can be free declarations or bound declarations.  ftype\ndeclarations of functions that appear before the body of a flet or labels\nform that defines that function are bound declarations.  Such declarations\nin other contexts are free declarations.\n"
        },
        {
            "type": "See Also",
            "text": "declare, *Note declaim:: , *Note proclaim::\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: ftype,  Next: declaration,  Prev: inline,  Up: Evaluation and Compilation Dictionary\n\nftype                                                         [Declaration]\n---------------------------------------------------------------------------\n\nSyntax::\n........\n\n(ftype type {function-name}*)\n\nArguments::\n...........\n\nfunction-name--a function name.\n\ntype--a type specifier.\n\nValid Context::\n...............\n\ndeclaration or proclamation\n\nBinding Types Affected::\n........................\n\nfunction\n\nDescription::\n.............\n\nSpecifies that the functions named by function-names are of the functional\ntype type.  For example:\n\n      (declare (ftype (function (integer list) t) ith)\n               (ftype (function (number) float) sine cosine))\n\nIf one of the functions mentioned has a lexically apparent local definition\n(as made by flet or labels), then the declaration applies to that local\ndefinition and not to the global function definition.  ftype declarations\nnever apply to variable bindings (see type).\n\nThe lexically apparent bindings of function-names must not be macro\ndefinitions.  (This is because ftype declares the functional definition of\neach function name to be of a particular subtype of function, and macros\ndo not denote functions.)\n\nftype\n\ndeclarations can be free declarations or bound declarations.  ftype\ndeclarations of functions that appear before the body of a flet or labels\n\nform that defines that function are bound declarations.  Such declarations\nin other contexts are free declarations.\n\nSee Also::\n..........\n\ndeclare, *Note declaim:: , *Note proclaim::\n\n"
}