{
    "name": "*print-readably*",
    "prev": "*print-pretty*",
    "next": "*print-right-margin*",
    "up": "Printer Dictionary",
    "header": {
        "type": "Variable",
        "text": "*print-readably*"
    },
    "sections": [
        {
            "type": "",
            "text": ""
        },
        {
            "type": "Value Type",
            "text": "a generalized boolean.\n"
        },
        {
            "type": "Initial Value",
            "text": "false.\n"
        },
        {
            "type": "Description",
            "text": "If *print-readably* is true, some special rules for printing objects go\ninto effect.  Specifically, printing any object O_1 produces a printed\nrepresentation that, when seen by the Lisp reader while the standard\nreadtable is in effect, will produce an object O_2 that is similar to O_1.\nThe printed representation produced might or might not be the same as the\nprinted representation produced when *print-readably* is false.  If\nprinting an object readably is not possible, an error of type\nprint-not-readable is signaled rather than using a syntax (e.g., the \"#<\"\nsyntax) that would not be readable by the same implementation.  If the\nvalue of some other printer control variable is such that these\nrequirements would be violated, the value of that other variable is\nignored.\nSpecifically, if *print-readably* is true, printing proceeds as if\n*print-escape*, *print-array*, and *print-gensym* were also true, and as if\n*print-length*, *print-level*, and *print-lines* were false.\nIf *print-readably* is false, the normal rules for printing and the normal\ninterpretations of other printer control variables are in effect.\nIndividual methods for print-object, including user-defined methods, are\nresponsible for implementing these requirements.\nIf *read-eval* is false and *print-readably* is true, any such method that\nwould output a reference to the \"#.\" reader macro will either output\nsomething else or will signal an error (as described above).\n"
        },
        {
            "type": "Examples",
            "text": "      (let ((x (list \"a\" '\\a (gensym) '((a (b (c))) d e f g)))\n            (*print-escape* nil)\n            (*print-gensym* nil)\n            (*print-level* 3)\n            (*print-length* 3))\n        (write x)\n        (let ((*print-readably* t))\n          (terpri)\n          (write x)\n          :done))\n      |>  (a a G4581 ((A #) D E ...))\n      |>  (\"a\" |a| #:G4581 ((A (B (C))) D E F G))\n     =>  :DONE\n     ;; This is setup code is shared between the examples\n     ;; of three hypothetical implementations which follow.\n      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32005763>\n      (setf (gethash table 1) 'one) =>  ONE\n      (setf (gethash table 2) 'two) =>  TWO\n     ;; Implementation A\n      (let ((*print-readably* t)) (print table))\n      Error: Can't print #<HASH-TABLE EQL 0/120 32005763> readably.\n     ;; Implementation B\n     ;; No standardized #S notation for hash tables is defined,\n     ;; but there might be an implementation-defined notation.\n      (let ((*print-readably* t)) (print table))\n      |>  #S(HASH-TABLE :TEST EQL :SIZE 120 :CONTENTS (1 ONE 2 TWO))\n     =>  #<HASH-TABLE EQL 0/120 32005763>\n     ;; Implementation C\n     ;; Note that #. notation can only be used if *READ-EVAL* is true.\n     ;; If *READ-EVAL* were false, this same implementation might have to\n     ;; signal an error unless it had yet another printing strategy to fall\n     ;; back on.\n      (let ((*print-readably* t)) (print table))\n      |>  #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))\n      |>      (SETF (GETHASH 1 HASH-TABLE) ONE)\n      |>      (SETF (GETHASH 2 HASH-TABLE) TWO)\n      |>      HASH-TABLE)\n     =>  #<HASH-TABLE EQL 0/120 32005763>\n"
        },
        {
            "type": "See Also",
            "text": "*Note write; prin1; print; pprint; princ:: , *Note\nprint-unreadable-object::\n"
        },
        {
            "type": "Notes",
            "text": "The rules for \"similarity\" imply that #A or #( syntax cannot be used for\narrays of element type other than t.  An implementation will have to use\nanother syntax or signal an error of type print-not-readable.\n"
        }
    ],
    "_otext": "File: gcl.info,  Node: *print-readably*,  Next: *print-right-margin*,  Prev: *print-pretty*,  Up: Printer Dictionary\n\n*print-readably*                                                 [Variable]\n---------------------------------------------------------------------------\n\nValue Type::\n............\n\na generalized boolean.\n\nInitial Value::\n...............\n\nfalse.\n\nDescription::\n.............\n\nIf *print-readably* is true, some special rules for printing objects go\ninto effect.  Specifically, printing any object O_1 produces a printed\nrepresentation that, when seen by the Lisp reader while the standard\nreadtable is in effect, will produce an object O_2 that is similar to O_1.\nThe printed representation produced might or might not be the same as the\nprinted representation produced when *print-readably* is false.  If\nprinting an object readably is not possible, an error of type\nprint-not-readable is signaled rather than using a syntax (e.g., the \"#<\"\nsyntax) that would not be readable by the same implementation.  If the\nvalue of some other printer control variable is such that these\nrequirements would be violated, the value of that other variable is\nignored.\n\nSpecifically, if *print-readably* is true, printing proceeds as if\n*print-escape*, *print-array*, and *print-gensym* were also true, and as if\n*print-length*, *print-level*, and *print-lines* were false.\n\nIf *print-readably* is false, the normal rules for printing and the normal\ninterpretations of other printer control variables are in effect.\n\nIndividual methods for print-object, including user-defined methods, are\nresponsible for implementing these requirements.\n\nIf *read-eval* is false and *print-readably* is true, any such method that\nwould output a reference to the \"#.\" reader macro will either output\nsomething else or will signal an error (as described above).\n\nExamples::\n..........\n\n      (let ((x (list \"a\" '\\a (gensym) '((a (b (c))) d e f g)))\n            (*print-escape* nil)\n            (*print-gensym* nil)\n            (*print-level* 3)\n            (*print-length* 3))\n        (write x)\n        (let ((*print-readably* t))\n          (terpri)\n          (write x)\n          :done))\n      |>  (a a G4581 ((A #) D E ...))\n      |>  (\"a\" |a| #:G4581 ((A (B (C))) D E F G))\n     =>  :DONE\n     \n     ;; This is setup code is shared between the examples\n     ;; of three hypothetical implementations which follow.\n      (setq table (make-hash-table)) =>  #<HASH-TABLE EQL 0/120 32005763>\n      (setf (gethash table 1) 'one) =>  ONE\n      (setf (gethash table 2) 'two) =>  TWO\n     \n     ;; Implementation A\n      (let ((*print-readably* t)) (print table))\n      Error: Can't print #<HASH-TABLE EQL 0/120 32005763> readably.\n     \n     ;; Implementation B\n     ;; No standardized #S notation for hash tables is defined,\n     ;; but there might be an implementation-defined notation.\n      (let ((*print-readably* t)) (print table))\n      |>  #S(HASH-TABLE :TEST EQL :SIZE 120 :CONTENTS (1 ONE 2 TWO))\n     =>  #<HASH-TABLE EQL 0/120 32005763>\n     \n     ;; Implementation C\n     ;; Note that #. notation can only be used if *READ-EVAL* is true.\n     ;; If *READ-EVAL* were false, this same implementation might have to\n     ;; signal an error unless it had yet another printing strategy to fall\n     ;; back on.\n      (let ((*print-readably* t)) (print table))\n      |>  #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))\n      |>      (SETF (GETHASH 1 HASH-TABLE) ONE)\n      |>      (SETF (GETHASH 2 HASH-TABLE) TWO)\n      |>      HASH-TABLE)\n     =>  #<HASH-TABLE EQL 0/120 32005763>\n\nSee Also::\n..........\n\n*Note write; prin1; print; pprint; princ:: , *Note\nprint-unreadable-object::\n\nNotes::\n.......\n\nThe rules for \"similarity\" imply that #A or #( syntax cannot be used for\narrays of element type other than t.  An implementation will have to use\nanother syntax or signal an error of type print-not-readable.\n\n"
}